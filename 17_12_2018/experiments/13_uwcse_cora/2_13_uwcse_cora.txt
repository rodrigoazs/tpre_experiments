Starting experiment #2 for 13_uwcse_cora

Start learning from source dataset

Source train facts examples: 2274
Source train pos examples: 113
Source train neg examples: 113

WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), ta(E, A, F) )
%   | | then if ( ta(G, D, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(I, A), tempadvisedby(J, B) )
%   | | then if ( publication(I, K), ta(L, K, M) )
%   | | | then return 0.7470378239884012;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( publication(N, B) )
%   | | | then return 0.7734031723876481;  // std dev = 2,139, 59,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=54 */
%   | | | else return 0.6273797043302815;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else return -0.14185106490048768;  // std dev = 7,30e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then if ( ta(G, F, H) )
%   | | | then return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.7194734122109544;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tempadvisedby(I, B), publication(J, A) )
%   | | then if ( publication(J, K), ta(L, K, M) )
%   | | | then return 0.6302322013528495;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tempadvisedby(N, B) )
%   | | | then return 0.6814559898603236;  // std dev = 1,379, 34,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.5841214263941701;  // std dev = 2,228, 38,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=32 */
%   else return -0.12544463852839158;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( student(A), hasposition(B, C) )
%   then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | then if ( ta(E, A, G) )
%   | | then return 0.36739536240540976;  // std dev = 0,875, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5753692150144764;  // std dev = 0,113, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( publication(H, A), tempadvisedby(I, B) )
%   | | then if ( publication(H, B) )
%   | | | then return 0.5081090089455164;  // std dev = 0,915, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.28198542321534925;  // std dev = 1,345, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else if ( hasposition(J, C), tempadvisedby(K, J) )
%   | | | then return 0.5149276129148255;  // std dev = 1,891, 50,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=46 */
%   | | | else return 0.417169256174091;  // std dev = 1,254, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( student(B) )
%   | then return -0.11231637819360621;  // std dev = 7,30e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( publication(L, B) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.05790830228575283;  // std dev = 0,737, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | then if ( ta(E, A, G) )
%   | | then return 0.2760600246984187;  // std dev = 0,874, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4327282880464561;  // std dev = 0,114, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( tempadvisedby(H, B), publication(I, B) )
%   | | then if ( publication(J, H), publication(I, A) )
%   | | | then return 0.4649981888122118;  // std dev = 0,098, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.27652297979125506;  // std dev = 1,751, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | else if ( publication(K, B) )
%   | | | then return 0.3983722608516351;  // std dev = 1,642, 42,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=39 */
%   | | | else return 0.319353460890902;  // std dev = 1,371, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else if ( student(B) )
%   | then return -0.10159632948783621;  // std dev = 5,05e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( publication(L, B) )
%   | | then return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.04700695352554798;  // std dev = 0,735, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( publication(C, D), tempadvisedby(D, B) )
%   | | then return 0.37362396573885137;  // std dev = 0,074, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( publication(C, E), ta(F, E, G) )
%   | | | then return 0.2979088346042428;  // std dev = 0,896, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.3289747463909902;  // std dev = 0,083, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( publication(H, A) )
%   | | then if ( publication(H, I), professor(I) )
%   | | | then return 0.1042827158887443;  // std dev = 1,649, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0.4272068020811656;  // std dev = 0,101, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tempadvisedby(J, B) )
%   | | | then return 0.3081690069067786;  // std dev = 1,323, 34,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.26582049682810793;  // std dev = 1,754, 27,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   else return -0.09299954268592157;  // std dev = 0,030, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), hasposition(B, C) )
%   then if ( publication(D, B), publication(D, A) )
%   | then if ( ta(E, A, F), tempadvisedby(G, B) )
%   | | then if ( ta(H, G, I) )
%   | | | then return 0.2848754719496806;  // std dev = 0,098, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15391329044587598;  // std dev = 0,870, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.26211559931628853;  // std dev = 0,086, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tempadvisedby(J, B), publication(K, J) )
%   | | then return 0.0720289593002039;  // std dev = 0,822, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tempadvisedby(L, B), ta(M, A, N) )
%   | | | then return 0.2727449411745002;  // std dev = 0,969, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.19927911941422155;  // std dev = 2,366, 57,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=48 */
%   else if ( professor(B) )
%   | then if ( publication(P, B) )
%   | | then return -0.08516073177309659;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.0016855242112862785;  // std dev = 0,720, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.08516073177309652;  // std dev = 4,71e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), ta(E, A, F) )
%   | | then if ( ta(G, D, H) )
%   | | | then return 0.23085640677622177;  // std dev = 0,086, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.11968240712918046;  // std dev = 0,871, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.21470378153647046;  // std dev = 0,075, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(I, A), publication(J, B) )
%   | | then if ( publication(I, K), publication(J, K) )
%   | | | then return -0.1721485393503995;  // std dev = 0,985, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.24330832589054502;  // std dev = 0,486, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tempadvisedby(L, B) )
%   | | | then return 0.20172011410246624;  // std dev = 1,442, 39,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=36 */
%   | | | else return 0.1497278066143696;  // std dev = 1,941, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   else return -0.07910546514403992;  // std dev = 0,034, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, A), publication(D, B) )
%   | then if ( publication(D, E), tempadvisedby(E, B) )
%   | | then return 0.22888048892103832;  // std dev = 0,081, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( ta(F, A, G), tempadvisedby(H, B) )
%   | | | then return 0.12962962123306293;  // std dev = 0,875, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.1813618553213974;  // std dev = 0,064, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( tempadvisedby(I, B), publication(J, I) )
%   | | then return 0.03122155483207321;  // std dev = 0,763, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( ta(K, A, L), tempadvisedby(M, B) )
%   | | | then return 0.18313398873979672;  // std dev = 0,983, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.12713696150009374;  // std dev = 2,321, 57,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=48 */
%   else if ( professor(B) )
%   | then if ( hasposition(A, N), hasposition(B, N) )
%   | | then return -0.07783690742080818;  // std dev = 0,030, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.027890738524858995;  // std dev = 0,713, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.07320462835916423;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( student(A), hasposition(B, C) )
%   then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | then if ( ta(E, A, G) )
%   | | then return 0.01022947990935017;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.16718034836796103;  // std dev = 0,136, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( tempadvisedby(H, B), publication(I, B) )
%   | | then if ( publication(I, A), publication(J, H) )
%   | | | then return 0.17776898556218218;  // std dev = 0,077, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.05550298862414946;  // std dev = 1,572, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | else if ( hasposition(K, C), tempadvisedby(L, K) )
%   | | | then return 0.14190657192215866;  // std dev = 1,642, 45,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.06171462801647881;  // std dev = 1,260, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( professor(B) )
%   | then if ( hasposition(A, M), hasposition(B, M) )
%   | | then return -0.07243938768121023;  // std dev = 0,028, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.023475602679152184;  // std dev = 0,714, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.0683905656438848;  // std dev = 3,41e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( tempadvisedby(D, B), ta(E, A, F) )
%   | | then if ( ta(G, D, H) )
%   | | | then return 0.16111626833469309;  // std dev = 0,093, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.042858482223284075;  // std dev = 0,860, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.13805392936924654;  // std dev = 0,081, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(I, A) )
%   | | then if ( publication(I, J), ta(K, J, L) )
%   | | | then return 0.11910427670779124;  // std dev = 1,162, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.09234233780073493;  // std dev = 0,989, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( tempadvisedby(M, B), publication(N, M) )
%   | | | then return 0.21899360943059898;  // std dev = 0,056, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1003531202865899;  // std dev = 2,183, 57,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=51 */
%   else return -0.06452584518597647;  // std dev = 0,029, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */


Starting fold 1

Target train facts examples: 7254
Target train pos examples: 209
Target train neg examples: 16

Target test facts examples: 34492
Target test pos examples: 603
Target test neg examples: 58

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false,false;publication(N, B).;false;false
0;true;publication(C, B), publication(C, A).;true;true
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true,false;tempadvisedby(I, B), publication(J, A).;true;true
1;true,false,true;publication(J, K), ta(L, K, M).;false;false
1;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
1;true,true,true;ta(G, F, H).;false;false
1;true,false,false;tempadvisedby(N, B).;false;false
1;true;publication(C, A), publication(C, B).;true;true
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true,false,true;publication(H, B).;false;false
2;false;student(B).;false;true
2;true,true;ta(E, A, G).;false;false
2;true,false;publication(H, A), tempadvisedby(I, B).;true;true
2;true,false,false;hasposition(J, C), tempadvisedby(K, J).;false;false
2;false,false;publication(L, B).;false;false
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true,false,true;publication(J, H), publication(I, A).;false;false
3;false;student(B).;false;true
3;true,true;ta(E, A, G).;false;false
3;true,false;tempadvisedby(H, B), publication(I, B).;true;true
3;true,false,false;publication(K, B).;false;false
3;false,false;publication(L, B).;false;false
3;true;tempadvisedby(D, B), ta(E, D, F).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;false
4;true,false,true;publication(H, I), professor(I).;false;false
4;true,true;publication(C, D), tempadvisedby(D, B).;false;true
4;true,false;publication(H, A).;true;true
4;true,false,false;tempadvisedby(J, B).;false;false
4;true,true,false;publication(C, E), ta(F, E, G).;false;false
4;true;publication(C, B), publication(C, A).;true;true
5;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
5;true,false;tempadvisedby(J, B), publication(K, J).;false;true
5;false;professor(B).;true;false
5;true,true;ta(E, A, F), tempadvisedby(G, B).;true;false
5;true,true,true;ta(H, G, I).;false;false
5;true,false,false;tempadvisedby(L, B), ta(M, A, N).;false;false
5;false,true;publication(P, B).;false;false
5;true;publication(D, B), publication(D, A).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true,false;publication(I, A), publication(J, B).;true;true
6;true,false,true;publication(I, K), publication(J, K).;false;false
6;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
6;true,true,true;ta(G, D, H).;false;false
6;true,false,false;tempadvisedby(L, B).;false;false
6;true;publication(C, B), publication(C, A).;true;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;false;professor(B).;true;false
7;true,true;publication(D, E), tempadvisedby(E, B).;false;true
7;true,false;tempadvisedby(I, B), publication(J, I).;false;true
7;true,false,false;ta(K, A, L), tempadvisedby(M, B).;false;false
7;true,true,false;ta(F, A, G), tempadvisedby(H, B).;false;false
7;false,true;hasposition(A, N), hasposition(B, N).;false;false
7;true;publication(D, A), publication(D, B).;true;true
8;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
8;true,false,true;publication(I, A), publication(J, H).;false;false
8;false;professor(B).;true;false
8;true,true;ta(E, A, G).;false;false
8;true,false;tempadvisedby(H, B), publication(I, B).;true;true
8;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
8;false,true;hasposition(A, M), hasposition(B, M).;false;false
8;true;tempadvisedby(D, B), ta(E, D, F).;true;true
9;;advisedby(A, B) :- professor(B), student(A).;true;false
9;true,false;publication(I, A).;true;true
9;true,false,true;publication(I, J), ta(K, J, L).;false;false
9;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
9;true,true,true;ta(G, D, H).;false;false
9;true,false,false;tempadvisedby(M, B), publication(N, M).;false;false
9;true;publication(C, A), publication(C, B).;true;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995118;  // std dev = 3,65e-08, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.7702368471874215;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109551;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.6489578875773111;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, A) )
%   | then if ( author(D, B) )
%   | | then return 0.555366436746284;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.5061552205141917;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, B) )
%   | then if ( author(E, F), author(D, A) )
%   | | then return 0.41751358415831025;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.38079139171230814;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then if ( author(C, D) )
%   | then return 0.3207118471601494;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( author(E, A) )
%   | then if ( author(E, F) )
%   | | then return 0.28818643066895006;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, B), author(D, A) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( author(E, F) )
%   | | then return 0.22332807994132664;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.20975771563253548;  // std dev = 8,74e-09, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( author(D, A), author(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.17757217457833163;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, A), author(D, B) )
%   | then if ( author(D, E) )
%   | | then return 0.17709649774527753;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( author(F, G) )
%   | | then return 0.1444131226973962;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, B) )
%   | then if ( author(D, A), author(E, F) )
%   | | then return 0.15274385809367083;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.11965698879053165;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.1340070300080108;  // std dev = 6,45e-09, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.10066260786997791;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.608624
   AUC PR    = 0.948609
   CLL	      = -0.314973
   Precision = 0.912254 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.954114


Total learning time: 24.046 seconds
Total inference time: 82.336 seconds
AUC ROC: 0.608624


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(D, A)', 'false,true': 'author(D, E)'}, {'true': [3.65e-08, 0, 43], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [3.82, 16, 166]}], ['sameauthor(A, B)', {'': 'author(C, A), author(C, B)', 'false': 'author(D, A)', 'false,true': 'author(D, E)'}, {'true': [0.0, 0, 43], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [3.82, 16, 166]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'author(D, B)', 'true': 'author(D, A)'}, {'true,true,false': [3.82, 16, 166], 'true,true,true': [0.0, 0, 43], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'author(E, F), author(D, A)', 'true': 'author(D, B)'}, {'true,true,false': [3.82, 16, 166], 'true,true,true': [0.0, 0, 43], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(E, A)', 'false,true': 'author(E, F)', 'true': 'author(C, D)'}, {'true,true': [0.0, 0, 43], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,true,true': [3.82, 16, 166], 'false,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,false': 'author(E, F)', 'true': 'author(D, B), author(D, A)'}, {'true,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 43], 'false': [0.0, 0, 0], 'true,false,true': [3.82, 16, 166]}], ['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(D, A), author(E, B)', 'false,true': 'author(D, F), author(E, F)'}, {'true': [8.74e-09, 0, 43], 'false,true,false': [3.82, 16, 166], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'author(D, E)', 'true,false': 'author(F, G)', 'true': 'author(D, A), author(D, B)'}, {'true,false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 43], 'false': [0.0, 0, 0], 'true,false,true': [3.82, 16, 166]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'author(D, A), author(E, F)', 'true': 'author(D, B)'}, {'true,true,false': [3.82, 16, 166], 'true,true,true': [0.0, 0, 43], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, A), author(C, B)', 'false': 'author(D, A)', 'false,true': 'author(D, E)'}, {'true': [6.45e-09, 0, 43], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [3.82, 16, 166]}]]
[{'': [1.2393187251629655e-15, 0.08018355271103159], 'false': [0.08018355271103159, nan], 'false,true': [0.08018355271103159, nan]}, {'': [-9.914549801303723e-16, 0.08018355271102807], 'false': [0.08018355271102807, nan], 'false,true': [0.08018355271102807, nan]}, {'': [0.06523395655346617, nan], 'true,true': [-4.131062417209885e-17, 0.0801835527110287], 'true': [0.06523395655346617, nan]}, {'': [0.06506804931322724, nan], 'true,true': [-3.7179561754888965e-16, 0.08018355271102633], 'true': [0.06506804931322724, nan]}, {'': [0.0, 0.08018355271102497], 'false': [0.08018355271102497, nan], 'false,true': [0.08018355271102497, nan], 'true': [0.0, nan]}, {'': [0.06501634457765429, nan], 'true,false': [0.08018355271102559, nan], 'true': [-2.0655312086049424e-17, 0.08018355271102559]}, {'': [7.745742032268534e-17, 0.0801835527110255], 'false': [0.0801835527110255, nan], 'false,true': [nan, 0.0801835527110255]}, {'': [0.06502471585639258, nan], 'true,true': [-7.745742032268534e-17, nan], 'true,false': [0.08018355271102547, nan], 'true': [-7.745742032268534e-17, 0.08018355271102547]}, {'': [0.06502881829054064, nan], 'true,true': [-4.6474452193611206e-17, 0.08018355271102527], 'true': [0.06502881829054064, nan]}, {'': [4.131062417209885e-17, 0.08018355271102547], 'false': [0.08018355271102547, nan], 'false,true': [0.08018355271102547, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
0;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
1;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true
2;;sameauthor(A, B) :- author(D, B).;true;true
3;;sameauthor(A, B) :- author(E, F), author(D, A).;true;true
4;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
5;;sameauthor(A, B) :- author(D, B), author(D, A).;true;true
6;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
7;;sameauthor(A, B) :- author(D, A), author(D, B).;true;true
8;;sameauthor(A, B) :- author(D, A), author(E, F).;true;true
9;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995118;  // std dev = 2,31e-07, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5724346493852267;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.8581489350995112;  // std dev = 4,62e-07, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109551;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.7733921696315487;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.48382654410150666;  // std dev = 3,364, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.7194734122109542;  // std dev = 7,30e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.7194734122109546;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.5934857676251917;  // std dev = 0,066, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4247035714048979;  // std dev = 3,412, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | | else return 0.5553664367462846;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, D), author(E, A) )
%   then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | then if ( haswordauthor(A, F) )
%   | | then if ( author(H, A), title(H, G) )
%   | | | then return 0.44688201532703314;  // std dev = 0,067, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.32410482281584646;  // std dev = 3,407, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | | else return 0.41751358415831036;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.4175135841583092;  // std dev = 3,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.3388784425527696;  // std dev = 0,165, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.42686947072233095;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.20299410448085117;  // std dev = 3,344, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.3207118471601495;  // std dev = 3,65e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.3207118471601503;  // std dev = 1,03e-07, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.2677103868194725;  // std dev = 0,145, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.3270617273617261;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15281375956172086;  // std dev = 3,345, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.2551722425694896;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.2551722425694897;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.21868359599570222;  // std dev = 0,127, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.1253658488545936;  // std dev = 0,433, 60,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=44 */
%   | | else return 0.20975771563253565;  // std dev = 1,83e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.2097577156325356;  // std dev = 1,49e-07, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.1836833472406136;  // std dev = 0,111, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.25663793005888635;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08473366254293732;  // std dev = 3,343, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.17709649774527744;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.1770964977452773;  // std dev = 5,16e-08, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, A), author(D, E) )
%   then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | then if ( author(H, B), title(H, G) )
%   | | then return 0.18343840665803207;  // std dev = 0,108, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(A, F) )
%   | | | then return 0.08959826822425973;  // std dev = 3,366, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | | | else return 0.15274385809367083;  // std dev = 1,83e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.15160322994079237;  // std dev = 0,026, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.14162958707340392;  // std dev = 0,116, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.19627299032961976;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.044225354709301855;  // std dev = 3,342, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.13361567101850058;  // std dev = 0,005, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.1341394541986562;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */


Results
   AUC ROC   = 0.421999
   AUC PR    = 0.904062
   CLL	      = -0.367563
   Precision = 0.912254 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.954114


Total learning time: 57.181 seconds
Total inference time: 393.554 seconds
AUC ROC: 0.421999


Refined model AUC ROC: 0.421999


Dataset: 13_uwcse_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:57:02
{'Recall': 1.0, 'Learning time': 81.227, 'F1': 0.954114, 'Precision': [0.912254, 0.5], 'AUC PR': 0.904062, 'CLL': -0.367563, 'parameter': {'Recall': 1.0, 'Learning time': 24.046, 'F1': 0.954114, 'Precision': [0.912254, 0.5], 'AUC PR': 0.948609, 'CLL': -0.314973, 'AUC ROC': 0.608624, 'Inference time': 82.336}, 'AUC ROC': 0.421999, 'Inference time': 393.554}


Starting fold 2

Target train facts examples: 8894
Target train pos examples: 122
Target train neg examples: 20

Target test facts examples: 32852
Target test pos examples: 690
Target test neg examples: 54

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false,false;publication(N, B).;false;false
0;true;publication(C, B), publication(C, A).;true;true
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true,false;tempadvisedby(I, B), publication(J, A).;true;true
1;true,false,true;publication(J, K), ta(L, K, M).;false;false
1;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
1;true,true,true;ta(G, F, H).;false;false
1;true,false,false;tempadvisedby(N, B).;false;false
1;true;publication(C, A), publication(C, B).;true;true
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true,false,true;publication(H, B).;false;false
2;false;student(B).;false;true
2;true,true;ta(E, A, G).;false;false
2;true,false;publication(H, A), tempadvisedby(I, B).;true;true
2;true,false,false;hasposition(J, C), tempadvisedby(K, J).;false;false
2;false,false;publication(L, B).;false;false
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true,false,true;publication(J, H), publication(I, A).;false;false
3;false;student(B).;false;true
3;true,true;ta(E, A, G).;false;false
3;true,false;tempadvisedby(H, B), publication(I, B).;true;true
3;true,false,false;publication(K, B).;false;false
3;false,false;publication(L, B).;false;false
3;true;tempadvisedby(D, B), ta(E, D, F).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;false
4;true,false,true;publication(H, I), professor(I).;false;false
4;true,true;publication(C, D), tempadvisedby(D, B).;false;true
4;true,false;publication(H, A).;true;true
4;true,false,false;tempadvisedby(J, B).;false;false
4;true,true,false;publication(C, E), ta(F, E, G).;false;false
4;true;publication(C, B), publication(C, A).;true;true
5;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
5;true,false;tempadvisedby(J, B), publication(K, J).;false;true
5;false;professor(B).;true;false
5;true,true;ta(E, A, F), tempadvisedby(G, B).;true;false
5;true,true,true;ta(H, G, I).;false;false
5;true,false,false;tempadvisedby(L, B), ta(M, A, N).;false;false
5;false,true;publication(P, B).;false;false
5;true;publication(D, B), publication(D, A).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true,false;publication(I, A), publication(J, B).;true;true
6;true,false,true;publication(I, K), publication(J, K).;false;false
6;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
6;true,true,true;ta(G, D, H).;false;false
6;true,false,false;tempadvisedby(L, B).;false;false
6;true;publication(C, B), publication(C, A).;true;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;false;professor(B).;true;false
7;true,true;publication(D, E), tempadvisedby(E, B).;false;true
7;true,false;tempadvisedby(I, B), publication(J, I).;false;true
7;true,false,false;ta(K, A, L), tempadvisedby(M, B).;false;false
7;true,true,false;ta(F, A, G), tempadvisedby(H, B).;false;false
7;false,true;hasposition(A, N), hasposition(B, N).;false;false
7;true;publication(D, A), publication(D, B).;true;true
8;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
8;true,false,true;publication(I, A), publication(J, H).;false;false
8;false;professor(B).;true;false
8;true,true;ta(E, A, G).;false;false
8;true,false;tempadvisedby(H, B), publication(I, B).;true;true
8;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
8;false,true;hasposition(A, M), hasposition(B, M).;false;false
8;true;tempadvisedby(D, B), ta(E, D, F).;true;true
9;;advisedby(A, B) :- professor(B), student(A).;true;false
9;true,false;publication(I, A).;true;true
9;true,false,true;publication(I, J), ta(K, J, L).;false;false
9;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
9;true,true,true;ta(G, D, H).;false;false
9;true,false,false;tempadvisedby(M, B), publication(N, M).;false;false
9;true;publication(C, A), publication(C, B).;true;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.7966104735610489;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.6701860162815748;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.521000173904994;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D) )
%   | then if ( haswordauthor(E, F), haswordauthor(A, D) )
%   | | then return 0.3916498696084713;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.2975214947349439;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordauthor(A, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then return 0.23226801019815924;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | else if ( haswordauthor(E, F) )
%   | | then return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.18647488053184677;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else if ( haswordauthor(A, D), haswordauthor(B, E) )
%   | then if ( haswordauthor(F, D), haswordauthor(F, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.15334928569517428;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(F, G) )
%   | | then return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D) )
%   | then if ( haswordauthor(A, D), haswordauthor(E, F) )
%   | | then return 0.12860778205329093;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.1095875440488626;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.62963
   AUC PR    = 0.945205
   CLL	      = -0.25855
   Precision = 0.945205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971831


Total learning time: 2.168 seconds
Total inference time: 2.431 seconds
AUC ROC: 0.62963


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'true': [0.24, 8, 122], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'true': [0.24, 8, 122], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [5.27e-09, 12, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(B, D)', 'true': 'haswordauthor(A, D)'}, {'true,true,false': [9.13e-09, 12, 0], 'true,true,true': [2.74, 8, 122], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(E, F), haswordauthor(A, D)', 'true': 'haswordauthor(B, D)'}, {'true,true,false': [0.0, 12, 0], 'true,true,true': [2.74, 8, 122], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, E)', 'false,true': 'haswordauthor(F, E)', 'true': 'haswordauthor(D, C)'}, {'true,true': [2.74, 8, 122], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,true,true': [5.27e-09, 12, 0], 'false,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,false': 'haswordauthor(E, F)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)'}, {'true,false,false': [0.0, 0, 0], 'true,true': [0.24, 8, 122], 'false': [0.0, 0, 0], 'true,false,true': [5.27e-09, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D), haswordauthor(B, E)', 'false,true': 'haswordauthor(F, D), haswordauthor(F, E)'}, {'true': [0.24, 8, 122], 'false,true,false': [3.73e-09, 12, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(E, D)', 'true,false': 'haswordauthor(F, G)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)'}, {'true,false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [2.74, 8, 122], 'false': [0.0, 0, 0], 'true,false,true': [3.73e-09, 12, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(A, D), haswordauthor(E, F)', 'true': 'haswordauthor(B, D)'}, {'true,true,false': [2.63e-09, 12, 0], 'true,true,true': [2.74, 8, 122], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'true': [0.24, 8, 122], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [5.89e-09, 12, 0]}]]
[{'': [0.05775147928994478, -1.1564823173178714e-17], 'false': [-1.1564823173178714e-17, nan], 'false,true': [-1.1564823173178714e-17, nan]}, {'': [0.05775147928993674, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan], 'false,true': [2.3129646346357427e-18, nan]}, {'': [0.08390163071539002, nan], 'true,true': [0.057751479289940406, 6.938893903907228e-18], 'true': [0.08390163071539002, nan]}, {'': [0.07169349017318598, nan], 'true,true': [0.057751479289941336, 0.0], 'true': [0.07169349017318598, nan]}, {'': [0.05775147928994032, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan], 'false,true': [2.3129646346357427e-18, nan], 'true': [0.05775147928994032, nan]}, {'': [0.0606676882960247, nan], 'true,false': [2.3129646346357427e-18, nan], 'true': [0.05775147928994095, 2.3129646346357427e-18]}, {'': [0.05775147928994094, 1.1564823173178713e-18], 'false': [1.1564823173178713e-18, nan], 'false,true': [nan, 1.1564823173178713e-18]}, {'': [0.056843450107161825, nan], 'true,true': [0.057751479289940774, nan], 'true,false': [1.1564823173178713e-18, nan], 'true': [0.057751479289940774, 1.1564823173178713e-18]}, {'': [0.055874613886162224, nan], 'true,true': [0.057751479289940844, 5.782411586589357e-19], 'true': [0.055874613886162224, nan]}, {'': [0.05775147928994075, 2.8912057932946786e-18], 'false': [2.8912057932946786e-18, nan], 'false,true': [2.8912057932946786e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;sameauthor(A, B) :- haswordauthor(B, D).;true;true
3;;sameauthor(A, B) :- haswordauthor(E, F), haswordauthor(A, D).;true;true
4;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
7;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(B, D).;true;true
8;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(E, F).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.8581489350995122;  // std dev = 1,46e-07, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7405018762759833;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.7194734122109547;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.7194734122109542;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.6249475655895573;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then return 0.5553664367462839;  // std dev = 9,42e-08, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | | then return 0.5553664367462844;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4893127157293235;  // std dev = 2,657, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(C, D), haswordauthor(A, E) )
%   then if ( haswordauthor(A, F), haswordauthor(B, F) )
%   | then if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then return 0.4175135841583103;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return 0.3759929864299645;  // std dev = 0,298, 80,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=72 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.3228987328137834;  // std dev = 0,028, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.3207118471601494;  // std dev = 2,58e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.27629896574841756;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.2566679145954134;  // std dev = 0,024, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.2551722425694894;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.21260304187070814;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.2108161073792402;  // std dev = 0,021, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.16738069834128588;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.17787392420867082;  // std dev = 0,018, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.17709649774527736;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.13452942201740745;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(D, E) )
%   then if ( haswordauthor(A, F), haswordauthor(B, F) )
%   | then if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then return 0.1533343748225589;  // std dev = 0,016, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.15274385809367094;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.11001369860050904;  // std dev = 2,657, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.1344685697032277;  // std dev = 0,015, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.09125091555933512;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.569243
   AUC PR    = 0.934792
   CLL	      = -0.253562
   Precision = 0.945205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971831


Total learning time: 7.024 seconds
Total inference time: 89.563 seconds
AUC ROC: 0.569243


Refined model AUC ROC: 0.569243


Dataset: 13_uwcse_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:58:44
{'Recall': 1.0, 'Learning time': 9.192, 'F1': 0.971831, 'Precision': [0.945205, 0.5], 'AUC PR': 0.934792, 'CLL': -0.253562, 'parameter': {'Recall': 1.0, 'Learning time': 2.168, 'F1': 0.971831, 'Precision': [0.945205, 0.5], 'AUC PR': 0.945205, 'CLL': -0.25855, 'AUC ROC': 0.62963, 'Inference time': 2.431}, 'AUC ROC': 0.569243, 'Inference time': 89.563}


Starting fold 3

Target train facts examples: 9155
Target train pos examples: 151
Target train neg examples: 4

Target test facts examples: 32591
Target test pos examples: 661
Target test neg examples: 70

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false,false;publication(N, B).;false;false
0;true;publication(C, B), publication(C, A).;true;true
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true,false;tempadvisedby(I, B), publication(J, A).;true;true
1;true,false,true;publication(J, K), ta(L, K, M).;false;false
1;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
1;true,true,true;ta(G, F, H).;false;false
1;true,false,false;tempadvisedby(N, B).;false;false
1;true;publication(C, A), publication(C, B).;true;true
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true,false,true;publication(H, B).;false;false
2;false;student(B).;false;true
2;true,true;ta(E, A, G).;false;false
2;true,false;publication(H, A), tempadvisedby(I, B).;true;true
2;true,false,false;hasposition(J, C), tempadvisedby(K, J).;false;false
2;false,false;publication(L, B).;false;false
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true,false,true;publication(J, H), publication(I, A).;false;false
3;false;student(B).;false;true
3;true,true;ta(E, A, G).;false;false
3;true,false;tempadvisedby(H, B), publication(I, B).;true;true
3;true,false,false;publication(K, B).;false;false
3;false,false;publication(L, B).;false;false
3;true;tempadvisedby(D, B), ta(E, D, F).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;false
4;true,false,true;publication(H, I), professor(I).;false;false
4;true,true;publication(C, D), tempadvisedby(D, B).;false;true
4;true,false;publication(H, A).;true;true
4;true,false,false;tempadvisedby(J, B).;false;false
4;true,true,false;publication(C, E), ta(F, E, G).;false;false
4;true;publication(C, B), publication(C, A).;true;true
5;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
5;true,false;tempadvisedby(J, B), publication(K, J).;false;true
5;false;professor(B).;true;false
5;true,true;ta(E, A, F), tempadvisedby(G, B).;true;false
5;true,true,true;ta(H, G, I).;false;false
5;true,false,false;tempadvisedby(L, B), ta(M, A, N).;false;false
5;false,true;publication(P, B).;false;false
5;true;publication(D, B), publication(D, A).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true,false;publication(I, A), publication(J, B).;true;true
6;true,false,true;publication(I, K), publication(J, K).;false;false
6;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
6;true,true,true;ta(G, D, H).;false;false
6;true,false,false;tempadvisedby(L, B).;false;false
6;true;publication(C, B), publication(C, A).;true;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;false;professor(B).;true;false
7;true,true;publication(D, E), tempadvisedby(E, B).;false;true
7;true,false;tempadvisedby(I, B), publication(J, I).;false;true
7;true,false,false;ta(K, A, L), tempadvisedby(M, B).;false;false
7;true,true,false;ta(F, A, G), tempadvisedby(H, B).;false;false
7;false,true;hasposition(A, N), hasposition(B, N).;false;false
7;true;publication(D, A), publication(D, B).;true;true
8;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
8;true,false,true;publication(I, A), publication(J, H).;false;false
8;false;professor(B).;true;false
8;true,true;ta(E, A, G).;false;false
8;true,false;tempadvisedby(H, B), publication(I, B).;true;true
8;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
8;false,true;hasposition(A, M), hasposition(B, M).;false;false
8;true;tempadvisedby(D, B), ta(E, D, F).;true;true
9;;advisedby(A, B) :- professor(B), student(A).;true;false
9;true,false;publication(I, A).;true;true
9;true,false,true;publication(I, J), ta(K, J, L).;false;false
9;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
9;true,true,true;ta(G, D, H).;false;false
9;true,false,false;tempadvisedby(M, B), publication(N, M).;false;false
9;true;publication(C, A), publication(C, B).;true;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995115;  // std dev = 4,21e-08, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.8248156017661773;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109548;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.6928183180467439;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, A) )
%   | then if ( author(D, B) )
%   | | then return 0.5553664367462844;  // std dev = 9,42e-08, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.5367928709789459;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, B) )
%   | then if ( author(E, F), author(D, A) )
%   | | then return 0.4175135841583102;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.40340088328536944;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then if ( author(C, D) )
%   | then return 0.3207118471601495;  // std dev = 2,98e-08, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( author(E, A) )
%   | then if ( author(E, F) )
%   | | then return 0.30789442979240556;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, B), author(D, A) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( author(E, F) )
%   | | then return 0.24240066496454704;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.20975771563253542;  // std dev = 9,13e-09, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( author(D, A), author(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1967000405732664;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, A), author(D, B) )
%   | then if ( author(D, E) )
%   | | then return 0.1770964977452775;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( author(F, G) )
%   | | then return 0.16371858628713246;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, B) )
%   | then if ( author(D, A), author(E, F) )
%   | | then return 0.1527438580936709;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.13909109340224837;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.13400703000801115;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.12013771168374324;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.605144
   AUC PR    = 0.943016
   CLL	      = -0.319898
   Precision = 0.904241 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.949713


Total learning time: 41.986 seconds
Total inference time: 107.88300000000001 seconds
AUC ROC: 0.605144


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(D, A)', 'false,true': 'author(D, E)'}, {'true': [4.21e-08, 0, 35], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [1.966, 4, 116]}], ['sameauthor(A, B)', {'': 'author(C, A), author(C, B)', 'false': 'author(D, A)', 'false,true': 'author(D, E)'}, {'true': [0.0, 0, 35], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [1.966, 4, 116]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'author(D, B)', 'true': 'author(D, A)'}, {'true,true,false': [1.966, 4, 116], 'true,true,true': [9.42e-08, 0, 35], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'author(E, F), author(D, A)', 'true': 'author(D, B)'}, {'true,true,false': [1.966, 4, 116], 'true,true,true': [0.0, 0, 35], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(E, A)', 'false,true': 'author(E, F)', 'true': 'author(C, D)'}, {'true,true': [2.98e-08, 0, 35], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,true,true': [1.966, 4, 116], 'false,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,false': 'author(E, F)', 'true': 'author(D, B), author(D, A)'}, {'true,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 35], 'false': [0.0, 0, 0], 'true,false,true': [1.966, 4, 116]}], ['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(D, A), author(E, B)', 'false,true': 'author(D, F), author(E, F)'}, {'true': [9.13e-09, 0, 35], 'false,true,false': [1.966, 4, 116], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'author(D, E)', 'true,false': 'author(F, G)', 'true': 'author(D, A), author(D, B)'}, {'true,false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 35], 'false': [0.0, 0, 0], 'true,false,true': [1.966, 4, 116]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'author(D, A), author(E, F)', 'true': 'author(D, B)'}, {'true,true,false': [1.966, 4, 116], 'true,true,true': [3.49e-08, 0, 35], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, A), author(C, B)', 'false': 'author(D, A)', 'false,true': 'author(D, E)'}, {'true': [0.0, 0, 35], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [1.966, 4, 116]}]]
[{'': [1.6240976817373718e-15, 0.0322222222222256], 'false': [0.0322222222222256, nan], 'false,true': [0.0322222222222256, nan]}, {'': [-6.0903663065151445e-16, 0.03222222222222175], 'false': [0.03222222222222175, nan], 'false,true': [0.03222222222222175, nan]}, {'': [0.025006544773513804, nan], 'true,true': [2.5376526277146434e-16, 0.03222222222222181], 'true': [0.025006544773513804, nan]}, {'': [0.02498105474723092, nan], 'true,true': [-2.791417890486108e-16, 0.03222222222222134], 'true': [0.02498105474723092, nan]}, {'': [2.5376526277146434e-17, 0.03222222222222211], 'false': [0.03222222222222211, nan], 'false,true': [0.03222222222222211, nan], 'true': [2.5376526277146434e-17, nan]}, {'': [0.02497475166494526, nan], 'true,false': [0.0322222222222219, nan], 'true': [-1.2688263138573217e-17, 0.0322222222222219]}, {'': [8.247371040072592e-17, 0.032222222222222055], 'false': [0.032222222222222055, nan], 'false,true': [nan, 0.032222222222222055]}, {'': [0.02497752345874096, nan], 'true,true': [-5.075305255429287e-17, nan], 'true,false': [0.03222222222222206, nan], 'true': [-5.075305255429287e-17, 0.03222222222222206]}, {'': [0.024978822262849296, nan], 'true,true': [3.489272363107635e-17, 0.032222222222222235], 'true': [0.024978822262849296, nan]}, {'': [0.0, 0.03222222222222224], 'false': [0.03222222222222224, nan], 'false,true': [0.03222222222222224, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
0;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
1;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true
2;;sameauthor(A, B) :- author(D, B).;true;true
3;;sameauthor(A, B) :- author(E, F), author(D, A).;true;true
4;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
5;;sameauthor(A, B) :- author(D, B), author(D, A).;true;true
6;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
7;;sameauthor(A, B) :- author(D, A), author(D, B).;true;true
8;;sameauthor(A, B) :- author(D, A), author(E, F).;true;true
9;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995115;  // std dev = 2,38e-07, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7152917922423694;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.7405018762759829;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995128;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109548;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.5838845092264583;  // std dev = 0,881, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.6249475655895571;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.7194734122109542;  // std dev = 5,16e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then return 0.6546674469618624;  // std dev = 0,242, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.7219361052636272;  // std dev = 0,065, 68,000 (wgt'ed) examples reached here.  /* #pos=68 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | | then return 0.6024363370177445;  // std dev = 0,122, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5082405061753076;  // std dev = 1,334, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.49609240970468377;  // std dev = 0,222, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.4877833676320764;  // std dev = 0,926, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.554758230104703;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5574086634052476;  // std dev = 0,057, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, D), author(E, A) )
%   then if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | then if ( haswordauthor(A, F) )
%   | | then if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | | then return 0.29138485795888175;  // std dev = 0,892, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3725014309295385;  // std dev = 0,866, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.434293462970996;  // std dev = 0,055, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, J), haswordtitle(K, J) )
%   | | then if ( haswordauthor(B, J) )
%   | | | then return 0.3824737623575302;  // std dev = 1,333, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.4319953558877621;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.4190772932913525;  // std dev = 0,056, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.3287683150057163;  // std dev = 0,062, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.24408417520347056;  // std dev = 0,868, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.26424023035817024;  // std dev = 1,320, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.33054744039526085;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.24033517972605709;  // std dev = 0,893, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.3160926330681413;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3223004375295362;  // std dev = 0,050, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.26069150139843206;  // std dev = 0,054, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.04569814987783094;  // std dev = 0,844, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1910052318412445;  // std dev = 0,859, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.2708672268472886;  // std dev = 0,058, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.20748622381790516;  // std dev = 1,325, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.2618727467447003;  // std dev = 2,98e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.2562649505082951;  // std dev = 0,043, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.21366660656538566;  // std dev = 0,047, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.03501444963797573;  // std dev = 0,843, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15006577508565133;  // std dev = 0,863, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.23587161109635718;  // std dev = 0,083, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.15855281932230766;  // std dev = 1,319, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.21447985256304294;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.21029563432876275;  // std dev = 0,040, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.17996934783257457;  // std dev = 0,041, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.020133336401149005;  // std dev = 0,860, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.12296022533644183;  // std dev = 0,847, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.19057282840567266;  // std dev = 0,056, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.1303382767093002;  // std dev = 1,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.18055229077416118;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.17750015092670196;  // std dev = 0,035, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, A), author(D, E) )
%   then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | then if ( haswordauthor(B, F) )
%   | | then if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return 0.22896914622381864;  // std dev = 0,231, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12159013933917887;  // std dev = 1,325, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.09925394538107542;  // std dev = 0,210, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.1491505739110987;  // std dev = 0,083, 107,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=106 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.1363600105333106;  // std dev = 0,038, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.02979249946789686;  // std dev = 0,845, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07528712391129093;  // std dev = 0,845, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.1452966497772306;  // std dev = 0,049, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.08361719142008482;  // std dev = 1,320, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.14126605916536406;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1349975205884139;  // std dev = 0,033, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */


Results
   AUC ROC   = 0.568489
   AUC PR    = 0.939976
   CLL	      = -0.353278
   Precision = 0.904241 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.949713


Total learning time: 68.834 seconds
Total inference time: 353.834 seconds
AUC ROC: 0.568489


Refined model AUC ROC: 0.568489


Dataset: 13_uwcse_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 01:08:18
{'Recall': 1.0, 'Learning time': 110.82, 'F1': 0.949713, 'Precision': [0.904241, 0.5], 'AUC PR': 0.939976, 'CLL': -0.353278, 'parameter': {'Recall': 1.0, 'Learning time': 41.986, 'F1': 0.949713, 'Precision': [0.904241, 0.5], 'AUC PR': 0.943016, 'CLL': -0.319898, 'AUC ROC': 0.605144, 'Inference time': 107.88300000000001}, 'AUC ROC': 0.568489, 'Inference time': 353.834}


Starting fold 4

Target train facts examples: 7971
Target train pos examples: 158
Target train neg examples: 16

Target test facts examples: 33775
Target test pos examples: 654
Target test neg examples: 58

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false,false;publication(N, B).;false;false
0;true;publication(C, B), publication(C, A).;true;true
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true,false;tempadvisedby(I, B), publication(J, A).;true;true
1;true,false,true;publication(J, K), ta(L, K, M).;false;false
1;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
1;true,true,true;ta(G, F, H).;false;false
1;true,false,false;tempadvisedby(N, B).;false;false
1;true;publication(C, A), publication(C, B).;true;true
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true,false,true;publication(H, B).;false;false
2;false;student(B).;false;true
2;true,true;ta(E, A, G).;false;false
2;true,false;publication(H, A), tempadvisedby(I, B).;true;true
2;true,false,false;hasposition(J, C), tempadvisedby(K, J).;false;false
2;false,false;publication(L, B).;false;false
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true,false,true;publication(J, H), publication(I, A).;false;false
3;false;student(B).;false;true
3;true,true;ta(E, A, G).;false;false
3;true,false;tempadvisedby(H, B), publication(I, B).;true;true
3;true,false,false;publication(K, B).;false;false
3;false,false;publication(L, B).;false;false
3;true;tempadvisedby(D, B), ta(E, D, F).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;false
4;true,false,true;publication(H, I), professor(I).;false;false
4;true,true;publication(C, D), tempadvisedby(D, B).;false;true
4;true,false;publication(H, A).;true;true
4;true,false,false;tempadvisedby(J, B).;false;false
4;true,true,false;publication(C, E), ta(F, E, G).;false;false
4;true;publication(C, B), publication(C, A).;true;true
5;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
5;true,false;tempadvisedby(J, B), publication(K, J).;false;true
5;false;professor(B).;true;false
5;true,true;ta(E, A, F), tempadvisedby(G, B).;true;false
5;true,true,true;ta(H, G, I).;false;false
5;true,false,false;tempadvisedby(L, B), ta(M, A, N).;false;false
5;false,true;publication(P, B).;false;false
5;true;publication(D, B), publication(D, A).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true,false;publication(I, A), publication(J, B).;true;true
6;true,false,true;publication(I, K), publication(J, K).;false;false
6;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
6;true,true,true;ta(G, D, H).;false;false
6;true,false,false;tempadvisedby(L, B).;false;false
6;true;publication(C, B), publication(C, A).;true;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;false;professor(B).;true;false
7;true,true;publication(D, E), tempadvisedby(E, B).;false;true
7;true,false;tempadvisedby(I, B), publication(J, I).;false;true
7;true,false,false;ta(K, A, L), tempadvisedby(M, B).;false;false
7;true,true,false;ta(F, A, G), tempadvisedby(H, B).;false;false
7;false,true;hasposition(A, N), hasposition(B, N).;false;false
7;true;publication(D, A), publication(D, B).;true;true
8;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
8;true,false,true;publication(I, A), publication(J, H).;false;false
8;false;professor(B).;true;false
8;true,true;ta(E, A, G).;false;false
8;true,false;tempadvisedby(H, B), publication(I, B).;true;true
8;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
8;false,true;hasposition(A, M), hasposition(B, M).;false;false
8;true;tempadvisedby(D, B), ta(E, D, F).;true;true
9;;advisedby(A, B) :- professor(B), student(A).;true;false
9;true,false;publication(I, A).;true;true
9;true,false,true;publication(I, J), ta(K, J, L).;false;false
9;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
9;true,true,true;ta(G, D, H).;false;false
9;true,false,false;tempadvisedby(M, B), publication(N, M).;false;false
9;true;publication(C, A), publication(C, B).;true;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.8099561640151723;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.6809038096058014;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.5284825663747693;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D) )
%   | then if ( haswordauthor(E, F), haswordauthor(A, D) )
%   | | then return 0.39719039176974347;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | | else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.3023776209869051;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordauthor(A, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then return 0.23698715759628264;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | else if ( haswordauthor(E, F) )
%   | | then return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.191220720417513;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else if ( haswordauthor(A, D), haswordauthor(B, E) )
%   | then if ( haswordauthor(F, D), haswordauthor(F, E) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.15814910131754492;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(F, G) )
%   | | then return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D) )
%   | then if ( haswordauthor(A, D), haswordauthor(E, F) )
%   | | then return 0.1334484328508451;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.11444708609402138;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.655172
   AUC PR    = 0.942363
   CLL	      = -0.255869
   Precision = 0.942363 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970326


Total learning time: 2.087 seconds
Total inference time: 3.49 seconds
AUC ROC: 0.655172


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'true': [0.214, 8, 158], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'true': [0.214, 8, 158], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(B, D)', 'true': 'haswordauthor(A, D)'}, {'true,true,false': [0.0, 8, 0], 'true,true,true': [2.759, 8, 158], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(E, F), haswordauthor(A, D)', 'true': 'haswordauthor(B, D)'}, {'true,true,false': [3.73e-09, 8, 0], 'true,true,true': [2.759, 8, 158], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, E)', 'false,true': 'haswordauthor(F, E)', 'true': 'haswordauthor(D, C)'}, {'true,true': [2.759, 8, 158], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,true,true': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,false': 'haswordauthor(E, F)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)'}, {'true,false,false': [0.0, 0, 0], 'true,true': [0.214, 8, 158], 'false': [0.0, 0, 0], 'true,false,true': [3.73e-09, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D), haswordauthor(B, E)', 'false,true': 'haswordauthor(F, D), haswordauthor(F, E)'}, {'true': [0.214, 8, 158], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(E, D)', 'true,false': 'haswordauthor(F, G)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)'}, {'true,false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [2.759, 8, 158], 'false': [0.0, 0, 0], 'true,false,true': [2.63e-09, 8, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(A, D), haswordauthor(E, F)', 'true': 'haswordauthor(B, D)'}, {'true,true,false': [0.0, 8, 0], 'true,true,true': [2.759, 8, 158], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'true': [0.214, 8, 158], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 8, 0]}]]
[{'': [0.045870227899556054, -6.938893903907228e-18], 'false': [-6.938893903907228e-18, nan], 'false,true': [-6.938893903907228e-18, nan]}, {'': [0.045870227899547665, 0.0], 'false': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.061772472858521894, nan], 'true,true': [0.04587022789954968, -1.734723475976807e-18], 'true': [0.061772472858521894, nan]}, {'': [0.05467387975151457, nan], 'true,true': [0.045870227899550815, 1.734723475976807e-18], 'true': [0.05467387975151457, nan]}, {'': [0.04587022789955062, 0.0], 'false': [0.0, nan], 'false,true': [0.0, nan], 'true': [0.04587022789955062, nan]}, {'': [0.04831401360686269, nan], 'true,false': [1.734723475976807e-18, nan], 'true': [0.04587022789955009, 1.734723475976807e-18]}, {'': [0.04587022789955017, 0.0], 'false': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.046109850230908536, nan], 'true,true': [0.045870227899549997, nan], 'true,false': [8.673617379884035e-19, nan], 'true': [0.045870227899549997, 8.673617379884035e-19]}, {'': [0.045548835764542675, nan], 'true,true': [0.04587022789954986, 0.0], 'true': [0.045548835764542675, nan]}, {'': [0.04587022789954993, 0.0], 'false': [0.0, nan], 'false,true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;sameauthor(A, B) :- haswordauthor(B, D).;true;true
3;;sameauthor(A, B) :- haswordauthor(E, F), haswordauthor(A, D).;true;true
4;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
7;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(B, D).;true;true
8;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(E, F).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,53e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.6914822684328453;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.8581489350995125;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.7194734122109548;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.5851860008555358;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.7194734122109542;  // std dev = 5,96e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.7194734122109538;  // std dev = 2,23e-07, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return 0.5553664367462843;  // std dev = 1,03e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.44148054054992875;  // std dev = 2,171, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | | then return 0.5027292302671041;  // std dev = 1,223, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.5553664367462836;  // std dev = 3,32e-07, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(C, D), haswordauthor(A, E) )
%   then if ( haswordauthor(A, F), haswordauthor(B, F) )
%   | then if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then return 0.42229646791038433;  // std dev = 0,041, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | | then return 0.3324286313008758;  // std dev = 2,173, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | | else return 0.40747035350389205;  // std dev = 1,212, 93,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=91 */
%   | else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.3207484258081632;  // std dev = 0,009, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.27101470960903046;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.16115136485751627;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.3312253837630887;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.16459941105210588;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.3227794054842158;  // std dev = 0,005, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.25519781172570977;  // std dev = 0,008, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.20581334435568757;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.1209909954496559;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.2623338485434453;  // std dev = 2,58e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.12355684913901867;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2565826432454051;  // std dev = 0,005, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.20977614593453925;  // std dev = 0,007, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.15909766500653616;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.0911966571920171;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then return 0.21379154444072582;  // std dev = 0,010, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | | then return 0.09309823937591159;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.2108480449576309;  // std dev = 7,60e-08, 75,000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.17711024863416588;  // std dev = 0,006, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.12516531253052324;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.06908443675227109;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.1809389676968855;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.07049866365858094;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.17779640850054082;  // std dev = 0,004, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(D, E) )
%   then if ( haswordauthor(A, F), haswordauthor(B, F) )
%   | then if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.15275444392603912;  // std dev = 0,005, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.09050721719406084;  // std dev = 2,163, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else if ( haswordauthor(A, J), haswordvenue(K, J) )
%   | | | then return 0.15492895370000065;  // std dev = 0,007, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1459764931169272;  // std dev = 1,178, 81,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=79 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.13473775262446772;  // std dev = 0,009, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.0826657910011796;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.01963914869910503;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.13473362772305603;  // std dev = 0,003, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.0313734916898755;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.13523306841140642;  // std dev = 0,005, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.691988
   AUC PR    = 0.956081
   CLL	      = -0.259819
   Precision = 0.942363 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970326


Total learning time: 14.423 seconds
Total inference time: 171.084 seconds
AUC ROC: 0.691988


Refined model AUC ROC: 0.691988


Dataset: 13_uwcse_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 01:11:30
{'Recall': 1.0, 'Learning time': 16.51, 'F1': 0.970326, 'Precision': [0.942363, 0.5], 'AUC PR': 0.956081, 'CLL': -0.259819, 'parameter': {'Recall': 1.0, 'Learning time': 2.087, 'F1': 0.970326, 'Precision': [0.942363, 0.5], 'AUC PR': 0.942363, 'CLL': -0.255869, 'AUC ROC': 0.655172, 'Inference time': 3.49}, 'AUC ROC': 0.691988, 'Inference time': 171.084}


Starting fold 5

Target train facts examples: 8472
Target train pos examples: 172
Target train neg examples: 18

Target test facts examples: 33274
Target test pos examples: 640
Target test neg examples: 56

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false,false;publication(N, B).;false;false
0;true;publication(C, B), publication(C, A).;true;true
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true,false;tempadvisedby(I, B), publication(J, A).;true;true
1;true,false,true;publication(J, K), ta(L, K, M).;false;false
1;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
1;true,true,true;ta(G, F, H).;false;false
1;true,false,false;tempadvisedby(N, B).;false;false
1;true;publication(C, A), publication(C, B).;true;true
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true,false,true;publication(H, B).;false;false
2;false;student(B).;false;true
2;true,true;ta(E, A, G).;false;false
2;true,false;publication(H, A), tempadvisedby(I, B).;true;true
2;true,false,false;hasposition(J, C), tempadvisedby(K, J).;false;false
2;false,false;publication(L, B).;false;false
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true,false,true;publication(J, H), publication(I, A).;false;false
3;false;student(B).;false;true
3;true,true;ta(E, A, G).;false;false
3;true,false;tempadvisedby(H, B), publication(I, B).;true;true
3;true,false,false;publication(K, B).;false;false
3;false,false;publication(L, B).;false;false
3;true;tempadvisedby(D, B), ta(E, D, F).;true;true
4;;advisedby(A, B) :- professor(B), student(A).;true;false
4;true,false,true;publication(H, I), professor(I).;false;false
4;true,true;publication(C, D), tempadvisedby(D, B).;false;true
4;true,false;publication(H, A).;true;true
4;true,false,false;tempadvisedby(J, B).;false;false
4;true,true,false;publication(C, E), ta(F, E, G).;false;false
4;true;publication(C, B), publication(C, A).;true;true
5;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
5;true,false;tempadvisedby(J, B), publication(K, J).;false;true
5;false;professor(B).;true;false
5;true,true;ta(E, A, F), tempadvisedby(G, B).;true;false
5;true,true,true;ta(H, G, I).;false;false
5;true,false,false;tempadvisedby(L, B), ta(M, A, N).;false;false
5;false,true;publication(P, B).;false;false
5;true;publication(D, B), publication(D, A).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true,false;publication(I, A), publication(J, B).;true;true
6;true,false,true;publication(I, K), publication(J, K).;false;false
6;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
6;true,true,true;ta(G, D, H).;false;false
6;true,false,false;tempadvisedby(L, B).;false;false
6;true;publication(C, B), publication(C, A).;true;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;false;professor(B).;true;false
7;true,true;publication(D, E), tempadvisedby(E, B).;false;true
7;true,false;tempadvisedby(I, B), publication(J, I).;false;true
7;true,false,false;ta(K, A, L), tempadvisedby(M, B).;false;false
7;true,true,false;ta(F, A, G), tempadvisedby(H, B).;false;false
7;false,true;hasposition(A, N), hasposition(B, N).;false;false
7;true;publication(D, A), publication(D, B).;true;true
8;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
8;true,false,true;publication(I, A), publication(J, H).;false;false
8;false;professor(B).;true;false
8;true,true;ta(E, A, G).;false;false
8;true,false;tempadvisedby(H, B), publication(I, B).;true;true
8;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
8;false,true;hasposition(A, M), hasposition(B, M).;false;false
8;true;tempadvisedby(D, B), ta(E, D, F).;true;true
9;;advisedby(A, B) :- professor(B), student(A).;true;false
9;true,false;publication(I, A).;true;true
9;true,false,true;publication(I, J), ta(K, J, L).;false;false
9;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
9;true,true,true;ta(G, D, H).;false;false
9;true,false,false;tempadvisedby(M, B), publication(N, M).;false;false
9;true;publication(C, A), publication(C, B).;true;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.7929315437951615;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.6672286583325434;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.5189342160940956;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D) )
%   | then if ( haswordauthor(E, F), haswordauthor(A, D) )
%   | | then return 0.3901282969327416;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.29619880730637854;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordauthor(A, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then return 0.2309904888781173;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | else if ( haswordauthor(E, F) )
%   | | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.18519538758533224;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else if ( haswordauthor(A, D), haswordauthor(B, E) )
%   | then if ( haswordauthor(F, D), haswordauthor(F, E) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.15205934164006435;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(F, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D) )
%   | then if ( haswordauthor(A, D), haswordauthor(E, F) )
%   | | then return 0.1273106151181766;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.10828905626740594;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.678571
   AUC PR    = 0.946746
   CLL	      = -0.255854
   Precision = 0.946746 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.972644


Total learning time: 1.983 seconds
Total inference time: 3.569 seconds
AUC ROC: 0.678571


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'true': [0.247, 12, 172], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'true': [0.247, 12, 172], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(B, D)', 'true': 'haswordauthor(A, D)'}, {'true,true,false': [0.0, 6, 0], 'true,true,true': [3.349, 12, 172], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(E, F), haswordauthor(A, D)', 'true': 'haswordauthor(B, D)'}, {'true,true,false': [0.0, 6, 0], 'true,true,true': [3.349, 12, 172], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, E)', 'false,true': 'haswordauthor(F, E)', 'true': 'haswordauthor(D, C)'}, {'true,true': [3.349, 12, 172], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 0], 'false,true,true': [2.63e-09, 6, 0], 'false,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,false': 'haswordauthor(E, F)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)'}, {'true,false,false': [0.0, 0, 0], 'true,true': [0.247, 12, 172], 'false': [0.0, 0, 0], 'true,false,true': [2.63e-09, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D), haswordauthor(B, E)', 'false,true': 'haswordauthor(F, D), haswordauthor(F, E)'}, {'true': [0.247, 12, 172], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(E, D)', 'true,false': 'haswordauthor(F, G)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)'}, {'true,false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.349, 12, 172], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(A, D), haswordauthor(E, F)', 'true': 'haswordauthor(B, D)'}, {'true,true,false': [1.86e-09, 6, 0], 'true,true,true': [3.349, 12, 172], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'true': [0.247, 12, 172], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 6, 0]}]]
[{'': [0.060964083175810056, -6.938893903907228e-18], 'false': [-6.938893903907228e-18, nan], 'false,true': [-6.938893903907228e-18, nan]}, {'': [0.06096408317580048, -2.3129646346357427e-18], 'false': [-2.3129646346357427e-18, nan], 'false,true': [-2.3129646346357427e-18, nan]}, {'': [0.07122502219237517, nan], 'true,true': [0.06096408317580515, 0.0], 'true': [0.07122502219237517, nan]}, {'': [0.06643335011940064, nan], 'true,true': [0.06096408317580519, 0.0], 'true': [0.06643335011940064, nan]}, {'': [0.06096408317580405, 1.1564823173178713e-18], 'false': [1.1564823173178713e-18, nan], 'false,true': [1.1564823173178713e-18, nan], 'true': [0.06096408317580405, nan]}, {'': [0.0620960575005448, nan], 'true,false': [1.1564823173178713e-18, nan], 'true': [0.0609640831758035, 1.1564823173178713e-18]}, {'': [0.06096408317580343, -1.1564823173178713e-18], 'false': [-1.1564823173178713e-18, nan], 'false,true': [-1.1564823173178713e-18, nan]}, {'': [0.0605913090524698, nan], 'true,true': [0.060964083175803305, nan], 'true,false': [0.0, nan], 'true': [0.060964083175803305, 0.0]}, {'': [0.060210585220938154, nan], 'true,true': [0.06096408317580364, 5.782411586589357e-19], 'true': [0.060210585220938154, nan]}, {'': [0.060964083175803416, -5.782411586589357e-19], 'false': [-5.782411586589357e-19, nan], 'false,true': [-5.782411586589357e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;;sameauthor(A, B) :- haswordauthor(B, D).;true;true
3;;sameauthor(A, B) :- haswordauthor(E, F), haswordauthor(A, D).;true;true
4;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
7;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(B, D).;true;true
8;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(E, F).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,92e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.8581489350995116;  // std dev = 2,23e-07, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.5854216623722396;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.524815601766179;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.719473412210954;  // std dev = 2,06e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then return 0.5319045176838226;  // std dev = 0,839, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.6668304758702217;  // std dev = 1,596, 44,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.6410211799807517;  // std dev = 1,590, 31,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.5553664367462835;  // std dev = 4,04e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return 0.5683250346269374;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.42090692845969696;  // std dev = 2,789, 56,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=44 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(C, D), haswordauthor(A, E) )
%   then if ( haswordauthor(A, F), haswordauthor(B, F) )
%   | then if ( haswordtitle(G, F) )
%   | | then return 0.4175135841583099;  // std dev = 2,15e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(H, F) )
%   | | | then return 0.42719507722819633;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.32175318923800844;  // std dev = 2,755, 56,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=44 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then return 0.32420939310470237;  // std dev = 0,026, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( author(F, B), venue(F, E) )
%   | | | then return 0.4664738318711147;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17405993878556716;  // std dev = 1,892, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( author(I, A), venue(I, H) )
%   | | | then return 0.45782471516033896;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19962885631005958;  // std dev = 1,647, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else if ( haswordauthor(B, J), haswordtitle(K, J) )
%   | | | then return 0.33362766974088753;  // std dev = 0,180, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.41292824465838834;  // std dev = 0,237, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then return 0.2575602284901882;  // std dev = 0,023, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.21071357539164684;  // std dev = 1,087, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.06983371068320413;  // std dev = 1,566, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.26408749830431505;  // std dev = 0,088, 46,000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.14451646517219954;  // std dev = 0,675, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordauthor(A, J), haswordvenue(K, J) )
%   | | | then return 0.08413989274999602;  // std dev = 1,476, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.31845585516692804;  // std dev = 0,219, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then return 0.21144486208057536;  // std dev = 0,020, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( author(F, B), venue(F, E) )
%   | | | then return 0.3383594282409892;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10000105773143392;  // std dev = 1,891, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( author(I, B), venue(I, H) )
%   | | | then return 0.2289554478854423;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.12641239089469686;  // std dev = 1,643, 29,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | | else if ( haswordauthor(B, J), haswordtitle(K, J) )
%   | | | then return 0.21970137804535933;  // std dev = 0,189, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.25416719866643417;  // std dev = 0,196, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordvenue(F, D) )
%   | | | then return 0.1759956033477943;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.1978317315052722;  // std dev = 0,183, 66,000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | else if ( haswordvenue(G, D) )
%   | | | then return -0.29441514898570115;  // std dev = 0,010, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.0070870879049878726;  // std dev = 1,025, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.18038902968741158;  // std dev = 4,21e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.01353974183596133;  // std dev = 1,534, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, J), haswordvenue(K, J) )
%   | | | then return 0.06563132440792782;  // std dev = 1,437, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.2050851213258088;  // std dev = 0,127, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(D, E) )
%   then if ( haswordauthor(A, F), haswordauthor(B, F) )
%   | then if ( haswordtitle(G, F) )
%   | | then if ( haswordvenue(H, F) )
%   | | | then return 0.1519082049449967;  // std dev = 2,11e-08, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.1683815201714295;  // std dev = 0,161, 66,000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | else if ( haswordvenue(I, F) )
%   | | | then return 0.1552370127281586;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.07347839036501826;  // std dev = 2,471, 56,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=44 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then return 0.13473610060619892;  // std dev = 0,010, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( author(F, B), venue(F, E) )
%   | | | then return 0.25049175762980647;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.03521977406297932;  // std dev = 1,842, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.09804756889056913;  // std dev = 0,648, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | | else return 0.03531848912302415;  // std dev = 1,439, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, J), haswordtitle(K, J) )
%   | | | then return 0.13780588829377544;  // std dev = 0,161, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.17396473519619304;  // std dev = 0,222, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.511189
   AUC PR    = 0.896676
   CLL	      = -0.370905
   Precision = 0.943987 at threshold = 0.5
   Recall    = 0.895313
   F1        = 0.919006


Total learning time: 12.956 seconds
Total inference time: 34.58 seconds
AUC ROC: 0.511189


Refined model AUC ROC: 0.511189


Dataset: 13_uwcse_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:12:24
{'Recall': 0.895313, 'Learning time': 14.939, 'F1': 0.919006, 'Precision': [0.943987, 0.5], 'AUC PR': 0.896676, 'CLL': -0.370905, 'parameter': {'Recall': 1.0, 'Learning time': 1.983, 'F1': 0.972644, 'Precision': [0.946746, 0.5], 'AUC PR': 0.946746, 'CLL': -0.255854, 'AUC ROC': 0.678571, 'Inference time': 3.569}, 'AUC ROC': 0.511189, 'Inference time': 34.58}


