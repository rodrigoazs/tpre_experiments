Starting experiment #1 for 13_uwcse_cora

Start learning from source dataset

Source train facts examples: 2274
Source train pos examples: 113
Source train neg examples: 113

WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), ta(E, A, F) )
%   | | then if ( ta(G, D, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(I, A), tempadvisedby(J, B) )
%   | | then if ( publication(I, K), ta(L, K, M) )
%   | | | then return 0.7470378239884012;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( publication(N, B) )
%   | | | then return 0.7734031723876481;  // std dev = 2,139, 59,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=54 */
%   | | | else return 0.6273797043302815;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else return -0.14185106490048768;  // std dev = 7,30e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( ta(D, A, F) )
%   | | then return 0.5261862825807958;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.730924492272118;  // std dev = 0,069, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( publication(G, A), publication(G, B) )
%   | | then if ( tempadvisedby(H, B), ta(I, A, J) )
%   | | | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7194734122109543;  // std dev = 4,21e-08, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tempadvisedby(K, B), publication(L, A) )
%   | | | then return 0.36908066213317675;  // std dev = 1,530, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.6022753891158077;  // std dev = 2,439, 50,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=43 */
%   else return -0.12544463852839158;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( student(A), hasposition(B, C) )
%   then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | then if ( ta(E, A, G) )
%   | | then return 0.4104895662080564;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5668366200721044;  // std dev = 0,087, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( publication(H, A), tempadvisedby(I, B) )
%   | | then if ( publication(H, B) )
%   | | | then return 0.5081090089455164;  // std dev = 0,915, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.3024623706773498;  // std dev = 1,492, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else if ( hasposition(J, C), tempadvisedby(K, J) )
%   | | | then return 0.5171363622026371;  // std dev = 1,893, 50,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=46 */
%   | | | else return 0.41333218051658055;  // std dev = 1,254, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( professor(B) )
%   | then if ( publication(L, B) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.0551230450865158;  // std dev = 0,736, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.11231637819360621;  // std dev = 7,30e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, A), publication(D, B) )
%   | then if ( tempadvisedby(E, B), publication(D, E) )
%   | | then return 0.4832644224194336;  // std dev = 0,087, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( ta(F, A, G), tempadvisedby(H, B) )
%   | | | then return 0.37084462728716644;  // std dev = 0,910, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.42312007437304827;  // std dev = 0,050, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( publication(I, A) )
%   | | then if ( hasposition(J, C), publication(I, J) )
%   | | | then return 0.10550717037737643;  // std dev = 1,665, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.5245116684321666;  // std dev = 0,156, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( hasposition(K, C), tempadvisedby(L, K) )
%   | | | then return 0.4073744257008209;  // std dev = 1,644, 52,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | | | else return 0.23264390853184744;  // std dev = 1,192, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( student(B) )
%   | then return -0.10159632948783621;  // std dev = 5,05e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return -0.06169471073240645;  // std dev = 0,231, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( publication(F, A), ta(G, A, H) )
%   | | then if ( samecourse(D, G) )
%   | | | then return 0.4095878574888256;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.34338747485328713;  // std dev = 0,078, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( ta(I, A, J), ta(D, K, J) )
%   | | | then return 0.23276476581721012;  // std dev = 0,871, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.3290363762617579;  // std dev = 0,083, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tempadvisedby(L, B), publication(M, B) )
%   | | then if ( publication(M, A), publication(N, L) )
%   | | | then return 0.3577122975481134;  // std dev = 0,076, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2005704223212725;  // std dev = 1,737, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | else if ( tempadvisedby(P, B) )
%   | | | then return 0.38642182776022393;  // std dev = 0,701, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.27327688523158505;  // std dev = 2,115, 50,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=44 */
%   else return -0.09315851941394428;  // std dev = 0,021, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, A), publication(C, B) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then if ( ta(G, F, H) )
%   | | | then return 0.2810761522284294;  // std dev = 0,079, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1541347741122165;  // std dev = 0,869, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.26351056958549784;  // std dev = 0,082, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(I, A), publication(J, B) )
%   | | then if ( publication(I, K), publication(J, K) )
%   | | | then return -0.12432255029756349;  // std dev = 1,043, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.28297633638472053;  // std dev = 0,613, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( ta(L, A, M) )
%   | | | then return 0.2607053564158703;  // std dev = 1,319, 31,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.19049675328774135;  // std dev = 2,023, 38,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=32 */
%   else return -0.08558151638263352;  // std dev = 0,019, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, B), publication(D, A) )
%   | then if ( tempadvisedby(E, B), ta(F, A, G) )
%   | | then if ( ta(H, E, I) )
%   | | | then return 0.22810248013527415;  // std dev = 0,069, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.11985008125274396;  // std dev = 0,870, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2156794779063987;  // std dev = 0,072, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tempadvisedby(J, B), publication(K, J) )
%   | | then return 0.04158590198449457;  // std dev = 0,759, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( ta(L, A, M), tempadvisedby(N, B) )
%   | | | then return 0.23820376647289318;  // std dev = 1,015, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.15259331113681124;  // std dev = 2,340, 57,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=48 */
%   else if ( student(B) )
%   | then return -0.0787140756253058;  // std dev = 4,08e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( publication(P, B) )
%   | | then return -0.08165674380029701;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.012871199277546616;  // std dev = 0,714, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, B), publication(D, A) )
%   | then if ( tempadvisedby(E, B), publication(D, E) )
%   | | then return 0.22801810140210832;  // std dev = 0,082, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( ta(F, A, G) )
%   | | | then return 0.1381151670113823;  // std dev = 0,875, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.18179670996587788;  // std dev = 0,059, 27,000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( publication(H, A) )
%   | | then if ( publication(H, I), ta(J, I, K) )
%   | | | then return 0.19406556995522742;  // std dev = 1,165, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.10458544466585713;  // std dev = 1,018, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( hasposition(L, C), tempadvisedby(M, L) )
%   | | | then return 0.17174096956821144;  // std dev = 1,643, 52,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | | | else return 0.021459242053169784;  // std dev = 1,191, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( professor(B) )
%   | then return -0.05790995854989576;  // std dev = 0,217, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else return -0.07319184916666803;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( ta(D, A, E), tempadvisedby(F, B) )
%   | | then if ( ta(G, F, H) )
%   | | | then return 0.17022754318641292;  // std dev = 0,055, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.06036195283123289;  // std dev = 0,867, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.1562386921327756;  // std dev = 0,059, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(I, A), publication(J, B) )
%   | | then if ( publication(I, K), publication(J, K) )
%   | | | then return -0.1537766032649078;  // std dev = 1,002, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.17378157133372635;  // std dev = 0,540, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tempadvisedby(L, B), publication(M, L) )
%   | | | then return 0.220259738872328;  // std dev = 0,045, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11561776088833658;  // std dev = 2,389, 65,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=57 */
%   else return -0.06886479571888152;  // std dev = 0,022, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( publication(D, B), publication(D, A) )
%   | then if ( ta(E, A, F), tempadvisedby(G, B) )
%   | | then if ( ta(H, G, I) )
%   | | | then return 0.14757491418391908;  // std dev = 0,049, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.04897052428318018;  // std dev = 0,868, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.13674514698329623;  // std dev = 0,053, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tempadvisedby(J, B), publication(K, J) )
%   | | then return -0.015382353463717136;  // std dev = 0,699, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( ta(L, A, M), tempadvisedby(N, B) )
%   | | | then return 0.1466387615545079;  // std dev = 1,018, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.08476596154546624;  // std dev = 2,282, 57,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=48 */
%   else if ( student(B) )
%   | then return -0.06412070618340601;  // std dev = 3,94e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( publication(P, B) )
%   | | then return -0.06732794103654806;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.016541811659065857;  // std dev = 0,712, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Starting fold 1

Target train facts examples: 7254
Target train pos examples: 209
Target train neg examples: 16

Target test facts examples: 34492
Target test pos examples: 603
Target test neg examples: 58

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,false,false;publication(N, B).;false;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true,true,true;ta(G, D, H).;false;false
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true;tempadvisedby(C, B), ta(D, C, E).;true;true
1;true,true;ta(D, A, F).;false;false
1;true,false;publication(G, A), publication(G, B).;true;true
1;true,false,false;tempadvisedby(K, B), publication(L, A).;false;false
1;true,false,true;tempadvisedby(H, B), ta(I, A, J).;false;false
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
2;true,true;ta(E, A, G).;false;false
2;true,false;publication(H, A), tempadvisedby(I, B).;true;true
2;false,true;publication(L, B).;false;false
2;true,false,false;hasposition(J, C), tempadvisedby(K, J).;false;false
2;true,false,true;publication(H, B).;false;false
2;false;professor(B).;true;false
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true;publication(D, A), publication(D, B).;true;true
3;true,true;tempadvisedby(E, B), publication(D, E).;false;true
3;true,false;publication(I, A).;true;true
3;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
3;true,true,false;ta(F, A, G), tempadvisedby(H, B).;false;false
3;true,false,true;hasposition(J, C), publication(I, J).;false;false
3;false;student(B).;false;false
4;;advisedby(A, B) :- student(A), professor(B).;true;false
4;true;tempadvisedby(C, B), ta(D, C, E).;true;true
4;true,false,false;tempadvisedby(P, B).;false;false
4;true,true;publication(F, A), ta(G, A, H).;true;true
4;true,false;tempadvisedby(L, B), publication(M, B).;true;true
4;true,true,true;samecourse(D, G).;false;false
4;true,true,false;ta(I, A, J), ta(D, K, J).;false;false
4;true,false,true;publication(M, A), publication(N, L).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;publication(C, A), publication(C, B).;true;true
5;true,false,false;ta(L, A, M).;false;false
5;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
5;true,false;publication(I, A), publication(J, B).;true;true
5;true,true,true;ta(G, F, H).;false;false
5;true,false,true;publication(I, K), publication(J, K).;false;false
6;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
6;false,false;publication(P, B).;false;false
6;true;publication(D, B), publication(D, A).;true;true
6;true,true;tempadvisedby(E, B), ta(F, A, G).;true;false
6;true,false;tempadvisedby(J, B), publication(K, J).;false;true
6;true,true,true;ta(H, E, I).;false;false
6;true,false,false;ta(L, A, M), tempadvisedby(N, B).;false;false
6;false;student(B).;false;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;true;publication(D, B), publication(D, A).;true;true
7;true,true;tempadvisedby(E, B), publication(D, E).;false;true
7;true,false;publication(H, A).;true;true
7;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
7;true,true,false;ta(F, A, G).;false;false
7;true,false,true;publication(H, I), ta(J, I, K).;false;false
7;false;professor(B).;false;false
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true;publication(C, B), publication(C, A).;true;true
8;true,false,false;tempadvisedby(L, B), publication(M, L).;false;false
8;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
8;true,false;publication(I, A), publication(J, B).;true;true
8;true,true,true;ta(G, F, H).;false;false
8;true,false,true;publication(I, K), publication(J, K).;false;false
9;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
9;false,false;publication(P, B).;false;false
9;true;publication(D, B), publication(D, A).;true;true
9;true,true;ta(E, A, F), tempadvisedby(G, B).;true;false
9;true,false;tempadvisedby(J, B), publication(K, J).;false;true
9;true,true,true;ta(H, G, I).;false;false
9;true,false,false;ta(L, A, M), tempadvisedby(N, B).;false;false
9;false;student(B).;false;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995118;  // std dev = 3,65e-08, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.7702368471874215;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109551;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( author(D, A) )
%   | then return 0.6489578875773111;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, A) )
%   | then if ( author(D, B) )
%   | | then return 0.555366436746284;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.5061552205141917;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, A), author(D, B) )
%   | then if ( author(D, E) )
%   | | then return 0.41751358415831025;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( author(F, A) )
%   | | then if ( author(C, G), author(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.38079139171230814;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, A) )
%   then if ( sametitle(D, E) )
%   | then return 0.2944023991539335;  // std dev = 3,825, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.2602047250242047;  // std dev = 9,13e-09, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( author(D, A), author(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.22199713040387054;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, B), author(D, A) )
%   | then return 0.21330635367610215;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( author(E, F) )
%   | | then return 0.17662067625343447;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, B), author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.17969491258913625;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( author(F, A) )
%   | | then if ( author(F, G) )
%   | | | then return 0.14371231726428374;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.15471217196715487;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( author(D, A), author(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.11912576102052645;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, B), author(D, A) )
%   | then return 0.13554179318633575;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( author(E, F) )
%   | | then return 0.10024958944619351;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.608624
   AUC PR    = 0.948609
   CLL	      = -0.315132
   Precision = 0.912254 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.954114


Total learning time: 3.803 seconds
Total inference time: 7.557 seconds
AUC ROC: 0.608624


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(D, A)', 'false,true': 'author(D, E)'}, {'false,false': [0.0, 0, 0], 'true': [3.65e-08, 0, 43], 'false,true,false': [0.0, 0, 0], 'false,true,true': [3.82, 16, 166]}], ['sameauthor(A, B)', {'': 'author(C, A), author(C, B)', 'false': 'author(D, A)'}, {'false,false': [0.0, 0, 0], 'true': [0.0, 0, 43], 'false,true': [3.82, 16, 166]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(D, A)', 'true,true': 'author(D, B)'}, {'true,true,true': [0.0, 0, 43], 'true,true,false': [3.82, 16, 166], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(D, A), author(D, B)', 'true,false,true': 'author(C, G), author(F, G)', 'true,true': 'author(D, E)', 'true,false': 'author(F, A)'}, {'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [3.82, 16, 166], 'true,true,true': [0.0, 0, 43], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, A)', 'true': 'sametitle(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [3.825, 16, 209], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, A), author(C, B)', 'false': 'author(D, A), author(E, B)', 'false,true': 'author(D, F), author(E, F)'}, {'false,false': [0.0, 0, 0], 'true': [9.13e-09, 0, 43], 'false,true,false': [3.82, 16, 166], 'false,true,true': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(D, B), author(D, A)', 'true,false': 'author(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [3.82, 16, 166], 'true,true': [0.0, 0, 43], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(D, B), author(D, A)', 'true,false,true': 'author(F, G)', 'true,true': 'author(D, E)', 'true,false': 'author(F, A)'}, {'true,false,true,true': [3.82, 16, 166], 'true,false,true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 43], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(D, A), author(E, B)', 'false,true': 'author(D, F), author(E, F)'}, {'false,false': [0.0, 0, 0], 'true': [0.0, 0, 43], 'false,true,false': [3.82, 16, 166], 'false,true,true': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(D, B), author(D, A)', 'true,false': 'author(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [3.82, 16, 166], 'true,true': [0.0, 0, 43], 'false': [0.0, 0, 0]}]]
[{'': [1.2393187251629655e-15, 0.08018355271103159], 'false': [0.08018355271103159, nan], 'false,true': [0.08018355271103159, nan]}, {'': [-9.914549801303723e-16, 0.08018355271102807], 'false': [0.08018355271102807, nan]}, {'': [0.06523395655346617, nan], 'true': [0.06523395655346617, nan], 'true,true': [-4.131062417209885e-17, 0.0801835527110287]}, {'': [0.06506804931322724, nan], 'true': [-3.7179561754888965e-16, 0.08018355271102633], 'true,false,true': [nan, 0.08018355271102633], 'true,true': [-3.7179561754888965e-16, nan], 'true,false': [0.08018355271102633, nan]}, {'': [0.06502312355924973, nan], 'true': [0.06502312355924973, nan]}, {'': [8.26212483441977e-17, 0.08018355271102554], 'false': [0.08018355271102554, nan], 'false,true': [nan, 0.08018355271102554]}, {'': [0.06506763494255174, nan], 'true': [-5.163828021512356e-18, 0.08018355271102491], 'true,false': [0.08018355271102491, nan]}, {'': [0.06505973678696397, nan], 'true': [-5.680210823663592e-17, 0.08018355271102527], 'true,false,true': [0.08018355271102527, nan], 'true,true': [-5.680210823663592e-17, nan], 'true,false': [0.08018355271102527, nan]}, {'': [-5.680210823663592e-17, 0.08018355271102526], 'false': [0.08018355271102526, nan], 'false,true': [nan, 0.08018355271102526]}, {'': [0.06505212991164389, nan], 'true': [-1.8073398075293247e-17, 0.08018355271102534], 'true,false': [0.08018355271102534, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true', '1;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true', '2;;sameauthor(A, B) :- author(D, B).;true;true', '3;;sameauthor(A, B) :- author(D, A), author(D, B).;true;true', '5;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true', '6;;sameauthor(A, B) :- author(D, B), author(D, A).;true;true', '7;;sameauthor(A, B) :- author(D, B), author(D, A).;true;true', '8;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true', '9;;sameauthor(A, B) :- author(D, B), author(D, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995118;  // std dev = 2,31e-07, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5724346493852267;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.8581489350995112;  // std dev = 4,62e-07, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109551;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.48767788391726336;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.7194734122109542;  // std dev = 7,30e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.7194734122109546;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.6364363107911207;  // std dev = 0,140, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4209699114059686;  // std dev = 3,403, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | | else return 0.5553664367462846;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.42888255183706747;  // std dev = 0,112, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.525839748032419;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.28416428923152276;  // std dev = 3,346, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.41751358415831036;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.4175135841583097;  // std dev = 2,73e-07, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordtitle(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( author(E, A), title(E, D) )
%   | | then return 0.36426877936242064;  // std dev = 0,110, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2437150841423254;  // std dev = 0,398, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | else return 0.3207118471601495;  // std dev = 3,65e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.3202328296658283;  // std dev = 0,011, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.26763254006387405;  // std dev = 0,142, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.31288684681558543;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15352171432695716;  // std dev = 3,347, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.25517224256948945;  // std dev = 1,49e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.25526329500888784;  // std dev = 9,88e-08, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.21862411523922767;  // std dev = 0,124, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.2931791576941485;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11317756299534623;  // std dev = 3,340, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.20975771563253565;  // std dev = 1,83e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.20982203173504488;  // std dev = 1,07e-07, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.18363687781264124;  // std dev = 0,109, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.2292198174504304;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08706327373081048;  // std dev = 3,343, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.17709649774527744;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.17714366911363616;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.15772963543951787;  // std dev = 0,096, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.19124486092855886;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.06706132641859776;  // std dev = 3,343, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.15274385809367083;  // std dev = 2,11e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.15277964137005773;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.13791629272513875;  // std dev = 0,086, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.16339431565202;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.051991109066848895;  // std dev = 3,344, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.13400703000801117;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.13403496483755536;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */


Results
   AUC ROC   = 0.397038
   AUC PR    = 0.891128
   CLL	      = -0.368493
   Precision = 0.912254 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.954114


Total learning time: 6.205 seconds
Total inference time: 8.796 seconds
AUC ROC: 0.397038


Refined model AUC ROC: 0.397038


Dataset: 13_uwcse_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:43:36
{'Inference time': 8.796, 'parameter': {'Inference time': 7.557, 'F1': 0.954114, 'Precision': [0.912254, 0.5], 'CLL': -0.315132, 'AUC PR': 0.948609, 'Recall': 1.0, 'AUC ROC': 0.608624, 'Learning time': 3.803}, 'F1': 0.954114, 'Precision': [0.912254, 0.5], 'CLL': -0.368493, 'AUC PR': 0.891128, 'Recall': 1.0, 'AUC ROC': 0.397038, 'Learning time': 10.008}


Starting fold 2

Target train facts examples: 8894
Target train pos examples: 122
Target train neg examples: 20

Target test facts examples: 32852
Target test pos examples: 690
Target test neg examples: 54

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,false,false;publication(N, B).;false;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true,true,true;ta(G, D, H).;false;false
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true;tempadvisedby(C, B), ta(D, C, E).;true;true
1;true,true;ta(D, A, F).;false;false
1;true,false;publication(G, A), publication(G, B).;true;true
1;true,false,false;tempadvisedby(K, B), publication(L, A).;false;false
1;true,false,true;tempadvisedby(H, B), ta(I, A, J).;false;false
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
2;true,true;ta(E, A, G).;false;false
2;true,false;publication(H, A), tempadvisedby(I, B).;true;true
2;false,true;publication(L, B).;false;false
2;true,false,false;hasposition(J, C), tempadvisedby(K, J).;false;false
2;true,false,true;publication(H, B).;false;false
2;false;professor(B).;true;false
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true;publication(D, A), publication(D, B).;true;true
3;true,true;tempadvisedby(E, B), publication(D, E).;false;true
3;true,false;publication(I, A).;true;true
3;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
3;true,true,false;ta(F, A, G), tempadvisedby(H, B).;false;false
3;true,false,true;hasposition(J, C), publication(I, J).;false;false
3;false;student(B).;false;false
4;;advisedby(A, B) :- student(A), professor(B).;true;false
4;true;tempadvisedby(C, B), ta(D, C, E).;true;true
4;true,false,false;tempadvisedby(P, B).;false;false
4;true,true;publication(F, A), ta(G, A, H).;true;true
4;true,false;tempadvisedby(L, B), publication(M, B).;true;true
4;true,true,true;samecourse(D, G).;false;false
4;true,true,false;ta(I, A, J), ta(D, K, J).;false;false
4;true,false,true;publication(M, A), publication(N, L).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;publication(C, A), publication(C, B).;true;true
5;true,false,false;ta(L, A, M).;false;false
5;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
5;true,false;publication(I, A), publication(J, B).;true;true
5;true,true,true;ta(G, F, H).;false;false
5;true,false,true;publication(I, K), publication(J, K).;false;false
6;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
6;false,false;publication(P, B).;false;false
6;true;publication(D, B), publication(D, A).;true;true
6;true,true;tempadvisedby(E, B), ta(F, A, G).;true;false
6;true,false;tempadvisedby(J, B), publication(K, J).;false;true
6;true,true,true;ta(H, E, I).;false;false
6;true,false,false;ta(L, A, M), tempadvisedby(N, B).;false;false
6;false;student(B).;false;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;true;publication(D, B), publication(D, A).;true;true
7;true,true;tempadvisedby(E, B), publication(D, E).;false;true
7;true,false;publication(H, A).;true;true
7;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
7;true,true,false;ta(F, A, G).;false;false
7;true,false,true;publication(H, I), ta(J, I, K).;false;false
7;false;professor(B).;false;false
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true;publication(C, B), publication(C, A).;true;true
8;true,false,false;tempadvisedby(L, B), publication(M, L).;false;false
8;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
8;true,false;publication(I, A), publication(J, B).;true;true
8;true,true,true;ta(G, F, H).;false;false
8;true,false,true;publication(I, K), publication(J, K).;false;false
9;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
9;false,false;publication(P, B).;false;false
9;true;publication(D, B), publication(D, A).;true;true
9;true,true;ta(E, A, F), tempadvisedby(G, B).;true;false
9;true,false;tempadvisedby(J, B), publication(K, J).;false;true
9;true,true,true;ta(H, G, I).;false;false
9;true,false,false;ta(L, A, M), tempadvisedby(N, B).;false;false
9;false;student(B).;false;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.7966104735610489;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.6701860162815748;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else if ( haswordauthor(A, D) )
%   | then return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.521000173904994;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.3916498696084713;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(A, F) )
%   | | then if ( author(C, G), haswordauthor(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( sametitle(D, E) )
%   | then return 0.2645457676145883;  // std dev = 3,030, 142,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.23915616453205965;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else if ( haswordauthor(A, D), haswordauthor(B, E) )
%   | then if ( haswordauthor(F, D), haswordauthor(F, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11746452185879307;  // std dev = 7,45e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then return 0.19137219979113929;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | else if ( haswordauthor(E, F) )
%   | | then return -0.10582382226098008;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.15694590941285094;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(A, F) )
%   | | then if ( haswordauthor(G, F) )
%   | | | then return -0.09621980381942412;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.1313318162142785;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else if ( haswordauthor(A, D), haswordauthor(B, E) )
%   | then if ( haswordauthor(F, D), haswordauthor(F, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08817128704124318;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then return 0.11170700125273088;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | else if ( haswordauthor(E, F) )
%   | | then return -0.0813352258437445;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.62963
   AUC PR    = 0.945205
   CLL	      = -0.26036
   Precision = 0.945205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971831


Total learning time: 3.031 seconds
Total inference time: 1.951 seconds
AUC ROC: 0.62963


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'false,false': [0.0, 0, 0], 'true': [0.24, 8, 122], 'false,true,false': [0.0, 0, 0], 'false,true,true': [0.0, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D)'}, {'false,false': [0.0, 0, 0], 'true': [0.24, 8, 122], 'false,true': [5.27e-09, 12, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(A, D)', 'true,true': 'haswordauthor(B, D)'}, {'true,true,true': [2.74, 8, 122], 'true,true,false': [9.13e-09, 12, 0], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)', 'true,false,true': 'author(C, G), haswordauthor(G, F)', 'true,true': 'haswordauthor(E, D)', 'true,false': 'haswordauthor(A, F)'}, {'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 12, 0], 'true,true,true': [2.74, 8, 122], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C)', 'true': 'sametitle(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [3.03, 20, 122], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D), haswordauthor(B, E)', 'false,true': 'haswordauthor(F, D), haswordauthor(F, E)'}, {'false,false': [0.0, 0, 0], 'true': [0.24, 8, 122], 'false,true,false': [7.45e-09, 12, 0], 'false,true,true': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)', 'true,false': 'haswordauthor(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 12, 0], 'true,true': [0.24, 8, 122], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)', 'true,false,true': 'haswordauthor(G, F)', 'true,true': 'haswordauthor(E, D)', 'true,false': 'haswordauthor(A, F)'}, {'true,false,true,true': [5.27e-09, 12, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true,true': [2.74, 8, 122], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D), haswordauthor(B, E)', 'false,true': 'haswordauthor(F, D), haswordauthor(F, E)'}, {'false,false': [0.0, 0, 0], 'true': [0.24, 8, 122], 'false,true,false': [0.0, 12, 0], 'false,true,true': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)', 'true,false': 'haswordauthor(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 12, 0], 'true,true': [0.24, 8, 122], 'false': [0.0, 0, 0]}]]
[{'': [0.05775147928994478, -1.1564823173178714e-17], 'false': [-1.1564823173178714e-17, nan], 'false,true': [-1.1564823173178714e-17, nan]}, {'': [0.05775147928993674, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan]}, {'': [0.08390163071539002, nan], 'true': [0.08390163071539002, nan], 'true,true': [0.057751479289940406, 6.938893903907228e-18]}, {'': [0.07169349017318598, nan], 'true': [0.057751479289941336, 0.0], 'true,false,true': [nan, 0.0], 'true,true': [0.057751479289941336, nan], 'true,false': [0.0, nan]}, {'': [0.06465122386314022, nan], 'true': [0.06465122386314022, nan]}, {'': [0.05775147928994066, 4.625929269271485e-18], 'false': [4.625929269271485e-18, nan], 'false,true': [nan, 4.625929269271485e-18]}, {'': [0.05970442618077418, nan], 'true': [0.05775147928994089, -2.3129646346357427e-18], 'true,false': [-2.3129646346357427e-18, nan]}, {'': [0.057829656711381794, nan], 'true': [0.057751479289940844, 2.3129646346357427e-18], 'true,false,true': [2.3129646346357427e-18, nan], 'true,true': [0.057751479289940844, nan], 'true,false': [2.3129646346357427e-18, nan]}, {'': [0.05775147928994094, -3.469446951953614e-18], 'false': [-3.469446951953614e-18, nan], 'false,true': [nan, -3.469446951953614e-18]}, {'': [0.05575412507153337, nan], 'true': [0.05775147928994075, -1.1564823173178713e-18], 'true,false': [-1.1564823173178713e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true', '2;;sameauthor(A, B) :- haswordauthor(B, D).;true;true', '3;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(B, D).;true;true', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true', '6;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true', '7;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true', '8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '9;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.8581489350995122;  // std dev = 1,46e-07, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7405018762759833;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.7194734122109547;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.7194734122109542;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.6249475655895573;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then return 0.5553664367462839;  // std dev = 9,42e-08, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | | then return 0.5553664367462844;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4893127157293235;  // std dev = 2,657, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.4175135841583103;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0.3759929864299645;  // std dev = 0,298, 80,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=72 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.3207118471601494;  // std dev = 2,98e-08, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.32982387071695785;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.27629896574841756;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.25666222722904325;  // std dev = 0,019, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.2551722425694894;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.21260304187070814;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.2108111423076332;  // std dev = 0,016, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0.17373725093497341;  // std dev = 0,297, 80,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=72 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.1780895658655692;  // std dev = 0,017, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.1814908983957447;  // std dev = 1,29e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.13333257049409722;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.15349766158208555;  // std dev = 0,015, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.15606934395304717;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.10910773652096321;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.13459584376292585;  // std dev = 0,014, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.13659786327479698;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.09054881476022344;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.569243
   AUC PR    = 0.934792
   CLL	      = -0.253566
   Precision = 0.945205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971831


Total learning time: 5.908 seconds
Total inference time: 2.764 seconds
AUC ROC: 0.569243


Refined model AUC ROC: 0.569243


Dataset: 13_uwcse_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:43:50
{'Inference time': 2.764, 'parameter': {'Inference time': 1.951, 'F1': 0.971831, 'Precision': [0.945205, 0.5], 'CLL': -0.26036, 'AUC PR': 0.945205, 'Recall': 1.0, 'AUC ROC': 0.62963, 'Learning time': 3.031}, 'F1': 0.971831, 'Precision': [0.945205, 0.5], 'CLL': -0.253566, 'AUC PR': 0.934792, 'Recall': 1.0, 'AUC ROC': 0.569243, 'Learning time': 8.939}


Starting fold 3

Target train facts examples: 9155
Target train pos examples: 151
Target train neg examples: 4

Target test facts examples: 32591
Target test pos examples: 661
Target test neg examples: 70

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,false,false;publication(N, B).;false;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true,true,true;ta(G, D, H).;false;false
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true;tempadvisedby(C, B), ta(D, C, E).;true;true
1;true,true;ta(D, A, F).;false;false
1;true,false;publication(G, A), publication(G, B).;true;true
1;true,false,false;tempadvisedby(K, B), publication(L, A).;false;false
1;true,false,true;tempadvisedby(H, B), ta(I, A, J).;false;false
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
2;true,true;ta(E, A, G).;false;false
2;true,false;publication(H, A), tempadvisedby(I, B).;true;true
2;false,true;publication(L, B).;false;false
2;true,false,false;hasposition(J, C), tempadvisedby(K, J).;false;false
2;true,false,true;publication(H, B).;false;false
2;false;professor(B).;true;false
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true;publication(D, A), publication(D, B).;true;true
3;true,true;tempadvisedby(E, B), publication(D, E).;false;true
3;true,false;publication(I, A).;true;true
3;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
3;true,true,false;ta(F, A, G), tempadvisedby(H, B).;false;false
3;true,false,true;hasposition(J, C), publication(I, J).;false;false
3;false;student(B).;false;false
4;;advisedby(A, B) :- student(A), professor(B).;true;false
4;true;tempadvisedby(C, B), ta(D, C, E).;true;true
4;true,false,false;tempadvisedby(P, B).;false;false
4;true,true;publication(F, A), ta(G, A, H).;true;true
4;true,false;tempadvisedby(L, B), publication(M, B).;true;true
4;true,true,true;samecourse(D, G).;false;false
4;true,true,false;ta(I, A, J), ta(D, K, J).;false;false
4;true,false,true;publication(M, A), publication(N, L).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;publication(C, A), publication(C, B).;true;true
5;true,false,false;ta(L, A, M).;false;false
5;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
5;true,false;publication(I, A), publication(J, B).;true;true
5;true,true,true;ta(G, F, H).;false;false
5;true,false,true;publication(I, K), publication(J, K).;false;false
6;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
6;false,false;publication(P, B).;false;false
6;true;publication(D, B), publication(D, A).;true;true
6;true,true;tempadvisedby(E, B), ta(F, A, G).;true;false
6;true,false;tempadvisedby(J, B), publication(K, J).;false;true
6;true,true,true;ta(H, E, I).;false;false
6;true,false,false;ta(L, A, M), tempadvisedby(N, B).;false;false
6;false;student(B).;false;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;true;publication(D, B), publication(D, A).;true;true
7;true,true;tempadvisedby(E, B), publication(D, E).;false;true
7;true,false;publication(H, A).;true;true
7;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
7;true,true,false;ta(F, A, G).;false;false
7;true,false,true;publication(H, I), ta(J, I, K).;false;false
7;false;professor(B).;false;false
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true;publication(C, B), publication(C, A).;true;true
8;true,false,false;tempadvisedby(L, B), publication(M, L).;false;false
8;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
8;true,false;publication(I, A), publication(J, B).;true;true
8;true,true,true;ta(G, F, H).;false;false
8;true,false,true;publication(I, K), publication(J, K).;false;false
9;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
9;false,false;publication(P, B).;false;false
9;true;publication(D, B), publication(D, A).;true;true
9;true,true;ta(E, A, F), tempadvisedby(G, B).;true;false
9;true,false;tempadvisedby(J, B), publication(K, J).;false;true
9;true,true,true;ta(H, G, I).;false;false
9;true,false,false;ta(L, A, M), tempadvisedby(N, B).;false;false
9;false;student(B).;false;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995115;  // std dev = 4,21e-08, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.8248156017661773;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109548;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( author(D, A) )
%   | then return 0.6928183180467439;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, A) )
%   | then if ( author(D, B) )
%   | | then return 0.5553664367462844;  // std dev = 9,42e-08, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.5367928709789459;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, A), author(D, B) )
%   | then if ( author(D, E) )
%   | | then return 0.4175135841583102;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( author(F, A) )
%   | | then if ( author(C, G), author(F, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.40340088328536944;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, A) )
%   then if ( sametitle(D, E) )
%   | then return 0.31078868532705706;  // std dev = 1,968, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.2570628100026274;  // std dev = 5,27e-09, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( author(D, A), author(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.24182304368366472;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, B), author(D, A) )
%   | then return 0.2110922980598202;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( author(E, F) )
%   | | then return 0.19628997954060692;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, B), author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.17807473340470467;  // std dev = 5,37e-08, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( author(F, A) )
%   | | then if ( author(F, G) )
%   | | | then return 0.16341709780965438;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.15348554362306435;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( author(D, A), author(E, B) )
%   | then if ( author(D, F), author(E, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.13886217745859203;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( author(D, B), author(D, A) )
%   | then return 0.13458578645970853;  // std dev = 5,59e-09, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( author(E, F) )
%   | | then return 0.11995900827004519;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.605144
   AUC PR    = 0.943016
   CLL	      = -0.319978
   Precision = 0.904241 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.949713


Total learning time: 5.652 seconds
Total inference time: 8.833 seconds
AUC ROC: 0.605144


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(D, A)', 'false,true': 'author(D, E)'}, {'false,false': [0.0, 0, 0], 'true': [4.21e-08, 0, 35], 'false,true,false': [0.0, 0, 0], 'false,true,true': [1.966, 4, 116]}], ['sameauthor(A, B)', {'': 'author(C, A), author(C, B)', 'false': 'author(D, A)'}, {'false,false': [0.0, 0, 0], 'true': [0.0, 0, 35], 'false,true': [1.966, 4, 116]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(D, A)', 'true,true': 'author(D, B)'}, {'true,true,true': [9.42e-08, 0, 35], 'true,true,false': [1.966, 4, 116], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(D, A), author(D, B)', 'true,false,true': 'author(C, G), author(F, G)', 'true,true': 'author(D, E)', 'true,false': 'author(F, A)'}, {'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [1.966, 4, 116], 'true,true,true': [0.0, 0, 35], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, A)', 'true': 'sametitle(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [1.968, 4, 151], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, A), author(C, B)', 'false': 'author(D, A), author(E, B)', 'false,true': 'author(D, F), author(E, F)'}, {'false,false': [0.0, 0, 0], 'true': [5.27e-09, 0, 35], 'false,true,false': [1.966, 4, 116], 'false,true,true': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(D, B), author(D, A)', 'true,false': 'author(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [1.966, 4, 116], 'true,true': [0.0, 0, 35], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(D, B), author(D, A)', 'true,false,true': 'author(F, G)', 'true,true': 'author(D, E)', 'true,false': 'author(F, A)'}, {'true,false,true,true': [1.966, 4, 116], 'true,false,true,false': [0.0, 0, 0], 'true,true,true': [5.37e-08, 0, 35], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(D, A), author(E, B)', 'false,true': 'author(D, F), author(E, F)'}, {'false,false': [0.0, 0, 0], 'true': [0.0, 0, 35], 'false,true,false': [1.966, 4, 116], 'false,true,true': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'author(D, B), author(D, A)', 'true,false': 'author(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [1.966, 4, 116], 'true,true': [5.59e-09, 0, 35], 'false': [0.0, 0, 0]}]]
[{'': [1.6240976817373718e-15, 0.0322222222222256], 'false': [0.0322222222222256, nan], 'false,true': [0.0322222222222256, nan]}, {'': [-6.0903663065151445e-16, 0.03222222222222175], 'false': [0.03222222222222175, nan]}, {'': [0.025006544773513804, nan], 'true': [0.025006544773513804, nan], 'true,true': [2.5376526277146434e-16, 0.03222222222222181]}, {'': [0.02498105474723092, nan], 'true': [-2.791417890486108e-16, 0.03222222222222134], 'true,false,true': [nan, 0.03222222222222134], 'true,true': [-2.791417890486108e-16, nan], 'true,false': [0.03222222222222134, nan]}, {'': [0.024974956725196625, nan], 'true': [0.024974956725196625, nan]}, {'': [2.5376526277146434e-17, 0.03222222222222223], 'false': [0.03222222222222223, nan], 'false,true': [nan, 0.03222222222222223]}, {'': [0.024984540669894573, nan], 'true': [-5.709718412357947e-17, 0.03222222222222219], 'true,false': [0.03222222222222219, nan]}, {'': [0.024983795534423685, nan], 'true': [8.247371040072592e-17, 0.03222222222222216], 'true,false,true': [0.03222222222222216, nan], 'true,true': [8.247371040072592e-17, nan], 'true,false': [0.03222222222222216, nan]}, {'': [0.0, 0.03222222222222219], 'false': [0.03222222222222219, nan], 'false,true': [nan, 0.03222222222222219]}, {'': [0.024983637561798614, nan], 'true': [3.172065784643304e-17, 0.03222222222222216], 'true,false': [0.03222222222222216, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true', '1;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true', '2;;sameauthor(A, B) :- author(D, B).;true;true', '3;;sameauthor(A, B) :- author(D, A), author(D, B).;true;true', '5;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true', '6;;sameauthor(A, B) :- author(D, B), author(D, A).;true;true', '7;;sameauthor(A, B) :- author(D, B), author(D, A).;true;true', '8;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true', '9;;sameauthor(A, B) :- author(D, B), author(D, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995115;  // std dev = 2,38e-07, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.7405018762759829;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.8461007423284279;  // std dev = 0,109, 83,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109548;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.4085346695908075;  // std dev = 0,841, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.583320672841472;  // std dev = 0,898, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7307683668787609;  // std dev = 0,027, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.6265813379029306;  // std dev = 1,331, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.7194734122109542;  // std dev = 5,16e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.7218986737280182;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.43847159183839873;  // std dev = 0,896, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.49128344408833885;  // std dev = 0,902, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.5666515061657222;  // std dev = 0,034, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, J), haswordvenue(K, J) )
%   | | | then return 0.6182050215601022;  // std dev = 1,49e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.519723360293417;  // std dev = 1,336, 36,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else return 0.5572250937393042;  // std dev = 0,009, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.4234898505708913;  // std dev = 0,053, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.34024816560056553;  // std dev = 0,912, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.35404490175609665;  // std dev = 1,320, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.41940302512836464;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then return 0.36590389572780624;  // std dev = 0,226, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.42359346771390244;  // std dev = 0,119, 68,000 (wgt'ed) examples reached here.  /* #pos=68 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordvenue(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then return 0.23760272846926345;  // std dev = 0,898, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.26979874141173393;  // std dev = 0,266, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.33385229934051897;  // std dev = 0,051, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(A, G) )
%   | | then return 0.28993721588936866;  // std dev = 0,266, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.32199305922170834;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.32350939570186626;  // std dev = 0,068, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.2624229416863365;  // std dev = 0,075, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | | then return 0.3589752509310881;  // std dev = 0,114, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2000955693915179;  // std dev = 1,319, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0.1971079433482563;  // std dev = 0,221, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.17260149778962686;  // std dev = 0,871, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.24955886724083542;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2581869519002896;  // std dev = 0,056, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.21490106540817142;  // std dev = 0,066, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 5.536944547089492E-4;  // std dev = 0,825, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13665539026514456;  // std dev = 0,874, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.22255508594332765;  // std dev = 0,051, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.1584383366337585;  // std dev = 1,320, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.22033271305366367;  // std dev = 2,36e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.21189412466141466;  // std dev = 0,049, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.18088158975309443;  // std dev = 0,058, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.009258953962588135;  // std dev = 0,849, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11418024716101818;  // std dev = 0,850, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.1864961272482352;  // std dev = 0,045, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.1279482237206408;  // std dev = 1,320, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.18481477492459847;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.17866764406137914;  // std dev = 0,043, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.155623617000961;  // std dev = 0,051, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.007230682403048805;  // std dev = 0,849, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09307212404612634;  // std dev = 0,854, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.15988263922744453;  // std dev = 0,040, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.10504016003661268;  // std dev = 1,321, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.158574091365086;  // std dev = 1,05e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.15393851152915017;  // std dev = 0,038, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.1362611474025912;  // std dev = 0,046, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | | then return 0.2443066490855787;  // std dev = 0,176, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.08302910426368744;  // std dev = 1,317, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0.08272716713239173;  // std dev = 0,209, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.12969745510846867;  // std dev = 0,096, 83,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */


Results
   AUC ROC   = 0.561314
   AUC PR    = 0.937126
   CLL	      = -0.34703
   Precision = 0.904241 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.949713


Total learning time: 6.704 seconds
Total inference time: 2.948 seconds
AUC ROC: 0.561314


Refined model AUC ROC: 0.561314


Dataset: 13_uwcse_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:44:16
{'Inference time': 2.948, 'parameter': {'Inference time': 8.833, 'F1': 0.949713, 'Precision': [0.904241, 0.5], 'CLL': -0.319978, 'AUC PR': 0.943016, 'Recall': 1.0, 'AUC ROC': 0.605144, 'Learning time': 5.652}, 'F1': 0.949713, 'Precision': [0.904241, 0.5], 'CLL': -0.34703, 'AUC PR': 0.937126, 'Recall': 1.0, 'AUC ROC': 0.561314, 'Learning time': 12.356}


Starting fold 4

Target train facts examples: 7971
Target train pos examples: 158
Target train neg examples: 16

Target test facts examples: 33775
Target test pos examples: 654
Target test neg examples: 58

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,false,false;publication(N, B).;false;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true,true,true;ta(G, D, H).;false;false
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true;tempadvisedby(C, B), ta(D, C, E).;true;true
1;true,true;ta(D, A, F).;false;false
1;true,false;publication(G, A), publication(G, B).;true;true
1;true,false,false;tempadvisedby(K, B), publication(L, A).;false;false
1;true,false,true;tempadvisedby(H, B), ta(I, A, J).;false;false
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
2;true,true;ta(E, A, G).;false;false
2;true,false;publication(H, A), tempadvisedby(I, B).;true;true
2;false,true;publication(L, B).;false;false
2;true,false,false;hasposition(J, C), tempadvisedby(K, J).;false;false
2;true,false,true;publication(H, B).;false;false
2;false;professor(B).;true;false
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true;publication(D, A), publication(D, B).;true;true
3;true,true;tempadvisedby(E, B), publication(D, E).;false;true
3;true,false;publication(I, A).;true;true
3;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
3;true,true,false;ta(F, A, G), tempadvisedby(H, B).;false;false
3;true,false,true;hasposition(J, C), publication(I, J).;false;false
3;false;student(B).;false;false
4;;advisedby(A, B) :- student(A), professor(B).;true;false
4;true;tempadvisedby(C, B), ta(D, C, E).;true;true
4;true,false,false;tempadvisedby(P, B).;false;false
4;true,true;publication(F, A), ta(G, A, H).;true;true
4;true,false;tempadvisedby(L, B), publication(M, B).;true;true
4;true,true,true;samecourse(D, G).;false;false
4;true,true,false;ta(I, A, J), ta(D, K, J).;false;false
4;true,false,true;publication(M, A), publication(N, L).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;publication(C, A), publication(C, B).;true;true
5;true,false,false;ta(L, A, M).;false;false
5;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
5;true,false;publication(I, A), publication(J, B).;true;true
5;true,true,true;ta(G, F, H).;false;false
5;true,false,true;publication(I, K), publication(J, K).;false;false
6;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
6;false,false;publication(P, B).;false;false
6;true;publication(D, B), publication(D, A).;true;true
6;true,true;tempadvisedby(E, B), ta(F, A, G).;true;false
6;true,false;tempadvisedby(J, B), publication(K, J).;false;true
6;true,true,true;ta(H, E, I).;false;false
6;true,false,false;ta(L, A, M), tempadvisedby(N, B).;false;false
6;false;student(B).;false;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;true;publication(D, B), publication(D, A).;true;true
7;true,true;tempadvisedby(E, B), publication(D, E).;false;true
7;true,false;publication(H, A).;true;true
7;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
7;true,true,false;ta(F, A, G).;false;false
7;true,false,true;publication(H, I), ta(J, I, K).;false;false
7;false;professor(B).;false;false
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true;publication(C, B), publication(C, A).;true;true
8;true,false,false;tempadvisedby(L, B), publication(M, L).;false;false
8;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
8;true,false;publication(I, A), publication(J, B).;true;true
8;true,true,true;ta(G, F, H).;false;false
8;true,false,true;publication(I, K), publication(J, K).;false;false
9;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
9;false,false;publication(P, B).;false;false
9;true;publication(D, B), publication(D, A).;true;true
9;true,true;ta(E, A, F), tempadvisedby(G, B).;true;false
9;true,false;tempadvisedby(J, B), publication(K, J).;false;true
9;true,true,true;ta(H, G, I).;false;false
9;true,false,false;ta(L, A, M), tempadvisedby(N, B).;false;false
9;false;student(B).;false;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.8099561640151723;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.6809038096058014;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else if ( haswordauthor(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.5284825663747693;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.39719039176974347;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(A, F) )
%   | | then if ( author(C, G), haswordauthor(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( sametitle(D, E) )
%   | then return 0.2842135337604146;  // std dev = 2,967, 174,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=158 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.2407043515541745;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else if ( haswordauthor(A, D), haswordauthor(B, E) )
%   | then if ( haswordauthor(F, D), haswordauthor(F, E) )
%   | | then return -0.11951880186055056;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then return 0.19386131774128798;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | else if ( haswordauthor(E, F) )
%   | | then return -0.10750210952150241;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.16008926227102582;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(A, F) )
%   | | then if ( haswordauthor(G, F) )
%   | | | then return -0.09761449785618997;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.13491961991983592;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else if ( haswordauthor(A, D), haswordauthor(B, E) )
%   | then if ( haswordauthor(F, D), haswordauthor(F, E) )
%   | | then return -0.08934732324264227;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then return 0.11559361877247337;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | else if ( haswordauthor(E, F) )
%   | | then return -0.08233942011368346;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.655172
   AUC PR    = 0.942363
   CLL	      = -0.257153
   Precision = 0.942363 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970326


Total learning time: 3.891 seconds
Total inference time: 1.939 seconds
AUC ROC: 0.655172


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'false,false': [0.0, 0, 0], 'true': [0.214, 8, 158], 'false,true,false': [0.0, 0, 0], 'false,true,true': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D)'}, {'false,false': [0.0, 0, 0], 'true': [0.214, 8, 158], 'false,true': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(A, D)', 'true,true': 'haswordauthor(B, D)'}, {'true,true,true': [2.759, 8, 158], 'true,true,false': [0.0, 8, 0], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)', 'true,false,true': 'author(C, G), haswordauthor(G, F)', 'true,true': 'haswordauthor(E, D)', 'true,false': 'haswordauthor(A, F)'}, {'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [3.73e-09, 8, 0], 'true,true,true': [2.759, 8, 158], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C)', 'true': 'sametitle(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [2.967, 16, 158], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D), haswordauthor(B, E)', 'false,true': 'haswordauthor(F, D), haswordauthor(F, E)'}, {'false,false': [0.0, 0, 0], 'true': [0.214, 8, 158], 'false,true,false': [0.0, 0, 0], 'false,true,true': [7.45e-09, 8, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)', 'true,false': 'haswordauthor(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 8, 0], 'true,true': [0.214, 8, 158], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)', 'true,false,true': 'haswordauthor(G, F)', 'true,true': 'haswordauthor(E, D)', 'true,false': 'haswordauthor(A, F)'}, {'true,false,true,true': [0.0, 8, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true,true': [2.759, 8, 158], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D), haswordauthor(B, E)', 'false,true': 'haswordauthor(F, D), haswordauthor(F, E)'}, {'false,false': [0.0, 0, 0], 'true': [0.214, 8, 158], 'false,true,false': [0.0, 0, 0], 'false,true,true': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)', 'true,false': 'haswordauthor(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [3.73e-09, 8, 0], 'true,true': [0.214, 8, 158], 'false': [0.0, 0, 0]}]]
[{'': [0.045870227899556054, -6.938893903907228e-18], 'false': [-6.938893903907228e-18, nan], 'false,true': [-6.938893903907228e-18, nan]}, {'': [0.045870227899547665, 0.0], 'false': [0.0, nan]}, {'': [0.061772472858521894, nan], 'true': [0.061772472858521894, nan], 'true,true': [0.04587022789954968, -1.734723475976807e-18]}, {'': [0.05467387975151457, nan], 'true': [0.045870227899550815, 1.734723475976807e-18], 'true,false,true': [nan, 1.734723475976807e-18], 'true,true': [0.045870227899550815, nan], 'true,false': [1.734723475976807e-18, nan]}, {'': [0.05060738374817872, nan], 'true': [0.05060738374817872, nan]}, {'': [0.04587022789955014, 6.938893903907228e-18], 'false': [6.938893903907228e-18, nan], 'false,true': [6.938893903907228e-18, nan]}, {'': [0.047744897283584845, nan], 'true': [0.045870227899549976, -1.734723475976807e-18], 'true,false': [-1.734723475976807e-18, nan]}, {'': [0.0466742559589431, nan], 'true': [0.04587022789954999, 0.0], 'true,false,true': [0.0, nan], 'true,true': [0.04587022789954999, nan], 'true,false': [0.0, nan]}, {'': [0.04587022789955011, -1.734723475976807e-18], 'false': [-1.734723475976807e-18, nan], 'false,true': [-1.734723475976807e-18, nan]}, {'': [0.04547969898793913, nan], 'true': [0.04587022789955017, 1.734723475976807e-18], 'true,false': [1.734723475976807e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true', '2;;sameauthor(A, B) :- haswordauthor(B, D).;true;true', '3;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(B, D).;true;true', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true', '6;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true', '7;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true', '8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '9;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,53e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.6914822684328453;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.8581489350995125;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.7194734122109548;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.5851860008555358;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.7194734122109542;  // std dev = 5,96e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.7194734122109538;  // std dev = 2,23e-07, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return 0.5553664367462843;  // std dev = 1,03e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.44148054054992875;  // std dev = 2,171, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | | then return 0.5027292302671041;  // std dev = 1,223, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.5553664367462836;  // std dev = 3,32e-07, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.42229646791038433;  // std dev = 0,041, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | then if ( haswordvenue(H, F) )
%   | | | then return 0.4175135841583098;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3353964730934208;  // std dev = 2,170, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else return 0.4048832668171101;  // std dev = 0,136, 81,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=79 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.324806150074101;  // std dev = 0,034, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.27028441070967124;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.14649669203254417;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.32045157615083986;  // std dev = 0,002, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.17916700589797077;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.3233235320386951;  // std dev = 0,006, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.2579728262827007;  // std dev = 0,030, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.20529049349905495;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.11010471185060956;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.254994691953163;  // std dev = 0,002, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.1344226693617964;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.25695367193985935;  // std dev = 0,006, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.2086302401586922;  // std dev = 0,006, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.15872115931232703;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.10115105284501473;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.21662784054153034;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.08312605271399891;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.21101538881602472;  // std dev = 0,005, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.17847755619839117;  // std dev = 0,020, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.12488883187119126;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.06307546281414748;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.17715056556253672;  // std dev = 0,001, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.07648197116717685;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.1780184467315325;  // std dev = 0,004, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.15190782334855799;  // std dev = 0,005, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.09977922383077002;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.05811913555965923;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.1570249807598239;  // std dev = 1,29e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.048086377400598325;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.1534429251082489;  // std dev = 0,004, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.13335409540518603;  // std dev = 0,004, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.08073668781461352;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.04436478758986188;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.13734043083421138;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.03680742625200565;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.13455256889962436;  // std dev = 0,003, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.690459
   AUC PR    = 0.955946
   CLL	      = -0.260648
   Precision = 0.942363 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970326


Total learning time: 7.706 seconds
Total inference time: 4.026 seconds
AUC ROC: 0.690459


Refined model AUC ROC: 0.690459


Dataset: 13_uwcse_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:44:34
{'Inference time': 4.026, 'parameter': {'Inference time': 1.939, 'F1': 0.970326, 'Precision': [0.942363, 0.5], 'CLL': -0.257153, 'AUC PR': 0.942363, 'Recall': 1.0, 'AUC ROC': 0.655172, 'Learning time': 3.891}, 'F1': 0.970326, 'Precision': [0.942363, 0.5], 'CLL': -0.260648, 'AUC PR': 0.955946, 'Recall': 1.0, 'AUC ROC': 0.690459, 'Learning time': 11.597000000000001}


Starting fold 5

Target train facts examples: 8472
Target train pos examples: 172
Target train neg examples: 18

Target test facts examples: 33274
Target test pos examples: 640
Target test neg examples: 56

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true;publication(C, B), publication(C, A).;true;true
0;true,false,false;publication(N, B).;false;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true,true,true;ta(G, D, H).;false;false
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true;tempadvisedby(C, B), ta(D, C, E).;true;true
1;true,true;ta(D, A, F).;false;false
1;true,false;publication(G, A), publication(G, B).;true;true
1;true,false,false;tempadvisedby(K, B), publication(L, A).;false;false
1;true,false,true;tempadvisedby(H, B), ta(I, A, J).;false;false
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
2;true,true;ta(E, A, G).;false;false
2;true,false;publication(H, A), tempadvisedby(I, B).;true;true
2;false,true;publication(L, B).;false;false
2;true,false,false;hasposition(J, C), tempadvisedby(K, J).;false;false
2;true,false,true;publication(H, B).;false;false
2;false;professor(B).;true;false
3;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
3;true;publication(D, A), publication(D, B).;true;true
3;true,true;tempadvisedby(E, B), publication(D, E).;false;true
3;true,false;publication(I, A).;true;true
3;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
3;true,true,false;ta(F, A, G), tempadvisedby(H, B).;false;false
3;true,false,true;hasposition(J, C), publication(I, J).;false;false
3;false;student(B).;false;false
4;;advisedby(A, B) :- student(A), professor(B).;true;false
4;true;tempadvisedby(C, B), ta(D, C, E).;true;true
4;true,false,false;tempadvisedby(P, B).;false;false
4;true,true;publication(F, A), ta(G, A, H).;true;true
4;true,false;tempadvisedby(L, B), publication(M, B).;true;true
4;true,true,true;samecourse(D, G).;false;false
4;true,true,false;ta(I, A, J), ta(D, K, J).;false;false
4;true,false,true;publication(M, A), publication(N, L).;false;false
5;;advisedby(A, B) :- professor(B), student(A).;true;false
5;true;publication(C, A), publication(C, B).;true;true
5;true,false,false;ta(L, A, M).;false;false
5;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
5;true,false;publication(I, A), publication(J, B).;true;true
5;true,true,true;ta(G, F, H).;false;false
5;true,false,true;publication(I, K), publication(J, K).;false;false
6;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
6;false,false;publication(P, B).;false;false
6;true;publication(D, B), publication(D, A).;true;true
6;true,true;tempadvisedby(E, B), ta(F, A, G).;true;false
6;true,false;tempadvisedby(J, B), publication(K, J).;false;true
6;true,true,true;ta(H, E, I).;false;false
6;true,false,false;ta(L, A, M), tempadvisedby(N, B).;false;false
6;false;student(B).;false;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;true;publication(D, B), publication(D, A).;true;true
7;true,true;tempadvisedby(E, B), publication(D, E).;false;true
7;true,false;publication(H, A).;true;true
7;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
7;true,true,false;ta(F, A, G).;false;false
7;true,false,true;publication(H, I), ta(J, I, K).;false;false
7;false;professor(B).;false;false
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true;publication(C, B), publication(C, A).;true;true
8;true,false,false;tempadvisedby(L, B), publication(M, L).;false;false
8;true,true;ta(D, A, E), tempadvisedby(F, B).;true;false
8;true,false;publication(I, A), publication(J, B).;true;true
8;true,true,true;ta(G, F, H).;false;false
8;true,false,true;publication(I, K), publication(J, K).;false;false
9;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
9;false,false;publication(P, B).;false;false
9;true;publication(D, B), publication(D, A).;true;true
9;true,true;ta(E, A, F), tempadvisedby(G, B).;true;false
9;true,false;tempadvisedby(J, B), publication(K, J).;false;true
9;true,true,true;ta(H, G, I).;false;false
9;true,false,false;ta(L, A, M), tempadvisedby(N, B).;false;false
9;false;student(B).;false;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.7929315437951615;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.6672286583325434;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else if ( haswordauthor(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.5189342160940956;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.3901282969327416;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(A, F) )
%   | | then if ( author(C, G), haswordauthor(G, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C) )
%   then if ( sametitle(D, E) )
%   | then return 0.2839180678275688;  // std dev = 3,478, 190,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=172 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.23355703062901856;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else if ( haswordauthor(A, D), haswordauthor(B, E) )
%   | then if ( haswordauthor(F, D), haswordauthor(F, E) )
%   | | then return -0.11948771227677045;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then return 0.18702322019089349;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | else if ( haswordauthor(E, F) )
%   | | then return -0.10747674645736328;  // std dev = 3,73e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.1534035466202119;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(A, F) )
%   | | then if ( haswordauthor(G, F) )
%   | | | then return -0.09759344617879874;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.12832971201073612;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else if ( haswordauthor(A, D), haswordauthor(B, E) )
%   | then if ( haswordauthor(F, D), haswordauthor(F, E) )
%   | | then return -0.0893295905190482;  // std dev = 3,73e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then return 0.10908250312559868;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | else if ( haswordauthor(E, F) )
%   | | then return -0.08232429215646046;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.678571
   AUC PR    = 0.946746
   CLL	      = -0.257046
   Precision = 0.946746 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.972644


Total learning time: 3.497 seconds
Total inference time: 2.073 seconds
AUC ROC: 0.678571


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'false,false': [0.0, 0, 0], 'true': [0.247, 12, 172], 'false,true,false': [0.0, 0, 0], 'false,true,true': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D)'}, {'false,false': [0.0, 0, 0], 'true': [0.247, 12, 172], 'false,true': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(A, D)', 'true,true': 'haswordauthor(B, D)'}, {'true,true,true': [3.349, 12, 172], 'true,true,false': [0.0, 6, 0], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)', 'true,false,true': 'author(C, G), haswordauthor(G, F)', 'true,true': 'haswordauthor(E, D)', 'true,false': 'haswordauthor(A, F)'}, {'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 6, 0], 'true,true,true': [3.349, 12, 172], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C)', 'true': 'sametitle(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [3.478, 18, 172], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D), haswordauthor(B, E)', 'false,true': 'haswordauthor(F, D), haswordauthor(F, E)'}, {'false,false': [0.0, 0, 0], 'true': [0.247, 12, 172], 'false,true,false': [0.0, 0, 0], 'false,true,true': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)', 'true,false': 'haswordauthor(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [3.73e-09, 6, 0], 'true,true': [0.247, 12, 172], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)', 'true,false,true': 'haswordauthor(G, F)', 'true,true': 'haswordauthor(E, D)', 'true,false': 'haswordauthor(A, F)'}, {'true,false,true,true': [2.63e-09, 6, 0], 'true,false,true,false': [0.0, 0, 0], 'true,true,true': [3.349, 12, 172], 'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D), haswordauthor(B, E)', 'false,true': 'haswordauthor(F, D), haswordauthor(F, E)'}, {'false,false': [0.0, 0, 0], 'true': [0.247, 12, 172], 'false,true,false': [0.0, 0, 0], 'false,true,true': [3.73e-09, 6, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)', 'true,false': 'haswordauthor(E, F)'}, {'true,false,false': [0.0, 0, 0], 'true,false,true': [0.0, 6, 0], 'true,true': [0.247, 12, 172], 'false': [0.0, 0, 0]}]]
[{'': [0.060964083175810056, -6.938893903907228e-18], 'false': [-6.938893903907228e-18, nan], 'false,true': [-6.938893903907228e-18, nan]}, {'': [0.06096408317580048, -2.3129646346357427e-18], 'false': [-2.3129646346357427e-18, nan]}, {'': [0.07122502219237517, nan], 'true': [0.07122502219237517, nan], 'true,true': [0.06096408317580515, 0.0]}, {'': [0.06643335011940064, nan], 'true': [0.06096408317580519, 0.0], 'true,false,true': [nan, 0.0], 'true,true': [0.06096408317580519, nan], 'true,false': [0.0, nan]}, {'': [0.0636639428409874, nan], 'true': [0.0636639428409874, nan]}, {'': [0.060964083175803346, -4.625929269271485e-18], 'false': [-4.625929269271485e-18, nan], 'false,true': [-4.625929269271485e-18, nan]}, {'': [0.061691261001078246, nan], 'true': [0.060964083175803624, 2.3129646346357427e-18], 'true,false': [2.3129646346357427e-18, nan]}, {'': [0.060965534216654516, nan], 'true': [0.06096408317580347, 1.1564823173178713e-18], 'true,false,true': [1.1564823173178713e-18, nan], 'true,true': [0.06096408317580347, nan], 'true,false': [1.1564823173178713e-18, nan]}, {'': [0.0609640831758036, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan], 'false,true': [2.3129646346357427e-18, nan]}, {'': [0.060159310567295586, nan], 'true': [0.0609640831758034, -2.3129646346357427e-18], 'true,false': [-2.3129646346357427e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true', '2;;sameauthor(A, B) :- haswordauthor(B, D).;true;true', '3;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(B, D).;true;true', '5;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true', '6;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true', '7;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true', '8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true', '9;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,92e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.8581489350995116;  // std dev = 2,23e-07, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.5854216623722396;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.524815601766179;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.719473412210954;  // std dev = 2,06e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.7194734122109547;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.498380757744019;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.448295606241962;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.7194734122109544;  // std dev = 4,21e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.5553664367462835;  // std dev = 4,04e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.20413677148387982;  // std dev = 1,336, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.5049213461631386;  // std dev = 2,315, 80,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=73 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.4175135841583099;  // std dev = 2,15e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.13433527741952198;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.3175108603002;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.4298302663544891;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.2798961822441781;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.2464703254666523;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.429830266354489;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3207118471601504;  // std dev = 4,21e-08, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.4432293870286788;  // std dev = 0,046, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.17956090776868913;  // std dev = 0,518, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return 0.29003024881375794;  // std dev = 1,572, 45,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.3311971841092126;  // std dev = 1,581, 35,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.2551722425694897;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.14428567719281096;  // std dev = 0,011, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.22195602147014556;  // std dev = 0,941, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.2684689879315005;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.13855908160185154;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.11895676274893678;  // std dev = 1,564, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.26550305606719;  // std dev = 0,055, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.2097577156325357;  // std dev = 1,23e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.12737393594310836;  // std dev = 0,010, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.16844825970485075;  // std dev = 0,935, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( author(I, A), venue(I, H) )
%   | | | then return 0.27213744871437456;  // std dev = 0,260, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.16015851105179307;  // std dev = 1,453, 32,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | else if ( haswordauthor(B, J), haswordvenue(K, J) )
%   | | | then return 0.09001758988603718;  // std dev = 1,564, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.21705702757225578;  // std dev = 0,048, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.1770964977452772;  // std dev = 8,16e-08, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.11387907040657567;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1277827666213538;  // std dev = 0,934, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( author(I, B), venue(I, H) )
%   | | | then return 0.2516378448960038;  // std dev = 0,330, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.12224415592162387;  // std dev = 1,523, 33,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=29 */
%   | | else if ( haswordauthor(A, J), haswordvenue(K, J) )
%   | | | then return 0.05961816336989115;  // std dev = 1,459, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.18244946393274852;  // std dev = 0,043, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.1527438580936713;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.10288568771100938;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09725548347833292;  // std dev = 0,935, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then return 0.04861645954063308;  // std dev = 0,561, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.1435072629279943;  // std dev = 1,482, 44,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.11544558604002397;  // std dev = 1,487, 31,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.13400703000801115;  // std dev = 3,65e-08, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.09377196763895213;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0743563238221719;  // std dev = 0,937, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.14769498284519653;  // std dev = 0,059, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.021996317279470278;  // std dev = 1,460, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return -9.633206815444032E-6;  // std dev = 1,536, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.14366051720223813;  // std dev = 0,052, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.548019
   AUC PR    = 0.917685
   CLL	      = -0.506198
   Precision = 0.942959 at threshold = 0.5
   Recall    = 0.826563
   F1        = 0.880933


Total learning time: 8.167 seconds
Total inference time: 3.512 seconds
AUC ROC: 0.548019


Refined model AUC ROC: 0.548019


Dataset: 13_uwcse_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:44:52
{'Inference time': 3.512, 'parameter': {'Inference time': 2.073, 'F1': 0.972644, 'Precision': [0.946746, 0.5], 'CLL': -0.257046, 'AUC PR': 0.946746, 'Recall': 1.0, 'AUC ROC': 0.678571, 'Learning time': 3.497}, 'F1': 0.880933, 'Precision': [0.942959, 0.5], 'CLL': -0.506198, 'AUC PR': 0.917685, 'Recall': 0.826563, 'AUC ROC': 0.548019, 'Learning time': 11.664}


