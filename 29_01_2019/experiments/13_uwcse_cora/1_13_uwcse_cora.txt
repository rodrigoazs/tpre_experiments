Starting experiment #1 for 13_uwcse_cora

Start learning from source dataset

Source train facts examples: 2274
Source train pos examples: 113
Source train neg examples: 113

WILL Produced-Tree #1
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), ta(E, A, F) )
%   | | then if ( ta(G, D, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(I, A), tempadvisedby(J, B) )
%   | | then if ( publication(I, K), ta(L, K, M) )
%   | | | then return 0.7470378239884012;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( publication(N, B) )
%   | | | then return 0.7734031723876481;  // std dev = 2,139, 59,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=54 */
%   | | | else return 0.6273797043302815;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else return -0.14185106490048768;  // std dev = 7,30e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR advisedby(A, B):
%   if ( student(A), professor(B) )
%   then if ( tempadvisedby(C, B), ta(D, C, E) )
%   | then if ( ta(F, A, G), ta(F, H, E) )
%   | | then if ( ta(D, H, I) )
%   | | | then return 0.5261862825807958;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7312209353581769;  // std dev = 0,024, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.7308104757005569;  // std dev = 0,064, 26,000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( publication(J, A), publication(J, B) )
%   | | then if ( tempadvisedby(K, B), ta(L, A, M) )
%   | | | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7194734122109543;  // std dev = 4,21e-08, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tempadvisedby(N, B), publication(P, A) )
%   | | | then return 0.36908066213317675;  // std dev = 1,530, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.6022753891158077;  // std dev = 2,439, 50,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=43 */
%   else return -0.12544463852839158;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #3
% FOR advisedby(A, B):
%   if ( student(A), hasposition(B, C) )
%   then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | then if ( ta(G, A, H), ta(G, I, F) )
%   | | then if ( samecourse(E, G) )
%   | | | then return 0.4104895662080564;  // std dev = 0,881, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5670573234148749;  // std dev = 0,030, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5667517210998663;  // std dev = 0,081, 26,000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( publication(J, A), tempadvisedby(K, B) )
%   | | then if ( publication(J, B) )
%   | | | then return 0.5081090089455164;  // std dev = 0,915, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.3024623706773498;  // std dev = 1,492, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else if ( hasposition(L, C), tempadvisedby(M, L) )
%   | | | then return 0.5171363622026371;  // std dev = 1,893, 50,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=46 */
%   | | | else return 0.41333218051658055;  // std dev = 1,254, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( professor(B) )
%   | then return -0.06665108093539125;  // std dev = 0,234, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else return -0.11231637819360621;  // std dev = 7,30e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), publication(C, D) )
%   | | then return 0.4832804849449028;  // std dev = 0,087, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( ta(E, A, F), tempadvisedby(G, B) )
%   | | | then return 0.3708118645753268;  // std dev = 0,910, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4231366907787059;  // std dev = 0,050, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( publication(H, A) )
%   | | then if ( publication(H, I), professor(I) )
%   | | | then return 0.17622837139648692;  // std dev = 1,781, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0.5323405353860747;  // std dev = 0,145, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tempadvisedby(J, B) )
%   | | | then return 0.4000172157399381;  // std dev = 1,323, 34,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0.3525662203675458;  // std dev = 1,769, 27,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   else return -0.10198219881178268;  // std dev = 0,012, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | then if ( ta(E, A, G) )
%   | | then return 0.2149939677065714;  // std dev = 0,885, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.332732152637391;  // std dev = 0,110, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( publication(H, B), tempadvisedby(I, B) )
%   | | then if ( publication(H, A), publication(J, I) )
%   | | | then return 0.3577085523634852;  // std dev = 0,076, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.19789244101110526;  // std dev = 1,749, 24,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | else if ( hasposition(K, C), tempadvisedby(L, K) )
%   | | | then return 0.30910680035438753;  // std dev = 1,735, 45,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.23206130428951025;  // std dev = 1,268, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( professor(B) )
%   | then if ( publication(M, B) )
%   | | then return -0.09657013203512142;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.014897892068976293;  // std dev = 0,720, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.09265882983204124;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #6
% FOR advisedby(A, B):
%   if ( student(A), hasposition(B, C) )
%   then if ( publication(D, B), publication(D, A) )
%   | then if ( tempadvisedby(E, B), ta(F, E, G) )
%   | | then return 0.26767040220880567;  // std dev = 0,041, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( publication(D, H), ta(I, H, J) )
%   | | | then return 0.20569362020395165;  // std dev = 0,886, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.26938131932381126;  // std dev = 0,052, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tempadvisedby(K, B), publication(L, K) )
%   | | then return 0.0693360974427971;  // std dev = 0,819, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( ta(M, A, N), tempadvisedby(P, B) )
%   | | | then return 0.2844288150902326;  // std dev = 0,987, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.19486377453802894;  // std dev = 2,431, 57,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=48 */
%   else if ( professor(B) )
%   | then if ( publication(Q, B) )
%   | | then return -0.08846692590673008;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.012026077045894368;  // std dev = 0,720, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.08515721377149994;  // std dev = 4,71e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #7
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( publication(C, D), tempadvisedby(D, B) )
%   | | then return 0.24700586597319538;  // std dev = 0,068, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( ta(E, A, F), tempadvisedby(G, B) )
%   | | | then return 0.1734003772351576;  // std dev = 0,901, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.21491859365335467;  // std dev = 0,076, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( publication(H, A), publication(I, B) )
%   | | then if ( publication(H, J), publication(I, J) )
%   | | | then return -0.18595496281722723;  // std dev = 1,016, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.2477333207953568;  // std dev = 0,600, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( ta(K, A, L) )
%   | | | then return 0.20835979699080798;  // std dev = 1,330, 31,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.15502778982411985;  // std dev = 2,051, 38,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=32 */
%   else return -0.07918613329145163;  // std dev = 0,021, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #8
% FOR advisedby(A, B):
%   if ( hasposition(B, C), student(A) )
%   then if ( tempadvisedby(D, B), ta(E, D, F) )
%   | then if ( ta(E, A, G) )
%   | | then return 0.06499398797144251;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.18905294830977348;  // std dev = 0,120, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( publication(H, B), tempadvisedby(I, B) )
%   | | then if ( ta(J, A, K) )
%   | | | then return 0.153432120270879;  // std dev = 1,167, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.0513752449967113;  // std dev = 1,173, 15,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | else if ( hasposition(L, C), tempadvisedby(M, L) )
%   | | | then return 0.16310759318802573;  // std dev = 1,694, 45,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.0903349648351193;  // std dev = 1,264, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( professor(B) )
%   | then if ( publication(N, B) )
%   | | then return -0.07584751271811062;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.013637163037344377;  // std dev = 0,714, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.07319633081302195;  // std dev = 5,00e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR advisedby(A, B):
%   if ( professor(B), student(A) )
%   then if ( publication(C, B), publication(C, A) )
%   | then if ( tempadvisedby(D, B), ta(E, A, F) )
%   | | then if ( ta(G, D, H) )
%   | | | then return 0.1971244023260826;  // std dev = 0,126, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.03933120774035097;  // std dev = 0,869, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.1602128965980801;  // std dev = 0,097, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(I, A) )
%   | | then if ( publication(I, J), ta(K, J, L) )
%   | | | then return 0.16154413781339735;  // std dev = 1,187, 15,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.12355796105557985;  // std dev = 1,075, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( projectmember(M, B) )
%   | | | then return 0.19325247813762367;  // std dev = 0,060, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.11825462247598317;  // std dev = 2,172, 56,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=50 */
%   else return -0.06879860274549207;  // std dev = 0,023, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #10
% FOR advisedby(A, B):
%   if ( student(A), hasposition(B, C) )
%   then if ( publication(D, A), publication(D, B) )
%   | then if ( tempadvisedby(E, B), ta(F, A, G) )
%   | | then if ( ta(H, E, I) )
%   | | | then return 0.1681473353725159;  // std dev = 0,112, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.03227912309567225;  // std dev = 0,870, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.1398542146125693;  // std dev = 0,087, 30,000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( publication(J, A), publication(K, B) )
%   | | then if ( hasposition(L, C), publication(J, L) )
%   | | | then return -0.15173761837077215;  // std dev = 1,097, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.21297796020165555;  // std dev = 0,132, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( hasposition(M, C), tempadvisedby(N, M) )
%   | | | then return 0.11573684062457337;  // std dev = 1,927, 59,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=54 */
%   | | | else return 0.014132052075387577;  // std dev = 1,248, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( professor(B) )
%   | then return -0.05609023411015068;  // std dev = 0,215, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else return -0.0641283743830873;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */


Starting fold 1

Target train facts examples: 7254
Target train pos examples: 209
Target train neg examples: 16

Target test facts examples: 34492
Target test pos	 examples: 603
Target test neg examples: 58

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,false,false;publication(N, B).;false;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true;publication(C, B), publication(C, A).;true;true
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true,true;ta(F, A, G), ta(F, H, E).;true;false
1;true,false,false;tempadvisedby(N, B), publication(P, A).;false;false
1;true,true,true;ta(D, H, I).;false;false
1;true,false,true;tempadvisedby(K, B), ta(L, A, M).;false;false
1;true,false;publication(J, A), publication(J, B).;true;true
1;true;tempadvisedby(C, B), ta(D, C, E).;true;true
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true,true;ta(G, A, H), ta(G, I, F).;true;false
2;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
2;true,true,true;samecourse(E, G).;false;false
2;true,false,true;publication(J, B).;false;false
2;true,false;publication(J, A), tempadvisedby(K, B).;true;true
2;false;professor(B).;false;false
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true,true;tempadvisedby(D, B), publication(C, D).;false;true
3;true,false,false;tempadvisedby(J, B).;false;false
3;true,true,false;ta(E, A, F), tempadvisedby(G, B).;false;false
3;true,false,true;publication(H, I), professor(I).;false;false
3;true,false;publication(H, A).;true;true
3;true;publication(C, B), publication(C, A).;true;true
4;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
4;true,true;ta(E, A, G).;false;false
4;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
4;true,false,true;publication(H, A), publication(J, I).;false;false
4;false,true;publication(M, B).;false;false
4;true,false;publication(H, B), tempadvisedby(I, B).;true;true
4;false;professor(B).;true;false
4;true;tempadvisedby(D, B), ta(E, D, F).;true;true
5;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
5;true,true;tempadvisedby(E, B), ta(F, E, G).;false;true
5;true,false,false;ta(M, A, N), tempadvisedby(P, B).;false;false
5;true,true,false;publication(D, H), ta(I, H, J).;false;false
5;false,true;publication(Q, B).;false;false
5;true,false;tempadvisedby(K, B), publication(L, K).;false;true
5;false;professor(B).;true;false
5;true;publication(D, B), publication(D, A).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true,true;publication(C, D), tempadvisedby(D, B).;false;true
6;true,false,false;ta(K, A, L).;false;false
6;true,true,false;ta(E, A, F), tempadvisedby(G, B).;false;false
6;true,false,true;publication(H, J), publication(I, J).;false;false
6;true,false;publication(H, A), publication(I, B).;true;true
6;true;publication(C, B), publication(C, A).;true;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;true,true;ta(E, A, G).;false;false
7;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
7;true,false,true;ta(J, A, K).;false;false
7;false,true;publication(N, B).;false;false
7;true,false;publication(H, B), tempadvisedby(I, B).;true;true
7;false;professor(B).;true;false
7;true;tempadvisedby(D, B), ta(E, D, F).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
8;true,false,false;projectmember(M, B).;false;false
8;true,true,true;ta(G, D, H).;false;false
8;true,false,true;publication(I, J), ta(K, J, L).;false;false
8;true,false;publication(I, A).;true;true
8;true;publication(C, B), publication(C, A).;true;true
9;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
9;true,true;tempadvisedby(E, B), ta(F, A, G).;true;false
9;true,false,false;hasposition(M, C), tempadvisedby(N, M).;false;false
9;true,true,true;ta(H, E, I).;false;false
9;true,false,true;hasposition(L, C), publication(J, L).;false;false
9;true,false;publication(J, A), publication(K, B).;true;true
9;false;professor(B).;false;false
9;true;publication(D, A), publication(D, B).;true;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995118;  // std dev = 3,65e-08, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.7702368471874215;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109551;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( author(D, A) )
%   | then return 0.6489578875773111;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( sametitle(D, E) )
%   | then return 0.5155600307274352;  // std dev = 3,831, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then if ( author(C, D) )
%   | then return 0.42722494735728456;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( author(E, A) )
%   | then if ( author(E, F) )
%   | | then return 0.37845010729489653;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( author(D, B) )
%   | then if ( author(D, A), author(E, F) )
%   | | then return 0.3273032934102748;  // std dev = 8,43e-08, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.2865304416566997;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( author(D, B), author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.25966496711937026;  // std dev = 2,98e-08, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( author(F, G) )
%   | | then return 0.2221700526141108;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then if ( author(C, D) )
%   | then return 0.21292633492936372;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( author(E, A), author(F, B) )
%   | then if ( author(E, G), author(F, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.17674433641796822;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( author(D, B) )
%   | then return 0.15060958793219356;  // std dev = 0,255, 225,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=209 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.15830268889664809;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.1180794070615999;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( author(D, A), author(D, B) )
%   | then return 0.13833191120084368;  // std dev = 6,18e-09, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( author(E, A), author(F, B) )
%   | | then if ( haswordauthor(G, C), author(E, G) )
%   | | | then return 0.09943536782744947;  // std dev = 3,820, 182,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=166 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.784068
   AUC PR    = 0.970691
   CLL	      = -0.312195
   Precision = 0.912254 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.954114


Total learning time: 3.061 seconds
Total inference time: 6.002 seconds
AUC ROC: 0.784068


Results scoring model
   AUC ROC   = 0.602871
   AUC PR    = 0.957477
   CLL	      = -0.289755
   Precision = 0.928889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.963134


Total scoring time: 1.031 seconds
Parameter learned model CLL: -0.289755


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(D, A)', 'false,true': 'author(D, E)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [3.82, 16, 166], 'true': [3.65e-08, 0, 43]}], ['sameauthor(A, B)', {'': 'author(C, A), author(C, B)', 'false': 'author(D, A)'}, {'false,false': [0.0, 0, 0], 'true': [0.0, 0, 43], 'false,true': [3.82, 16, 166]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true': 'sametitle(D, E)'}, {'true,true': [3.831, 16, 209], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(E, A)', 'true': 'author(C, D)', 'false,true': 'author(E, F)'}, {'true,true': [0.0, 0, 43], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [3.82, 16, 166]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true,true': 'author(D, A), author(E, F)', 'true': 'author(D, B)'}, {'true,true,false': [3.82, 16, 166], 'true,true,true': [8.43e-08, 0, 43], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true,true': 'author(D, E)', 'true,false': 'author(F, G)', 'true': 'author(D, B), author(D, A)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true,true': [2.98e-08, 0, 43], 'false': [0.0, 0, 0], 'true,false,true': [3.82, 16, 166]}], ['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(E, A), author(F, B)', 'true': 'author(C, D)', 'false,true': 'author(E, G), author(F, G)'}, {'true,true': [0.0, 0, 43], 'false,true,false': [3.82, 16, 166], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true': 'author(D, B)'}, {'true,true': [0.255, 16, 209], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(D, A)', 'false,true': 'author(D, E)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [3.82, 16, 166], 'true': [0.0, 0, 43]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true': 'author(D, A), author(D, B)', 'true,false': 'author(E, A), author(F, B)', 'true,false,true': 'haswordauthor(G, C), author(E, G)'}, {'true,true': [6.18e-09, 0, 43], 'false': [0.0, 0, 0], 'true,false,true,true': [3.82, 16, 166], 'true,false,false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0]}]]
[{'': [1.2393187251629655e-15, 0.08018355271103159], 'false': [0.08018355271103159, nan], 'false,true': [0.08018355271103159, nan]}, {'': [-9.914549801303723e-16, 0.08018355271102807], 'false': [0.08018355271102807, nan]}, {'': [0.06523395655346617, nan], 'true': [0.06523395655346617, nan]}, {'': [-1.2393187251629654e-16, 0.08018355271102624], 'false': [0.08018355271102624, nan], 'true': [-1.2393187251629654e-16, nan], 'false,true': [0.08018355271102624, nan]}, {'': [0.06511657530885614, nan], 'true,true': [1.652424966883954e-16, 0.08018355271102434], 'true': [0.06511657530885614, nan]}, {'': [0.06507691479086929, nan], 'true,true': [2.0655312086049424e-17, nan], 'true,false': [0.0801835527110254, nan], 'true': [2.0655312086049424e-17, 0.0801835527110254]}, {'': [0.0, 0.08018355271102523], 'false': [0.08018355271102523, nan], 'true': [0.0, nan], 'false,true': [nan, 0.08018355271102523]}, {'': [0.06505565321092927, nan], 'true': [0.06505565321092927, nan]}, {'': [-3.6146796150586495e-17, 0.08018355271102524], 'false': [0.08018355271102524, nan], 'false,true': [0.08018355271102524, nan]}, {'': [0.06509346687325693, nan], 'true,false,true': [0.08018355271102502, nan], 'true,false': [0.08018355271102502, nan], 'true': [4.131062417209885e-17, 0.08018355271102502]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
1;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true
3;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
4;;sameauthor(A, B) :- author(D, A), author(E, F).;true;true
5;;sameauthor(A, B) :- author(D, B), author(D, A).;true;true
6;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
8;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
9;;sameauthor(A, B) :- author(D, A), author(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995118;  // std dev = 2,31e-07, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5724346493852267;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.8581489350995112;  // std dev = 4,62e-07, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109551;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.7733921696315487;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.48382654410150666;  // std dev = 3,364, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.7194734122109542;  // std dev = 7,30e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.7194734122109546;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( author(E, B), title(E, D) )
%   | | then return 0.5928761360959482;  // std dev = 0,065, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( author(F, A), title(F, D) )
%   | | | then return 0.6125454330646455;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41370784114808123;  // std dev = 3,391, 68,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=52 */
%   | else return 0.5553664367462846;  // std dev = 5,16e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.43003921341648116;  // std dev = 0,113, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.46537974693957906;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2874583069765472;  // std dev = 3,348, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.41751358415831025;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.4175135841583097;  // std dev = 2,73e-07, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, A), author(D, E) )
%   then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | then if ( haswordauthor(A, F) )
%   | | then if ( author(H, A), title(H, G) )
%   | | | then return 0.36414981209327535;  // std dev = 0,094, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.24386837245366952;  // std dev = 3,375, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | | else return 0.3207118471601495;  // std dev = 3,65e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.3201842055593859;  // std dev = 0,012, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.26832645648142167;  // std dev = 0,142, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.30871598850301474;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15341799346519894;  // std dev = 3,342, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.2551722425694896;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.25527253875335604;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.2191115188756065;  // std dev = 0,124, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.2686723314340126;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11472046383921507;  // std dev = 3,340, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.20975771563253565;  // std dev = 1,83e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.2098285609455563;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( author(E, A), title(E, D) )
%   | | then return 0.20444562059363558;  // std dev = 0,076, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.11348530630165489;  // std dev = 0,397, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.17617467196418893;  // std dev = 0,023, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.16236833986256974;  // std dev = 0,128, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.1924744769738691;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.061274105607823974;  // std dev = 3,341, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.15274385809367083;  // std dev = 2,11e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.15290936374767672;  // std dev = 1,05e-07, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.14152921171763547;  // std dev = 0,115, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.16431237032622414;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.04762089219499847;  // std dev = 3,341, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.1340070300080111;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.1341362244509186;  // std dev = 7,45e-08, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */


Results
   AUC ROC   = 0.404758
   AUC PR    = 0.892608
   CLL	      = -0.368739
   Precision = 0.912254 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.954114


Total learning time: 51.551 seconds
Total inference time: 237.738 seconds
AUC ROC: 0.404758


Results scoring model
   AUC ROC   = 0.913876
   AUC PR    = 0.993341
   CLL	      = -0.243832
   Precision = 0.928889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.963134


Total scoring time: 3.655 seconds
Refined model CLL: -0.243832


Refining iteration 2
********************************
Candidate for revision
0;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
0;false;haswordauthor(A, D), haswordtitle(E, D).;true;true
0;false,true,true;author(F, A), title(F, E).;true;true
0;false,true;haswordauthor(B, D).;true;true
1;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true
1;false;haswordauthor(A, D), haswordtitle(E, D).;true;true
1;false,true,true;author(F, B), title(F, E).;true;true
1;false,true;haswordauthor(B, D).;true;true
2;;sameauthor(A, B) :- haswordauthor(B, C), haswordtitle(D, C).;true;true
2;true,true;author(E, B), title(E, D).;true;true
2;true,true,false;author(F, A), title(F, D).;true;true
2;true;haswordauthor(A, C).;true;true
3;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
3;false;haswordauthor(B, D), haswordtitle(E, D).;true;true
3;false,true,true;author(F, B), title(F, E).;true;true
3;false,true;haswordauthor(A, D).;true;true
4;;sameauthor(A, B) :- haswordauthor(B, F), haswordtitle(G, F).;true;true
4;true,true;author(H, A), title(H, G).;true;true
4;true;haswordauthor(A, F).;true;true
5;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
5;false;haswordauthor(B, D), haswordtitle(E, D).;true;true
5;false,true,true;author(F, A), title(F, E).;true;true
5;false,true;haswordauthor(A, D).;true;true
6;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
6;false;haswordauthor(B, D), haswordtitle(E, D).;true;true
6;false,true,true;author(F, B), title(F, E).;true;true
6;false,true;haswordauthor(A, D).;true;true
7;;sameauthor(A, B) :- haswordauthor(B, C), haswordtitle(D, C).;true;true
7;true,true;author(E, A), title(E, D).;true;true
7;true;haswordauthor(A, C).;true;true
8;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
8;false;haswordauthor(B, D), haswordtitle(E, D).;true;true
8;false,true,true;author(F, A), title(F, E).;true;true
8;false,true;haswordauthor(A, D).;true;true
9;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true
9;false;haswordauthor(B, D), haswordtitle(E, D).;true;true
9;false,true,true;author(F, A), title(F, E).;true;true
9;false,true;haswordauthor(A, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995118;  // std dev = 2,31e-07, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5724346493852267;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.8581489350995112;  // std dev = 4,62e-07, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109551;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.7733921696315487;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.48382654410150666;  // std dev = 3,364, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.7194734122109542;  // std dev = 7,30e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.7194734122109546;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( author(E, B), title(E, D) )
%   | | then return 0.5928761360959482;  // std dev = 0,065, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( author(F, A), title(F, D) )
%   | | | then return 0.6125454330646455;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41370784114808123;  // std dev = 3,391, 68,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=52 */
%   | else return 0.5553664367462846;  // std dev = 5,16e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.43003921341648116;  // std dev = 0,113, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.46537974693957906;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2874583069765472;  // std dev = 3,348, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.41751358415831025;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.4175135841583097;  // std dev = 2,73e-07, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( author(E, A), title(E, D) )
%   | | then return 0.36414981209327535;  // std dev = 0,094, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.24386837245366952;  // std dev = 0,398, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | else return 0.3207118471601495;  // std dev = 3,65e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.3201842055593859;  // std dev = 0,012, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.26832645648142167;  // std dev = 0,142, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.30871598850301474;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15341799346519894;  // std dev = 3,342, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.2551722425694896;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.25527253875335604;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.2191115188756065;  // std dev = 0,124, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, B), title(F, E) )
%   | | | then return 0.2686723314340126;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11472046383921507;  // std dev = 3,340, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.20975771563253565;  // std dev = 1,83e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.2098285609455563;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( author(E, A), title(E, D) )
%   | | then return 0.20444562059363558;  // std dev = 0,076, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.11348530630165489;  // std dev = 0,397, 72,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=56 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return 0.17617467196418893;  // std dev = 0,023, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.16236833986256974;  // std dev = 0,128, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.1924744769738691;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.061274105607823974;  // std dev = 3,341, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.15274385809367083;  // std dev = 2,11e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.15290936374767672;  // std dev = 1,05e-07, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.14152921171763547;  // std dev = 0,115, 43,000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( author(F, A), title(F, E) )
%   | | | then return 0.16431237032622414;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.04762089219499847;  // std dev = 3,341, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | | else return 0.1340070300080111;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.1341362244509186;  // std dev = 7,45e-08, 104,000 (wgt'ed) examples reached here.  /* #pos=104 */


Results
   AUC ROC   = 0.404758
   AUC PR    = 0.892608
   CLL	      = -0.368739
   Precision = 0.912254 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.954114


Total learning time: 1.853 seconds
Total inference time: 3.099 seconds
AUC ROC: 0.404758


Results scoring model
   AUC ROC   = 0.913876
   AUC PR    = 0.993341
   CLL	      = -0.243832
   Precision = 0.928889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.963134


Total scoring time: 0.909 seconds
Refined model CLL: -0.243832


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.404758
   AUC PR    = 0.892608
   CLL	      = -0.368739
   Precision = 0.912254 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.954114


Total learning time: 62.06 seconds
Total inference time: 237.738 seconds
AUC ROC: 0.404758
Total revision time: 62.06
Best scored revision CLL: -0.243832


Dataset: 13_uwcse_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 01:13:09
{'Inference time': 237.738, 'F1': 0.954114, 'Precision': [0.912254, 0.5], 'AUC PR': 0.892608, 'CLL': -0.368739, 'Learning time': 62.06, 'AUC ROC': 0.404758, 'parameter': {'Inference time': 6.002, 'F1': 0.954114, 'Precision': [0.912254, 0.5], 'AUC PR': 0.970691, 'CLL': -0.312195, 'Learning time': 3.061, 'AUC ROC': 0.784068, 'Recall': 1.0}, 'Recall': 1.0}


Start learning from scratch in target domain

Starting fold 2

Target train facts examples: 8894
Target train pos examples: 122
Target train neg examples: 20

Target test facts examples: 32852
Target test pos	 examples: 690
Target test neg examples: 54

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,false,false;publication(N, B).;false;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true;publication(C, B), publication(C, A).;true;true
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true,true;ta(F, A, G), ta(F, H, E).;true;false
1;true,false,false;tempadvisedby(N, B), publication(P, A).;false;false
1;true,true,true;ta(D, H, I).;false;false
1;true,false,true;tempadvisedby(K, B), ta(L, A, M).;false;false
1;true,false;publication(J, A), publication(J, B).;true;true
1;true;tempadvisedby(C, B), ta(D, C, E).;true;true
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true,true;ta(G, A, H), ta(G, I, F).;true;false
2;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
2;true,true,true;samecourse(E, G).;false;false
2;true,false,true;publication(J, B).;false;false
2;true,false;publication(J, A), tempadvisedby(K, B).;true;true
2;false;professor(B).;false;false
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true,true;tempadvisedby(D, B), publication(C, D).;false;true
3;true,false,false;tempadvisedby(J, B).;false;false
3;true,true,false;ta(E, A, F), tempadvisedby(G, B).;false;false
3;true,false,true;publication(H, I), professor(I).;false;false
3;true,false;publication(H, A).;true;true
3;true;publication(C, B), publication(C, A).;true;true
4;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
4;true,true;ta(E, A, G).;false;false
4;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
4;true,false,true;publication(H, A), publication(J, I).;false;false
4;false,true;publication(M, B).;false;false
4;true,false;publication(H, B), tempadvisedby(I, B).;true;true
4;false;professor(B).;true;false
4;true;tempadvisedby(D, B), ta(E, D, F).;true;true
5;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
5;true,true;tempadvisedby(E, B), ta(F, E, G).;false;true
5;true,false,false;ta(M, A, N), tempadvisedby(P, B).;false;false
5;true,true,false;publication(D, H), ta(I, H, J).;false;false
5;false,true;publication(Q, B).;false;false
5;true,false;tempadvisedby(K, B), publication(L, K).;false;true
5;false;professor(B).;true;false
5;true;publication(D, B), publication(D, A).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true,true;publication(C, D), tempadvisedby(D, B).;false;true
6;true,false,false;ta(K, A, L).;false;false
6;true,true,false;ta(E, A, F), tempadvisedby(G, B).;false;false
6;true,false,true;publication(H, J), publication(I, J).;false;false
6;true,false;publication(H, A), publication(I, B).;true;true
6;true;publication(C, B), publication(C, A).;true;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;true,true;ta(E, A, G).;false;false
7;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
7;true,false,true;ta(J, A, K).;false;false
7;false,true;publication(N, B).;false;false
7;true,false;publication(H, B), tempadvisedby(I, B).;true;true
7;false;professor(B).;true;false
7;true;tempadvisedby(D, B), ta(E, D, F).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
8;true,false,false;projectmember(M, B).;false;false
8;true,true,true;ta(G, D, H).;false;false
8;true,false,true;publication(I, J), ta(K, J, L).;false;false
8;true,false;publication(I, A).;true;true
8;true;publication(C, B), publication(C, A).;true;true
9;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
9;true,true;tempadvisedby(E, B), ta(F, A, G).;true;false
9;true,false,false;hasposition(M, C), tempadvisedby(N, M).;false;false
9;true,true,true;ta(H, E, I).;false;false
9;true,false,true;hasposition(L, C), publication(J, L).;false;false
9;true,false;publication(J, A), publication(K, B).;true;true
9;false;professor(B).;false;false
9;true;publication(D, A), publication(D, B).;true;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.7966104735610489;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.6701860162815748;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else if ( haswordauthor(A, D) )
%   | then return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( sametitle(D, E) )
%   | then return 0.4674804652769428;  // std dev = 3,452, 142,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.40494264752730585;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordauthor(A, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return -0.1680074394666848;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D) )
%   | then if ( haswordauthor(A, D), haswordauthor(E, F) )
%   | | then return 0.30683067970643824;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | | else return -0.14581330925155303;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.23872359520191166;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(F, G) )
%   | | then return -0.12857291871794044;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.19106520665248805;  // std dev = 2,740, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordauthor(A, E), haswordauthor(B, F) )
%   | then if ( haswordauthor(G, E), haswordauthor(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11484199836568047;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D) )
%   | then return 0.13471565858560952;  // std dev = 0,241, 142,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.134608112070122;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.11687773734348883;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then return 0.11424753903171922;  // std dev = 0,240, 130,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=122 */
%   | else if ( haswordauthor(A, E), haswordauthor(B, F) )
%   | | then if ( author(C, G), haswordauthor(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10534353993801983;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.62963
   AUC PR    = 0.945205
   CLL	      = -0.262216
   Precision = 0.945205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971831


Total learning time: 2.049 seconds
Total inference time: 1.648 seconds
AUC ROC: 0.62963


Results scoring model
   AUC ROC   = 0.8
   AUC PR    = 0.938462
   CLL	      = -0.261446
   Precision = 0.938462 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.968254


Total scoring time: 0.843 seconds
Parameter learned model CLL: -0.261446


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 12, 0], 'true': [0.24, 8, 122]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D)'}, {'false,false': [0.0, 0, 0], 'true': [0.24, 8, 122], 'false,true': [5.27e-09, 12, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'sametitle(D, E)'}, {'true,true': [3.452, 20, 122], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, E)', 'true': 'haswordauthor(D, C)', 'false,true': 'haswordauthor(F, E)'}, {'true,true': [2.74, 8, 122], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 12, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(A, D), haswordauthor(E, F)', 'true': 'haswordauthor(B, D)'}, {'true,true,false': [1.05e-08, 12, 0], 'true,true,true': [2.74, 8, 122], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(E, D)', 'true,false': 'haswordauthor(F, G)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true,true': [2.74, 8, 122], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 12, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, E), haswordauthor(B, F)', 'true': 'haswordauthor(D, C)', 'false,true': 'haswordauthor(G, E), haswordauthor(G, F)'}, {'true,true': [2.74, 8, 122], 'false,true,false': [0.0, 12, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(B, D)'}, {'true,true': [0.241, 20, 122], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 12, 0], 'true': [0.24, 8, 122]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)', 'true,false': 'haswordauthor(A, E), haswordauthor(B, F)', 'true,false,true': 'author(C, G), haswordauthor(G, E)'}, {'true,true': [0.24, 8, 122], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,false': [0.0, 12, 0]}]]
[{'': [0.05775147928994478, -1.1564823173178714e-17], 'false': [-1.1564823173178714e-17, nan], 'false,true': [-1.1564823173178714e-17, nan]}, {'': [0.05775147928993674, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan]}, {'': [0.08390163071539002, nan], 'true': [0.08390163071539002, nan]}, {'': [0.057751479289940406, 0.0], 'false': [0.0, nan], 'false,true': [0.0, nan], 'true': [0.057751479289940406, nan]}, {'': [0.0687222462629639, nan], 'true,true': [0.057751479289941045, 9.25185853854297e-18], 'true': [0.0687222462629639, nan]}, {'': [0.06330821291148073, nan], 'true,true': [0.057751479289941544, nan], 'true,false': [-1.1564823173178714e-17, nan], 'true': [0.057751479289941544, -1.1564823173178714e-17]}, {'': [0.057751479289940705, -1.1564823173178714e-17], 'false': [-1.1564823173178714e-17, nan], 'false,true': [nan, -1.1564823173178714e-17], 'true': [0.057751479289940705, nan]}, {'': [0.05811689238533116, nan], 'true': [0.05811689238533116, nan]}, {'': [0.057751479289940934, 0.0], 'false': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.05660166064048473, nan], 'true,false,true': [nan, -2.3129646346357427e-18], 'true,false': [-2.3129646346357427e-18, nan], 'true': [0.057751479289940795, -2.3129646346357427e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(E, F).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.8581489350995122;  // std dev = 1,46e-07, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7405018762759833;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.7194734122109547;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.7194734122109542;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.6249475655895573;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.5553664367462839;  // std dev = 9,42e-08, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.5553664367462844;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4893127157293235;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.4175135841583103;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.4175135841583102;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.3686658221249624;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(D, E) )
%   then if ( haswordauthor(A, F), haswordauthor(B, F) )
%   | then if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then return 0.3207118471601494;  // std dev = 2,98e-08, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.3207118471601497;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2780496975590654;  // std dev = 2,657, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.2551722425694894;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.21383763039487122;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.1682663346557149;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.17709649774527736;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.1351817638661356;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.15274385809367094;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.11050708250003509;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.13400703000801098;  // std dev = 2,98e-08, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.09163300171566717;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.573001
   AUC PR    = 0.935755
   CLL	      = -0.25356
   Precision = 0.945205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971831


Total learning time: 5.525 seconds
Total inference time: 60.103 seconds
AUC ROC: 0.573001


Results scoring model
   AUC ROC   = 0.901639
   AUC PR    = 0.981201
   CLL	      = -0.244328
   Precision = 0.938462 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.968254


Total scoring time: 0.944 seconds
Refined model CLL: -0.244328


Refining iteration 2
********************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
0;true,false;haswordauthor(B, F), haswordvenue(G, F).;true;true
0;true;haswordauthor(A, D), haswordvenue(E, D).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
1;true,false;haswordauthor(B, F), haswordvenue(G, F).;true;true
1;true;haswordauthor(A, D), haswordvenue(E, D).;true;true
2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;true,false;haswordauthor(A, F), haswordvenue(G, F).;true;true
2;true;haswordauthor(B, D), haswordvenue(E, D).;true;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
3;true,false;haswordauthor(B, F), haswordvenue(G, F).;true;true
3;true;haswordauthor(A, D), haswordvenue(E, D).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, F), haswordauthor(B, F).;true;true
4;true,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
4;true;haswordauthor(A, G), haswordvenue(H, G).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
5;true,false;haswordauthor(B, F), haswordvenue(G, F).;true;true
5;true;haswordauthor(A, D), haswordvenue(E, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
6;true,false;haswordauthor(A, F), haswordvenue(G, F).;true;true
6;true;haswordauthor(B, D), haswordvenue(E, D).;true;true
7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;true,false;haswordauthor(B, F), haswordvenue(G, F).;true;true
7;true;haswordauthor(A, D), haswordvenue(E, D).;true;true
8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
8;true,false;haswordauthor(B, F), haswordvenue(G, F).;true;true
8;true;haswordauthor(A, D), haswordvenue(E, D).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;true,false;haswordauthor(B, F), haswordvenue(G, F).;true;true
9;true;haswordauthor(A, D), haswordvenue(E, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.8581489350995122;  // std dev = 1,46e-07, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7405018762759833;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.7194734122109547;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.7194734122109542;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.6249475655895573;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.5553664367462839;  // std dev = 9,42e-08, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.5553664367462844;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4893127157293235;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.4175135841583103;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.4175135841583102;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.3686658221249624;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.3207118471601494;  // std dev = 2,98e-08, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2780496975590654;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.2551722425694894;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.21383763039487122;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.1682663346557149;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.17709649774527736;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.1351817638661356;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.15274385809367094;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.11050708250003509;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then return 0.13400703000801098;  // std dev = 2,98e-08, 50,000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.09163300171566717;  // std dev = 0,322, 68,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.573001
   AUC PR    = 0.935755
   CLL	      = -0.25356
   Precision = 0.945205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971831


Total learning time: 1.98 seconds
Total inference time: 1.906 seconds
AUC ROC: 0.573001


Results scoring model
   AUC ROC   = 0.901639
   AUC PR    = 0.981201
   CLL	      = -0.244328
   Precision = 0.938462 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.968254


Total scoring time: 0.818 seconds
Refined model CLL: -0.244328


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.573001
   AUC PR    = 0.935755
   CLL	      = -0.25356
   Precision = 0.945205 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.971831


Total learning time: 12.159 seconds
Total inference time: 60.103 seconds
AUC ROC: 0.573001
Total revision time: 12.159
Best scored revision CLL: -0.244328


Dataset: 13_uwcse_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 01:14:26
{'Inference time': 60.103, 'F1': 0.971831, 'Precision': [0.945205, 0.5], 'AUC PR': 0.935755, 'CLL': -0.25356, 'Learning time': 12.159, 'AUC ROC': 0.573001, 'parameter': {'Inference time': 1.648, 'F1': 0.971831, 'Precision': [0.945205, 0.5], 'AUC PR': 0.945205, 'CLL': -0.262216, 'Learning time': 2.049, 'AUC ROC': 0.62963, 'Recall': 1.0}, 'Recall': 1.0}


Start learning from scratch in target domain

Starting fold 3

Target train facts examples: 9155
Target train pos examples: 151
Target train neg examples: 4

Target test facts examples: 32591
Target test pos	 examples: 661
Target test neg examples: 70

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,false,false;publication(N, B).;false;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true;publication(C, B), publication(C, A).;true;true
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true,true;ta(F, A, G), ta(F, H, E).;true;false
1;true,false,false;tempadvisedby(N, B), publication(P, A).;false;false
1;true,true,true;ta(D, H, I).;false;false
1;true,false,true;tempadvisedby(K, B), ta(L, A, M).;false;false
1;true,false;publication(J, A), publication(J, B).;true;true
1;true;tempadvisedby(C, B), ta(D, C, E).;true;true
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true,true;ta(G, A, H), ta(G, I, F).;true;false
2;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
2;true,true,true;samecourse(E, G).;false;false
2;true,false,true;publication(J, B).;false;false
2;true,false;publication(J, A), tempadvisedby(K, B).;true;true
2;false;professor(B).;false;false
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true,true;tempadvisedby(D, B), publication(C, D).;false;true
3;true,false,false;tempadvisedby(J, B).;false;false
3;true,true,false;ta(E, A, F), tempadvisedby(G, B).;false;false
3;true,false,true;publication(H, I), professor(I).;false;false
3;true,false;publication(H, A).;true;true
3;true;publication(C, B), publication(C, A).;true;true
4;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
4;true,true;ta(E, A, G).;false;false
4;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
4;true,false,true;publication(H, A), publication(J, I).;false;false
4;false,true;publication(M, B).;false;false
4;true,false;publication(H, B), tempadvisedby(I, B).;true;true
4;false;professor(B).;true;false
4;true;tempadvisedby(D, B), ta(E, D, F).;true;true
5;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
5;true,true;tempadvisedby(E, B), ta(F, E, G).;false;true
5;true,false,false;ta(M, A, N), tempadvisedby(P, B).;false;false
5;true,true,false;publication(D, H), ta(I, H, J).;false;false
5;false,true;publication(Q, B).;false;false
5;true,false;tempadvisedby(K, B), publication(L, K).;false;true
5;false;professor(B).;true;false
5;true;publication(D, B), publication(D, A).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true,true;publication(C, D), tempadvisedby(D, B).;false;true
6;true,false,false;ta(K, A, L).;false;false
6;true,true,false;ta(E, A, F), tempadvisedby(G, B).;false;false
6;true,false,true;publication(H, J), publication(I, J).;false;false
6;true,false;publication(H, A), publication(I, B).;true;true
6;true;publication(C, B), publication(C, A).;true;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;true,true;ta(E, A, G).;false;false
7;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
7;true,false,true;ta(J, A, K).;false;false
7;false,true;publication(N, B).;false;false
7;true,false;publication(H, B), tempadvisedby(I, B).;true;true
7;false;professor(B).;true;false
7;true;tempadvisedby(D, B), ta(E, D, F).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
8;true,false,false;projectmember(M, B).;false;false
8;true,true,true;ta(G, D, H).;false;false
8;true,false,true;publication(I, J), ta(K, J, L).;false;false
8;true,false;publication(I, A).;true;true
8;true;publication(C, B), publication(C, A).;true;true
9;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
9;true,true;tempadvisedby(E, B), ta(F, A, G).;true;false
9;true,false,false;hasposition(M, C), tempadvisedby(N, M).;false;false
9;true,true,true;ta(H, E, I).;false;false
9;true,false,true;hasposition(L, C), publication(J, L).;false;false
9;true,false;publication(J, A), publication(K, B).;true;true
9;false;professor(B).;false;false
9;true;publication(D, A), publication(D, B).;true;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995115;  // std dev = 4,21e-08, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.8248156017661773;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109548;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( author(D, A) )
%   | then return 0.6928183180467439;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( sametitle(D, E) )
%   | then return 0.5409869019586663;  // std dev = 1,969, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then if ( author(C, D) )
%   | then return 0.4210147218027735;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( author(E, A) )
%   | then if ( author(E, F) )
%   | | then return 0.40236943759266797;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( author(D, B) )
%   | then if ( author(D, A), author(E, F) )
%   | | then return 0.32308637640687027;  // std dev = 8,16e-08, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.3071838652800318;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( author(D, B), author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.2567918445610172;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( author(F, G) )
%   | | then return 0.2419112541176839;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then if ( author(C, D) )
%   | then return 0.21090112767260297;  // std dev = 3,65e-08, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( author(E, A), author(F, B) )
%   | then if ( author(E, G), author(F, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.19635261118048838;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( author(D, B) )
%   | then return 0.16673091821077893;  // std dev = 0,158, 155,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=151 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.1548399208155242;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( author(D, A) )
%   | then if ( author(D, E) )
%   | | then return 0.13843177462282644;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C) )
%   then if ( author(D, A), author(D, B) )
%   | then return 0.1356412747390596;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( author(E, A), author(F, B) )
%   | | then if ( haswordauthor(G, C), author(E, G) )
%   | | | then return 0.11962288176891847;  // std dev = 1,966, 120,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=116 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.751805
   AUC PR    = 0.963089
   CLL	      = -0.316488
   Precision = 0.904241 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.949713


Total learning time: 2.779 seconds
Total inference time: 6.859 seconds
AUC ROC: 0.751805


Results scoring model
   AUC ROC   = 0.615894
   AUC PR    = 0.985507
   CLL	      = -0.191305
   Precision = 0.974194 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.986928


Total scoring time: 1.118 seconds
Parameter learned model CLL: -0.191305


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(D, A)', 'false,true': 'author(D, E)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [1.966, 4, 116], 'true': [4.21e-08, 0, 35]}], ['sameauthor(A, B)', {'': 'author(C, A), author(C, B)', 'false': 'author(D, A)'}, {'false,false': [0.0, 0, 0], 'true': [0.0, 0, 35], 'false,true': [1.966, 4, 116]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true': 'sametitle(D, E)'}, {'true,true': [1.969, 4, 151], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(E, A)', 'true': 'author(C, D)', 'false,true': 'author(E, F)'}, {'true,true': [0.0, 0, 35], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [1.966, 4, 116]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true,true': 'author(D, A), author(E, F)', 'true': 'author(D, B)'}, {'true,true,false': [1.966, 4, 116], 'true,true,true': [8.16e-08, 0, 35], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true,true': 'author(D, E)', 'true,false': 'author(F, G)', 'true': 'author(D, B), author(D, A)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 35], 'false': [0.0, 0, 0], 'true,false,true': [1.966, 4, 116]}], ['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(E, A), author(F, B)', 'true': 'author(C, D)', 'false,true': 'author(E, G), author(F, G)'}, {'true,true': [3.65e-08, 0, 35], 'false,true,false': [1.966, 4, 116], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true': 'author(D, B)'}, {'true,true': [0.158, 4, 151], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B), author(C, A)', 'false': 'author(D, A)', 'false,true': 'author(D, E)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [1.966, 4, 116], 'true': [0.0, 0, 35]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C)', 'true': 'author(D, A), author(D, B)', 'true,false': 'author(E, A), author(F, B)', 'true,false,true': 'haswordauthor(G, C), author(E, G)'}, {'true,true': [0.0, 0, 35], 'false': [0.0, 0, 0], 'true,false,true,true': [1.966, 4, 116], 'true,false,false': [0.0, 0, 0], 'true,false,true,false': [0.0, 0, 0]}]]
[{'': [1.6240976817373718e-15, 0.0322222222222256], 'false': [0.0322222222222256, nan], 'false,true': [0.0322222222222256, nan]}, {'': [-6.0903663065151445e-16, 0.03222222222222175], 'false': [0.03222222222222175, nan]}, {'': [0.025006544773513804, nan], 'true': [0.025006544773513804, nan]}, {'': [-5.075305255429287e-17, 0.032222222222222756], 'false': [0.032222222222222756, nan], 'true': [-5.075305255429287e-17, nan], 'false,true': [0.032222222222222756, nan]}, {'': [0.024990446232921078, nan], 'true,true': [1.9032394707859825e-16, 0.0322222222222223], 'true': [0.024990446232921078, nan]}, {'': [0.024984946831029854, nan], 'true,true': [-3.8064789415719653e-17, nan], 'true,false': [0.03222222222222246, nan], 'true': [-3.8064789415719653e-17, 0.03222222222222246]}, {'': [3.8064789415719653e-17, 0.03222222222222203], 'false': [0.03222222222222203, nan], 'true': [3.8064789415719653e-17, nan], 'false,true': [nan, 0.03222222222222203]}, {'': [0.024982847826320296, nan], 'true': [0.024982847826320296, nan]}, {'': [-3.489272363107635e-17, 0.03222222222222223], 'false': [0.03222222222222223, nan], 'false,true': [0.03222222222222223, nan]}, {'': [0.024991092893626915, nan], 'true,false,true': [0.03222222222222216, nan], 'true,false': [0.03222222222222216, nan], 'true': [-3.489272363107635e-17, 0.03222222222222216]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
1;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true
3;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
4;;sameauthor(A, B) :- author(D, A), author(E, F).;true;true
5;;sameauthor(A, B) :- author(D, B), author(D, A).;true;true
6;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
8;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
9;;sameauthor(A, B) :- author(D, A), author(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995115;  // std dev = 2,38e-07, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7152917922423694;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.7405018762759829;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995128;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109548;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.4368806042083894;  // std dev = 0,844, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6094189343461087;  // std dev = 0,894, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.6249475655895571;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.7194734122109542;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.719473412210954;  // std dev = 1,69e-07, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(B, E) )
%   | | | then return 0.6124630041293629;  // std dev = 0,156, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | | then return 0.606959774552853;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.49728946989591916;  // std dev = 1,325, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0.4954433910469001;  // std dev = 0,224, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | then return 0.4957122961796226;  // std dev = 0,223, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.5593622054362869;  // std dev = 0,145, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.4189061453040369;  // std dev = 0,046, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.31716768965350645;  // std dev = 0,867, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.36185283821562964;  // std dev = 1,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.43215461610356426;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.41314735077777653;  // std dev = 0,098, 83,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, A), author(D, E) )
%   then if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | then if ( haswordauthor(B, F) )
%   | | then if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | | then return 0.2197014285419745;  // std dev = 0,874, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2732925746720236;  // std dev = 0,859, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.33029043902064864;  // std dev = 0,029, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, J), haswordtitle(K, J) )
%   | | then if ( haswordauthor(A, J) )
%   | | | then return 0.29239614244570467;  // std dev = 1,330, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.33065582599145854;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.3226540910120913;  // std dev = 0,050, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.2597684787630712;  // std dev = 0,044, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.07735011596629542;  // std dev = 0,846, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18434407928176494;  // std dev = 0,856, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.276078703594519;  // std dev = 0,065, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.20065893784627575;  // std dev = 1,317, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.2619464710601683;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.2571800774519202;  // std dev = 0,042, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.21301095840525033;  // std dev = 0,038, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.05248222229943156;  // std dev = 0,861, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.14794404260559518;  // std dev = 0,842, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.21945410338886376;  // std dev = 0,035, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.1614005210753302;  // std dev = 1,320, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.21453168920054644;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.21107739131030495;  // std dev = 0,037, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(A, E) )
%   | | | then return 0.26593798080888875;  // std dev = 0,229, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.22026248040984098;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | | then return 0.19772727023877235;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13911723697276424;  // std dev = 1,321, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0.12437746540740395;  // std dev = 0,210, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return 0.1735822287488305;  // std dev = 0,083, 107,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=106 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.15540317149896082;  // std dev = 0,044, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return -0.01413221641781559;  // std dev = 0,844, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08845409379253288;  // std dev = 0,841, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.15809814049867635;  // std dev = 0,023, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.10293681306613331;  // std dev = 1,319, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.16097711335219797;  // std dev = 1,29e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1544414857800427;  // std dev = 0,036, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.13608709861565677;  // std dev = 0,040, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.01384732004457904;  // std dev = 0,851, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07438294727575091;  // std dev = 0,836, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.13818358536994754;  // std dev = 0,021, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.08577460589917113;  // std dev = 1,319, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.14040226617490847;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.13533326286218028;  // std dev = 0,032, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */


Results
   AUC ROC   = 0.557186
   AUC PR    = 0.93805
   CLL	      = -0.357203
   Precision = 0.904241 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.949713


Total learning time: 45.332 seconds
Total inference time: 218.522 seconds
AUC ROC: 0.557186


Results scoring model
   AUC ROC   = 0.966887
   AUC PR    = 0.999113
   CLL	      = -0.177307
   Precision = 0.974194 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.986928


Total scoring time: 3.365 seconds
Refined model CLL: -0.177307


Refining iteration 2
********************************
Candidate for revision
0;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
0;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
0;false,false,true;haswordauthor(B, H).;true;true
0;false,false;haswordauthor(A, H), haswordtitle(I, H).;true;true
0;false,true;haswordauthor(B, D).;true;true
1;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true
1;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
1;false,false,true;haswordauthor(A, H).;true;true
1;false,false;haswordauthor(B, H), haswordtitle(I, H).;true;true
1;false,true;haswordauthor(B, D).;true;true
2;;sameauthor(A, B) :- haswordauthor(B, C), haswordtitle(D, C).;true;true
2;true,true;haswordauthor(A, E), haswordvenue(F, E).;true;true
2;false;haswordauthor(A, I), haswordtitle(J, I).;true;true
2;true,true,true;haswordauthor(B, E).;true;true
2;true,true,false;haswordauthor(B, G), haswordvenue(H, G).;true;true
2;true;haswordauthor(A, C).;true;true
3;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
3;false,true,false;haswordauthor(A, D).;true;true
3;false;haswordauthor(B, D), haswordtitle(E, D).;true;true
3;false,true;haswordauthor(A, F), haswordvenue(G, F).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, F), haswordvenue(G, F).;true;true
4;false;haswordauthor(B, J), haswordtitle(K, J).;true;true
4;false,true;haswordauthor(A, J).;true;true
4;true;haswordauthor(B, F).;true;true
5;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
5;false;haswordauthor(B, D), haswordvenue(E, D).;true;true
5;false,false,true;haswordauthor(A, H).;true;true
5;false,false;haswordauthor(B, H), haswordtitle(I, H).;true;true
5;false,true;haswordauthor(A, D).;true;true
6;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
6;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
6;false,false,true;haswordauthor(A, H).;true;true
6;false,false;haswordauthor(B, H), haswordtitle(I, H).;true;true
6;false,true;haswordauthor(B, D).;true;true
7;;sameauthor(A, B) :- haswordauthor(B, C), haswordtitle(D, C).;true;true
7;true,true;haswordauthor(B, E), haswordvenue(F, E).;true;true
7;true,true,true;haswordauthor(A, E).;true;true
7;true,true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
7;true;haswordauthor(A, C).;true;true
8;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
8;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
8;false,false,true;haswordauthor(B, H).;true;true
8;false,false;haswordauthor(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordauthor(B, D).;true;true
9;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true
9;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
9;false,false,true;haswordauthor(B, H).;true;true
9;false,false;haswordauthor(A, H), haswordtitle(I, H).;true;true
9;false,true;haswordauthor(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995115;  // std dev = 2,38e-07, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7152917922423694;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.7405018762759829;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995128;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109548;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.4368806042083894;  // std dev = 0,844, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6094189343461087;  // std dev = 0,894, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.6249475655895571;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.7194734122109542;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.719473412210954;  // std dev = 1,69e-07, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(B, E) )
%   | | | then return 0.6124630041293629;  // std dev = 0,156, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | | then return 0.606959774552853;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.49728946989591916;  // std dev = 1,325, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0.4954433910469001;  // std dev = 0,224, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | then return 0.4957122961796226;  // std dev = 0,223, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.5593622054362869;  // std dev = 0,145, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.4189061453040369;  // std dev = 0,046, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.31716768965350645;  // std dev = 0,867, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.36185283821562964;  // std dev = 1,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.43215461610356426;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.41314735077777653;  // std dev = 0,098, 83,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordvenue(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then return 0.2197014285419745;  // std dev = 0,874, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.2732925746720236;  // std dev = 0,259, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.33029043902064864;  // std dev = 0,029, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(A, G) )
%   | | then if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.3695233812394716;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.28187879170110014;  // std dev = 1,322, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.33065582599145854;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.3226540910120913;  // std dev = 0,050, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.2602452706773241;  // std dev = 0,049, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.07735011596629542;  // std dev = 0,846, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18434407928176494;  // std dev = 0,856, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.26918773386078004;  // std dev = 0,044, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.20257164740046904;  // std dev = 1,316, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.2619464710601683;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.2571800774519202;  // std dev = 0,042, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.21334922936556475;  // std dev = 0,042, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.05248222229943156;  // std dev = 0,861, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.14794404260559518;  // std dev = 0,842, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.21930687436134735;  // std dev = 0,035, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.1605703659249794;  // std dev = 1,317, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.21453168920054644;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.21114014827027017;  // std dev = 0,037, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(A, E) )
%   | | | then return 0.26586512964269443;  // std dev = 0,229, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20857382693739446;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | | then return 0.19744735939880043;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14079818853796205;  // std dev = 1,321, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0.12437746540740395;  // std dev = 0,210, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | then return 0.12905501676364453;  // std dev = 0,212, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.18084808146554374;  // std dev = 0,174, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.15493909086094604;  // std dev = 0,049, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return -0.010994825397100727;  // std dev = 0,836, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08739398160689119;  // std dev = 0,839, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.15749031022521806;  // std dev = 0,024, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.10255767103779737;  // std dev = 1,317, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.16707353337905057;  // std dev = 1,49e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.15372956205810123;  // std dev = 0,038, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.13572743549276572;  // std dev = 0,044, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.014228158242279298;  // std dev = 0,850, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07477425697448259;  // std dev = 0,827, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.1377127855614075;  // std dev = 0,022, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.08549161344018412;  // std dev = 1,317, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.14509708271040983;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1347787596859698;  // std dev = 0,034, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */


Results
   AUC ROC   = 0.552993
   AUC PR    = 0.936328
   CLL	      = -0.356917
   Precision = 0.904241 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.949713


Total learning time: 2.454 seconds
Total inference time: 2.249 seconds
AUC ROC: 0.552993


Results scoring model
   AUC ROC   = 0.966887
   AUC PR    = 0.999113
   CLL	      = -0.176982
   Precision = 0.974194 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.986928


Total scoring time: 0.968 seconds
Refined model CLL: -0.176982


Refining iteration 3
********************************
Candidate for revision
0;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
0;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
0;false,false,true;haswordauthor(B, H).;true;true
0;false,false;haswordauthor(A, H), haswordtitle(I, H).;true;true
0;false,true;haswordauthor(B, D).;true;true
1;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true
1;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
1;false,false,true;haswordauthor(A, H).;true;true
1;false,false;haswordauthor(B, H), haswordtitle(I, H).;true;true
1;false,true;haswordauthor(B, D).;true;true
2;;sameauthor(A, B) :- haswordauthor(B, C), haswordtitle(D, C).;true;true
2;true,true;haswordauthor(A, E), haswordvenue(F, E).;true;true
2;false;haswordauthor(A, I), haswordtitle(J, I).;true;true
2;true,true,true;haswordauthor(B, E).;true;true
2;true,true,false;haswordauthor(B, G), haswordvenue(H, G).;true;true
2;true;haswordauthor(A, C).;true;true
3;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
3;false,true,false;haswordauthor(A, D).;true;true
3;false;haswordauthor(B, D), haswordtitle(E, D).;true;true
3;false,true;haswordauthor(A, F), haswordvenue(G, F).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, C), haswordvenue(D, C).;true;true
4;false;haswordauthor(B, G), haswordtitle(H, G).;true;true
4;false,true;haswordauthor(A, G).;true;true
4;false,true,true;haswordauthor(B, I), haswordvenue(J, I).;true;true
4;true;haswordauthor(B, C).;true;true
5;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
5;false;haswordauthor(B, D), haswordvenue(E, D).;true;true
5;false,false,true;haswordauthor(A, H).;true;true
5;false,false;haswordauthor(B, H), haswordtitle(I, H).;true;true
5;false,true;haswordauthor(A, D).;true;true
6;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
6;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
6;false,false,true;haswordauthor(A, H).;true;true
6;false,false;haswordauthor(B, H), haswordtitle(I, H).;true;true
6;false,true;haswordauthor(B, D).;true;true
7;;sameauthor(A, B) :- haswordauthor(B, C), haswordtitle(D, C).;true;true
7;true,true;haswordauthor(B, E), haswordvenue(F, E).;true;true
7;false;haswordauthor(A, I), haswordtitle(J, I).;true;true
7;true,true,true;haswordauthor(A, E).;true;true
7;true,true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
7;true;haswordauthor(A, C).;true;true
8;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
8;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
8;false,false,true;haswordauthor(B, H).;true;true
8;false,false;haswordauthor(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordauthor(B, D).;true;true
9;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true
9;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
9;false,false,true;haswordauthor(B, H).;true;true
9;false,false;haswordauthor(A, H), haswordtitle(I, H).;true;true
9;false,true;haswordauthor(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995115;  // std dev = 2,38e-07, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7152917922423694;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.7405018762759829;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995128;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109548;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.4368806042083894;  // std dev = 0,844, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6094189343461087;  // std dev = 0,894, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.6249475655895571;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.7194734122109542;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.719473412210954;  // std dev = 1,69e-07, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(B, E) )
%   | | | then return 0.6124630041293629;  // std dev = 0,156, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | | then return 0.606959774552853;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.49728946989591916;  // std dev = 1,325, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0.4954433910469001;  // std dev = 0,224, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | then return 0.4957122961796226;  // std dev = 0,223, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.5593622054362869;  // std dev = 0,145, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.4189061453040369;  // std dev = 0,046, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.31716768965350645;  // std dev = 0,867, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.36185283821562964;  // std dev = 1,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.43215461610356426;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then return 0.37277679601421315;  // std dev = 0,222, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.4220526202109156;  // std dev = 0,146, 68,000 (wgt'ed) examples reached here.  /* #pos=68 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordvenue(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then return 0.22136275721292764;  // std dev = 0,866, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.27215153292138267;  // std dev = 0,259, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.32918345758506007;  // std dev = 0,032, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(A, G) )
%   | | then if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.3695233812394716;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.28187879170110014;  // std dev = 1,322, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.33065582599145854;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.3228100094429079;  // std dev = 0,086, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.26022608352950466;  // std dev = 0,049, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.07912941910813205;  // std dev = 0,841, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18338390328936863;  // std dev = 0,851, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.26820658388595203;  // std dev = 0,046, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.20261041092000398;  // std dev = 1,316, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.2619464710601683;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.2573556745809115;  // std dev = 0,074, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.21333576777744773;  // std dev = 0,042, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.05306513964264503;  // std dev = 0,858, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.14757821783970357;  // std dev = 0,836, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.2186404619342525;  // std dev = 0,037, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.16059508661484637;  // std dev = 1,317, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.21453168920054644;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.21127418775063342;  // std dev = 0,065, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(A, E) )
%   | | | then return 0.26533641640944233;  // std dev = 0,229, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20873174947636364;  // std dev = 5,27e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | | then return 0.19772237648287194;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14079233239532749;  // std dev = 1,321, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0.12454558702592632;  // std dev = 0,210, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | then return 0.13517112958861158;  // std dev = 0,212, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.17987988448658992;  // std dev = 0,173, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.15502259711622532;  // std dev = 0,049, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return -0.009985047730113586;  // std dev = 0,832, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0869385042920523;  // std dev = 0,836, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.1571179761517316;  // std dev = 0,025, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.10256973764698968;  // std dev = 1,317, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.1718286325289587;  // std dev = 1,05e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.15286562780050603;  // std dev = 0,042, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.13579242369046396;  // std dev = 0,044, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.01409711635726607;  // std dev = 0,847, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07470650907716539;  // std dev = 0,823, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.13742495630095705;  // std dev = 0,023, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.08550085541092338;  // std dev = 1,317, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.14873578576803448;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1341052526043519;  // std dev = 0,038, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */


Results
   AUC ROC   = 0.554355
   AUC PR    = 0.936561
   CLL	      = -0.3567
   Precision = 0.904241 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.949713


Total learning time: 2.369 seconds
Total inference time: 1.913 seconds
AUC ROC: 0.554355


Results scoring model
   AUC ROC   = 0.966887
   AUC PR    = 0.999113
   CLL	      = -0.176798
   Precision = 0.974194 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.986928


Total scoring time: 0.973 seconds
Refined model CLL: -0.176798


Refining iteration 4
********************************
Candidate for revision
0;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
0;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
0;false,false,true;haswordauthor(B, H).;true;true
0;false,false;haswordauthor(A, H), haswordtitle(I, H).;true;true
0;false,true;haswordauthor(B, D).;true;true
1;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true
1;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
1;false,false,true;haswordauthor(A, H).;true;true
1;false,false;haswordauthor(B, H), haswordtitle(I, H).;true;true
1;false,true;haswordauthor(B, D).;true;true
2;;sameauthor(A, B) :- haswordauthor(B, C), haswordtitle(D, C).;true;true
2;true,true;haswordauthor(A, E), haswordvenue(F, E).;true;true
2;false;haswordauthor(A, I), haswordtitle(J, I).;true;true
2;true,true,true;haswordauthor(B, E).;true;true
2;true,true,false;haswordauthor(B, G), haswordvenue(H, G).;true;true
2;true;haswordauthor(A, C).;true;true
3;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
3;false,true,false;haswordauthor(A, D).;true;true
3;false;haswordauthor(B, D), haswordtitle(E, D).;true;true
3;false,false;haswordauthor(A, H), haswordtitle(I, H).;true;true
3;false,true;haswordauthor(A, F), haswordvenue(G, F).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, C), haswordvenue(D, C).;true;true
4;false;haswordauthor(B, G), haswordtitle(H, G).;true;true
4;false,true;haswordauthor(A, G).;true;true
4;false,true,true;haswordauthor(B, I), haswordvenue(J, I).;true;true
4;true;haswordauthor(B, C).;true;true
5;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
5;false;haswordauthor(B, D), haswordvenue(E, D).;true;true
5;false,false,true;haswordauthor(A, H).;true;true
5;false,false;haswordauthor(B, H), haswordtitle(I, H).;true;true
5;false,true;haswordauthor(A, D).;true;true
6;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
6;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
6;false,false,true;haswordauthor(A, H).;true;true
6;false,false;haswordauthor(B, H), haswordtitle(I, H).;true;true
6;false,true;haswordauthor(B, D).;true;true
7;;sameauthor(A, B) :- haswordauthor(B, C), haswordtitle(D, C).;true;true
7;true,true;haswordauthor(B, E), haswordvenue(F, E).;true;true
7;false;haswordauthor(A, I), haswordtitle(J, I).;true;true
7;true,true,true;haswordauthor(A, E).;true;true
7;true,true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
7;true;haswordauthor(A, C).;true;true
8;;sameauthor(A, B) :- author(C, B), author(C, A).;true;true
8;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
8;false,false,true;haswordauthor(B, H).;true;true
8;false,false;haswordauthor(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordauthor(B, D).;true;true
9;;sameauthor(A, B) :- author(C, A), author(C, B).;true;true
9;false;haswordauthor(A, D), haswordvenue(E, D).;true;true
9;false,false,true;haswordauthor(B, H).;true;true
9;false,false;haswordauthor(A, H), haswordtitle(I, H).;true;true
9;false,true;haswordauthor(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.8581489350995115;  // std dev = 2,38e-07, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7152917922423694;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.7405018762759829;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.8581489350995128;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.7194734122109548;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.4368806042083894;  // std dev = 0,844, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6094189343461087;  // std dev = 0,894, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.6249475655895571;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.7194734122109542;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.719473412210954;  // std dev = 1,69e-07, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(A, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(B, E) )
%   | | | then return 0.6124630041293629;  // std dev = 0,156, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | | then return 0.606959774552853;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.49728946989591916;  // std dev = 1,325, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0.4954433910469001;  // std dev = 0,224, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | then return 0.4957122961796226;  // std dev = 0,223, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.5593622054362869;  // std dev = 0,145, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.4189061453040369;  // std dev = 0,046, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | then return 0.31716768965350645;  // std dev = 0,867, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.36185283821562964;  // std dev = 1,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.43215461610356426;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then return 0.37277679601421315;  // std dev = 0,222, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.4220526202109156;  // std dev = 0,146, 68,000 (wgt'ed) examples reached here.  /* #pos=68 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordvenue(D, C) )
%   then if ( haswordauthor(B, C) )
%   | then if ( haswordauthor(A, E), haswordtitle(F, E) )
%   | | then return 0.22136275721292764;  // std dev = 0,866, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.27215153292138267;  // std dev = 0,259, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.32918345758506007;  // std dev = 0,032, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(A, G) )
%   | | then if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.3695233812394716;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.28187879170110014;  // std dev = 1,322, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.33065582599145854;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.3228100094429079;  // std dev = 0,086, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.26022608352950466;  // std dev = 0,049, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return 0.07912941910813205;  // std dev = 0,841, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18338390328936863;  // std dev = 0,851, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.26820658388595203;  // std dev = 0,046, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.20261041092000398;  // std dev = 1,316, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.2619464710601683;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.2573556745809115;  // std dev = 0,074, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.21333576777744773;  // std dev = 0,042, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return 0.05306513964264503;  // std dev = 0,858, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.14757821783970357;  // std dev = 0,836, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.2186404619342525;  // std dev = 0,037, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.16059508661484637;  // std dev = 1,317, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.21453168920054644;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.21127418775063342;  // std dev = 0,065, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(A, C) )
%   | then if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(A, E) )
%   | | | then return 0.26533641640944233;  // std dev = 0,229, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20873174947636364;  // std dev = 5,27e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | | then return 0.19772237648287194;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14079233239532749;  // std dev = 1,321, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0.12454558702592632;  // std dev = 0,210, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | then return 0.13517112958861158;  // std dev = 0,212, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.17987988448658992;  // std dev = 0,173, 92,000 (wgt'ed) examples reached here.  /* #pos=92 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( author(C, B), author(C, A) )
%   then return 0.15502259711622532;  // std dev = 0,049, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(A, F), haswordtitle(G, F) )
%   | | | then return -0.009985047730113586;  // std dev = 0,832, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0869385042920523;  // std dev = 0,836, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.1571179761517316;  // std dev = 0,025, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.10256973764698968;  // std dev = 1,317, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.1718286325289587;  // std dev = 1,05e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.15286562780050603;  // std dev = 0,042, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, A), author(C, B) )
%   then return 0.13579242369046396;  // std dev = 0,044, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( haswordauthor(A, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.01409711635726607;  // std dev = 0,847, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07470650907716539;  // std dev = 0,823, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.13742495630095705;  // std dev = 0,023, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.08550085541092338;  // std dev = 1,317, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.14873578576803448;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1341052526043519;  // std dev = 0,038, 72,000 (wgt'ed) examples reached here.  /* #pos=72 */


Results
   AUC ROC   = 0.554355
   AUC PR    = 0.936561
   CLL	      = -0.3567
   Precision = 0.904241 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.949713


Total learning time: 2.168 seconds
Total inference time: 1.914 seconds
AUC ROC: 0.554355


Results scoring model
   AUC ROC   = 0.966887
   AUC PR    = 0.999113
   CLL	      = -0.176798
   Precision = 0.974194 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.986928


Total scoring time: 0.957 seconds
Refined model CLL: -0.176798


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.554355
   AUC PR    = 0.936561
   CLL	      = -0.3567
   Precision = 0.904241 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.949713


Total learning time: 62.483000000000004 seconds
Total inference time: 1.913 seconds
AUC ROC: 0.554355
Total revision time: 62.483000000000004
Best scored revision CLL: -0.176798


Dataset: 13_uwcse_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 01:19:22
{'Inference time': 1.913, 'F1': 0.949713, 'Precision': [0.904241, 0.5], 'AUC PR': 0.936561, 'CLL': -0.3567, 'Learning time': 62.483000000000004, 'AUC ROC': 0.554355, 'parameter': {'Inference time': 6.859, 'F1': 0.949713, 'Precision': [0.904241, 0.5], 'AUC PR': 0.963089, 'CLL': -0.316488, 'Learning time': 2.779, 'AUC ROC': 0.751805, 'Recall': 1.0}, 'Recall': 1.0}


Start learning from scratch in target domain

Starting fold 4

Target train facts examples: 7971
Target train pos examples: 158
Target train neg examples: 16

Target test facts examples: 33775
Target test pos	 examples: 654
Target test neg examples: 58

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,false,false;publication(N, B).;false;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true;publication(C, B), publication(C, A).;true;true
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true,true;ta(F, A, G), ta(F, H, E).;true;false
1;true,false,false;tempadvisedby(N, B), publication(P, A).;false;false
1;true,true,true;ta(D, H, I).;false;false
1;true,false,true;tempadvisedby(K, B), ta(L, A, M).;false;false
1;true,false;publication(J, A), publication(J, B).;true;true
1;true;tempadvisedby(C, B), ta(D, C, E).;true;true
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true,true;ta(G, A, H), ta(G, I, F).;true;false
2;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
2;true,true,true;samecourse(E, G).;false;false
2;true,false,true;publication(J, B).;false;false
2;true,false;publication(J, A), tempadvisedby(K, B).;true;true
2;false;professor(B).;false;false
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true,true;tempadvisedby(D, B), publication(C, D).;false;true
3;true,false,false;tempadvisedby(J, B).;false;false
3;true,true,false;ta(E, A, F), tempadvisedby(G, B).;false;false
3;true,false,true;publication(H, I), professor(I).;false;false
3;true,false;publication(H, A).;true;true
3;true;publication(C, B), publication(C, A).;true;true
4;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
4;true,true;ta(E, A, G).;false;false
4;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
4;true,false,true;publication(H, A), publication(J, I).;false;false
4;false,true;publication(M, B).;false;false
4;true,false;publication(H, B), tempadvisedby(I, B).;true;true
4;false;professor(B).;true;false
4;true;tempadvisedby(D, B), ta(E, D, F).;true;true
5;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
5;true,true;tempadvisedby(E, B), ta(F, E, G).;false;true
5;true,false,false;ta(M, A, N), tempadvisedby(P, B).;false;false
5;true,true,false;publication(D, H), ta(I, H, J).;false;false
5;false,true;publication(Q, B).;false;false
5;true,false;tempadvisedby(K, B), publication(L, K).;false;true
5;false;professor(B).;true;false
5;true;publication(D, B), publication(D, A).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true,true;publication(C, D), tempadvisedby(D, B).;false;true
6;true,false,false;ta(K, A, L).;false;false
6;true,true,false;ta(E, A, F), tempadvisedby(G, B).;false;false
6;true,false,true;publication(H, J), publication(I, J).;false;false
6;true,false;publication(H, A), publication(I, B).;true;true
6;true;publication(C, B), publication(C, A).;true;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;true,true;ta(E, A, G).;false;false
7;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
7;true,false,true;ta(J, A, K).;false;false
7;false,true;publication(N, B).;false;false
7;true,false;publication(H, B), tempadvisedby(I, B).;true;true
7;false;professor(B).;true;false
7;true;tempadvisedby(D, B), ta(E, D, F).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
8;true,false,false;projectmember(M, B).;false;false
8;true,true,true;ta(G, D, H).;false;false
8;true,false,true;publication(I, J), ta(K, J, L).;false;false
8;true,false;publication(I, A).;true;true
8;true;publication(C, B), publication(C, A).;true;true
9;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
9;true,true;tempadvisedby(E, B), ta(F, A, G).;true;false
9;true,false,false;hasposition(M, C), tempadvisedby(N, M).;false;false
9;true,true,true;ta(H, E, I).;false;false
9;true,false,true;hasposition(L, C), publication(J, L).;false;false
9;true,false;publication(J, A), publication(K, B).;true;true
9;false;professor(B).;false;false
9;true;publication(D, A), publication(D, B).;true;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.8099561640151723;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.6809038096058014;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else if ( haswordauthor(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( sametitle(D, E) )
%   | then return 0.49902054593484374;  // std dev = 3,278, 174,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=158 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.40447921308703544;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordauthor(A, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return -0.1724624207076295;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D) )
%   | then if ( haswordauthor(A, D), haswordauthor(E, F) )
%   | | then return 0.3074423845376383;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | | else return -0.149219272624225;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.2404875314880624;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(F, G) )
%   | | then return -0.13124938935796546;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.19370745572146364;  // std dev = 2,759, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordauthor(A, E), haswordauthor(B, F) )
%   | then if ( haswordauthor(G, E), haswordauthor(G, F) )
%   | | then return -0.1169943206616514;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D) )
%   | then return 0.14777332934293255;  // std dev = 0,216, 174,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=158 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.13666582181569437;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.12021167077957297;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then return 0.11695194292175573;  // std dev = 0,214, 166,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=158 */
%   | else if ( haswordauthor(A, E), haswordauthor(B, F) )
%   | | then if ( author(C, G), haswordauthor(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10806706845753342;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.655172
   AUC PR    = 0.942363
   CLL	      = -0.258423
   Precision = 0.942363 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970326


Total learning time: 2.381 seconds
Total inference time: 1.918 seconds
AUC ROC: 0.655172


Results scoring model
   AUC ROC   = 0.75
   AUC PR    = 0.951807
   CLL	      = -0.239275
   Precision = 0.951807 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.975309


Total scoring time: 0.852 seconds
Parameter learned model CLL: -0.239275


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 8, 0], 'true': [0.214, 8, 158]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D)'}, {'false,false': [0.0, 0, 0], 'true': [0.214, 8, 158], 'false,true': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'sametitle(D, E)'}, {'true,true': [3.278, 16, 158], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, E)', 'true': 'haswordauthor(D, C)', 'false,true': 'haswordauthor(F, E)'}, {'true,true': [2.759, 8, 158], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [7.45e-09, 8, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(A, D), haswordauthor(E, F)', 'true': 'haswordauthor(B, D)'}, {'true,true,false': [1.05e-08, 8, 0], 'true,true,true': [2.759, 8, 158], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(E, D)', 'true,false': 'haswordauthor(F, G)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true,true': [2.759, 8, 158], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, E), haswordauthor(B, F)', 'true': 'haswordauthor(D, C)', 'false,true': 'haswordauthor(G, E), haswordauthor(G, F)'}, {'true,true': [2.759, 8, 158], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 8, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(B, D)'}, {'true,true': [0.216, 16, 158], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [5.27e-09, 8, 0], 'true': [0.214, 8, 158]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)', 'true,false': 'haswordauthor(A, E), haswordauthor(B, F)', 'true,false,true': 'author(C, G), haswordauthor(G, E)'}, {'true,true': [0.214, 8, 158], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,false': [0.0, 8, 0]}]]
[{'': [0.045870227899556054, -6.938893903907228e-18], 'false': [-6.938893903907228e-18, nan], 'false,true': [-6.938893903907228e-18, nan]}, {'': [0.045870227899547665, 0.0], 'false': [0.0, nan]}, {'': [0.061772472858521894, nan], 'true': [0.061772472858521894, nan]}, {'': [0.04587022789954955, 6.938893903907228e-18], 'false': [6.938893903907228e-18, nan], 'false,true': [6.938893903907228e-18, nan], 'true': [0.04587022789954955, nan]}, {'': [0.05290846244036185, nan], 'true,true': [0.045870227899550656, 1.3877787807814457e-17], 'true': [0.05290846244036185, nan]}, {'': [0.04982262438696206, nan], 'true,true': [0.0458702278995495, nan], 'true,false': [0.0, nan], 'true': [0.0458702278995495, 0.0]}, {'': [0.04587022789954988, 0.0], 'false': [0.0, nan], 'false,true': [0.0, nan], 'true': [0.04587022789954988, nan]}, {'': [0.04685120280686955, nan], 'true': [0.04685120280686955, nan]}, {'': [0.04587022789955013, 3.469446951953614e-18], 'false': [3.469446951953614e-18, nan], 'false,true': [3.469446951953614e-18, nan]}, {'': [0.04598219792346574, nan], 'true,false,true': [nan, -1.734723475976807e-18], 'true,false': [-1.734723475976807e-18, nan], 'true': [0.045870227899550024, -1.734723475976807e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(E, F).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,53e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.6914822684328453;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.8581489350995125;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.7194734122109548;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.5851860008555358;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.7194734122109542;  // std dev = 5,96e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.7194734122109538;  // std dev = 2,23e-07, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.5553664367462843;  // std dev = 1,03e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.4612598391067553;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.36236334632262296;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.36236334632262296;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.5553664367462836;  // std dev = 3,32e-07, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.4175135841583102;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, D) )
%   | | | then return 0.3488463256948424;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.2807538536965854;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.4175135841583098;  // std dev = 5,16e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2807538536965854;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.41751358415831047;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(D, E) )
%   then if ( haswordauthor(A, F), haswordauthor(B, F) )
%   | then if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.3207118471601495;  // std dev = 2,11e-08, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.2521977843104878;  // std dev = 2,163, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else if ( haswordauthor(A, J), haswordtitle(K, J) )
%   | | | then return 0.2911942619032735;  // std dev = 1,177, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.32071184716015005;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.2551722425694896;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.20176003616553081;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.14956679006837373;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.26082276067641436;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.1398367947894586;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2551722425694895;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.20975771563253573;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.15617737393997105;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.11238321771229225;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.21374131295835272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.10516481945484137;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.20975771563253573;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.1770964977452775;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordtitle(E, C) )
%   | | | then return 0.12301931677559534;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.08481575735732451;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.18001280991251312;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.079461328860904;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.17709649774527716;  // std dev = 3,65e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.15274385809367086;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.09837457469568432;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.0643345096598145;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.15495259254854066;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.060342821258336156;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.15274385809367055;  // std dev = 8,16e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.13400703000801112;  // std dev = 1,05e-08, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, D) )
%   | | | then return 0.07965943208321156;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.04903061602068696;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return 0.13572900235813767;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.04603541283699578;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.13400703000801092;  // std dev = 5,37e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.632843
   AUC PR    = 0.928821
   CLL	      = -0.261723
   Precision = 0.942363 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970326


Total learning time: 15.219 seconds
Total inference time: 164.879 seconds
AUC ROC: 0.632843


Results scoring model
   AUC ROC   = 0.96519
   AUC PR    = 0.996372
   CLL	      = -0.205858
   Precision = 0.951807 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.975309


Total scoring time: 1.314 seconds
Refined model CLL: -0.205858


Refining iteration 2
********************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
0;true,true;haswordvenue(F, D).;true;true
0;true,false,true;haswordvenue(I, G).;true;true
0;true,false;haswordauthor(B, G), haswordtitle(H, G).;true;true
0;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
1;true,true;haswordvenue(F, D).;true;true
1;true,false,true;haswordvenue(I, G).;true;true
1;true,false;haswordauthor(B, G), haswordtitle(H, G).;true;true
1;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;true,true;haswordvenue(F, D).;true;true
2;true,false,true;haswordvenue(I, G).;true;true
2;true,false;haswordauthor(A, G), haswordtitle(H, G).;true;true
2;true;haswordauthor(B, D), haswordtitle(E, D).;true;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
3;true,true;haswordvenue(F, D).;true;true
3;true,false,true;haswordvenue(I, G).;true;true
3;true,false;haswordauthor(B, G), haswordtitle(H, G).;true;true
3;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, F), haswordauthor(B, F).;true;true
4;true,true;haswordvenue(I, G).;true;true
4;true,false;haswordauthor(A, J), haswordtitle(K, J).;true;true
4;true;haswordauthor(B, G), haswordtitle(H, G).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
5;true,true;haswordvenue(F, D).;true;true
5;true,false,true;haswordvenue(I, G).;true;true
5;true,false;haswordauthor(A, G), haswordtitle(H, G).;true;true
5;true;haswordauthor(B, D), haswordtitle(E, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
6;true,true;haswordvenue(F, D).;true;true
6;true,false,true;haswordvenue(I, G).;true;true
6;true,false;haswordauthor(A, G), haswordtitle(H, G).;true;true
6;true;haswordauthor(B, D), haswordtitle(E, D).;true;true
7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;true,true;haswordvenue(F, D).;true;true
7;true,false,true;haswordvenue(I, G).;true;true
7;true,false;haswordauthor(A, G), haswordtitle(H, G).;true;true
7;true;haswordauthor(B, D), haswordtitle(E, D).;true;true
8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
8;true,true;haswordvenue(F, D).;true;true
8;true,false,true;haswordvenue(I, G).;true;true
8;true,false;haswordauthor(A, G), haswordtitle(H, G).;true;true
8;true;haswordauthor(B, D), haswordtitle(E, D).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;true,true;haswordvenue(F, D).;true;true
9;true,false,true;haswordvenue(I, G).;true;true
9;true,false;haswordauthor(A, G), haswordtitle(H, G).;true;true
9;true;haswordauthor(B, D), haswordtitle(E, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,53e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | | then return 0.6914822684328453;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.8581489350995125;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.7194734122109548;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | | then return 0.5851860008555358;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.7194734122109542;  // std dev = 5,96e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.7194734122109538;  // std dev = 2,23e-07, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.5553664367462843;  // std dev = 1,03e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.4612598391067553;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.36236334632262296;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.36236334632262296;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.5553664367462836;  // std dev = 3,32e-07, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.4175135841583102;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | | then return 0.3488463256948424;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.2807538536965854;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.4175135841583098;  // std dev = 5,16e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2807538536965854;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.41751358415831047;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.3207118471601495;  // std dev = 2,11e-08, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.26212705508354195;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.21248070121827137;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(A, K), haswordvenue(L, K) )
%   | | | then return 0.3207118471601494;  // std dev = 2,11e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21248070121827137;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.32071184716015005;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.2551722425694896;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.19945264276423416;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.15948988228171151;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.2551722425694894;  // std dev = 2,11e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.15948988228171151;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2551722425694895;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.20975771563253573;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.15451336627983223;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.11975529938157475;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.20975771563253562;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.11975529938157475;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.20975771563253573;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.1770964977452775;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.12179491558002786;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.09028081829440963;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.17709649774527741;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.09028081829440963;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.17709649774527716;  // std dev = 3,65e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.15274385809367086;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.09745354768081692;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.06840311429118533;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.1527438580936708;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.06840311429118533;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.15274385809367055;  // std dev = 8,16e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.13400703000801112;  // std dev = 1,05e-08, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.07895233872555119;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.052078905701252655;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.13400703000801117;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.052078905701252655;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.13400703000801092;  // std dev = 5,37e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.640146
   AUC PR    = 0.931858
   CLL	      = -0.261346
   Precision = 0.942363 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970326


Total learning time: 2.208 seconds
Total inference time: 3.096 seconds
AUC ROC: 0.640146


Results scoring model
   AUC ROC   = 0.96519
   AUC PR    = 0.996372
   CLL	      = -0.205725
   Precision = 0.951807 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.975309


Total scoring time: 0.943 seconds
Refined model CLL: -0.205725


Refining iteration 3
********************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
0;true,true;haswordvenue(F, D).;true;true
0;true,false,true;haswordvenue(K, I).;true;true
0;true,false;haswordauthor(B, I), haswordtitle(J, I).;true;true
0;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
1;true,true;haswordvenue(F, D).;true;true
1;true,false,true;haswordvenue(K, I).;true;true
1;true,false;haswordauthor(B, I), haswordtitle(J, I).;true;true
1;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;true,true;haswordvenue(F, D).;true;true
2;true,false,true;haswordvenue(K, I).;true;true
2;true,false;haswordauthor(A, I), haswordtitle(J, I).;true;true
2;true;haswordauthor(B, D), haswordtitle(E, D).;true;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
3;true,true;haswordvenue(F, D).;true;true
3;true,false,true;haswordvenue(K, I).;true;true
3;true,false;haswordauthor(B, I), haswordtitle(J, I).;true;true
3;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;true,true;haswordvenue(F, D).;true;true
4;true,false,true;haswordauthor(A, K), haswordvenue(L, K).;true;true
4;true,false;haswordauthor(A, I), haswordtitle(J, I).;true;true
4;true;haswordauthor(B, D), haswordtitle(E, D).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
5;true,true;haswordvenue(F, D).;true;true
5;true,false,true;haswordvenue(K, I).;true;true
5;true,false;haswordauthor(A, I), haswordtitle(J, I).;true;true
5;true;haswordauthor(B, D), haswordtitle(E, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
6;true,true;haswordvenue(F, D).;true;true
6;true,false,true;haswordvenue(K, I).;true;true
6;true,false;haswordauthor(A, I), haswordtitle(J, I).;true;true
6;true;haswordauthor(B, D), haswordtitle(E, D).;true;true
7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;true,true;haswordvenue(F, D).;true;true
7;true,false,true;haswordvenue(K, I).;true;true
7;true,false;haswordauthor(A, I), haswordtitle(J, I).;true;true
7;true;haswordauthor(B, D), haswordtitle(E, D).;true;true
8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
8;true,true;haswordvenue(F, D).;true;true
8;true,false,true;haswordvenue(K, I).;true;true
8;true,false;haswordauthor(A, I), haswordtitle(J, I).;true;true
8;true;haswordauthor(B, D), haswordtitle(E, D).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;true,true;haswordvenue(F, D).;true;true
9;true,false,true;haswordvenue(K, I).;true;true
9;true,false;haswordauthor(A, I), haswordtitle(J, I).;true;true
9;true;haswordauthor(B, D), haswordtitle(E, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,53e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | | then return 0.6914822684328453;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.8581489350995125;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.7194734122109548;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | | then return 0.5851860008555358;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.7194734122109542;  // std dev = 5,96e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.7194734122109538;  // std dev = 2,23e-07, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.5553664367462843;  // std dev = 1,03e-07, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.4612598391067553;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.36236334632262296;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.36236334632262296;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.5553664367462836;  // std dev = 3,32e-07, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.4175135841583102;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | | then return 0.3488463256948424;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.2807538536965854;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.4175135841583098;  // std dev = 5,16e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2807538536965854;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.41751358415831047;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.3207118471601495;  // std dev = 2,11e-08, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.26212705508354195;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.21248070121827137;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordauthor(A, K), haswordvenue(L, K) )
%   | | | then return 0.3207118471601494;  // std dev = 2,11e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21248070121827137;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.32071184716015005;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.2551722425694896;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.19945264276423416;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.15948988228171151;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.2551722425694894;  // std dev = 2,11e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.15948988228171151;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2551722425694895;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.20975771563253573;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.15451336627983223;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.11975529938157475;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.20975771563253562;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.11975529938157475;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.20975771563253573;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.1770964977452775;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.12179491558002786;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.09028081829440963;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.17709649774527741;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.09028081829440963;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.17709649774527716;  // std dev = 3,65e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.15274385809367086;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.09745354768081692;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.06840311429118533;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.1527438580936708;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.06840311429118533;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.15274385809367055;  // std dev = 8,16e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then return 0.13400703000801112;  // std dev = 1,05e-08, 36,000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( haswordauthor(A, G), haswordtitle(H, G) )
%   | | | then return 0.07895233872555119;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.052078905701252655;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, I), haswordtitle(J, I) )
%   | | then if ( haswordvenue(K, I) )
%   | | | then return 0.13400703000801117;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.052078905701252655;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.13400703000801092;  // std dev = 5,37e-08, 78,000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.640146
   AUC PR    = 0.931858
   CLL	      = -0.261346
   Precision = 0.942363 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970326


Total learning time: 2.357 seconds
Total inference time: 3.024 seconds
AUC ROC: 0.640146


Results scoring model
   AUC ROC   = 0.96519
   AUC PR    = 0.996372
   CLL	      = -0.205725
   Precision = 0.951807 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.975309


Total scoring time: 1.014 seconds
Refined model CLL: -0.205725


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.640146
   AUC PR    = 0.931858
   CLL	      = -0.261346
   Precision = 0.942363 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970326


Total learning time: 26.287999999999997 seconds
Total inference time: 3.096 seconds
AUC ROC: 0.640146
Total revision time: 26.287999999999997
Best scored revision CLL: -0.205725


Dataset: 13_uwcse_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 01:22:43
{'Inference time': 3.096, 'F1': 0.970326, 'Precision': [0.942363, 0.5], 'AUC PR': 0.931858, 'CLL': -0.261346, 'Learning time': 26.287999999999997, 'AUC ROC': 0.640146, 'parameter': {'Inference time': 1.918, 'F1': 0.970326, 'Precision': [0.942363, 0.5], 'AUC PR': 0.942363, 'CLL': -0.258423, 'Learning time': 2.381, 'AUC ROC': 0.655172, 'Recall': 1.0}, 'Recall': 1.0}


Start learning from scratch in target domain

Starting fold 5

Target train facts examples: 8472
Target train pos examples: 172
Target train neg examples: 18

Target test facts examples: 33274
Target test pos	 examples: 640
Target test neg examples: 56

******************************************
Performing Parameter Learning
******************************************
Refine
0;;advisedby(A, B) :- student(A), professor(B).;true;false
0;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
0;true,false,false;publication(N, B).;false;false
0;true,true,true;ta(G, D, H).;false;false
0;true,false,true;publication(I, K), ta(L, K, M).;false;false
0;true,false;publication(I, A), tempadvisedby(J, B).;true;true
0;true;publication(C, B), publication(C, A).;true;true
1;;advisedby(A, B) :- student(A), professor(B).;true;false
1;true,true;ta(F, A, G), ta(F, H, E).;true;false
1;true,false,false;tempadvisedby(N, B), publication(P, A).;false;false
1;true,true,true;ta(D, H, I).;false;false
1;true,false,true;tempadvisedby(K, B), ta(L, A, M).;false;false
1;true,false;publication(J, A), publication(J, B).;true;true
1;true;tempadvisedby(C, B), ta(D, C, E).;true;true
2;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
2;true,true;ta(G, A, H), ta(G, I, F).;true;false
2;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
2;true,true,true;samecourse(E, G).;false;false
2;true,false,true;publication(J, B).;false;false
2;true,false;publication(J, A), tempadvisedby(K, B).;true;true
2;false;professor(B).;false;false
2;true;tempadvisedby(D, B), ta(E, D, F).;true;true
3;;advisedby(A, B) :- professor(B), student(A).;true;false
3;true,true;tempadvisedby(D, B), publication(C, D).;false;true
3;true,false,false;tempadvisedby(J, B).;false;false
3;true,true,false;ta(E, A, F), tempadvisedby(G, B).;false;false
3;true,false,true;publication(H, I), professor(I).;false;false
3;true,false;publication(H, A).;true;true
3;true;publication(C, B), publication(C, A).;true;true
4;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
4;true,true;ta(E, A, G).;false;false
4;true,false,false;hasposition(K, C), tempadvisedby(L, K).;false;false
4;true,false,true;publication(H, A), publication(J, I).;false;false
4;false,true;publication(M, B).;false;false
4;true,false;publication(H, B), tempadvisedby(I, B).;true;true
4;false;professor(B).;true;false
4;true;tempadvisedby(D, B), ta(E, D, F).;true;true
5;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
5;true,true;tempadvisedby(E, B), ta(F, E, G).;false;true
5;true,false,false;ta(M, A, N), tempadvisedby(P, B).;false;false
5;true,true,false;publication(D, H), ta(I, H, J).;false;false
5;false,true;publication(Q, B).;false;false
5;true,false;tempadvisedby(K, B), publication(L, K).;false;true
5;false;professor(B).;true;false
5;true;publication(D, B), publication(D, A).;true;true
6;;advisedby(A, B) :- professor(B), student(A).;true;false
6;true,true;publication(C, D), tempadvisedby(D, B).;false;true
6;true,false,false;ta(K, A, L).;false;false
6;true,true,false;ta(E, A, F), tempadvisedby(G, B).;false;false
6;true,false,true;publication(H, J), publication(I, J).;false;false
6;true,false;publication(H, A), publication(I, B).;true;true
6;true;publication(C, B), publication(C, A).;true;true
7;;advisedby(A, B) :- hasposition(B, C), student(A).;true;true
7;true,true;ta(E, A, G).;false;false
7;true,false,false;hasposition(L, C), tempadvisedby(M, L).;false;false
7;true,false,true;ta(J, A, K).;false;false
7;false,true;publication(N, B).;false;false
7;true,false;publication(H, B), tempadvisedby(I, B).;true;true
7;false;professor(B).;true;false
7;true;tempadvisedby(D, B), ta(E, D, F).;true;true
8;;advisedby(A, B) :- professor(B), student(A).;true;false
8;true,true;tempadvisedby(D, B), ta(E, A, F).;true;false
8;true,false,false;projectmember(M, B).;false;false
8;true,true,true;ta(G, D, H).;false;false
8;true,false,true;publication(I, J), ta(K, J, L).;false;false
8;true,false;publication(I, A).;true;true
8;true;publication(C, B), publication(C, A).;true;true
9;;advisedby(A, B) :- student(A), hasposition(B, C).;true;true
9;true,true;tempadvisedby(E, B), ta(F, A, G).;true;false
9;true,false,false;hasposition(M, C), tempadvisedby(N, M).;false;false
9;true,true,true;ta(H, E, I).;false;false
9;true,false,true;hasposition(L, C), publication(J, L).;false;false
9;true,false;publication(J, A), publication(K, B).;true;true
9;false;professor(B).;false;false
9;true;publication(D, A), publication(D, B).;true;true


WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.7929315437951615;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then return 0.6672286583325434;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else if ( haswordauthor(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( sametitle(D, E) )
%   | then return 0.4989999868007996;  // std dev = 3,679, 190,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=172 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.39507634590357293;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordauthor(A, E) )
%   | then if ( haswordauthor(F, E) )
%   | | then return -0.17245948654557822;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D) )
%   | then if ( haswordauthor(A, D), haswordauthor(E, F) )
%   | | then return 0.29966466893173643;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | | else return -0.1492170350970812;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D), haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return 0.23339774057067722;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( haswordauthor(F, G) )
%   | | then return -0.1312476348454945;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.18690985463554097;  // std dev = 3,349, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordauthor(A, E), haswordauthor(B, F) )
%   | then if ( haswordauthor(G, E), haswordauthor(G, F) )
%   | | then return -0.11699291229643706;  // std dev = 3,73e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(B, D) )
%   | then return 0.14514892746867283;  // std dev = 0,247, 190,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=172 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then return 0.12954490026531137;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   else if ( haswordauthor(A, D) )
%   | then if ( haswordauthor(E, D) )
%   | | then return -0.11993309810484466;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( author(C, B) )
%   then if ( haswordauthor(A, D), haswordauthor(B, D) )
%   | then return 0.11002742817140003;  // std dev = 0,247, 184,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=172 */
%   | else if ( haswordauthor(A, E), haswordauthor(B, F) )
%   | | then if ( author(C, G), haswordauthor(G, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1078399889818941;  // std dev = 3,73e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.678571
   AUC PR    = 0.946746
   CLL	      = -0.25821
   Precision = 0.946746 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.972644


Total learning time: 2.202 seconds
Total inference time: 2.014 seconds
AUC ROC: 0.678571


Results scoring model
   AUC ROC   = 0.666667
   AUC PR    = 0.934783
   CLL	      = -0.276767
   Precision = 0.934783 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966292


Total scoring time: 0.881 seconds
Parameter learned model CLL: -0.276767


Structure after Parameter Learning
[['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 6, 0], 'true': [0.247, 12, 172]}], ['sameauthor(A, B)', {'': 'haswordauthor(A, C), haswordauthor(B, C)', 'false': 'haswordauthor(A, D)'}, {'false,false': [0.0, 0, 0], 'true': [0.247, 12, 172], 'false,true': [0.0, 6, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'sametitle(D, E)'}, {'true,true': [3.679, 18, 172], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, E)', 'true': 'haswordauthor(D, C)', 'false,true': 'haswordauthor(F, E)'}, {'true,true': [3.349, 12, 172], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [5.27e-09, 6, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(A, D), haswordauthor(E, F)', 'true': 'haswordauthor(B, D)'}, {'true,true,false': [0.0, 6, 0], 'true,true,true': [3.349, 12, 172], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true,true': 'haswordauthor(E, D)', 'true,false': 'haswordauthor(F, G)', 'true': 'haswordauthor(B, D), haswordauthor(A, D)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true,true': [3.349, 12, 172], 'false': [0.0, 0, 0], 'true,false,true': [5.27e-09, 6, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, E), haswordauthor(B, F)', 'true': 'haswordauthor(D, C)', 'false,true': 'haswordauthor(G, E), haswordauthor(G, F)'}, {'true,true': [3.349, 12, 172], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,true': [3.73e-09, 6, 0]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(B, D)'}, {'true,true': [0.247, 18, 172], 'false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['sameauthor(A, B)', {'': 'haswordauthor(B, C), haswordauthor(A, C)', 'false': 'haswordauthor(A, D)', 'false,true': 'haswordauthor(E, D)'}, {'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 6, 0], 'true': [0.247, 12, 172]}], ['sameauthor(A, B)', {'': 'author(C, B)', 'true': 'haswordauthor(A, D), haswordauthor(B, D)', 'true,false': 'haswordauthor(A, E), haswordauthor(B, F)', 'true,false,true': 'author(C, G), haswordauthor(G, E)'}, {'true,true': [0.247, 12, 172], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,false,true,false': [3.73e-09, 6, 0]}]]
[{'': [0.060964083175810056, -6.938893903907228e-18], 'false': [-6.938893903907228e-18, nan], 'false,true': [-6.938893903907228e-18, nan]}, {'': [0.06096408317580048, -2.3129646346357427e-18], 'false': [-2.3129646346357427e-18, nan]}, {'': [0.07122502219237517, nan], 'true': [0.07122502219237517, nan]}, {'': [0.06096408317580376, 4.625929269271485e-18], 'false': [4.625929269271485e-18, nan], 'false,true': [4.625929269271485e-18, nan], 'true': [0.06096408317580376, nan]}, {'': [0.06520095816055181, nan], 'true,true': [0.060964083175803145, 0.0], 'true': [0.06520095816055181, nan]}, {'': [0.06310523788418286, nan], 'true,true': [0.06096408317580407, nan], 'true,false': [4.625929269271485e-18, nan], 'true': [0.06096408317580407, 4.625929269271485e-18]}, {'': [0.06096408317580343, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan], 'false,true': [2.3129646346357427e-18, nan], 'true': [0.06096408317580343, nan]}, {'': [0.06108652320117621, nan], 'true': [0.06108652320117621, nan]}, {'': [0.060964083175803194, -2.3129646346357427e-18], 'false': [-2.3129646346357427e-18, nan], 'false,true': [-2.3129646346357427e-18, nan]}, {'': [0.06049049986910458, nan], 'true,false,true': [nan, 2.3129646346357427e-18], 'true,false': [2.3129646346357427e-18, nan], 'true': [0.06096408317580364, 2.3129646346357427e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(E, F).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, D), haswordauthor(A, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, D), haswordauthor(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,92e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.7899671169176937;  // std dev = 1,672, 44,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.7613747415511246;  // std dev = 1,646, 31,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.719473412210954;  // std dev = 2,06e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.7330265844616978;  // std dev = 1,58e-07, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.4602993117344256;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.40687088443309344;  // std dev = 1,625, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.7418237738441927;  // std dev = 0,035, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.5553664367462835;  // std dev = 4,04e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.31090315153912984;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.36169068531168397;  // std dev = 0,821, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(H, C) )
%   | | | then return 0.5688121258703648;  // std dev = 4,21e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.4744733855770051;  // std dev = 2,311, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then return 0.42286184311016534;  // std dev = 0,039, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( author(F, B), venue(F, E) )
%   | | | then return 0.5392393906945324;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.27931596779510953;  // std dev = 1,770, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( author(I, A), venue(I, H) )
%   | | | then return 0.5188061706182817;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.28351528071887916;  // std dev = 1,709, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else return 0.4510457020485721;  // std dev = 0,343, 54,000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(D, E) )
%   then if ( haswordauthor(A, F), haswordauthor(B, F) )
%   | then if ( haswordtitle(G, F) )
%   | | then return 0.33114552622235377;  // std dev = 0,167, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(A, H), haswordtitle(I, H) )
%   | | | then return 0.07831807437420867;  // std dev = 1,071, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.28355477305261434;  // std dev = 2,235, 80,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=73 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.2623594419382241;  // std dev = 0,146, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.21326312311492424;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.19915669600556915;  // std dev = 0,889, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(A, G) )
%   | | | then return 0.269291053715933;  // std dev = 2,11e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.06468821439858274;  // std dev = 1,509, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.08723601687886508;  // std dev = 1,439, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.29421940263985985;  // std dev = 0,084, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.21487018911090472;  // std dev = 0,128, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.17967761588657705;  // std dev = 0,014, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15181035050491273;  // std dev = 0,884, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(A, G) )
%   | | | then return 0.2196831974950406;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.04962812858141879;  // std dev = 1,510, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.06744851451174962;  // std dev = 1,440, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.23707142118962557;  // std dev = 0,074, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18086760707895191;  // std dev = 0,112, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.1843428610856644;  // std dev = 3,65e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | | then return -0.023567811202659023;  // std dev = 1,613, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.15056907080236773;  // std dev = 1,647, 42,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.15561864190996447;  // std dev = 0,099, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.17542891416302597;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09483139913494772;  // std dev = 0,838, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.15821902403082755;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.020462710614724156;  // std dev = 1,443, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.04362269668342252;  // std dev = 1,510, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.17422117460795516;  // std dev = 0,059, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.1362610897654218;  // std dev = 0,089, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.15148656204573016;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07335436401218672;  // std dev = 0,840, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then return 0.05705589018261131;  // std dev = 0,526, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.1222815858790245;  // std dev = 1,448, 44,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.09979695389021466;  // std dev = 1,484, 31,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.505497
   AUC PR    = 0.896234
   CLL	      = -0.473658
   Precision = 0.942238 at threshold = 0.5
   Recall    = 0.815625
   F1        = 0.874372


Total learning time: 9.57 seconds
Total inference time: 39.836 seconds
AUC ROC: 0.505497


Results scoring model
   AUC ROC   = 0.988372
   AUC PR    = 0.998777
   CLL	      = -0.192579
   Precision = 0.966292 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.982857


Total scoring time: 1.202 seconds
Refined model CLL: -0.192579


Refining iteration 2
********************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
0;true,true;haswordauthor(B, D).;true;true
0;true,true,false;haswordvenue(F, D).;true;true
0;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
1;true,true;haswordauthor(B, D).;true;true
1;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
1;true,true,false;haswordvenue(F, D).;true;true
1;true,false,true;haswordauthor(B, G).;true;true
1;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
1;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;true,false,false;haswordvenue(H, C).;true;true
2;true,false,true;haswordvenue(G, E).;true;true
2;true,false;haswordauthor(B, E), haswordtitle(F, E).;true;true
2;true;haswordtitle(D, C).;true;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
3;true,true;haswordauthor(A, D).;true;true
3;true,true,false;author(F, B), venue(F, E).;true;true
3;true,false,true;author(I, A), venue(I, H).;true;true
3;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
3;true;haswordauthor(B, D), haswordvenue(E, D).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, F), haswordauthor(B, F).;true;true
4;true;haswordtitle(G, F).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
5;true,true;haswordauthor(B, D).;true;true
5;true,false,false;haswordauthor(A, I), haswordvenue(J, I).;true;true
5;true,true,false;haswordvenue(F, D).;true;true
5;true,false,true;haswordauthor(A, G).;true;true
5;true,false;haswordauthor(B, G), haswordvenue(H, G).;true;true
5;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
6;true,true;haswordauthor(B, D).;true;true
6;true,false,false;haswordauthor(A, I), haswordvenue(J, I).;true;true
6;true,true,false;haswordvenue(F, D).;true;true
6;true,false,true;haswordauthor(A, G).;true;true
6;true,false;haswordauthor(B, G), haswordvenue(H, G).;true;true
6;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;true,false;haswordvenue(E, C).;true;true
7;true;haswordtitle(D, C).;true;true
8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
8;true,true;haswordauthor(B, D).;true;true
8;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
8;true,true,false;haswordvenue(F, D).;true;true
8;true,false,true;haswordauthor(B, G).;true;true
8;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
8;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;true,true;haswordauthor(B, D).;true;true
9;true,true,false;haswordvenue(F, D).;true;true
9;true;haswordauthor(A, D), haswordtitle(E, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,92e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordtitle(H, G) )
%   | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.7899671169176937;  // std dev = 1,672, 44,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.7613747415511246;  // std dev = 1,646, 31,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.719473412210954;  // std dev = 2,06e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.7330265844616978;  // std dev = 1,58e-07, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.4602993117344256;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.40687088443309344;  // std dev = 1,625, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.7418237738441927;  // std dev = 0,035, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.5553664367462835;  // std dev = 4,04e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.31090315153912984;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.36169068531168397;  // std dev = 0,821, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(H, C) )
%   | | | then return 0.5688121258703648;  // std dev = 4,21e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.4744733855770051;  // std dev = 2,311, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then return 0.42286184311016534;  // std dev = 0,039, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( author(F, B), venue(F, E) )
%   | | | then return 0.5392393906945324;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.27931596779510953;  // std dev = 1,770, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( author(I, A), venue(I, H) )
%   | | | then return 0.5188061706182817;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.28351528071887916;  // std dev = 1,709, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else return 0.4510457020485721;  // std dev = 0,343, 54,000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.33114552622235377;  // std dev = 0,167, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(A, G), haswordtitle(F, G) )
%   | | | then return -0.2459960220167183;  // std dev = 0,103, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.2551657428057259;  // std dev = 0,640, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return 0.27401335164483687;  // std dev = 1,599, 45,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.3076228303885034;  // std dev = 1,548, 35,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.2623594419382241;  // std dev = 0,146, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.193139409384583;  // std dev = 0,084, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.18357295546312166;  // std dev = 0,749, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(A, G) )
%   | | | then return 0.2711726792071667;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.060091355079401214;  // std dev = 1,505, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.08943080861522366;  // std dev = 1,439, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.2911956024634736;  // std dev = 0,105, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.21487018911090472;  // std dev = 0,128, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.1651921377824824;  // std dev = 0,075, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.14285825897017088;  // std dev = 0,741, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(A, G) )
%   | | | then return 0.22099907776990166;  // std dev = 5,37e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.046182493407473074;  // std dev = 1,506, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.06909479583899862;  // std dev = 1,440, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.23502153110507487;  // std dev = 0,092, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18086760707895191;  // std dev = 0,112, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.18529864661892506;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(B, F), haswordvenue(G, F) )
%   | | | then return -0.014426622483149397;  // std dev = 1,575, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.14642260081458552;  // std dev = 1,619, 42,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.15561864190996447;  // std dev = 0,099, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.16265457184914386;  // std dev = 0,074, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09169554611550541;  // std dev = 0,699, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.1589379684986335;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.02250212199030608;  // std dev = 1,443, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.03891063652039107;  // std dev = 1,507, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.17351278498899259;  // std dev = 0,074, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.1362610897654218;  // std dev = 0,089, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.14195035381108304;  // std dev = 0,067, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07260001262644679;  // std dev = 0,700, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.1388243059483233;  // std dev = 3,33e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.01785373802910306;  // std dev = 1,443, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.030079508612600763;  // std dev = 1,507, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.15005343244286118;  // std dev = 0,066, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.505273
   AUC PR    = 0.896213
   CLL	      = -0.462053
   Precision = 0.942238 at threshold = 0.5
   Recall    = 0.815625
   F1        = 0.874372


Total learning time: 2.45 seconds
Total inference time: 2.803 seconds
AUC ROC: 0.505273


Results scoring model
   AUC ROC   = 0.992248
   AUC PR    = 0.999195
   CLL	      = -0.188696
   Precision = 0.966292 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.982857


Total scoring time: 0.942 seconds
Refined model CLL: -0.188696


Refining iteration 3
********************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
0;true,true;haswordauthor(B, D).;true;true
0;true,true,false;haswordvenue(F, D).;true;true
0;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
1;true,true;haswordauthor(B, D).;true;true
1;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
1;true,true,false;haswordvenue(F, D).;true;true
1;true,false,true;haswordauthor(B, G).;true;true
1;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
1;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;true,false,false;haswordvenue(H, C).;true;true
2;true,false,true;haswordvenue(G, E).;true;true
2;true,false;haswordauthor(B, E), haswordtitle(F, E).;true;true
2;true;haswordtitle(D, C).;true;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
3;true,true;haswordauthor(A, D).;true;true
3;true,true,false;author(F, B), venue(F, E).;true;true
3;true,false,true;author(I, A), venue(I, H).;true;true
3;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
3;true;haswordauthor(B, D), haswordvenue(E, D).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
5;true,true;haswordauthor(B, D).;true;true
5;true,false,false;haswordauthor(A, I), haswordvenue(J, I).;true;true
5;true,true,false;haswordvenue(F, D).;true;true
5;true,false,true;haswordauthor(A, G).;true;true
5;true,false;haswordauthor(B, G), haswordvenue(H, G).;true;true
5;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
6;true,true;haswordauthor(B, D).;true;true
6;true,false,false;haswordauthor(A, I), haswordvenue(J, I).;true;true
6;true,true,false;haswordvenue(F, D).;true;true
6;true,false,true;haswordauthor(A, G).;true;true
6;true,false;haswordauthor(B, G), haswordvenue(H, G).;true;true
6;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;true,false;haswordvenue(E, C).;true;true
7;true;haswordtitle(D, C).;true;true
8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
8;true,true;haswordauthor(B, D).;true;true
8;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
8;true,true,false;haswordvenue(F, D).;true;true
8;true,false,true;haswordauthor(B, G).;true;true
8;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
8;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;true,true;haswordauthor(B, D).;true;true
9;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
9;true,true,false;haswordvenue(F, D).;true;true
9;true,false,true;haswordauthor(B, G).;true;true
9;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
9;true;haswordauthor(A, D), haswordtitle(E, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,92e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.8581489350995116;  // std dev = 2,23e-07, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.5854216623722396;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.524815601766179;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.719473412210954;  // std dev = 2,06e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.7194734122109547;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.498380757744019;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.448295606241962;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.7194734122109544;  // std dev = 4,21e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.5553664367462835;  // std dev = 4,04e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.3043033203440437;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.3328054984329875;  // std dev = 0,771, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(H, C) )
%   | | | then return 0.5553664367462845;  // std dev = 5,96e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.48553028072793347;  // std dev = 2,263, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then return 0.4175135841583104;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( author(F, B), venue(F, E) )
%   | | | then return 0.5845204837739559;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.29033638552950847;  // std dev = 1,738, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( author(I, A), venue(I, H) )
%   | | | then return 0.5574124861414642;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.29271950725999624;  // std dev = 1,679, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else return 0.44027586991242934;  // std dev = 0,319, 54,000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3311678675910456;  // std dev = 0,147, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(A, G), haswordtitle(F, G) )
%   | | | then return -0.24631294214188226;  // std dev = 0,110, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.23229000786492068;  // std dev = 0,597, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | | then return 0.2938815779881952;  // std dev = 1,460, 44,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.2881603874848759;  // std dev = 1,610, 36,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=32 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.26235688318492356;  // std dev = 0,129, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.19360780147878764;  // std dev = 0,092, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.18556337709625356;  // std dev = 0,758, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(A, G) )
%   | | | then return 0.2603049946951827;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.10001571387651575;  // std dev = 1,505, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.11791636476555543;  // std dev = 1,434, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.2777778025783793;  // std dev = 0,079, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.21485767408509363;  // std dev = 0,112, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.16561523150731508;  // std dev = 0,082, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1441781749965585;  // std dev = 0,750, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(A, G) )
%   | | | then return 0.21337693356571094;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.07615762801813954;  // std dev = 1,505, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.09033794870139221;  // std dev = 1,435, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.22566507705402047;  // std dev = 0,069, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1808517194434881;  // std dev = 0,099, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.1797465058144005;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.04386542448221639;  // std dev = 0,745, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.1411060954564049;  // std dev = 2,116, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.15560218653208285;  // std dev = 0,088, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.1493425566875306;  // std dev = 0,096, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09526561513357894;  // std dev = 0,702, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.15475119681269509;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.03885889862737741;  // std dev = 1,438, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.029631523746376398;  // std dev = 1,496, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.17315751687648662;  // std dev = 0,111, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.13624522769790412;  // std dev = 0,079, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.13174298664379488;  // std dev = 0,087, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07533657894444964;  // std dev = 0,703, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.13557218456837197;  // std dev = 2,11e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.030612715793208064;  // std dev = 1,439, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.02300712086880269;  // std dev = 1,496, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.14982476655944868;  // std dev = 0,100, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.505664
   AUC PR    = 0.896246
   CLL	      = -0.459568
   Precision = 0.942238 at threshold = 0.5
   Recall    = 0.815625
   F1        = 0.874372


Total learning time: 2.491 seconds
Total inference time: 2.734 seconds
AUC ROC: 0.505664


Results scoring model
   AUC ROC   = 0.992248
   AUC PR    = 0.999195
   CLL	      = -0.187563
   Precision = 0.966292 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.982857


Total scoring time: 0.972 seconds
Refined model CLL: -0.187563


Refining iteration 4
********************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
0;true,true;haswordauthor(B, D).;true;true
0;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
0;true,true,false;haswordvenue(F, D).;true;true
0;true,false,true;haswordauthor(B, G).;true;true
0;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
0;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
1;true,true;haswordauthor(B, D).;true;true
1;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
1;true,true,false;haswordvenue(F, D).;true;true
1;true,false,true;haswordauthor(B, G).;true;true
1;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
1;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;true,false,false;haswordvenue(H, C).;true;true
2;true,false,true;haswordvenue(G, E).;true;true
2;true,false;haswordauthor(B, E), haswordtitle(F, E).;true;true
2;true;haswordtitle(D, C).;true;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
3;true,true;haswordauthor(A, D).;true;true
3;true,true,false;author(F, B), venue(F, E).;true;true
3;true,false,true;author(I, A), venue(I, H).;true;true
3;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
3;true;haswordauthor(B, D), haswordvenue(E, D).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
5;true,true;haswordauthor(B, D).;true;true
5;true,false,false;haswordauthor(A, I), haswordvenue(J, I).;true;true
5;true,false,true;haswordauthor(A, G).;true;true
5;true,false;haswordauthor(B, G), haswordvenue(H, G).;true;true
5;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
6;true,true;haswordauthor(B, D).;true;true
6;true,false,false;haswordauthor(A, I), haswordvenue(J, I).;true;true
6;true,true,false;haswordvenue(F, D).;true;true
6;true,false,true;haswordauthor(A, G).;true;true
6;true,false;haswordauthor(B, G), haswordvenue(H, G).;true;true
6;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;true,false;haswordvenue(E, C).;true;true
7;true;haswordtitle(D, C).;true;true
8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
8;true,true;haswordauthor(B, D).;true;true
8;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
8;true,false,true;haswordauthor(B, G).;true;true
8;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
8;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;true,true;haswordauthor(B, D).;true;true
9;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
9;true,false,true;haswordauthor(B, G).;true;true
9;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
9;true;haswordauthor(A, D), haswordtitle(E, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,92e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.8581489350995116;  // std dev = 2,23e-07, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.5854216623722396;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.524815601766179;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.719473412210954;  // std dev = 2,06e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.7194734122109547;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.498380757744019;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.448295606241962;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.7194734122109544;  // std dev = 4,21e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.5553664367462835;  // std dev = 4,04e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.3043033203440437;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.3328054984329875;  // std dev = 0,771, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(H, C) )
%   | | | then return 0.5553664367462845;  // std dev = 5,96e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.48553028072793347;  // std dev = 2,263, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then return 0.4175135841583104;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( author(F, B), venue(F, E) )
%   | | | then return 0.5845204837739559;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.29033638552950847;  // std dev = 1,738, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( author(I, A), venue(I, H) )
%   | | | then return 0.5574124861414642;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.29271950725999624;  // std dev = 1,679, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else return 0.44027586991242934;  // std dev = 0,319, 54,000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3311678675910456;  // std dev = 0,147, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(A, G), haswordtitle(F, G) )
%   | | | then return -0.24631294214188226;  // std dev = 0,110, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.23229000786492068;  // std dev = 0,597, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | | then return 0.27633447104537157;  // std dev = 1,563, 45,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.3105574909684113;  // std dev = 1,502, 35,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.26235688318492356;  // std dev = 0,129, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.20408991887174427;  // std dev = 0,096, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.26594052881414176;  // std dev = 0,595, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.2636978082541208;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.09633055359827243;  // std dev = 1,503, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, J), haswordvenue(K, J) )
%   | | | then return 0.12072433709566344;  // std dev = 1,434, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.2741129308459718;  // std dev = 0,087, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.21485767408509363;  // std dev = 0,112, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.19450632978248228;  // std dev = 0,156, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15297692037039026;  // std dev = 0,638, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(B, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(A, G) )
%   | | | then return 0.21576232993165576;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.07341400918955375;  // std dev = 1,504, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, I), haswordvenue(J, I) )
%   | | | then return 0.09241823896025693;  // std dev = 1,435, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.22312276265191353;  // std dev = 0,076, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1808517194434881;  // std dev = 0,099, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.1814882294217881;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.025338402790333274;  // std dev = 0,692, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.13621058043160722;  // std dev = 2,121, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.15560218653208285;  // std dev = 0,088, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.1729721524607883;  // std dev = 0,130, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.15897750417743714;  // std dev = 0,523, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.15606732907331447;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.04139414837315465;  // std dev = 1,438, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, J), haswordvenue(K, J) )
%   | | | then return 0.028297993695480566;  // std dev = 1,496, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.171522678749754;  // std dev = 0,110, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.13624522769790412;  // std dev = 0,079, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.1502223616093738;  // std dev = 0,116, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.12750393535766716;  // std dev = 0,527, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.13659629671755716;  // std dev = 2,79e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.03257463249650722;  // std dev = 1,438, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, J), haswordvenue(K, J) )
%   | | | then return 0.021979043414465844;  // std dev = 1,497, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.14857578036699184;  // std dev = 0,099, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.505831
   AUC PR    = 0.896265
   CLL	      = -0.407583
   Precision = 0.942652 at threshold = 0.5
   Recall    = 0.821875
   F1        = 0.87813


Total learning time: 2.555 seconds
Total inference time: 3.139 seconds
AUC ROC: 0.505831


Results scoring model
   AUC ROC   = 0.992248
   AUC PR    = 0.999195
   CLL	      = -0.185463
   Precision = 0.966292 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.982857


Total scoring time: 0.946 seconds
Refined model CLL: -0.185463


Refining iteration 5
********************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
0;true,true;haswordauthor(B, D).;true;true
0;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
0;true,true,false;haswordvenue(F, D).;true;true
0;true,false,true;haswordauthor(B, G).;true;true
0;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
0;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
1;true,true;haswordauthor(B, D).;true;true
1;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
1;true,true,false;haswordvenue(F, D).;true;true
1;true,false,true;haswordauthor(B, G).;true;true
1;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
1;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;true,false,false;haswordvenue(H, C).;true;true
2;true,false,true;haswordvenue(G, E).;true;true
2;true,false;haswordauthor(B, E), haswordtitle(F, E).;true;true
2;true;haswordtitle(D, C).;true;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
3;true,true;haswordauthor(A, D).;true;true
3;true,true,false;author(F, B), venue(F, E).;true;true
3;true,false,true;author(I, A), venue(I, H).;true;true
3;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
3;true;haswordauthor(B, D), haswordvenue(E, D).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
5;true,true;haswordauthor(B, D).;true;true
5;true,false,false;haswordauthor(A, J), haswordvenue(K, J).;true;true
5;true,true,false;haswordauthor(B, F), haswordtitle(G, F).;true;true
5;true,false,true;haswordauthor(A, H).;true;true
5;true,false;haswordauthor(B, H), haswordvenue(I, H).;true;true
5;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
6;true,true;haswordauthor(B, D).;true;true
6;true,false,false;haswordauthor(A, I), haswordvenue(J, I).;true;true
6;true,false,true;haswordauthor(A, G).;true;true
6;true,false;haswordauthor(B, G), haswordvenue(H, G).;true;true
6;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;true,false;haswordvenue(E, C).;true;true
7;true;haswordtitle(D, C).;true;true
8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
8;true,true;haswordauthor(B, D).;true;true
8;true,false,false;haswordauthor(B, J), haswordvenue(K, J).;true;true
8;true,false,true;haswordauthor(B, H).;true;true
8;true,false;haswordauthor(A, H), haswordvenue(I, H).;true;true
8;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;true,true;haswordauthor(B, D).;true;true
9;true,false,false;haswordauthor(B, J), haswordvenue(K, J).;true;true
9;true,false,true;haswordauthor(B, H).;true;true
9;true,false;haswordauthor(A, H), haswordvenue(I, H).;true;true
9;true;haswordauthor(A, D), haswordtitle(E, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,92e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.8581489350995116;  // std dev = 2,23e-07, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.5854216623722396;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.524815601766179;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.719473412210954;  // std dev = 2,06e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.7194734122109547;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.498380757744019;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.448295606241962;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.7194734122109544;  // std dev = 4,21e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.5553664367462835;  // std dev = 4,04e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.3043033203440437;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.3328054984329875;  // std dev = 0,771, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(H, C) )
%   | | | then return 0.5553664367462845;  // std dev = 5,96e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.48553028072793347;  // std dev = 2,263, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then return 0.4175135841583104;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( author(F, B), venue(F, E) )
%   | | | then return 0.5845204837739559;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.29033638552950847;  // std dev = 1,738, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( author(I, A), venue(I, H) )
%   | | | then return 0.5574124861414642;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.29271950725999624;  // std dev = 1,679, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else return 0.44027586991242934;  // std dev = 0,319, 54,000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3311678675910456;  // std dev = 0,147, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(A, E) )
%   | | | then return 0.3207118471601494;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.10308819351638053;  // std dev = 1,631, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | | then return 0.10492983210715394;  // std dev = 1,551, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.3566077977385279;  // std dev = 0,264, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.26235688318492356;  // std dev = 0,129, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.2657612863202509;  // std dev = 0,115, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.2635757490472346;  // std dev = 0,557, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.2551722425694891;  // std dev = 3,65e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.1452150504658725;  // std dev = 1,509, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, J), haswordvenue(K, J) )
%   | | | then return 0.16212402090134942;  // std dev = 1,432, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.2623438154464483;  // std dev = 0,055, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.21485767408509363;  // std dev = 0,112, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.21793321083803452;  // std dev = 0,101, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.20510323827035132;  // std dev = 0,548, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.20975771563253545;  // std dev = 4,71e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.10983482209215727;  // std dev = 1,509, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, J), haswordvenue(K, J) )
%   | | | then return 0.12293287742600705;  // std dev = 1,434, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.21483836311011387;  // std dev = 0,048, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1808517194434881;  // std dev = 0,099, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.1770964977452775;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.034950595739262416;  // std dev = 0,662, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.1439215238596079;  // std dev = 2,111, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.15560218653208285;  // std dev = 0,088, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.1784110625561552;  // std dev = 0,086, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.13243031739107872;  // std dev = 0,552, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.15274385809367083;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.06142639077941274;  // std dev = 1,437, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, J), haswordvenue(K, J) )
%   | | | then return 0.053154567985660935;  // std dev = 1,498, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.16511132446056068;  // std dev = 0,089, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.13624522769790412;  // std dev = 0,079, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | | then return -0.20777941057618898;  // std dev = 0,226, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09013481305284883;  // std dev = 0,489, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.13400703000801117;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.047947750429146965;  // std dev = 1,437, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, J), haswordvenue(K, J) )
%   | | | then return 0.040955714880744044;  // std dev = 1,499, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.14363636852632763;  // std dev = 0,080, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.505831
   AUC PR    = 0.896265
   CLL	      = -0.408394
   Precision = 0.942238 at threshold = 0.5
   Recall    = 0.815625
   F1        = 0.874372


Total learning time: 2.493 seconds
Total inference time: 2.761 seconds
AUC ROC: 0.505831


Results scoring model
   AUC ROC   = 0.992248
   AUC PR    = 0.999195
   CLL	      = -0.184865
   Precision = 0.966292 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.982857


Total scoring time: 0.967 seconds
Refined model CLL: -0.184865


Refining iteration 6
********************************
Candidate for revision
0;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
0;true,true;haswordauthor(B, D).;true;true
0;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
0;true,true,false;haswordvenue(F, D).;true;true
0;true,false,true;haswordauthor(B, G).;true;true
0;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
0;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
1;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
1;true,true;haswordauthor(B, D).;true;true
1;true,false,false;haswordauthor(B, I), haswordvenue(J, I).;true;true
1;true,true,false;haswordvenue(F, D).;true;true
1;true,false,true;haswordauthor(B, G).;true;true
1;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
1;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
2;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
2;true,false,false;haswordvenue(H, C).;true;true
2;true,false,true;haswordvenue(G, E).;true;true
2;true,false;haswordauthor(B, E), haswordtitle(F, E).;true;true
2;true;haswordtitle(D, C).;true;true
3;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
3;true,true;haswordauthor(A, D).;true;true
3;true,true,false;author(F, B), venue(F, E).;true;true
3;true,false,true;author(I, A), venue(I, H).;true;true
3;true,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
3;true;haswordauthor(B, D), haswordvenue(E, D).;true;true
4;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
4;true,false,false;haswordauthor(A, G), haswordvenue(H, G).;true;true
4;true,false,true;haswordauthor(A, E).;true;true
4;true,false;haswordauthor(B, E), haswordvenue(F, E).;true;true
4;true;haswordtitle(D, C).;true;true
5;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
5;true,true;haswordauthor(B, D).;true;true
5;true,false,false;haswordauthor(A, J), haswordvenue(K, J).;true;true
5;true,false,true;haswordauthor(A, H).;true;true
5;true,false;haswordauthor(B, H), haswordvenue(I, H).;true;true
5;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
6;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
6;true,true;haswordauthor(B, D).;true;true
6;true,false,false;haswordauthor(A, J), haswordvenue(K, J).;true;true
6;true,false,true;haswordauthor(A, H).;true;true
6;true,false;haswordauthor(B, H), haswordvenue(I, H).;true;true
6;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
7;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
7;true,false;haswordvenue(E, C).;true;true
7;true;haswordtitle(D, C).;true;true
8;;sameauthor(A, B) :- haswordauthor(B, C), haswordauthor(A, C).;true;true
8;true,true;haswordauthor(B, D).;true;true
8;true,false,false;haswordauthor(B, J), haswordvenue(K, J).;true;true
8;true,true,false;haswordauthor(B, F), haswordtitle(G, F).;true;true
8;true,false,true;haswordauthor(B, H).;true;true
8;true,false;haswordauthor(A, H), haswordvenue(I, H).;true;true
8;true;haswordauthor(A, D), haswordtitle(E, D).;true;true
9;;sameauthor(A, B) :- haswordauthor(A, C), haswordauthor(B, C).;true;true
9;true,true;haswordauthor(B, D).;true;true
9;true,false,false;haswordauthor(B, J), haswordvenue(K, J).;true;true
9;true,false,true;haswordauthor(B, H).;true;true
9;true,false;haswordauthor(A, H), haswordvenue(I, H).;true;true
9;true;haswordauthor(A, D), haswordtitle(E, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.8581489350995115;  // std dev = 2,92e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.8581489350995116;  // std dev = 2,23e-07, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.5854216623722396;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.524815601766179;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.719473412210954;  // std dev = 2,06e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( haswordauthor(B, G) )
%   | | | then return 0.7194734122109547;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.498380757744019;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, I), haswordvenue(J, I) )
%   | | | then return 0.448295606241962;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.7194734122109544;  // std dev = 4,21e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.5553664367462835;  // std dev = 4,04e-07, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordtitle(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.3043033203440437;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.3328054984329875;  // std dev = 0,771, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(H, C) )
%   | | | then return 0.5553664367462845;  // std dev = 5,96e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.48553028072793347;  // std dev = 2,263, 47,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=40 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(B, D), haswordvenue(E, D) )
%   | then if ( haswordauthor(A, D) )
%   | | then return 0.4175135841583104;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( author(F, B), venue(F, E) )
%   | | | then return 0.5845204837739559;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.29033638552950847;  // std dev = 1,738, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | then if ( author(I, A), venue(I, H) )
%   | | | then return 0.5574124861414642;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.29271950725999624;  // std dev = 1,679, 30,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=24 */
%   | | else return 0.44027586991242934;  // std dev = 0,319, 54,000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3311678675910456;  // std dev = 0,147, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordauthor(B, E), haswordvenue(F, E) )
%   | | then if ( haswordauthor(A, E) )
%   | | | then return 0.3207118471601494;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.10308819351638053;  // std dev = 1,631, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | else if ( haswordauthor(A, G), haswordvenue(H, G) )
%   | | | then return 0.10492983210715394;  // std dev = 1,551, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.3566077977385279;  // std dev = 0,264, 28,000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.26235688318492356;  // std dev = 0,129, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.2657612863202509;  // std dev = 0,115, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.2635757490472346;  // std dev = 0,557, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.2551722425694891;  // std dev = 3,65e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.1452150504658725;  // std dev = 1,509, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, J), haswordvenue(K, J) )
%   | | | then return 0.16212402090134942;  // std dev = 1,432, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.2623438154464483;  // std dev = 0,055, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.21485767408509363;  // std dev = 0,112, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.21793321083803452;  // std dev = 0,101, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.20510323827035132;  // std dev = 0,548, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordauthor(B, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(A, H) )
%   | | | then return 0.20975771563253545;  // std dev = 4,71e-08, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.10983482209215727;  // std dev = 1,509, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordauthor(A, J), haswordvenue(K, J) )
%   | | | then return 0.12293287742600705;  // std dev = 1,434, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.21483836311011387;  // std dev = 0,048, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1808517194434881;  // std dev = 0,099, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | else if ( haswordvenue(E, C) )
%   | | then return 0.1770964977452775;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( haswordauthor(A, F), haswordvenue(G, F) )
%   | | | then return 0.030531929985598432;  // std dev = 1,513, 14,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.1433883152369008;  // std dev = 1,647, 42,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR sameauthor(A, B):
%   if ( haswordauthor(B, C), haswordauthor(A, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.15560218653208285;  // std dev = 0,088, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.19847151191989806;  // std dev = 0,111, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.13765548094362098;  // std dev = 0,529, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.15274385809367083;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.08701707274104775;  // std dev = 1,435, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, J), haswordvenue(K, J) )
%   | | | then return 0.04971940842302808;  // std dev = 1,511, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.16056324469208283;  // std dev = 0,039, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR sameauthor(A, B):
%   if ( haswordauthor(A, C), haswordauthor(B, C) )
%   then if ( haswordauthor(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(B, D) )
%   | | then return 0.13624522769790412;  // std dev = 0,079, 95,000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else if ( haswordauthor(B, F), haswordtitle(G, F) )
%   | | | then return -0.16927858777697835;  // std dev = 0,098, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.11113381481465215;  // std dev = 0,534, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordauthor(A, H), haswordvenue(I, H) )
%   | | then if ( haswordauthor(B, H) )
%   | | | then return 0.13400703000801117;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.06729872634319657;  // std dev = 1,436, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( haswordauthor(B, J), haswordvenue(K, J) )
%   | | | then return 0.03826745685979858;  // std dev = 1,512, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.1400908802218855;  // std dev = 0,035, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.505831
   AUC PR    = 0.896265
   CLL	      = -0.390798
   Precision = 0.944056 at threshold = 0.5
   Recall    = 0.84375
   F1        = 0.891089


Total learning time: 2.322 seconds
Total inference time: 2.985 seconds
AUC ROC: 0.505831


Results scoring model
   AUC ROC   = 0.992248
   AUC PR    = 0.999195
   CLL	      = -0.185194
   Precision = 0.966292 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.982857


Total scoring time: 0.921 seconds
Refined model CLL: -0.185194


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.505831
   AUC PR    = 0.896265
   CLL	      = -0.408394
   Precision = 0.942238 at threshold = 0.5
   Recall    = 0.815625
   F1        = 0.874372


Total learning time: 30.913999999999998 seconds
Total inference time: 2.761 seconds
AUC ROC: 0.505831
Total revision time: 30.913999999999998
Best scored revision CLL: -0.184865


Dataset: 13_uwcse_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:24:13
{'Inference time': 2.761, 'F1': 0.874372, 'Precision': [0.942238, 0.5], 'AUC PR': 0.896265, 'CLL': -0.408394, 'Learning time': 30.913999999999998, 'AUC ROC': 0.505831, 'parameter': {'Inference time': 2.014, 'F1': 0.972644, 'Precision': [0.946746, 0.5], 'AUC PR': 0.946746, 'CLL': -0.25821, 'Learning time': 2.202, 'AUC ROC': 0.678571, 'Recall': 1.0}, 'Recall': 0.815625}


Start learning from scratch in target domain

