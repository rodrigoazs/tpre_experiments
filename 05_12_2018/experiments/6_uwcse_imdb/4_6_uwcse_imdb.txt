Starting experiment #4 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), publication(E, F) )
%   | then return 0.2719420385477882;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.3343394112899885;  // std dev = 0,499, 21,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   else if ( advisedby(A, G), publication(H, G) )
%   | then if ( advisedby(I, G), publication(H, I) )
%   | | then if ( ta(J, I, K) )
%   | | | then return 0.4071685429426485;  // std dev = 3,554, 51,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=28 */
%   | | | else return 0.3479448534668582;  // std dev = 3,499, 49,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=24 */
%   | | else return 0.5052077586289241;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, L) )
%   | | then if ( projectmember(M, L) )
%   | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3660854430360191;  // std dev = 3,968, 63,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=32 */
%   | | else if ( publication(N, A) )
%   | | | then return 0.40360348055405776;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.26991364098186527;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F) )
%   | then return 0.24415759818152227;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( tempadvisedby(A, G), publication(E, G) )
%   | | then return 0.14573025403358983;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.38382549212882794;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( advisedby(A, H), publication(I, H) )
%   | then if ( advisedby(J, H), publication(I, J) )
%   | | then if ( ta(K, J, L), ta(M, A, N) )
%   | | | then return 0.41642849982537694;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.31201240418820314;  // std dev = 4,662, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.43201604470553195;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, P) )
%   | | then if ( tempadvisedby(Q, P), publication(R, Q) )
%   | | | then return 0.23608194499203672;  // std dev = 2,268, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.3591364384585264;  // std dev = 3,408, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else return 0.26147489333905416;  // std dev = 0,496, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.2536123636968206;  // std dev = 0,496, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then return 0.19052749095245716;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else return 0.24995008915750644;  // std dev = 0,497, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( publication(J, A), advisedby(A, K) )
%   | then if ( tempadvisedby(L, K) )
%   | | then if ( publication(J, L) )
%   | | | then return 0.07998228352737054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.26737286733450316;  // std dev = 2,868, 33,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else return 0.39942942007431154;  // std dev = 0,476, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, M), projectmember(N, M) )
%   | | then return 0.17277850045663037;  // std dev = 0,481, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( publication(P, A), tempadvisedby(A, Q) )
%   | | | then return 0.19671042141139303;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.2780590897681892;  // std dev = 4,284, 74,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=39 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( publication(E, A), advisedby(A, F) )
%   | then if ( tempadvisedby(G, F) )
%   | | then return 0.1752604628976001;  // std dev = 0,496, 34,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   | | else return 0.06416862439903813;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( ta(C, H, D), advisedby(H, I) )
%   | | then return 0.24529293287282844;  // std dev = 0,494, 45,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   | | else if ( ta(C, J, K), advisedby(J, L) )
%   | | | then return 0.15394972561575518;  // std dev = 3,010, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | | else return 0.20037385111507547;  // std dev = 1,860, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( advisedby(A, M), projectmember(N, M) )
%   | then return 0.15915818622748196;  // std dev = 0,487, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( publication(P, A), tempadvisedby(A, Q) )
%   | | then return 0.15985058603958643;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( advisedby(A, R), tempadvisedby(S, R) )
%   | | | then return 0.21792226087763755;  // std dev = 3,667, 54,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | | else return 0.2400917011351066;  // std dev = 4,104, 69,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=38 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( publication(E, F), tempadvisedby(G, F) )
%   | then return 0.12179739635476525;  // std dev = 0,493, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else return 0.18833014463431103;  // std dev = 0,493, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( publication(H, A), advisedby(A, I) )
%   | then if ( tempadvisedby(J, I) )
%   | | then if ( ta(K, J, L), publication(M, J) )
%   | | | then return 0.2140792508074736;  // std dev = 1,473, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.13635301685498144;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | else return 0.2630141415687879;  // std dev = 0,475, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, N) )
%   | | then if ( advisedby(P, N), publication(Q, P) )
%   | | | then return 0.1864203490448756;  // std dev = 3,571, 52,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=27 */
%   | | | else return 0.1487365533097284;  // std dev = 1,993, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | else if ( advisedby(A, R) )
%   | | | then return 0.1608492939092976;  // std dev = 4,624, 87,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=45 */
%   | | | else return 0.09959113707819854;  // std dev = 2,303, 22,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then if ( publication(G, E), ta(H, F, I) )
%   | | then if ( samecourse(C, H) )
%   | | | then return 0.09177518564949191;  // std dev = 2,650, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | | | else return 0.22623094902861643;  // std dev = 1,808, 14,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | else return 0.046487650664913026;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.24961451976100316;  // std dev = 1,132, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( tempadvisedby(A, J), projectmember(K, J) )
%   | then return 0.18962150897726518;  // std dev = 1,086, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( advisedby(A, L), publication(M, L) )
%   | | then if ( tempadvisedby(N, L), ta(P, N, Q) )
%   | | | then return 0.17340701662601474;  // std dev = 2,796, 32,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=18 */
%   | | | else return 0.11512796436088592;  // std dev = 3,387, 47,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=25 */
%   | | else if ( advisedby(A, R), projectmember(S, R) )
%   | | | then return 0.05538078567591136;  // std dev = 1,744, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.12967602479689974;  // std dev = 5,027, 103,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=51 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then if ( ta(H, F, I), publication(G, E) )
%   | | then return 0.10368379812603376;  // std dev = 0,491, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | | else if ( tempadvisedby(J, E), ta(C, J, K) )
%   | | | then return -0.0598858397486387;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.04582275714827296;  // std dev = 2,615, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | else return 0.18852159137698946;  // std dev = 1,131, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( tempadvisedby(A, L), publication(M, A) )
%   | then return 0.04621144987556609;  // std dev = 0,492, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | else if ( publication(N, A) )
%   | | then if ( publication(N, P), advisedby(Q, P) )
%   | | | then return 0.1011682510988494;  // std dev = 3,609, 53,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=28 */
%   | | | else return 0.21897514393069126;  // std dev = 1,385, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( tempadvisedby(A, R) )
%   | | | then return 0.11051404380595667;  // std dev = 3,870, 61,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=32 */
%   | | | else return 0.0795413418223847;  // std dev = 3,981, 65,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=31 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.08014684050117353;  // std dev = 0,490, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then return 0.0338986777791882;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else if ( tempadvisedby(A, J), publication(K, J) )
%   | | | then return 0.13373443594559112;  // std dev = 1,447, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return -0.059771873605098925;  // std dev = 1,106, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( advisedby(A, L), publication(M, A) )
%   | then return 0.08564765235717296;  // std dev = 0,492, 53,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=29 */
%   | else if ( tempadvisedby(A, N) )
%   | | then if ( tempadvisedby(P, N), publication(Q, P) )
%   | | | then return 0.02430706844647201;  // std dev = 1,986, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.15742841635290006;  // std dev = 1,927, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( advisedby(A, R) )
%   | | | then return 0.07610098297647029;  // std dev = 3,393, 47,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=24 */
%   | | | else return 0.007957000260062195;  // std dev = 1,700, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( advisedby(A, C), ta(D, A, E) )
%   then if ( advisedby(F, C), publication(G, F) )
%   | then return 0.03826573026013697;  // std dev = 0,493, 74,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=34 */
%   | else return 0.12209668880642101;  // std dev = 1,131, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( advisedby(A, H), tempadvisedby(I, H) )
%   | then if ( ta(J, I, K), publication(L, H) )
%   | | then if ( publication(L, A), publication(L, I) )
%   | | | then return -0.11470190074363691;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.10999320711415986;  // std dev = 2,649, 29,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | | else if ( projectmember(M, H), publication(N, A) )
%   | | | then return 0.08172065672036342;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.009092979497781142;  // std dev = 2,785, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | else if ( publication(P, A), advisedby(A, Q) )
%   | | then return 0.11661644430761729;  // std dev = 0,474, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( tempadvisedby(A, R), publication(S, A) )
%   | | | then return 0.022809526613992565;  // std dev = 1,706, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.0573369622586526;  // std dev = 5,009, 103,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=52 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( advisedby(A, C), ta(D, A, E) )
%   then if ( publication(F, C) )
%   | then if ( advisedby(G, C), publication(H, G) )
%   | | then if ( tempadvisedby(I, C), publication(F, I) )
%   | | | then return -0.0070136759038763995;  // std dev = 1,305, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.03683239305465791;  // std dev = 3,944, 64,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=30 */
%   | | else return 0.1423706765438809;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.03532788302785408;  // std dev = 1,081, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( publication(J, A), tempadvisedby(A, K) )
%   | then if ( publication(J, K) )
%   | | then return -0.02016209938179342;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.0923845723217872;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( publication(L, A) )
%   | | then return 0.05380983909635435;  // std dev = 0,490, 62,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=34 */
%   | | else if ( tempadvisedby(A, M) )
%   | | | then return 0.05157912897905713;  // std dev = 3,849, 61,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=32 */
%   | | | else return 0.031788166932888294;  // std dev = 3,972, 65,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=31 */


Predicates from source: ['inphase(person,prequals).', 'ta(course,person,quarter).', 'publication(title,person).', 'tempadvisedby(person,person).', 'advisedby(person,person).', 'projectmember(project,person).', 'samecourse(course,course).']

Starting fold 1

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.02170729637145996
   Generating paths time   = 1.4562199115753174
   Generating mappings time   = 0.042029380798339844
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 4.76837158203125e-07
   Total time   = 1.519963264465332


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(L, A).;true;true
0;false,false,false;movie(N, A).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,false,true;workedunder(L, M).;false;false
0;true;workedunder(F, A), movie(E, F).;false;false
0;false,true;workedunder(G, I), movie(H, I).;false;false
1;;genre(A, B) :- movie(E, A).;true;true
1;false,false;workedunder(P, A).;true;false
1;false;workedunder(H, A), movie(I, H).;true;true
1;true,false;workedunder(G, A), movie(E, G).;false;false
1;false,false,true;workedunder(P, Q), movie(R, Q).;false;false
1;false,true;workedunder(H, J), movie(I, J).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false,false;workedunder(M, A), workedunder(M, N).;false;true
2;false,false,false;movie(P, A), workedunder(Q, A).;false;false
2;false,true,true;movie(J, L).;false;false
2;false;movie(J, A), workedunder(K, A).;true;true
2;false,true;workedunder(K, L).;true;false
3;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
3;false,false;movie(P, A), workedunder(Q, A).;false;true
3;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
3;true,false,false;workedunder(L, J).;false;false
3;false;workedunder(M, A), workedunder(M, N).;false;true
3;true;workedunder(F, G).;false;true
3;true,false;workedunder(I, H).;false;true
4;;genre(A, B) :- movie(E, A).;true;true
4;false,false;workedunder(N, A).;true;true
4;false,false,false;workedunder(R, A).;false;false
4;false,true,true;movie(M, J).;false;false
4;false,true;workedunder(I, J).;true;false
4;false,false,true;workedunder(N, P), movie(Q, P).;false;false
4;false;movie(H, A), workedunder(I, A).;true;true
4;true;movie(E, F), workedunder(F, G).;false;false
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true,true,true;workedunder(C, H).;false;false
5;false,false;workedunder(L, A), movie(M, L).;true;true
5;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
5;true,true;movie(G, E).;true;false
5;false;workedunder(J, A), workedunder(J, K).;false;true
5;false,false,true;workedunder(L, N).;false;false
5;true;workedunder(E, F), movie(G, F).;true;false
6;;genre(A, B) :- workedunder(E, A).;true;true
6;false,false;movie(N, A).;true;true
6;true,true,false;workedunder(E, J).;false;false
6;true,true;movie(G, E).;false;true
6;false;workedunder(L, A), movie(M, A).;false;true
6;false,false,true;movie(N, P), workedunder(P, Q).;false;false
6;true;workedunder(E, F), movie(G, F).;true;false
6;false,false,false;workedunder(R, A).;false;false
7;;genre(A, B) :- workedunder(F, E).;false;true
7;false;workedunder(L, A), movie(M, A).;false;true
7;false,false,false;workedunder(R, A).;false;false
7;false,false,true;workedunder(N, P), movie(Q, P).;false;false
7;false,false;workedunder(N, A).;true;true
8;;genre(A, B) :- workedunder(C, A).;true;true
8;false,false;movie(P, A), workedunder(Q, A).;false;true
8;false,false,false;workedunder(R, A), movie(S, A).;false;false
8;false,true,false;workedunder(H, M), movie(N, A).;false;false
8;false,true,true;movie(L, A), movie(L, I).;false;false
8;false,true;movie(L, H).;true;true
8;false;workedunder(H, A), workedunder(H, I).;true;true
8;true;workedunder(C, F), movie(G, F).;false;false
9;;genre(A, B) :- workedunder(C, A).;true;true
9;true,true,true;workedunder(C, I), movie(F, I).;false;false
9;false,false;movie(L, A).;false;true
9;false,false,false;workedunder(M, A).;false;false
9;true,true;workedunder(C, G), movie(H, G).;true;false
9;false;movie(J, A), workedunder(K, A).;true;true
9;true;movie(F, C).;true;false
9;false,true;movie(J, K).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.2215250292763393;  // std dev = 1,566, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.5002131558403854;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), workedunder(J, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13637023346435795;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.12830007847517144;  // std dev = 1,170, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.34804117623637526;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), workedunder(H, I) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A), movie(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(L, A), workedunder(L, M) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13542257003772978;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.2737454750658212;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A) )
%   | | then if ( movie(H, I), workedunder(I, J) )
%   | | | then return -0.12033481306242616;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.057314207518385694;  // std dev = 0,776, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.21302927201615532;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11382179867182232;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( movie(D, C) )
%   | then if ( workedunder(C, E), movie(F, E) )
%   | | then if ( workedunder(C, G), movie(D, G) )
%   | | | then return 0.1794923358166991;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(J, A) )
%   | | then return -0.10283575895454698;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.354252
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.319 seconds
Total inference time: 0.703 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 0, 11], 'true,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [5.27e-09, 11, 0], 'true,true': [4.21e-08, 0, 11]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.566, 11, 11]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A), workedunder(J, K)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(D, E)'}, {'false,false,false,false': [7.45e-09, 11, 0], 'true,true': [0.0, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [1.17, 11, 11], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A), movie(K, J)', 'false,false,false': 'workedunder(L, A), workedunder(L, M)', 'true,true': 'movie(E, C)', 'false': 'workedunder(H, A), workedunder(H, I)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [2.11e-08, 0, 11], 'false,false,false,false': [0.0, 11, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,false': 'movie(H, A)', 'true,true': 'movie(E, C)', 'false': 'workedunder(F, A), movie(G, A)', 'false,false,true': 'movie(H, I), workedunder(I, J)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false,true,true': [0.0, 11, 0], 'true,true,true': [0.0, 0, 11], 'true,true,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.776, 11, 11]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A), movie(K, A)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false,false,false': [0.0, 11, 0], 'true,true': [0.0, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(C, G), movie(D, G)', 'false,false': 'movie(J, A)', 'true,true': 'workedunder(C, E), movie(F, E)', 'false': 'movie(H, A), workedunder(I, A)', 'true': 'movie(D, C)'}, {'true,true,true,true': [0.0, 0, 11], 'true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 11, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999958, nan], 'true': [-1.6148698540002277e-16, -1.0092936587501423e-17]}, {'': [0.17847162811629388, nan], 'true': [1.6148698540002277e-16, 2.523234146875356e-18], 'true,false': [nan, 2.523234146875356e-18]}, {'': [0.11145008534151403, nan]}, {'': [0.0, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18], 'true': [0.0, nan]}, {'': [0.062195810698099964, nan], 'true': [0.062195810698099964, nan]}, {'': [4.0371746350005693e-17, 0.0], 'true,true,true': [4.0371746350005693e-17, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true': [4.0371746350005693e-17, nan], 'false': [nan, 0.0], 'true': [4.0371746350005693e-17, nan]}, {'': [-2.0185873175002847e-17, -2.523234146875356e-18], 'false,false': [-2.523234146875356e-18, nan], 'true,true': [-2.0185873175002847e-17, nan], 'false': [nan, -2.523234146875356e-18], 'false,false,true': [-2.523234146875356e-18, nan], 'true': [-2.0185873175002847e-17, nan]}, {'': [0.027384169050170663, nan]}, {'': [-2.0185873175002847e-17, -5.046468293750712e-18], 'false': [nan, -5.046468293750712e-18], 'false,false,false': [nan, -5.046468293750712e-18], 'false,false': [nan, -5.046468293750712e-18], 'true': [-2.0185873175002847e-17, nan]}, {'': [-5.046468293750712e-18, -1.1354553660939102e-17], 'true,true,true': [-5.046468293750712e-18, nan], 'false,false': [-1.1354553660939102e-17, nan], 'true,true': [-5.046468293750712e-18, nan], 'false': [nan, -1.1354553660939102e-17], 'true': [-5.046468293750712e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.051 seconds
Total inference time: 0.518 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 10:58:04
{'Mapping results': {'Finding best mapping': 4.76837158203125e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.042029380798339844, 'Total time': 1.519963264465332, 'Generating paths time': 1.4562199115753174, 'Knowledge compiling time': 0.02170729637145996}, 'CLL': -0.352709, 'Learning time': 2.37, 'AUC PR': 0.8, 'F1': 0.888889, 'AUC ROC': 0.875, 'Recall': 1.0, 'Precision': [0.8, 0.5], 'parameter': {'CLL': -0.354252, 'Learning time': 1.319, 'AUC PR': 0.8, 'F1': 0.888889, 'AUC ROC': 0.875, 'Recall': 1.0, 'Precision': [0.8, 0.5], 'Inference time': 0.703}, 'Inference time': 0.518}


Start learning from scratch in target domain

Starting fold 2

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.016893863677978516
   Generating paths time   = 1.8933849334716797
   Generating mappings time   = 0.056360483169555664
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 1.9666471481323242


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(L, A).;true;true
0;false,false,false;movie(N, A).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,false,true;workedunder(L, M).;false;false
0;true;workedunder(F, A), movie(E, F).;false;false
0;false,true;workedunder(G, I), movie(H, I).;false;false
1;;genre(A, B) :- movie(E, A).;true;true
1;false,false;workedunder(P, A).;true;false
1;false;workedunder(H, A), movie(I, H).;true;true
1;true,false;workedunder(G, A), movie(E, G).;false;false
1;false,false,true;workedunder(P, Q), movie(R, Q).;false;false
1;false,true;workedunder(H, J), movie(I, J).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false,false;workedunder(M, A), workedunder(M, N).;false;true
2;false,false,false;movie(P, A), workedunder(Q, A).;false;false
2;false,true,true;movie(J, L).;false;false
2;false;movie(J, A), workedunder(K, A).;true;true
2;false,true;workedunder(K, L).;true;false
3;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
3;false,false;movie(P, A), workedunder(Q, A).;false;true
3;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
3;true,false,false;workedunder(L, J).;false;false
3;false;workedunder(M, A), workedunder(M, N).;false;true
3;true;workedunder(F, G).;false;true
3;true,false;workedunder(I, H).;false;true
4;;genre(A, B) :- movie(E, A).;true;true
4;false,false;workedunder(N, A).;true;true
4;false,false,false;workedunder(R, A).;false;false
4;false,true,true;movie(M, J).;false;false
4;false,true;workedunder(I, J).;true;false
4;false,false,true;workedunder(N, P), movie(Q, P).;false;false
4;false;movie(H, A), workedunder(I, A).;true;true
4;true;movie(E, F), workedunder(F, G).;false;false
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true,true,true;workedunder(C, H).;false;false
5;false,false;workedunder(L, A), movie(M, L).;true;true
5;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
5;true,true;movie(G, E).;true;false
5;false;workedunder(J, A), workedunder(J, K).;false;true
5;false,false,true;workedunder(L, N).;false;false
5;true;workedunder(E, F), movie(G, F).;true;false
6;;genre(A, B) :- workedunder(E, A).;true;true
6;false,false;movie(N, A).;true;true
6;true,true,false;workedunder(E, J).;false;false
6;true,true;movie(G, E).;false;true
6;false;workedunder(L, A), movie(M, A).;false;true
6;false,false,true;movie(N, P), workedunder(P, Q).;false;false
6;true;workedunder(E, F), movie(G, F).;true;false
6;false,false,false;workedunder(R, A).;false;false
7;;genre(A, B) :- workedunder(F, E).;false;true
7;false;workedunder(L, A), movie(M, A).;false;true
7;false,false,false;workedunder(R, A).;false;false
7;false,false,true;workedunder(N, P), movie(Q, P).;false;false
7;false,false;workedunder(N, A).;true;true
8;;genre(A, B) :- workedunder(C, A).;true;true
8;false,false;movie(P, A), workedunder(Q, A).;false;true
8;false,false,false;workedunder(R, A), movie(S, A).;false;false
8;false,true,false;workedunder(H, M), movie(N, A).;false;false
8;false,true,true;movie(L, A), movie(L, I).;false;false
8;false,true;movie(L, H).;true;true
8;false;workedunder(H, A), workedunder(H, I).;true;true
8;true;workedunder(C, F), movie(G, F).;false;false
9;;genre(A, B) :- workedunder(C, A).;true;true
9;true,true,true;workedunder(C, I), movie(F, I).;false;false
9;false,false;movie(L, A).;false;true
9;false,false,false;workedunder(M, A).;false;false
9;true,true;workedunder(C, G), movie(H, G).;true;false
9;false;movie(J, A), workedunder(K, A).;true;true
9;true;movie(F, C).;true;false
9;false,true;movie(J, K).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.657810671461647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.22604488330790526;  // std dev = 1,802, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.45675549767123047;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), workedunder(J, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13690342743409517;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.1302622000414589;  // std dev = 1,487, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.3119387228258979;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), workedunder(H, I) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A), movie(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(L, A), workedunder(L, M) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13612058479727152;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.24084717461085145;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A) )
%   | | then if ( movie(H, I), workedunder(I, J) )
%   | | | then return -0.12089173852433242;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.05370562954480235;  // std dev = 1,208, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.18065580086084737;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11393131117041279;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( movie(D, C) )
%   | then if ( workedunder(C, E), movie(F, E) )
%   | | then if ( workedunder(C, G), movie(D, G) )
%   | | | then return 0.14764410433093975;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(J, A) )
%   | | then return -0.10292581718110562;  // std dev = 9,13e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.333495
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.123 seconds
Total inference time: 0.631 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [5.27e-09, 11, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.802, 12, 12]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A), workedunder(J, K)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(D, E)'}, {'false,false,false,false': [0.0, 11, 0], 'true,true': [0.961, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [1.487, 12, 12], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A), movie(K, J)', 'false,false,false': 'workedunder(L, A), workedunder(L, M)', 'true,true': 'movie(E, C)', 'false': 'workedunder(H, A), workedunder(H, I)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [0.961, 1, 12], 'false,false,false,false': [0.0, 11, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,false': 'movie(H, A)', 'true,true': 'movie(E, C)', 'false': 'workedunder(F, A), movie(G, A)', 'false,false,true': 'movie(H, I), workedunder(I, J)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false,true,true': [0.0, 11, 0], 'true,true,true': [0.961, 1, 12], 'true,true,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.208, 12, 12]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A), movie(K, A)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false,false,false': [5.27e-09, 11, 0], 'true,true': [0.961, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(C, G), movie(D, G)', 'false,false': 'movie(J, A)', 'true,true': 'workedunder(C, E), movie(F, E)', 'false': 'movie(H, A), workedunder(I, A)', 'true': 'movie(D, C)'}, {'true,true,true,true': [0.961, 1, 12], 'true,true,false': [0.0, 0, 0], 'false,false,true': [9.13e-09, 11, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999956, nan], 'true': [0.07100591715976314, -1.0092936587501423e-17]}, {'': [0.19076867375623552, nan], 'true': [0.07100591715976333, 2.523234146875356e-18], 'true,false': [nan, 2.523234146875356e-18]}, {'': [0.13533629047183346, nan]}, {'': [0.0710059171597634, -7.569702440626067e-18], 'false,false': [nan, -7.569702440626067e-18], 'false': [nan, -7.569702440626067e-18], 'false,false,false': [nan, -7.569702440626067e-18], 'true': [0.0710059171597634, nan]}, {'': [0.09210103133023939, nan], 'true': [0.09210103133023939, nan]}, {'': [0.07100591715976323, 0.0], 'true,true,true': [0.07100591715976323, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true': [0.07100591715976323, nan], 'false': [nan, 0.0], 'true': [0.07100591715976323, nan]}, {'': [0.07100591715976336, -5.046468293750712e-18], 'false,false': [-5.046468293750712e-18, nan], 'true,true': [0.07100591715976336, nan], 'false': [nan, -5.046468293750712e-18], 'false,false,true': [-5.046468293750712e-18, nan], 'true': [0.07100591715976336, nan]}, {'': [0.06075765223288233, nan]}, {'': [0.07100591715976333, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'true': [0.07100591715976333, nan]}, {'': [0.07100591715976333, 7.569702440626067e-18], 'true,true,true': [0.07100591715976333, nan], 'false,false': [7.569702440626067e-18, nan], 'true,true': [0.07100591715976333, nan], 'false': [nan, 7.569702440626067e-18], 'true': [0.07100591715976333, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.369 seconds
Total inference time: 0.565 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 10:58:10
{'Mapping results': {'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.056360483169555664, 'Total time': 1.9666471481323242, 'Generating paths time': 1.8933849334716797, 'Knowledge compiling time': 0.016893863677978516}, 'CLL': -0.320018, 'Learning time': 2.492, 'AUC PR': 0.813953, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Recall': 1.0, 'Precision': [0.813953, 0.5], 'parameter': {'CLL': -0.333495, 'Learning time': 1.123, 'AUC PR': 0.813953, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Recall': 1.0, 'Precision': [0.813953, 0.5], 'Inference time': 0.631}, 'Inference time': 0.565}


Start learning from scratch in target domain

Starting fold 3

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.017283916473388672
   Generating paths time   = 1.868025779724121
   Generating mappings time   = 0.055565595626831055
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 1.9408824443817139


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(L, A).;true;true
0;false,false,false;movie(N, A).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,false,true;workedunder(L, M).;false;false
0;true;workedunder(F, A), movie(E, F).;false;false
0;false,true;workedunder(G, I), movie(H, I).;false;false
1;;genre(A, B) :- movie(E, A).;true;true
1;false,false;workedunder(P, A).;true;false
1;false;workedunder(H, A), movie(I, H).;true;true
1;true,false;workedunder(G, A), movie(E, G).;false;false
1;false,false,true;workedunder(P, Q), movie(R, Q).;false;false
1;false,true;workedunder(H, J), movie(I, J).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false,false;workedunder(M, A), workedunder(M, N).;false;true
2;false,false,false;movie(P, A), workedunder(Q, A).;false;false
2;false,true,true;movie(J, L).;false;false
2;false;movie(J, A), workedunder(K, A).;true;true
2;false,true;workedunder(K, L).;true;false
3;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
3;false,false;movie(P, A), workedunder(Q, A).;false;true
3;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
3;true,false,false;workedunder(L, J).;false;false
3;false;workedunder(M, A), workedunder(M, N).;false;true
3;true;workedunder(F, G).;false;true
3;true,false;workedunder(I, H).;false;true
4;;genre(A, B) :- movie(E, A).;true;true
4;false,false;workedunder(N, A).;true;true
4;false,false,false;workedunder(R, A).;false;false
4;false,true,true;movie(M, J).;false;false
4;false,true;workedunder(I, J).;true;false
4;false,false,true;workedunder(N, P), movie(Q, P).;false;false
4;false;movie(H, A), workedunder(I, A).;true;true
4;true;movie(E, F), workedunder(F, G).;false;false
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true,true,true;workedunder(C, H).;false;false
5;false,false;workedunder(L, A), movie(M, L).;true;true
5;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
5;true,true;movie(G, E).;true;false
5;false;workedunder(J, A), workedunder(J, K).;false;true
5;false,false,true;workedunder(L, N).;false;false
5;true;workedunder(E, F), movie(G, F).;true;false
6;;genre(A, B) :- workedunder(E, A).;true;true
6;false,false;movie(N, A).;true;true
6;true,true,false;workedunder(E, J).;false;false
6;true,true;movie(G, E).;false;true
6;false;workedunder(L, A), movie(M, A).;false;true
6;false,false,true;movie(N, P), workedunder(P, Q).;false;false
6;true;workedunder(E, F), movie(G, F).;true;false
6;false,false,false;workedunder(R, A).;false;false
7;;genre(A, B) :- workedunder(F, E).;false;true
7;false;workedunder(L, A), movie(M, A).;false;true
7;false,false,false;workedunder(R, A).;false;false
7;false,false,true;workedunder(N, P), movie(Q, P).;false;false
7;false,false;workedunder(N, A).;true;true
8;;genre(A, B) :- workedunder(C, A).;true;true
8;false,false;movie(P, A), workedunder(Q, A).;false;true
8;false,false,false;workedunder(R, A), movie(S, A).;false;false
8;false,true,false;workedunder(H, M), movie(N, A).;false;false
8;false,true,true;movie(L, A), movie(L, I).;false;false
8;false,true;movie(L, H).;true;true
8;false;workedunder(H, A), workedunder(H, I).;true;true
8;true;workedunder(C, F), movie(G, F).;false;false
9;;genre(A, B) :- workedunder(C, A).;true;true
9;true,true,true;workedunder(C, I), movie(F, I).;false;false
9;false,false;movie(L, A).;false;true
9;false,false,false;workedunder(M, A).;false;false
9;true,true;workedunder(C, G), movie(H, G).;true;false
9;false;movie(J, A), workedunder(K, A).;true;true
9;true;movie(F, C).;true;false
9;false,true;movie(J, K).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.49238913840392534;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.23976942954603;  // std dev = 2,646, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.34003398980794736;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), workedunder(J, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13853322814260766;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.1411856477435625;  // std dev = 2,479, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.22211820217774172;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), workedunder(H, I) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A), movie(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(L, A), workedunder(L, M) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13885007619607936;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.16679090165368063;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A) )
%   | | then if ( movie(H, I), workedunder(I, J) )
%   | | | then return -0.12306459764977054;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.05378552849262927;  // std dev = 2,338, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.11311866307506709;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11578113249409308;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( movie(D, C) )
%   | then if ( workedunder(C, E), movie(F, E) )
%   | | then if ( workedunder(C, G), movie(D, G) )
%   | | | then return 0.08648166800331543;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(J, A) )
%   | | then return -0.10444489604620853;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.295855
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.359 seconds
Total inference time: 0.722 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false': [0.0, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [5.27e-09, 11, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [2.646, 18, 18]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A), workedunder(J, K)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(D, E)'}, {'false,false,false,false': [0.0, 11, 0], 'true,true': [2.245, 7, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [2.479, 18, 18], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A), movie(K, J)', 'false,false,false': 'workedunder(L, A), workedunder(L, M)', 'true,true': 'movie(E, C)', 'false': 'workedunder(H, A), workedunder(H, I)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [2.245, 7, 18], 'false,false,false,false': [5.27e-09, 11, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,false': 'movie(H, A)', 'true,true': 'movie(E, C)', 'false': 'workedunder(F, A), movie(G, A)', 'false,false,true': 'movie(H, I), workedunder(I, J)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false,true,true': [5.27e-09, 11, 0], 'true,true,true': [2.245, 7, 18], 'true,true,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [2.338, 18, 18]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A), movie(K, A)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false,false,false': [0.0, 11, 0], 'true,true': [2.245, 7, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(C, G), movie(D, G)', 'false,false': 'movie(J, A)', 'true,true': 'workedunder(C, E), movie(F, E)', 'false': 'movie(H, A), workedunder(I, A)', 'true': 'movie(D, C)'}, {'true,true,true,true': [2.245, 7, 18], 'true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 11, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.2499999999999995, nan], 'true': [0.2015999999999996, -1.0092936587501423e-17]}, {'': [0.22099738300738728, nan], 'true': [0.2016000000000001, 2.523234146875356e-18], 'true,false': [nan, 2.523234146875356e-18]}, {'': [0.1945443430451362, nan]}, {'': [0.20160000000000022, -5.046468293750712e-18], 'false,false': [nan, -5.046468293750712e-18], 'false': [nan, -5.046468293750712e-18], 'false,false,false': [nan, -5.046468293750712e-18], 'true': [0.20160000000000022, nan]}, {'': [0.1706658713149335, nan], 'true': [0.1706658713149335, nan]}, {'': [0.20159999999999992, 2.523234146875356e-18], 'true,true,true': [0.20159999999999992, nan], 'false,false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'true,true': [0.20159999999999992, nan], 'false': [nan, 2.523234146875356e-18], 'true': [0.20159999999999992, nan]}, {'': [0.2016, 2.523234146875356e-18], 'false,false': [2.523234146875356e-18, nan], 'true,true': [0.2016, nan], 'false': [nan, 2.523234146875356e-18], 'false,false,true': [2.523234146875356e-18, nan], 'true': [0.2016, nan]}, {'': [0.15185923235937138, nan]}, {'': [0.20159999999999997, -5.046468293750712e-18], 'false,false': [nan, -5.046468293750712e-18], 'false': [nan, -5.046468293750712e-18], 'false,false,false': [nan, -5.046468293750712e-18], 'true': [0.20159999999999997, nan]}, {'': [0.20160000000000008, -2.523234146875356e-18], 'true,true,true': [0.20160000000000008, nan], 'false,false': [-2.523234146875356e-18, nan], 'true,true': [0.20160000000000008, nan], 'false': [nan, -2.523234146875356e-18], 'true': [0.20160000000000008, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.45 seconds
Total inference time: 0.567 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 10:58:17
{'Mapping results': {'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.055565595626831055, 'Total time': 1.9408824443817139, 'Generating paths time': 1.868025779724121, 'Knowledge compiling time': 0.017283916473388672}, 'CLL': -0.264596, 'Learning time': 2.809, 'AUC PR': 0.935484, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Recall': 1.0, 'Precision': [0.935484, 0.5], 'parameter': {'CLL': -0.295855, 'Learning time': 1.359, 'AUC PR': 0.935484, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Recall': 1.0, 'Precision': [0.935484, 0.5], 'Inference time': 0.722}, 'Inference time': 0.567}


Start learning from scratch in target domain

Starting fold 4

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.02844977378845215
   Generating paths time   = 1.931652307510376
   Generating mappings time   = 0.054947614669799805
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 2.0150580406188965


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(L, A).;true;true
0;false,false,false;movie(N, A).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,false,true;workedunder(L, M).;false;false
0;true;workedunder(F, A), movie(E, F).;false;false
0;false,true;workedunder(G, I), movie(H, I).;false;false
1;;genre(A, B) :- movie(E, A).;true;true
1;false,false;workedunder(P, A).;true;false
1;false;workedunder(H, A), movie(I, H).;true;true
1;true,false;workedunder(G, A), movie(E, G).;false;false
1;false,false,true;workedunder(P, Q), movie(R, Q).;false;false
1;false,true;workedunder(H, J), movie(I, J).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false,false;workedunder(M, A), workedunder(M, N).;false;true
2;false,false,false;movie(P, A), workedunder(Q, A).;false;false
2;false,true,true;movie(J, L).;false;false
2;false;movie(J, A), workedunder(K, A).;true;true
2;false,true;workedunder(K, L).;true;false
3;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
3;false,false;movie(P, A), workedunder(Q, A).;false;true
3;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
3;true,false,false;workedunder(L, J).;false;false
3;false;workedunder(M, A), workedunder(M, N).;false;true
3;true;workedunder(F, G).;false;true
3;true,false;workedunder(I, H).;false;true
4;;genre(A, B) :- movie(E, A).;true;true
4;false,false;workedunder(N, A).;true;true
4;false,false,false;workedunder(R, A).;false;false
4;false,true,true;movie(M, J).;false;false
4;false,true;workedunder(I, J).;true;false
4;false,false,true;workedunder(N, P), movie(Q, P).;false;false
4;false;movie(H, A), workedunder(I, A).;true;true
4;true;movie(E, F), workedunder(F, G).;false;false
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true,true,true;workedunder(C, H).;false;false
5;false,false;workedunder(L, A), movie(M, L).;true;true
5;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
5;true,true;movie(G, E).;true;false
5;false;workedunder(J, A), workedunder(J, K).;false;true
5;false,false,true;workedunder(L, N).;false;false
5;true;workedunder(E, F), movie(G, F).;true;false
6;;genre(A, B) :- workedunder(E, A).;true;true
6;false,false;movie(N, A).;true;true
6;true,true,false;workedunder(E, J).;false;false
6;true,true;movie(G, E).;false;true
6;false;workedunder(L, A), movie(M, A).;false;true
6;false,false,true;movie(N, P), workedunder(P, Q).;false;false
6;true;workedunder(E, F), movie(G, F).;true;false
6;false,false,false;workedunder(R, A).;false;false
7;;genre(A, B) :- workedunder(F, E).;false;true
7;false;workedunder(L, A), movie(M, A).;false;true
7;false,false,false;workedunder(R, A).;false;false
7;false,false,true;workedunder(N, P), movie(Q, P).;false;false
7;false,false;workedunder(N, A).;true;true
8;;genre(A, B) :- workedunder(C, A).;true;true
8;false,false;movie(P, A), workedunder(Q, A).;false;true
8;false,false,false;workedunder(R, A), movie(S, A).;false;false
8;false,true,false;workedunder(H, M), movie(N, A).;false;false
8;false,true,true;movie(L, A), movie(L, I).;false;false
8;false,true;movie(L, H).;true;true
8;false;workedunder(H, A), workedunder(H, I).;true;true
8;true;workedunder(C, F), movie(G, F).;false;false
9;;genre(A, B) :- workedunder(C, A).;true;true
9;true,true,true;workedunder(C, I), movie(F, I).;false;false
9;false,false;movie(L, A).;false;true
9;false,false,false;workedunder(M, A).;false;false
9;true,true;workedunder(C, G), movie(H, G).;true;false
9;false;movie(J, A), workedunder(K, A).;true;true
9;true;movie(F, C).;true;false
9;false,true;movie(J, K).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.23409923944267316;  // std dev = 1,173, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.38655270713914897;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), workedunder(J, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13785792350709075;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.13589411097609744;  // std dev = 1,058, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.2569284345764438;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), workedunder(H, I) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A), movie(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(L, A), workedunder(L, M) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13762468421756882;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.19421163996410945;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A) )
%   | | then if ( movie(H, I), workedunder(I, J) )
%   | | | then return -0.12209006905555404;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.05196735767083174;  // std dev = 0,962, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.13719447965230375;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11477098554717098;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( movie(D, C) )
%   | then if ( workedunder(C, E), movie(F, E) )
%   | | then if ( workedunder(C, G), movie(D, G) )
%   | | | then return 0.10724812612711195;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(J, A) )
%   | | then return -0.10361585853229892;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.324815
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 1.139 seconds
Total inference time: 0.66 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false': [0.0, 3, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 3, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.173, 4, 4]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A), workedunder(J, K)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(D, E)'}, {'false,false,false,false': [0.0, 3, 0], 'true,true': [0.894, 1, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [1.058, 4, 4], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A), movie(K, J)', 'false,false,false': 'workedunder(L, A), workedunder(L, M)', 'true,true': 'movie(E, C)', 'false': 'workedunder(H, A), workedunder(H, I)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [0.894, 1, 4], 'false,false,false,false': [0.0, 3, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,false': 'movie(H, A)', 'true,true': 'movie(E, C)', 'false': 'workedunder(F, A), movie(G, A)', 'false,false,true': 'movie(H, I), workedunder(I, J)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false,true,true': [3.73e-09, 3, 0], 'true,true,true': [0.894, 1, 4], 'true,true,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.962, 4, 4]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A), movie(K, A)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false,false,false': [2.63e-09, 3, 0], 'true,true': [0.894, 1, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(C, G), movie(D, G)', 'false,false': 'movie(J, A)', 'true,true': 'workedunder(C, E), movie(F, E)', 'false': 'movie(H, A), workedunder(I, A)', 'true': 'movie(D, C)'}, {'true,true,true,true': [0.894, 1, 4], 'true,true,false': [0.0, 0, 0], 'false,false,true': [2.63e-09, 3, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999986, nan], 'true': [0.15999999999999986, 0.0]}, {'': [0.20948195373304385, nan], 'true': [0.16, 0.0], 'true,false': [nan, 0.0]}, {'': [0.17200226808539504, nan]}, {'': [0.15999999999999998, 0.0], 'false,false': [nan, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true': [0.15999999999999998, nan]}, {'': [0.13999098467868984, nan], 'true': [0.13999098467868984, nan]}, {'': [0.16000000000000003, -2.3129646346357427e-18], 'true,true,true': [0.16000000000000003, nan], 'false,false': [nan, -2.3129646346357427e-18], 'false,false,false': [nan, -2.3129646346357427e-18], 'true,true': [0.16000000000000003, nan], 'false': [nan, -2.3129646346357427e-18], 'true': [0.16000000000000003, nan]}, {'': [0.15999999999999998, 4.625929269271485e-18], 'false,false': [4.625929269271485e-18, nan], 'true,true': [0.15999999999999998, nan], 'false': [nan, 4.625929269271485e-18], 'false,false,true': [4.625929269271485e-18, nan], 'true': [0.15999999999999998, nan]}, {'': [0.1156616194902351, nan]}, {'': [0.15999999999999998, 2.3129646346357427e-18], 'false,false': [nan, 2.3129646346357427e-18], 'false': [nan, 2.3129646346357427e-18], 'false,false,false': [nan, 2.3129646346357427e-18], 'true': [0.15999999999999998, nan]}, {'': [0.16, 2.3129646346357427e-18], 'true,true,true': [0.16, nan], 'false,false': [2.3129646346357427e-18, nan], 'true,true': [0.16, nan], 'false': [nan, 2.3129646346357427e-18], 'true': [0.16, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 0.887 seconds
Total inference time: 0.535 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 10:58:23
{'Mapping results': {'Finding best mapping': 7.152557373046875e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.054947614669799805, 'Total time': 2.0150580406188965, 'Generating paths time': 1.931652307510376, 'Knowledge compiling time': 0.02844977378845215}, 'CLL': -0.300536, 'Learning time': 2.026, 'AUC PR': 0.843137, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Recall': 1.0, 'Precision': [0.843137, 0.5], 'parameter': {'CLL': -0.324815, 'Learning time': 1.139, 'AUC PR': 0.843137, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Recall': 1.0, 'Precision': [0.843137, 0.5], 'Inference time': 0.66}, 'Inference time': 0.535}


Start learning from scratch in target domain

Starting fold 5

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.016671180725097656
   Generating paths time   = 1.9360947608947754
   Generating mappings time   = 0.05498647689819336
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 2.0077595710754395


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(L, A).;true;true
0;false,false,false;movie(N, A).;false;false
0;false;workedunder(G, A), movie(H, G).;true;true
0;false,false,true;workedunder(L, M).;false;false
0;true;workedunder(F, A), movie(E, F).;false;false
0;false,true;workedunder(G, I), movie(H, I).;false;false
1;;genre(A, B) :- movie(E, A).;true;true
1;false,false;workedunder(P, A).;true;false
1;false;workedunder(H, A), movie(I, H).;true;true
1;true,false;workedunder(G, A), movie(E, G).;false;false
1;false,false,true;workedunder(P, Q), movie(R, Q).;false;false
1;false,true;workedunder(H, J), movie(I, J).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false,false;workedunder(M, A), workedunder(M, N).;false;true
2;false,false,false;movie(P, A), workedunder(Q, A).;false;false
2;false,true,true;movie(J, L).;false;false
2;false;movie(J, A), workedunder(K, A).;true;true
2;false,true;workedunder(K, L).;true;false
3;;genre(A, B) :- movie(E, A), workedunder(F, A).;true;true
3;false,false;movie(P, A), workedunder(Q, A).;false;true
3;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
3;true,false,false;workedunder(L, J).;false;false
3;false;workedunder(M, A), workedunder(M, N).;false;true
3;true;workedunder(F, G).;false;true
3;true,false;workedunder(I, H).;false;true
4;;genre(A, B) :- movie(E, A).;true;true
4;false,false;workedunder(N, A).;true;true
4;false,false,false;workedunder(R, A).;false;false
4;false,true,true;movie(M, J).;false;false
4;false,true;workedunder(I, J).;true;false
4;false,false,true;workedunder(N, P), movie(Q, P).;false;false
4;false;movie(H, A), workedunder(I, A).;true;true
4;true;movie(E, F), workedunder(F, G).;false;false
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true,true,true;workedunder(C, H).;false;false
5;false,false;workedunder(L, A), movie(M, L).;true;true
5;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
5;true,true;movie(G, E).;true;false
5;false;workedunder(J, A), workedunder(J, K).;false;true
5;false,false,true;workedunder(L, N).;false;false
5;true;workedunder(E, F), movie(G, F).;true;false
6;;genre(A, B) :- workedunder(E, A).;true;true
6;false,false;movie(N, A).;true;true
6;true,true,false;workedunder(E, J).;false;false
6;true,true;movie(G, E).;false;true
6;false;workedunder(L, A), movie(M, A).;false;true
6;false,false,true;movie(N, P), workedunder(P, Q).;false;false
6;true;workedunder(E, F), movie(G, F).;true;false
6;false,false,false;workedunder(R, A).;false;false
7;;genre(A, B) :- workedunder(F, E).;false;true
7;false;workedunder(L, A), movie(M, A).;false;true
7;false,false,false;workedunder(R, A).;false;false
7;false,false,true;workedunder(N, P), movie(Q, P).;false;false
7;false,false;workedunder(N, A).;true;true
8;;genre(A, B) :- workedunder(C, A).;true;true
8;false,false;movie(P, A), workedunder(Q, A).;false;true
8;false,false,false;workedunder(R, A), movie(S, A).;false;false
8;false,true,false;workedunder(H, M), movie(N, A).;false;false
8;false,true,true;movie(L, A), movie(L, I).;false;false
8;false,true;movie(L, H).;true;true
8;false;workedunder(H, A), workedunder(H, I).;true;true
8;true;workedunder(C, F), movie(G, F).;false;false
9;;genre(A, B) :- workedunder(C, A).;true;true
9;true,true,true;workedunder(C, I), movie(F, I).;false;false
9;false,false;movie(L, A).;false;true
9;false,false,false;workedunder(M, A).;false;false
9;true,true;workedunder(C, G), movie(H, G).;true;false
9;false;movie(J, A), workedunder(K, A).;true;true
9;true;movie(F, C).;true;false
9;false,true;movie(J, K).;false;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.22152502927633905;  // std dev = 0,668, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( workedunder(D, E) )
%   | then return 0.5002131558403854;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), workedunder(J, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13637023346435792;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then return 0.1283000784751715;  // std dev = 0,499, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.3480411762363753;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(H, A), workedunder(H, I) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A), movie(K, J) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(L, A), workedunder(L, M) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13542257003772976;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then return 0.27374547506582114;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), movie(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A) )
%   | | then if ( movie(H, I), workedunder(I, J) )
%   | | | then return -0.12033481306242612;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.057314207518385736;  // std dev = 0,331, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.2130292720161553;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(F, A), workedunder(F, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(H, A), workedunder(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11382179867182231;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( movie(D, C) )
%   | then if ( workedunder(C, E), movie(F, E) )
%   | | then if ( workedunder(C, G), movie(D, G) )
%   | | | then return 0.1794923358166991;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(J, A) )
%   | | then return -0.10283575895454694;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.310033
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 0.865 seconds
Total inference time: 0.674 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false': [0.0, 2, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 2, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.668, 2, 2]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A), workedunder(J, K)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(D, E)'}, {'false,false,false,false': [0.0, 2, 0], 'true,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [0.499, 2, 2], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A), movie(K, J)', 'false,false,false': 'workedunder(L, A), workedunder(L, M)', 'true,true': 'movie(E, C)', 'false': 'workedunder(H, A), workedunder(H, I)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [0.0, 0, 2], 'false,false,false,false': [0.0, 2, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,false': 'movie(H, A)', 'true,true': 'movie(E, C)', 'false': 'workedunder(F, A), movie(G, A)', 'false,false,true': 'movie(H, I), workedunder(I, J)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false,true,true': [0.0, 2, 0], 'true,true,true': [0.0, 0, 2], 'true,true,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.331, 2, 2]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,false': 'movie(H, A), workedunder(I, A)', 'false,false,false': 'workedunder(J, A), movie(K, A)', 'false': 'workedunder(F, A), workedunder(F, G)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false,false,false': [0.0, 2, 0], 'true,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(C, G), movie(D, G)', 'false,false': 'movie(J, A)', 'true,true': 'workedunder(C, E), movie(F, E)', 'false': 'movie(H, A), workedunder(I, A)', 'true': 'movie(D, C)'}, {'true,true,true,true': [0.0, 0, 2], 'true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}]]
[{'': [0.25, nan], 'true': [0.0, 0.0]}, {'': [0.17847162811629394, nan], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}, {'': [0.11145008534151418, nan]}, {'': [0.0, 0.0], 'false,false': [nan, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true': [0.0, nan]}, {'': [0.062195810698099915, nan], 'true': [0.062195810698099915, nan]}, {'': [0.0, 0.0], 'true,true,true': [0.0, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true': [0.0, nan], 'false': [nan, 0.0], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'false,false': [0.0, nan], 'true,true': [0.0, nan], 'false': [nan, 0.0], 'false,false,true': [0.0, nan], 'true': [0.0, nan]}, {'': [0.02738416905017063, nan]}, {'': [0.0, 0.0], 'false,false': [nan, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'true,true,true': [0.0, nan], 'false,false': [0.0, nan], 'true,true': [0.0, nan], 'false': [nan, 0.0], 'true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '8;;genre(A, B) :- workedunder(C, A).;true;true', '9;;genre(A, B) :- workedunder(C, A).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,334, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   return 0;  // std dev = 0,260, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   return 0;  // std dev = 0,170, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.300991
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 0.721 seconds
Total inference time: 0.569 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 10:58:28
{'Mapping results': {'Finding best mapping': 7.152557373046875e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.05498647689819336, 'Total time': 2.0077595710754395, 'Generating paths time': 1.9360947608947754, 'Knowledge compiling time': 0.016671180725097656}, 'CLL': -0.300991, 'Learning time': 1.5859999999999999, 'AUC PR': 0.833333, 'F1': 0.909091, 'AUC ROC': 0.9, 'Recall': 1.0, 'Precision': [0.833333, 0.5], 'parameter': {'CLL': -0.310033, 'Learning time': 0.865, 'AUC PR': 0.833333, 'F1': 0.909091, 'AUC ROC': 0.9, 'Recall': 1.0, 'Precision': [0.833333, 0.5], 'Inference time': 0.674}, 'Inference time': 0.569}


Start learning from scratch in target domain

