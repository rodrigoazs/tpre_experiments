Starting experiment #5 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), publication(E, F) )
%   | then return 0.2719420385477882;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else if ( tempadvisedby(A, G) )
%   | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.35814893509951234;  // std dev = 0,500, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   else if ( advisedby(A, H), publication(I, H) )
%   | then if ( advisedby(J, H), publication(I, J) )
%   | | then if ( ta(K, J, L), ta(M, A, N) )
%   | | | then return 0.4735335504841277;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.36389606153629317;  // std dev = 4,663, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.5052077586289241;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, P), projectmember(Q, P) )
%   | | then return 0.24276431971489695;  // std dev = 0,487, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( advisedby(A, R) )
%   | | | then return 0.4581489350995123;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.3470378239884017;  // std dev = 4,742, 90,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=44 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( advisedby(A, F) )
%   | then return 0.2431522573300012;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( publication(C, G), tempadvisedby(H, G) )
%   | | then return 0.2437379295135511;  // std dev = 0,494, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.48540281491794895;  // std dev = 0,810, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( advisedby(A, I), publication(J, I) )
%   | then if ( advisedby(K, I), publication(J, K) )
%   | | then if ( ta(L, A, M), ta(N, K, P) )
%   | | | then return 0.40564015880039006;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.3135977252686114;  // std dev = 4,663, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.43201604470553195;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, Q) )
%   | | then if ( tempadvisedby(R, Q), publication(S, R) )
%   | | | then return 0.2390253257491676;  // std dev = 2,268, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.3636453865394401;  // std dev = 3,408, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else return 0.2554524423348888;  // std dev = 0,495, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.25022285508799275;  // std dev = 0,496, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then return 0.18878032799723635;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else if ( tempadvisedby(A, J), publication(K, J) )
%   | | | then return 0.31623000525888334;  // std dev = 1,475, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.1562274083544432;  // std dev = 1,099, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( advisedby(A, L), projectmember(M, L) )
%   | then return 0.20878533243596462;  // std dev = 0,488, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( publication(N, A), advisedby(A, P) )
%   | | then if ( tempadvisedby(Q, P) )
%   | | | then return 0.25445329729058314;  // std dev = 2,828, 32,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.39730835744672083;  // std dev = 1,962, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( publication(R, A), tempadvisedby(A, S) )
%   | | | then return 0.19956621655278314;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.27767680306028253;  // std dev = 4,285, 74,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=39 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( advisedby(A, F) )
%   | then return 0.1581438566571162;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( tempadvisedby(A, G), publication(C, G) )
%   | | then return 0.06081504400914902;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.2854136827335026;  // std dev = 0,489, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( publication(H, A), advisedby(A, I) )
%   | then if ( tempadvisedby(J, I) )
%   | | then if ( publication(H, J) )
%   | | | then return 0.0376737221808362;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.22489862368949695;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else return 0.3159036324542101;  // std dev = 0,475, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, K), projectmember(L, K) )
%   | | then return 0.3059504028178983;  // std dev = 1,074, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( advisedby(A, M), publication(N, M) )
%   | | | then return 0.2171516488363554;  // std dev = 4,179, 71,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=38 */
%   | | | else return 0.19020285437457196;  // std dev = 4,989, 101,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=48 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.16038374165206937;  // std dev = 0,495, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then if ( tempadvisedby(J, I), ta(K, G, D) )
%   | | | then return 0.35277394243951427;  // std dev = 0,807, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09001732164454204;  // std dev = 2,866, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
%   | | else return 0.16327388420849065;  // std dev = 0,493, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( advisedby(A, L), projectmember(M, L) )
%   | then return 0.13061555197618047;  // std dev = 0,487, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( tempadvisedby(A, N) )
%   | | then if ( tempadvisedby(P, N), publication(Q, P) )
%   | | | then return 0.12316956652417885;  // std dev = 1,984, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.2738734648842983;  // std dev = 1,931, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( advisedby(A, R) )
%   | | | then return 0.1835696632487803;  // std dev = 4,591, 86,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=47 */
%   | | | else return 0.09139075677785173;  // std dev = 1,708, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then if ( ta(H, F, I), publication(G, E) )
%   | | then if ( samecourse(C, H) )
%   | | | then return 0.08555291932839623;  // std dev = 2,652, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | | | else return 0.22129926591966403;  // std dev = 1,810, 14,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | else return 0.04661323073589808;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.24534596080131565;  // std dev = 1,139, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( publication(J, A), advisedby(A, K) )
%   | then return 0.14741512539188145;  // std dev = 0,493, 53,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=29 */
%   | else if ( tempadvisedby(A, L) )
%   | | then if ( tempadvisedby(M, L), publication(N, M) )
%   | | | then return 0.08503848602486651;  // std dev = 2,515, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return 0.16948302054972506;  // std dev = 3,367, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( advisedby(A, P), publication(Q, P) )
%   | | | then return 0.13642740914769128;  // std dev = 2,858, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.09187534938588202;  // std dev = 3,140, 41,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then return 0.07251424236345995;  // std dev = 0,493, 74,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=34 */
%   | else return 0.184869874961329;  // std dev = 1,139, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( publication(H, A) )
%   | then if ( publication(H, I), advisedby(J, I) )
%   | | then if ( ta(K, J, L), publication(M, J) )
%   | | | then return 0.13018063765391139;  // std dev = 3,361, 47,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=25 */
%   | | | else return 0.005790456139089924;  // std dev = 2,117, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | | else return 0.2176539230611125;  // std dev = 0,458, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | else if ( tempadvisedby(A, N) )
%   | | then if ( tempadvisedby(P, N), publication(Q, P) )
%   | | | then return 0.06985675715649417;  // std dev = 1,850, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.12885901493207455;  // std dev = 3,366, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( advisedby(A, R), publication(S, R) )
%   | | | then return 0.1031985970306885;  // std dev = 2,858, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | | else return 0.04318766665757931;  // std dev = 2,754, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C), publication(D, A) )
%   then if ( publication(D, C) )
%   | then if ( ta(E, A, F) )
%   | | then return -0.03425542369260496;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.019111590741939112;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.09396326800275479;  // std dev = 1,001, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( advisedby(A, G), projectmember(H, G) )
%   | then if ( advisedby(A, I), publication(J, I) )
%   | | then return 0.5309990132731045;  // std dev = 0,124, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.02606634752656758;  // std dev = 0,484, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | else if ( ta(K, A, L), advisedby(A, M) )
%   | | then if ( publication(N, M), tempadvisedby(P, M) )
%   | | | then return 0.06291830592775781;  // std dev = 3,655, 55,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=26 */
%   | | | else return 0.01707561502501945;  // std dev = 2,340, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | else if ( publication(Q, A) )
%   | | | then return 0.09275377387468414;  // std dev = 3,729, 58,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=32 */
%   | | | else return 0.07365290263061253;  // std dev = 5,322, 116,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=59 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then if ( advisedby(A, E), publication(F, E) )
%   | then return 0.4023092349763688;  // std dev = 0,121, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.020058945946444282;  // std dev = 0,484, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   else if ( ta(G, A, H), advisedby(A, I) )
%   | then if ( publication(J, I) )
%   | | then if ( tempadvisedby(K, I), ta(G, K, L) )
%   | | | then return 0.008189889072261864;  // std dev = 1,556, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.04707389964427247;  // std dev = 3,902, 63,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=30 */
%   | | else return -0.02357770181515162;  // std dev = 1,082, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( tempadvisedby(A, M), publication(N, A) )
%   | | then if ( publication(N, M) )
%   | | | then return -7.516482319341461E-4;  // std dev = 1,367, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.07117800600655591;  // std dev = 1,001, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tempadvisedby(A, P), publication(Q, P) )
%   | | | then return 0.07181841814608717;  // std dev = 3,479, 50,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=26 */
%   | | | else return 0.055752399581670394;  // std dev = 5,488, 124,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=65 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then return 0.0710368544022242;  // std dev = 0,452, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   else if ( ta(E, A, F) )
%   | then if ( ta(E, G, H), publication(I, G) )
%   | | then if ( advisedby(G, J), advisedby(A, J) )
%   | | | then return 0.01949164804518843;  // std dev = 3,143, 41,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=17 */
%   | | | else return 0.07808924929398303;  // std dev = 3,219, 44,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=23 */
%   | | else if ( ta(E, K, L), advisedby(K, M) )
%   | | | then return -0.01255353731164433;  // std dev = 3,122, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | | | else return 0.05132244351130869;  // std dev = 1,476, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | else if ( tempadvisedby(A, N) )
%   | | then if ( tempadvisedby(P, N), publication(Q, P) )
%   | | | then return 0.02826685981836982;  // std dev = 1,982, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.10040937895807975;  // std dev = 1,931, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( advisedby(A, R) )
%   | | | then return 0.04799952599916868;  // std dev = 4,579, 86,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=47 */
%   | | | else return -0.0031780846565941843;  // std dev = 1,702, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */


Predicates from source: ['inphase(person,prequals).', 'ta(course,person,quarter).', 'publication(title,person).', 'advisedby(person,person).', 'projectmember(project,person).', 'tempadvisedby(person,person).', 'samecourse(course,course).']

Starting fold 1

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.04043698310852051
   Generating paths time   = 1.8622088432312012
   Generating mappings time   = 0.056775569915771484
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 1.9594287872314453


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;true,false;workedunder(G, A).;false;false
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true;workedunder(F, A), movie(E, F).;false;true
1;;genre(A, B) :- movie(C, A).;true;true
1;false,false;workedunder(Q, A).;true;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;true,false;movie(C, G), workedunder(G, H).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false;workedunder(L, A), workedunder(L, M).;false;true
2;false,false,false;movie(R, A), workedunder(S, A).;false;false
2;false,false,true;workedunder(P, Q).;false;false
2;false,false;movie(N, A), workedunder(P, A).;true;true
3;;genre(A, B) :- movie(C, A).;true;true
3;false,true,true;movie(H, J).;false;false
3;false,false;workedunder(K, A), workedunder(K, L).;false;true
3;false,false,false;workedunder(M, A), movie(N, M).;false;false
3;false;movie(H, A), workedunder(I, A).;true;true
3;true,false;workedunder(G, A), movie(C, G).;false;false
3;false,true;workedunder(I, J).;true;false
3;true;workedunder(F, A).;false;true
4;;genre(A, B) :- workedunder(F, E).;false;true
4;false;workedunder(L, A), workedunder(L, M).;false;true
4;false,false,false;workedunder(R, A).;false;false
4;false,false,true;workedunder(N, P), movie(Q, P).;false;false
4;false,false;workedunder(N, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true,true,true;workedunder(C, H).;false;false
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(P, A), movie(Q, P).;false;false
5;true,true;movie(G, E).;true;false
5;false;movie(J, A), workedunder(K, A).;false;true
5;false,false,true;workedunder(L, M), movie(N, M).;false;false
5;true;workedunder(E, F), movie(G, F).;true;false
6;;genre(A, B) :- workedunder(E, A).;true;true
6;false,false;workedunder(N, A).;true;true
6;false,false,false;workedunder(R, A), movie(S, R).;false;false
6;false,true,true;movie(M, J).;false;false
6;false,true;movie(H, I), workedunder(I, J).;true;false
6;false,false,true;workedunder(N, P), movie(Q, P).;false;false
6;false;movie(H, A).;true;true
6;true;workedunder(E, F), movie(G, F).;false;false
7;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
7;false,false;workedunder(M, A).;true;true
7;false,false,false;movie(Q, A).;false;false
7;false;workedunder(G, A), workedunder(G, H).;true;true
7;false,false,true;movie(N, M), workedunder(M, P).;false;false
7;true;movie(D, C).;false;false
7;false,true;workedunder(I, A), movie(J, I).;false;false
8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
8;false,false;workedunder(M, A), movie(N, A).;true;true
8;false,false,false;workedunder(P, A), movie(Q, P).;false;false
8;false,true,true;workedunder(I, K).;false;false
8;false,true;movie(J, I).;true;false
8;false,false,true;movie(N, M).;false;false
8;false;workedunder(I, A).;true;true
8;true;workedunder(E, A), movie(F, E).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
9;false,false;workedunder(N, A).;true;true
9;false,false,false;workedunder(R, A).;false;false
9;false,true,false;workedunder(M, K).;false;false
9;false;movie(I, G).;true;true
9;false,false,true;workedunder(N, P), movie(Q, P).;false;false
9;false,true;workedunder(J, G), workedunder(J, A).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( movie(C, E), workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.2215250292763393;  // std dev = 1,566, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.5002131558403854;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.13637023346435795;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.12830007847517144;  // std dev = 1,170, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.34804117623637526;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A), movie(L, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13542257003772978;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.2737454750658212;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.12033481306242616;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.22279583504896874;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), workedunder(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A) )
%   | | | then return -0.10816742001219735;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.18660191362595693;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09816643487216595;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.15991710142455196;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( movie(E, F) )
%   | then if ( workedunder(G, F), workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, I) )
%   | | | then return -0.08981204150920476;  // std dev = 8,33e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.353691
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.245 seconds
Total inference time: 1.183 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 11, 0], 'true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'movie(C, E), workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true': [4.21e-08, 0, 11]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.566, 11, 11]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [7.45e-09, 11, 0], 'true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.17, 11, 11]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A)', 'false,false,false': 'workedunder(K, A), movie(L, K)', 'true,true': 'movie(E, C)', 'false': 'movie(H, A), workedunder(I, A)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [2.11e-08, 0, 11], 'false,false,false,false': [0.0, 11, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)', 'false': 'movie(F, A)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 11, 0], 'false,true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false,false': 'workedunder(G, A)', 'false,false,false': 'movie(H, A)', 'false': 'workedunder(E, A), workedunder(E, F)', 'true': 'movie(D, C)'}, {'false,false,false,false': [0.0, 0, 0], 'true,true': [2.11e-08, 0, 11], 'false,false,false,true': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false,false': 'workedunder(H, A), movie(I, A)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false': 'workedunder(G, A)', 'true': 'workedunder(E, A), movie(F, E)'}, {'false,false,false,false': [0.0, 11, 0], 'true,true': [0.0, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'movie(E, F)', 'false,true': 'workedunder(G, F), workedunder(G, A)', 'false,true,false': 'workedunder(H, I)'}, {'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false,true': [8.33e-09, 11, 0], 'false,true,true': [0.0, 0, 0], 'true': [7.45e-09, 0, 11]}]]
[{'': [0.24999999999999958, nan], 'true': [-1.6148698540002277e-16, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.17847162811629388, nan], 'true': [1.6148698540002277e-16, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.11145008534151403, nan]}, {'': [0.10130960288467862, nan], 'true': [0.0, 5.046468293750712e-18], 'true,false': [nan, 5.046468293750712e-18]}, {'': [0.062195810698099964, nan]}, {'': [4.0371746350005693e-17, 0.0], 'true,true,true': [4.0371746350005693e-17, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true': [4.0371746350005693e-17, nan], 'false': [nan, 0.0], 'true': [4.0371746350005693e-17, nan]}, {'': [-2.0185873175002847e-17, -2.523234146875356e-18], 'false,true,true': [-2.523234146875356e-18, nan], 'false': [-2.523234146875356e-18, nan], 'false,true': [-2.523234146875356e-18, nan], 'true': [-2.0185873175002847e-17, nan]}, {'': [4.0371746350005693e-17, 0.0], 'false,false': [nan, 0.0], 'false': [nan, 0.0], 'false,false,false': [0.0, nan], 'true': [4.0371746350005693e-17, nan]}, {'': [-1.0092936587501423e-17, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0], 'true': [-1.0092936587501423e-17, nan]}, {'': [5.046468293750712e-18, 6.308085367188389e-18], 'false': [6.308085367188389e-18, nan], 'false,true': [nan, 6.308085367188389e-18], 'false,true,false': [6.308085367188389e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- workedunder(D, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.031 seconds
Total inference time: 0.61 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 15:12:05
{'Mapping results': {'Finding best mapping': 7.152557373046875e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.056775569915771484, 'Total time': 1.9594287872314453, 'Generating paths time': 1.8622088432312012, 'Knowledge compiling time': 0.04043698310852051}, 'CLL': -0.352709, 'Learning time': 2.276, 'AUC PR': 0.8, 'F1': 0.888889, 'AUC ROC': 0.875, 'Recall': 1.0, 'Precision': [0.8, 0.5], 'parameter': {'CLL': -0.353691, 'Learning time': 1.245, 'AUC PR': 0.8, 'F1': 0.888889, 'AUC ROC': 0.875, 'Recall': 1.0, 'Precision': [0.8, 0.5], 'Inference time': 1.183}, 'Inference time': 0.61}


Start learning from scratch in target domain

Starting fold 2

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.01707172393798828
   Generating paths time   = 1.9115169048309326
   Generating mappings time   = 0.05666756629943848
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 1.9852631092071533


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;true,false;workedunder(G, A).;false;false
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true;workedunder(F, A), movie(E, F).;false;true
1;;genre(A, B) :- movie(C, A).;true;true
1;false,false;workedunder(Q, A).;true;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;true,false;movie(C, G), workedunder(G, H).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false;workedunder(L, A), workedunder(L, M).;false;true
2;false,false,false;movie(R, A), workedunder(S, A).;false;false
2;false,false,true;workedunder(P, Q).;false;false
2;false,false;movie(N, A), workedunder(P, A).;true;true
3;;genre(A, B) :- movie(C, A).;true;true
3;false,true,true;movie(H, J).;false;false
3;false,false;workedunder(K, A), workedunder(K, L).;false;true
3;false,false,false;workedunder(M, A), movie(N, M).;false;false
3;false;movie(H, A), workedunder(I, A).;true;true
3;true,false;workedunder(G, A), movie(C, G).;false;false
3;false,true;workedunder(I, J).;true;false
3;true;workedunder(F, A).;false;true
4;;genre(A, B) :- workedunder(F, E).;false;true
4;false;workedunder(L, A), workedunder(L, M).;false;true
4;false,false,false;workedunder(R, A).;false;false
4;false,false,true;workedunder(N, P), movie(Q, P).;false;false
4;false,false;workedunder(N, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true,true,true;workedunder(C, H).;false;false
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(P, A), movie(Q, P).;false;false
5;true,true;movie(G, E).;true;false
5;false;movie(J, A), workedunder(K, A).;false;true
5;false,false,true;workedunder(L, M), movie(N, M).;false;false
5;true;workedunder(E, F), movie(G, F).;true;false
6;;genre(A, B) :- workedunder(E, A).;true;true
6;false,false;workedunder(N, A).;true;true
6;false,false,false;workedunder(R, A), movie(S, R).;false;false
6;false,true,true;movie(M, J).;false;false
6;false,true;movie(H, I), workedunder(I, J).;true;false
6;false,false,true;workedunder(N, P), movie(Q, P).;false;false
6;false;movie(H, A).;true;true
6;true;workedunder(E, F), movie(G, F).;false;false
7;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
7;false,false;workedunder(M, A).;true;true
7;false,false,false;movie(Q, A).;false;false
7;false;workedunder(G, A), workedunder(G, H).;true;true
7;false,false,true;movie(N, M), workedunder(M, P).;false;false
7;true;movie(D, C).;false;false
7;false,true;workedunder(I, A), movie(J, I).;false;false
8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
8;false,false;workedunder(M, A), movie(N, A).;true;true
8;false,false,false;workedunder(P, A), movie(Q, P).;false;false
8;false,true,true;workedunder(I, K).;false;false
8;false,true;movie(J, I).;true;false
8;false,false,true;movie(N, M).;false;false
8;false;workedunder(I, A).;true;true
8;true;workedunder(E, A), movie(F, E).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
9;false,false;workedunder(N, A).;true;true
9;false,false,false;workedunder(R, A).;false;false
9;false,true,false;workedunder(M, K).;false;false
9;false;movie(I, G).;true;true
9;false,false,true;workedunder(N, P), movie(Q, P).;false;false
9;false,true;workedunder(J, G), workedunder(J, A).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.657810671461647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( movie(C, E), workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.22604488330790526;  // std dev = 1,802, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.45675549767123047;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.13690342743409517;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.1302622000414589;  // std dev = 1,487, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.3119387228258979;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A), movie(L, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13612058479727152;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.24084717461085145;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.12089173852433242;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.19105897832780913;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), workedunder(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A) )
%   | | | then return -0.1086210553805694;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.1552744675705647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09854245953396723;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.12874816395140762;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( movie(E, F) )
%   | then if ( workedunder(G, F), workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, I) )
%   | | | then return -0.0901284233411399;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.328551
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.39 seconds
Total inference time: 0.763 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 11, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'movie(C, E), workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.802, 12, 12]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 11, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.487, 12, 12]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A)', 'false,false,false': 'workedunder(K, A), movie(L, K)', 'true,true': 'movie(E, C)', 'false': 'movie(H, A), workedunder(I, A)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [0.961, 1, 12], 'false,false,false,false': [0.0, 11, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)', 'false': 'movie(F, A)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'false,true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 11, 0], 'false,true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false,false': 'workedunder(G, A)', 'false,false,false': 'movie(H, A)', 'false': 'workedunder(E, A), workedunder(E, F)', 'true': 'movie(D, C)'}, {'false,false,false,false': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'false,false,false,true': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false,false': 'workedunder(H, A), movie(I, A)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false': 'workedunder(G, A)', 'true': 'workedunder(E, A), movie(F, E)'}, {'false,false,false,false': [0.0, 11, 0], 'true,true': [0.961, 1, 12], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'movie(E, F)', 'false,true': 'workedunder(G, F), workedunder(G, A)', 'false,true,false': 'workedunder(H, I)'}, {'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 11, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.961, 1, 12]}]]
[{'': [0.24999999999999956, nan], 'true': [0.07100591715976314, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.19076867375623552, nan], 'true': [0.07100591715976333, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.13533629047183346, nan]}, {'': [0.12595740906584602, nan], 'true': [0.0710059171597634, -7.569702440626067e-18], 'true,false': [nan, -7.569702440626067e-18]}, {'': [0.09210103133023939, nan]}, {'': [0.07100591715976323, 0.0], 'true,true,true': [0.07100591715976323, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true': [0.07100591715976323, nan], 'false': [nan, 0.0], 'true': [0.07100591715976323, nan]}, {'': [0.07100591715976336, -5.046468293750712e-18], 'false,true,true': [-5.046468293750712e-18, nan], 'false': [-5.046468293750712e-18, nan], 'true': [0.07100591715976336, nan], 'false,true': [-5.046468293750712e-18, nan]}, {'': [0.07100591715976336, -5.046468293750712e-18], 'false,false': [nan, -5.046468293750712e-18], 'false': [nan, -5.046468293750712e-18], 'false,false,false': [-5.046468293750712e-18, nan], 'true': [0.07100591715976336, nan]}, {'': [0.07100591715976336, -2.523234146875356e-18], 'false,false': [nan, -2.523234146875356e-18], 'false': [nan, -2.523234146875356e-18], 'false,false,false': [nan, -2.523234146875356e-18], 'true': [0.07100591715976336, nan]}, {'': [0.07100591715976334, -2.523234146875356e-18], 'false': [-2.523234146875356e-18, nan], 'false,true': [nan, -2.523234146875356e-18], 'false,true,false': [-2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- workedunder(D, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.49 seconds
Total inference time: 0.554 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 15:12:12
{'Mapping results': {'Finding best mapping': 7.152557373046875e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.05666756629943848, 'Total time': 1.9852631092071533, 'Generating paths time': 1.9115169048309326, 'Knowledge compiling time': 0.01707172393798828}, 'CLL': -0.320018, 'Learning time': 2.88, 'AUC PR': 0.813953, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Recall': 1.0, 'Precision': [0.813953, 0.5], 'parameter': {'CLL': -0.328551, 'Learning time': 1.39, 'AUC PR': 0.813953, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Recall': 1.0, 'Precision': [0.813953, 0.5], 'Inference time': 0.763}, 'Inference time': 0.554}


Start learning from scratch in target domain

Starting fold 3

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.01818394660949707
   Generating paths time   = 1.8772368431091309
   Generating mappings time   = 0.05698990821838379
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 1.9524178504943848


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;true,false;workedunder(G, A).;false;false
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true;workedunder(F, A), movie(E, F).;false;true
1;;genre(A, B) :- movie(C, A).;true;true
1;false,false;workedunder(Q, A).;true;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;true,false;movie(C, G), workedunder(G, H).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false;workedunder(L, A), workedunder(L, M).;false;true
2;false,false,false;movie(R, A), workedunder(S, A).;false;false
2;false,false,true;workedunder(P, Q).;false;false
2;false,false;movie(N, A), workedunder(P, A).;true;true
3;;genre(A, B) :- movie(C, A).;true;true
3;false,true,true;movie(H, J).;false;false
3;false,false;workedunder(K, A), workedunder(K, L).;false;true
3;false,false,false;workedunder(M, A), movie(N, M).;false;false
3;false;movie(H, A), workedunder(I, A).;true;true
3;true,false;workedunder(G, A), movie(C, G).;false;false
3;false,true;workedunder(I, J).;true;false
3;true;workedunder(F, A).;false;true
4;;genre(A, B) :- workedunder(F, E).;false;true
4;false;workedunder(L, A), workedunder(L, M).;false;true
4;false,false,false;workedunder(R, A).;false;false
4;false,false,true;workedunder(N, P), movie(Q, P).;false;false
4;false,false;workedunder(N, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true,true,true;workedunder(C, H).;false;false
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(P, A), movie(Q, P).;false;false
5;true,true;movie(G, E).;true;false
5;false;movie(J, A), workedunder(K, A).;false;true
5;false,false,true;workedunder(L, M), movie(N, M).;false;false
5;true;workedunder(E, F), movie(G, F).;true;false
6;;genre(A, B) :- workedunder(E, A).;true;true
6;false,false;workedunder(N, A).;true;true
6;false,false,false;workedunder(R, A), movie(S, R).;false;false
6;false,true,true;movie(M, J).;false;false
6;false,true;movie(H, I), workedunder(I, J).;true;false
6;false,false,true;workedunder(N, P), movie(Q, P).;false;false
6;false;movie(H, A).;true;true
6;true;workedunder(E, F), movie(G, F).;false;false
7;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
7;false,false;workedunder(M, A).;true;true
7;false,false,false;movie(Q, A).;false;false
7;false;workedunder(G, A), workedunder(G, H).;true;true
7;false,false,true;movie(N, M), workedunder(M, P).;false;false
7;true;movie(D, C).;false;false
7;false,true;workedunder(I, A), movie(J, I).;false;false
8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
8;false,false;workedunder(M, A), movie(N, A).;true;true
8;false,false,false;workedunder(P, A), movie(Q, P).;false;false
8;false,true,true;workedunder(I, K).;false;false
8;false,true;movie(J, I).;true;false
8;false,false,true;movie(N, M).;false;false
8;false;workedunder(I, A).;true;true
8;true;workedunder(E, A), movie(F, E).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
9;false,false;workedunder(N, A).;true;true
9;false,false,false;workedunder(R, A).;false;false
9;false,true,false;workedunder(M, K).;false;false
9;false;movie(I, G).;true;true
9;false,false,true;workedunder(N, P), movie(Q, P).;false;false
9;false,true;workedunder(J, G), workedunder(J, A).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.49238913840392534;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( movie(C, E), workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.23976942954603;  // std dev = 2,646, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.34003398980794736;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.13853322814260766;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.1411856477435625;  // std dev = 2,479, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.22211820217774172;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A), movie(L, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13885007619607936;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.16679090165368063;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.12306459764977054;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.12602168452354895;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), workedunder(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A) )
%   | | | then return -0.11038755339582475;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.0960242360366481;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1000043647078057;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.07377601907195128;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( movie(E, F) )
%   | then if ( workedunder(G, F), workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, I) )
%   | | | then return -0.0913567445997935;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.283929
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.498 seconds
Total inference time: 0.712 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 11, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'movie(C, E), workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [2.646, 18, 18]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 11, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [2.479, 18, 18]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A)', 'false,false,false': 'workedunder(K, A), movie(L, K)', 'true,true': 'movie(E, C)', 'false': 'movie(H, A), workedunder(I, A)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [2.245, 7, 18], 'false,false,false,false': [5.27e-09, 11, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)', 'false': 'movie(F, A)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'false,true,false': [0.0, 0, 0], 'false,true,true,true': [5.27e-09, 11, 0], 'false,true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false,false': 'workedunder(G, A)', 'false,false,false': 'movie(H, A)', 'false': 'workedunder(E, A), workedunder(E, F)', 'true': 'movie(D, C)'}, {'false,false,false,false': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'false,false,false,true': [5.27e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false,false': 'workedunder(H, A), movie(I, A)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false': 'workedunder(G, A)', 'true': 'workedunder(E, A), movie(F, E)'}, {'false,false,false,false': [0.0, 11, 0], 'true,true': [2.245, 7, 18], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'movie(E, F)', 'false,true': 'workedunder(G, F), workedunder(G, A)', 'false,true,false': 'workedunder(H, I)'}, {'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false,true': [5.27e-09, 11, 0], 'false,true,true': [0.0, 0, 0], 'true': [2.245, 7, 18]}]]
[{'': [0.2499999999999995, nan], 'true': [0.2015999999999996, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.22099738300738728, nan], 'true': [0.2016000000000001, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.1945443430451362, nan]}, {'': [0.18859746147890197, nan], 'true': [0.20160000000000022, -5.046468293750712e-18], 'true,false': [nan, -5.046468293750712e-18]}, {'': [0.1706658713149335, nan]}, {'': [0.20159999999999992, 2.523234146875356e-18], 'true,true,true': [0.20159999999999992, nan], 'false,false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'true,true': [0.20159999999999992, nan], 'false': [nan, 2.523234146875356e-18], 'true': [0.20159999999999992, nan]}, {'': [0.2016, 2.523234146875356e-18], 'false,true,true': [2.523234146875356e-18, nan], 'false': [2.523234146875356e-18, nan], 'true': [0.2016, nan], 'false,true': [2.523234146875356e-18, nan]}, {'': [0.2016, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [2.523234146875356e-18, nan], 'true': [0.2016, nan]}, {'': [0.20159999999999992, -3.784851220313033e-18], 'false,false': [nan, -3.784851220313033e-18], 'false': [nan, -3.784851220313033e-18], 'false,false,false': [nan, -3.784851220313033e-18], 'true': [0.20159999999999992, nan]}, {'': [0.2016, 2.523234146875356e-18], 'false': [2.523234146875356e-18, nan], 'false,true': [nan, 2.523234146875356e-18], 'false,true,false': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- workedunder(D, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.519 seconds
Total inference time: 0.557 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 15:12:19
{'Mapping results': {'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.05698990821838379, 'Total time': 1.9524178504943848, 'Generating paths time': 1.8772368431091309, 'Knowledge compiling time': 0.01818394660949707}, 'CLL': -0.264596, 'Learning time': 3.017, 'AUC PR': 0.935484, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Recall': 1.0, 'Precision': [0.935484, 0.5], 'parameter': {'CLL': -0.283929, 'Learning time': 1.498, 'AUC PR': 0.935484, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Recall': 1.0, 'Precision': [0.935484, 0.5], 'Inference time': 0.712}, 'Inference time': 0.557}


Start learning from scratch in target domain

Starting fold 4

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.016096115112304688
   Generating paths time   = 1.8955576419830322
   Generating mappings time   = 0.08040475845336914
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 1.9920654296875


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;true,false;workedunder(G, A).;false;false
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true;workedunder(F, A), movie(E, F).;false;true
1;;genre(A, B) :- movie(C, A).;true;true
1;false,false;workedunder(Q, A).;true;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;true,false;movie(C, G), workedunder(G, H).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false;workedunder(L, A), workedunder(L, M).;false;true
2;false,false,false;movie(R, A), workedunder(S, A).;false;false
2;false,false,true;workedunder(P, Q).;false;false
2;false,false;movie(N, A), workedunder(P, A).;true;true
3;;genre(A, B) :- movie(C, A).;true;true
3;false,true,true;movie(H, J).;false;false
3;false,false;workedunder(K, A), workedunder(K, L).;false;true
3;false,false,false;workedunder(M, A), movie(N, M).;false;false
3;false;movie(H, A), workedunder(I, A).;true;true
3;true,false;workedunder(G, A), movie(C, G).;false;false
3;false,true;workedunder(I, J).;true;false
3;true;workedunder(F, A).;false;true
4;;genre(A, B) :- workedunder(F, E).;false;true
4;false;workedunder(L, A), workedunder(L, M).;false;true
4;false,false,false;workedunder(R, A).;false;false
4;false,false,true;workedunder(N, P), movie(Q, P).;false;false
4;false,false;workedunder(N, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true,true,true;workedunder(C, H).;false;false
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(P, A), movie(Q, P).;false;false
5;true,true;movie(G, E).;true;false
5;false;movie(J, A), workedunder(K, A).;false;true
5;false,false,true;workedunder(L, M), movie(N, M).;false;false
5;true;workedunder(E, F), movie(G, F).;true;false
6;;genre(A, B) :- workedunder(E, A).;true;true
6;false,false;workedunder(N, A).;true;true
6;false,false,false;workedunder(R, A), movie(S, R).;false;false
6;false,true,true;movie(M, J).;false;false
6;false,true;movie(H, I), workedunder(I, J).;true;false
6;false,false,true;workedunder(N, P), movie(Q, P).;false;false
6;false;movie(H, A).;true;true
6;true;workedunder(E, F), movie(G, F).;false;false
7;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
7;false,false;workedunder(M, A).;true;true
7;false,false,false;movie(Q, A).;false;false
7;false;workedunder(G, A), workedunder(G, H).;true;true
7;false,false,true;movie(N, M), workedunder(M, P).;false;false
7;true;movie(D, C).;false;false
7;false,true;workedunder(I, A), movie(J, I).;false;false
8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
8;false,false;workedunder(M, A), movie(N, A).;true;true
8;false,false,false;workedunder(P, A), movie(Q, P).;false;false
8;false,true,true;workedunder(I, K).;false;false
8;false,true;movie(J, I).;true;false
8;false,false,true;movie(N, M).;false;false
8;false;workedunder(I, A).;true;true
8;true;workedunder(E, A), movie(F, E).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
9;false,false;workedunder(N, A).;true;true
9;false,false,false;workedunder(R, A).;false;false
9;false,true,false;workedunder(M, K).;false;false
9;false;movie(I, G).;true;true
9;false,false,true;workedunder(N, P), movie(Q, P).;false;false
9;false,true;workedunder(J, G), workedunder(J, A).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( movie(C, E), workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.23409923944267316;  // std dev = 1,173, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.38655270713914897;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.13785792350709075;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.13589411097609744;  // std dev = 1,058, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.2569284345764438;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A), movie(L, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13762468421756882;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.19421163996410945;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.12209006905555404;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.1489053362661225;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), workedunder(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A) )
%   | | | then return -0.10959593998798621;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.11588242207694328;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09934971242136857;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.09139011736858578;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( movie(E, F) )
%   | then if ( workedunder(G, F), workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, I) )
%   | | | then return -0.0908070277014102;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.315668
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 0.895 seconds
Total inference time: 0.762 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 3, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'movie(C, E), workedunder(E, F)'}, {'true,false,true': [0.0, 3, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.173, 4, 4]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 3, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.058, 4, 4]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A)', 'false,false,false': 'workedunder(K, A), movie(L, K)', 'true,true': 'movie(E, C)', 'false': 'movie(H, A), workedunder(I, A)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [0.894, 1, 4], 'false,false,false,false': [0.0, 3, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)', 'false': 'movie(F, A)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'false,true,false': [0.0, 0, 0], 'false,true,true,true': [3.73e-09, 3, 0], 'false,true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false,false': 'workedunder(G, A)', 'false,false,false': 'movie(H, A)', 'false': 'workedunder(E, A), workedunder(E, F)', 'true': 'movie(D, C)'}, {'false,false,false,false': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'false,false,false,true': [2.63e-09, 3, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false,false': 'workedunder(H, A), movie(I, A)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false': 'workedunder(G, A)', 'true': 'workedunder(E, A), movie(F, E)'}, {'false,false,false,false': [2.63e-09, 3, 0], 'true,true': [0.894, 1, 4], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'movie(E, F)', 'false,true': 'workedunder(G, F), workedunder(G, A)', 'false,true,false': 'workedunder(H, I)'}, {'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.894, 1, 4]}]]
[{'': [0.24999999999999986, nan], 'true': [0.15999999999999986, 0.0], 'true,false': [nan, 0.0]}, {'': [0.20948195373304385, nan], 'true': [0.16, 0.0], 'true,false': [0.0, nan]}, {'': [0.17200226808539504, nan]}, {'': [0.1644546506722156, nan], 'true': [0.15999999999999998, 0.0], 'true,false': [nan, 0.0]}, {'': [0.13999098467868984, nan]}, {'': [0.16000000000000003, -2.3129646346357427e-18], 'true,true,true': [0.16000000000000003, nan], 'false,false': [nan, -2.3129646346357427e-18], 'false,false,false': [nan, -2.3129646346357427e-18], 'true,true': [0.16000000000000003, nan], 'false': [nan, -2.3129646346357427e-18], 'true': [0.16000000000000003, nan]}, {'': [0.15999999999999998, 4.625929269271485e-18], 'false,true,true': [4.625929269271485e-18, nan], 'false': [4.625929269271485e-18, nan], 'true': [0.15999999999999998, nan], 'false,true': [4.625929269271485e-18, nan]}, {'': [0.16, 2.3129646346357427e-18], 'false,false': [nan, 2.3129646346357427e-18], 'false': [nan, 2.3129646346357427e-18], 'false,false,false': [2.3129646346357427e-18, nan], 'true': [0.16, nan]}, {'': [0.16, 2.3129646346357427e-18], 'false,false': [nan, 2.3129646346357427e-18], 'false': [nan, 2.3129646346357427e-18], 'false,false,false': [nan, 2.3129646346357427e-18], 'true': [0.16, nan]}, {'': [0.15999999999999998, -1.1564823173178713e-18], 'false': [-1.1564823173178713e-18, nan], 'false,true': [nan, -1.1564823173178713e-18], 'false,true,false': [-1.1564823173178713e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- workedunder(D, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 0.933 seconds
Total inference time: 0.582 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 15:12:24
{'Mapping results': {'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.08040475845336914, 'Total time': 1.9920654296875, 'Generating paths time': 1.8955576419830322, 'Knowledge compiling time': 0.016096115112304688}, 'CLL': -0.300536, 'Learning time': 1.828, 'AUC PR': 0.843137, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Recall': 1.0, 'Precision': [0.843137, 0.5], 'parameter': {'CLL': -0.315668, 'Learning time': 0.895, 'AUC PR': 0.843137, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Recall': 1.0, 'Precision': [0.843137, 0.5], 'Inference time': 0.762}, 'Inference time': 0.582}


Start learning from scratch in target domain

Starting fold 5

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.024384260177612305
   Generating paths time   = 1.9163193702697754
   Generating mappings time   = 0.058502197265625
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 1.430511474609375e-06
   Total time   = 1.999215841293335


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;true,false;workedunder(G, A).;false;false
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true;workedunder(F, A), movie(E, F).;false;true
1;;genre(A, B) :- movie(C, A).;true;true
1;false,false;workedunder(Q, A).;true;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;true,false;movie(C, G), workedunder(G, H).;false;false
1;false,false,true;workedunder(Q, R), movie(S, R).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- workedunder(F, E).;false;true
2;false;workedunder(L, A), workedunder(L, M).;false;true
2;false,false,false;movie(R, A), workedunder(S, A).;false;false
2;false,false,true;workedunder(P, Q).;false;false
2;false,false;movie(N, A), workedunder(P, A).;true;true
3;;genre(A, B) :- movie(C, A).;true;true
3;false,true,true;movie(H, J).;false;false
3;false,false;workedunder(K, A), workedunder(K, L).;false;true
3;false,false,false;workedunder(M, A), movie(N, M).;false;false
3;false;movie(H, A), workedunder(I, A).;true;true
3;true,false;workedunder(G, A), movie(C, G).;false;false
3;false,true;workedunder(I, J).;true;false
3;true;workedunder(F, A).;false;true
4;;genre(A, B) :- workedunder(F, E).;false;true
4;false;workedunder(L, A), workedunder(L, M).;false;true
4;false,false,false;workedunder(R, A).;false;false
4;false,false,true;workedunder(N, P), movie(Q, P).;false;false
4;false,false;workedunder(N, A).;true;true
5;;genre(A, B) :- workedunder(E, A).;true;true
5;true,true,true;workedunder(C, H).;false;false
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(P, A), movie(Q, P).;false;false
5;true,true;movie(G, E).;true;false
5;false;movie(J, A), workedunder(K, A).;false;true
5;false,false,true;workedunder(L, M), movie(N, M).;false;false
5;true;workedunder(E, F), movie(G, F).;true;false
6;;genre(A, B) :- workedunder(E, A).;true;true
6;false,false;workedunder(N, A).;true;true
6;false,false,false;workedunder(R, A), movie(S, R).;false;false
6;false,true,true;movie(M, J).;false;false
6;false,true;movie(H, I), workedunder(I, J).;true;false
6;false,false,true;workedunder(N, P), movie(Q, P).;false;false
6;false;movie(H, A).;true;true
6;true;workedunder(E, F), movie(G, F).;false;false
7;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true
7;false,false;workedunder(M, A).;true;true
7;false,false,false;movie(Q, A).;false;false
7;false;workedunder(G, A), workedunder(G, H).;true;true
7;false,false,true;movie(N, M), workedunder(M, P).;false;false
7;true;movie(D, C).;false;false
7;false,true;workedunder(I, A), movie(J, I).;false;false
8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true
8;false,false;workedunder(M, A), movie(N, A).;true;true
8;false,false,false;workedunder(P, A), movie(Q, P).;false;false
8;false,true,true;workedunder(I, K).;false;false
8;false,true;movie(J, I).;true;false
8;false,false,true;movie(N, M).;false;false
8;false;workedunder(I, A).;true;true
8;true;workedunder(E, A), movie(F, E).;false;false
9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
9;false,false;workedunder(N, A).;true;true
9;false,false,false;workedunder(R, A).;false;false
9;false,true,false;workedunder(M, K).;false;false
9;false;movie(I, G).;true;true
9;false,false,true;workedunder(N, P), movie(Q, P).;false;false
9;false,true;workedunder(J, G), workedunder(J, A).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( movie(C, E), workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.22152502927633905;  // std dev = 0,668, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.5002131558403854;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.13637023346435792;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.1283000784751715;  // std dev = 0,499, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.3480411762363753;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(J, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(K, A), movie(L, K) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13542257003772976;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then return 0.27374547506582114;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then if ( movie(F, G), workedunder(G, H) )
%   | | then if ( movie(I, H) )
%   | | | then return -0.12033481306242612;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return 0.22279583504896883;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A), workedunder(E, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(H, A) )
%   | | | then return -0.10816742001219734;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then if ( workedunder(E, A), movie(F, E) )
%   | then return 0.1866019136259569;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(G, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(H, A), movie(I, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(J, A), movie(K, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09816643487216596;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.15991710142455196;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( movie(E, F) )
%   | then if ( workedunder(G, F), workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, I) )
%   | | | then return -0.08981204150920478;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.306623
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 0.792 seconds
Total inference time: 1.559 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 2, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'movie(C, E), workedunder(E, F)'}, {'true,false,true': [0.0, 2, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.668, 2, 2]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 2, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.499, 2, 2]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'workedunder(J, A)', 'false,false,false': 'workedunder(K, A), movie(L, K)', 'true,true': 'movie(E, C)', 'false': 'movie(H, A), workedunder(I, A)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [0.0, 0, 2], 'false,false,false,false': [0.0, 2, 0], 'true,true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'false,true,true': 'movie(I, H)', 'false,true': 'movie(F, G), workedunder(G, H)', 'false': 'movie(F, A)', 'true': 'workedunder(C, D), movie(E, D)'}, {'false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 2, 0], 'false,true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false,false': 'workedunder(G, A)', 'false,false,false': 'movie(H, A)', 'false': 'workedunder(E, A), workedunder(E, F)', 'true': 'movie(D, C)'}, {'false,false,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false,false': 'workedunder(H, A), movie(I, A)', 'false,false,false': 'workedunder(J, A), movie(K, J)', 'false': 'workedunder(G, A)', 'true': 'workedunder(E, A), movie(F, E)'}, {'false,false,false,false': [0.0, 2, 0], 'true,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'movie(E, F)', 'false,true': 'workedunder(G, F), workedunder(G, A)', 'false,true,false': 'workedunder(H, I)'}, {'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false,true': [0.0, 2, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 2]}]]
[{'': [0.25, nan], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}, {'': [0.17847162811629394, nan], 'true': [0.0, 0.0], 'true,false': [0.0, nan]}, {'': [0.11145008534151418, nan]}, {'': [0.10130960288467858, nan], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}, {'': [0.062195810698099915, nan]}, {'': [0.0, 0.0], 'true,true,true': [0.0, nan], 'false,false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true,true': [0.0, nan], 'false': [nan, 0.0], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'false,true,true': [0.0, nan], 'false': [0.0, nan], 'true': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.0, 0.0], 'false,false': [nan, 0.0], 'false': [nan, 0.0], 'false,false,false': [0.0, nan], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'false,false': [nan, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'false': [0.0, nan], 'false,true': [nan, 0.0], 'false,true,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '3;;genre(A, B) :- workedunder(D, A).;true;true', '5;;genre(A, B) :- workedunder(C, A).;true;true', '6;;genre(A, B) :- workedunder(C, A).;true;true', '7;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '8;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '9;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   return 0;  // std dev = 0,334, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   return 0;  // std dev = 0,260, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.299128
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 0.691 seconds
Total inference time: 0.586 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 15:12:30
{'Mapping results': {'Finding best mapping': 1.430511474609375e-06, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.058502197265625, 'Total time': 1.999215841293335, 'Generating paths time': 1.9163193702697754, 'Knowledge compiling time': 0.024384260177612305}, 'CLL': -0.299128, 'Learning time': 1.483, 'AUC PR': 0.833333, 'F1': 0.909091, 'AUC ROC': 0.9, 'Recall': 1.0, 'Precision': [0.833333, 0.5], 'parameter': {'CLL': -0.306623, 'Learning time': 0.792, 'AUC PR': 0.833333, 'F1': 0.909091, 'AUC ROC': 0.9, 'Recall': 1.0, 'Precision': [0.833333, 0.5], 'Inference time': 1.559}, 'Inference time': 0.586}


Start learning from scratch in target domain

