Starting experiment #2 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( publication(E, A), advisedby(A, F) )
%   | then return 0.28314893509951233;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(C, G, D), advisedby(G, H) )
%   | | then if ( sameperson(A, G) )
%   | | | then return 0.38314893509951164;  // std dev = 3,158, 40,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( ta(C, I, J), advisedby(I, K) )
%   | | | then return 0.2905813675319448;  // std dev = 3,013, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | | else return 0.35814893509951234;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( advisedby(A, L), projectmember(M, L) )
%   | then return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( tempadvisedby(A, N), publication(P, A) )
%   | | then return 0.28672036367094084;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( advisedby(A, Q), tempadvisedby(R, Q) )
%   | | | then return 0.3766674536180297;  // std dev = 3,672, 54,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | | else return 0.40887357278067166;  // std dev = 4,132, 69,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=38 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( publication(C, F), tempadvisedby(G, F) )
%   | then return 0.24055491921575048;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else return 0.3136489609479246;  // std dev = 0,494, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( advisedby(A, H), publication(I, H) )
%   | then if ( advisedby(J, H), publication(I, J) )
%   | | then if ( ta(K, J, L) )
%   | | | then return 0.3543216290018322;  // std dev = 3,553, 51,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=28 */
%   | | | else return 0.29391230801993523;  // std dev = 3,499, 49,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=24 */
%   | | else return 0.4503725040017319;  // std dev = 0,479, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, M) )
%   | | then if ( tempadvisedby(N, M), publication(P, N) )
%   | | | then return 0.23993573488811673;  // std dev = 2,267, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.36141620627939947;  // std dev = 3,387, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( publication(Q, A) )
%   | | | then return 0.35305373007035007;  // std dev = 1,650, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.22339918577387163;  // std dev = 2,865, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( advisedby(A, E), publication(F, A) )
%   | then return 0.2045918148899159;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(C, G, D), advisedby(G, H) )
%   | | then return 0.29707919926990317;  // std dev = 0,492, 45,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   | | else return 0.21606707194941535;  // std dev = 0,497, 51,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=23 */
%   else if ( advisedby(A, I), publication(J, I) )
%   | then if ( tempadvisedby(K, I), publication(L, A) )
%   | | then if ( publication(J, K) )
%   | | | then return 0.14440877416140382;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.26837916339841633;  // std dev = 2,593, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.31554303614896445;  // std dev = 0,494, 47,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=27 */
%   | else if ( advisedby(A, M), projectmember(N, M) )
%   | | then return 0.1617413557394715;  // std dev = 0,485, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( advisedby(A, P) )
%   | | | then return 0.3800827016850704;  // std dev = 1,367, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.25346128033265514;  // std dev = 3,300, 44,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( publication(C, F), tempadvisedby(G, F) )
%   | then return 0.16290883265346506;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else return 0.21993401768613813;  // std dev = 0,491, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( publication(H, A), advisedby(A, I) )
%   | then if ( tempadvisedby(J, I) )
%   | | then if ( publication(H, J) )
%   | | | then return 0.049312228685111946;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.21678635927296416;  // std dev = 2,868, 33,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | else return 0.32393440766804626;  // std dev = 0,476, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, K), advisedby(L, K) )
%   | | then if ( publication(M, L), publication(M, K) )
%   | | | then return 0.2021046463362586;  // std dev = 3,399, 47,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=23 */
%   | | | else return 0.2945247379803932;  // std dev = 1,899, 15,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else if ( advisedby(A, N), publication(P, N) )
%   | | | then return 0.21556768832611325;  // std dev = 4,194, 71,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=38 */
%   | | | else return 0.1540836032630637;  // std dev = 3,251, 44,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( publication(C, A), ta(D, A, E) )
%   then if ( publication(C, F), tempadvisedby(G, F) )
%   | then if ( ta(H, G, E), advisedby(A, F) )
%   | | then return 0.21275362119328545;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.11573918658840741;  // std dev = 0,492, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
%   | else return 0.17375456551136165;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( publication(I, A), advisedby(A, J) )
%   | then if ( tempadvisedby(K, J) )
%   | | then return 0.15869918925616966;  // std dev = 0,498, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | | else return 0.2495234865814174;  // std dev = 0,476, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( tempadvisedby(A, L) )
%   | | then if ( tempadvisedby(M, L), publication(N, M) )
%   | | | then return 0.11264356944720874;  // std dev = 2,267, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.20325743840552432;  // std dev = 3,369, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( advisedby(A, P), publication(Q, P) )
%   | | | then return 0.16703690467809615;  // std dev = 4,193, 71,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=38 */
%   | | | else return 0.11507668809105509;  // std dev = 3,023, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( ta(C, E, D), advisedby(E, F) )
%   | then return 0.12822358000689804;  // std dev = 0,493, 85,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=42 */
%   | else if ( ta(C, G, H), advisedby(G, I) )
%   | | then if ( tempadvisedby(J, I), publication(K, J) )
%   | | | then return -0.013783323683084;  // std dev = 1,416, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.1179092317031204;  // std dev = 2,628, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | | else if ( tempadvisedby(A, L), publication(M, L) )
%   | | | then return 0.17990796131605824;  // std dev = 1,463, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.022238314025159068;  // std dev = 1,113, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( advisedby(A, N), publication(P, A) )
%   | then return 0.14351699157863057;  // std dev = 0,492, 53,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=29 */
%   | else if ( tempadvisedby(A, Q) )
%   | | then return 0.1483688204452073;  // std dev = 0,493, 32,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | else if ( advisedby(A, R) )
%   | | | then return 0.12321643057908642;  // std dev = 3,395, 47,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=24 */
%   | | | else return 0.06263228488340504;  // std dev = 1,703, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then if ( advisedby(A, E), publication(F, E) )
%   | then return 0.5866663251955254;  // std dev = 0,091, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.042701445674244415;  // std dev = 0,483, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   else if ( ta(G, A, H), advisedby(A, I) )
%   | then if ( advisedby(J, I), publication(K, J) )
%   | | then if ( ta(L, J, M), publication(K, I) )
%   | | | then return 0.11529171619046857;  // std dev = 3,233, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | | | else return -0.008463083054336016;  // std dev = 2,673, 30,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | | else return 0.17262462995818134;  // std dev = 1,084, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( tempadvisedby(A, N), ta(P, A, Q) )
%   | | then if ( publication(R, A), publication(R, N) )
%   | | | then return -0.03795983658606639;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.10021066403489573;  // std dev = 3,021, 38,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
%   | | else if ( tempadvisedby(A, S), publication(T, A) )
%   | | | then return 0.0642752578180744;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.10484634663271834;  // std dev = 5,800, 138,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=73 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( publication(E, F), advisedby(A, F) )
%   | then return 0.043107169569977684;  // std dev = 0,492, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.08133954576102603;  // std dev = 0,485, 21,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   else if ( advisedby(A, G), publication(H, A) )
%   | then if ( publication(H, G) )
%   | | then if ( advisedby(I, G), ta(J, I, K) )
%   | | | then return 0.08339252634298645;  // std dev = 2,913, 35,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   | | | else return -0.04200317100535903;  // std dev = 1,327, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.16695437428222942;  // std dev = 0,467, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | else if ( tempadvisedby(A, L) )
%   | | then if ( tempadvisedby(M, L), publication(N, M) )
%   | | | then return 0.03412150371130042;  // std dev = 2,267, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.10338149153042621;  // std dev = 3,347, 47,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=26 */
%   | | else if ( advisedby(A, P) )
%   | | | then return 0.07274222668111728;  // std dev = 4,591, 87,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=45 */
%   | | | else return 0.03533338961580303;  // std dev = 2,300, 22,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( tempadvisedby(A, C), publication(D, A) )
%   then if ( publication(D, C) )
%   | then return -0.01016106324753474;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0.09188978589927455;  // std dev = 1,001, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tempadvisedby(A, E) )
%   | then if ( tempadvisedby(F, E), publication(G, F) )
%   | | then if ( ta(H, F, I) )
%   | | | then return -0.003679190292521883;  // std dev = 1,551, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.07337744120225807;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( advisedby(J, E), publication(K, J) )
%   | | | then return 0.10594518802387112;  // std dev = 2,698, 31,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=18 */
%   | | | else return 0.023393925611180463;  // std dev = 1,962, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | else if ( advisedby(A, L), projectmember(M, L) )
%   | | then return 0.08714990319683144;  // std dev = 0,464, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | else if ( ta(N, A, P), advisedby(A, Q) )
%   | | | then return 0.039295324771820864;  // std dev = 4,354, 78,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=36 */
%   | | | else return 0.05781467874228852;  // std dev = 5,242, 113,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=59 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( publication(C, A), tempadvisedby(A, D) )
%   then if ( publication(C, D), ta(E, A, F) )
%   | then return -0.04574679313694289;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( publication(C, D) )
%   | | then return 0.015035741294766791;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.06956050633463653;  // std dev = 1,001, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tempadvisedby(A, G) )
%   | then if ( tempadvisedby(H, G), ta(I, H, J) )
%   | | then if ( advisedby(K, G), ta(L, K, M) )
%   | | | then return 0.05249756417716147;  // std dev = 2,718, 31,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | | | else return -0.004026624922467337;  // std dev = 1,764, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.08046219086078582;  // std dev = 0,488, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | else if ( advisedby(A, N), projectmember(P, N) )
%   | | then return 0.066566314730223;  // std dev = 0,464, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | else if ( ta(Q, A, R), advisedby(A, S) )
%   | | | then return 0.029760865940133455;  // std dev = 4,354, 78,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=36 */
%   | | | else return 0.04359054371038506;  // std dev = 5,242, 113,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=59 */


Predicates from source: ['inphase(person,prequals).', 'ta(course,person,quarter).', 'sameperson(person,person).', 'tempadvisedby(person,person).', 'publication(title,person).', 'advisedby(person,person).', 'projectmember(project,person).']

Starting fold 1

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.027429580688476562
   Generating paths time   = 1.805694818496704
   Generating mappings time   = 0.0671989917755127
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 1.9003303050994873


Best mapping found: ['sameperson(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A), workedunder(A, F).;false;true
0;false;workedunder(A, L), workedunder(M, L).;false;true
0;false,false,false;workedunder(A, Q), workedunder(R, Q).;false;false
0;false,false;workedunder(A, N), movie(P, A).;false;true
1;;genre(A, B) :- movie(C, A).;true;true
1;false,false;workedunder(A, M).;true;true
1;false,false,false;movie(Q, A).;false;false
1;false;workedunder(A, H), movie(I, H).;true;true
1;false,false,true;workedunder(N, M), movie(P, N).;false;false
1;true;movie(C, F), workedunder(G, F).;false;false
1;false,true;workedunder(J, H), movie(I, J).;false;false
2;;genre(A, B) :- workedunder(A, E), movie(F, A).;false;true
2;false,false;workedunder(A, M), workedunder(N, M).;false;true
2;false,false,false;workedunder(A, P).;false;false
2;false,true,true;movie(J, K).;false;false
2;false;workedunder(A, I), movie(J, I).;true;true
2;false,true;workedunder(K, I), movie(L, A).;true;false
3;;genre(A, B) :- movie(C, A).;true;true
3;false,false;workedunder(A, K), workedunder(L, K).;true;true
3;false,false,false;workedunder(A, N), movie(P, N).;false;false
3;false,true,true;movie(H, J).;false;false
3;false,true;workedunder(J, I).;true;false
3;false,false,true;movie(M, L), movie(M, K).;false;false
3;false;movie(H, A), workedunder(A, I).;true;true
3;true;movie(C, F), workedunder(G, F).;false;false
4;;genre(A, B) :- movie(C, A).;true;true
4;false,false;workedunder(A, L).;true;true
4;false,false,false;workedunder(A, P), movie(Q, P).;false;false
4;true,true;workedunder(A, F).;false;false
4;false;movie(I, A), workedunder(A, J).;true;true
4;false,false,true;workedunder(M, L), movie(N, M).;false;false
4;false,true;workedunder(K, J).;false;false
4;true;movie(C, F), workedunder(G, F).;true;false
5;;genre(A, B) :- workedunder(E, F).;false;true
5;false;workedunder(A, N), movie(P, A).;false;true
5;false,false,false;workedunder(A, R).;false;false
5;false,false;workedunder(A, Q).;false;true
6;;genre(A, B) :- workedunder(A, C), workedunder(D, C).;true;true
6;false,false;workedunder(A, N).;true;true
6;false,false,false;workedunder(A, S), movie(T, A).;false;false
6;false,true,true;movie(K, I).;false;false
6;false,true;workedunder(J, I), movie(K, J).;true;false
6;false,false,true;movie(R, A), movie(R, N).;false;false
6;false;workedunder(A, I).;true;true
6;true;workedunder(A, E), movie(F, E).;false;false
7;;genre(A, B) :- movie(E, A).;true;true
7;false,false;workedunder(A, L).;true;true
7;false,false,false;workedunder(A, P).;false;false
7;false,true,true;workedunder(I, G).;false;false
7;false,true;movie(H, G).;true;false
7;false,false,true;workedunder(M, L), movie(N, M).;false;false
7;false;workedunder(A, G), movie(H, A).;true;true
7;true;movie(E, F), workedunder(A, F).;false;false
8;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true
8;false,false;workedunder(A, L), workedunder(M, L).;false;true
8;false,false,false;workedunder(A, Q).;false;false
8;false,true,false;workedunder(J, E), movie(K, J).;false;false
8;false;workedunder(A, E).;true;true
8;true;movie(D, C).;false;false
8;false,true;workedunder(F, E), movie(G, F).;false;true
9;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true
9;false,true,true;workedunder(K, G).;false;false
9;false,false;workedunder(A, N), workedunder(P, N).;false;true
9;false,false,false;workedunder(A, S).;false;false
9;false;workedunder(A, G).;true;true
9;true,false;movie(C, D).;false;false
9;false,true;workedunder(H, G).;true;false
9;true;movie(C, D).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( workedunder(A, E), workedunder(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, G), movie(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I), workedunder(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then return 0.2970143868412816;  // std dev = 1,982, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.16180800894656572;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( workedunder(A, E), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, G), workedunder(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6558459784192013;  // std dev = 2,98e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then return 0.1781017839416223;  // std dev = 1,497, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then if ( workedunder(A, D) )
%   | | then return -0.16403006668140588;  // std dev = 1,29e-08, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.45286262642827835;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.10102147813847283;  // std dev = 1,143, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(A, C), workedunder(D, C) )
%   then if ( workedunder(A, E), movie(F, E) )
%   | then return -0.1555719128353786;  // std dev = 1,05e-08, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I), movie(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.3223495259487468;  // std dev = 1,49e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(A, D) )
%   | then return -0.13621099618043717;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.2562893983071733;  // std dev = 2,36e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return -0.12096383743884441;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.21054654811312237;  // std dev = 1,29e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then if ( movie(C, D) )
%   | then return -0.10867975660794152;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.1776748530305218;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.356574
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 2.009 seconds
Total inference time: 0.597 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A), workedunder(A, D)', 'false': 'workedunder(A, E), workedunder(F, E)', 'false,false,false': 'workedunder(A, I), workedunder(J, I)', 'false,false': 'workedunder(A, G), movie(H, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 11], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)'}, {'false': [0.0, 0, 0], 'true,true': [1.982, 11, 11], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(A, C), movie(D, A)', 'false': 'workedunder(A, E), movie(F, E)', 'false,false,false': 'workedunder(A, I)', 'false,false': 'workedunder(A, G), workedunder(H, G)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.98e-08, 0, 11], 'false,false,true': [0.0, 0, 0], 'true': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)'}, {'false': [0.0, 0, 0], 'true,true': [1.497, 11, 11], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)', 'true,true': 'workedunder(A, D)'}, {'true,true,true': [1.29e-08, 11, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 11], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.143, 11, 11]}], ['genre(A, B)', {'': 'workedunder(A, C), workedunder(D, C)', 'false,false': 'workedunder(A, H)', 'false,false,false': 'workedunder(A, I), movie(J, A)', 'false': 'workedunder(A, G)', 'true': 'workedunder(A, E), movie(F, E)'}, {'false,false,false,false': [1.49e-08, 0, 11], 'true,true': [1.05e-08, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(A, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 11, 0], 'true,false': [2.36e-08, 0, 11]}], ['genre(A, B)', {'': 'workedunder(A, C), movie(D, A)', 'false,false': 'workedunder(A, F), workedunder(G, F)', 'false,false,false': 'workedunder(A, H)', 'false': 'workedunder(A, E)', 'true': 'movie(D, C)'}, {'false,false,false,false': [1.29e-08, 0, 11], 'true,true': [0.0, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(A, D)', 'false,false': 'workedunder(A, F), workedunder(G, F)', 'false,false,false': 'workedunder(A, H)', 'false': 'workedunder(A, E)', 'true': 'movie(C, D)'}, {'false,false,false,false': [0.0, 0, 11], 'true,true': [0.0, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [-1.0092936587501423e-17, -1.6148698540002277e-16], 'false': [nan, -1.6148698540002277e-16], 'false,false,false': [nan, -1.6148698540002277e-16], 'false,false': [nan, -1.6148698540002277e-16]}, {'': [0.17847162811629388, nan], 'true': [0.17847162811629388, nan]}, {'': [5.046468293750712e-18, 8.074349270001139e-17], 'false': [nan, 8.074349270001139e-17], 'false,false,false': [nan, 8.074349270001139e-17], 'false,false': [nan, 8.074349270001139e-17]}, {'': [0.10185411746601693, nan], 'true': [0.10185411746601693, nan]}, {'': [0.0951391487030297, nan], 'true': [0.0951391487030297, nan], 'true,true': [1.5139404881252134e-17, -4.0371746350005693e-17]}, {'': [0.05942821918555934, nan]}, {'': [1.0092936587501423e-17, 2.0185873175002847e-17], 'false': [nan, 2.0185873175002847e-17], 'false,false,false': [nan, 2.0185873175002847e-17], 'false,false': [nan, 2.0185873175002847e-17], 'true': [1.0092936587501423e-17, nan]}, {'': [0.03851413991823247, nan], 'true': [-5.046468293750712e-18, 5.0464682937507114e-17]}, {'': [-7.569702440626067e-18, 1.5139404881252134e-17], 'false': [nan, 1.5139404881252134e-17], 'false,false,false': [nan, 1.5139404881252134e-17], 'false,false': [nan, 1.5139404881252134e-17], 'true': [-7.569702440626067e-18, nan]}, {'': [-5.046468293750712e-18, -1.5139404881252134e-17], 'false,false': [nan, -1.5139404881252134e-17], 'false': [nan, -1.5139404881252134e-17], 'false,false,false': [nan, -1.5139404881252134e-17], 'true': [-5.046468293750712e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true', '2;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(A, D).;true;true', '6;;genre(A, B) :- workedunder(A, C), workedunder(D, C).;true;true', '7;;genre(A, B) :- movie(C, D), workedunder(A, D).;true;true', '8;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true', '9;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(A, C), workedunder(D, C) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D), workedunder(A, D) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.006 seconds
Total inference time: 0.699 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 03:55:28
{'Mapping results': {'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [433], 'Generating mappings time': 0.0671989917755127, 'Total time': 1.9003303050994873, 'Generating paths time': 1.805694818496704, 'Knowledge compiling time': 0.027429580688476562}, 'CLL': -0.352709, 'Learning time': 3.0149999999999997, 'AUC PR': 0.8, 'F1': 0.888889, 'AUC ROC': 0.875, 'Recall': 1.0, 'Precision': [0.8, 0.5], 'parameter': {'CLL': -0.356574, 'Learning time': 2.009, 'AUC PR': 0.8, 'F1': 0.888889, 'AUC ROC': 0.875, 'Recall': 1.0, 'Precision': [0.8, 0.5], 'Inference time': 0.597}, 'Inference time': 0.699}


Start learning from scratch in target domain

Starting fold 2

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.0165407657623291
   Generating paths time   = 1.8177928924560547
   Generating mappings time   = 0.06673979759216309
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 1.9010813236236572


Best mapping found: ['sameperson(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A), workedunder(A, F).;false;true
0;false;workedunder(A, L), workedunder(M, L).;false;true
0;false,false,false;workedunder(A, Q), workedunder(R, Q).;false;false
0;false,false;workedunder(A, N), movie(P, A).;false;true
1;;genre(A, B) :- movie(C, A).;true;true
1;false,false;workedunder(A, M).;true;true
1;false,false,false;movie(Q, A).;false;false
1;false;workedunder(A, H), movie(I, H).;true;true
1;false,false,true;workedunder(N, M), movie(P, N).;false;false
1;true;movie(C, F), workedunder(G, F).;false;false
1;false,true;workedunder(J, H), movie(I, J).;false;false
2;;genre(A, B) :- workedunder(A, E), movie(F, A).;false;true
2;false,false;workedunder(A, M), workedunder(N, M).;false;true
2;false,false,false;workedunder(A, P).;false;false
2;false,true,true;movie(J, K).;false;false
2;false;workedunder(A, I), movie(J, I).;true;true
2;false,true;workedunder(K, I), movie(L, A).;true;false
3;;genre(A, B) :- movie(C, A).;true;true
3;false,false;workedunder(A, K), workedunder(L, K).;true;true
3;false,false,false;workedunder(A, N), movie(P, N).;false;false
3;false,true,true;movie(H, J).;false;false
3;false,true;workedunder(J, I).;true;false
3;false,false,true;movie(M, L), movie(M, K).;false;false
3;false;movie(H, A), workedunder(A, I).;true;true
3;true;movie(C, F), workedunder(G, F).;false;false
4;;genre(A, B) :- movie(C, A).;true;true
4;false,false;workedunder(A, L).;true;true
4;false,false,false;workedunder(A, P), movie(Q, P).;false;false
4;true,true;workedunder(A, F).;false;false
4;false;movie(I, A), workedunder(A, J).;true;true
4;false,false,true;workedunder(M, L), movie(N, M).;false;false
4;false,true;workedunder(K, J).;false;false
4;true;movie(C, F), workedunder(G, F).;true;false
5;;genre(A, B) :- workedunder(E, F).;false;true
5;false;workedunder(A, N), movie(P, A).;false;true
5;false,false,false;workedunder(A, R).;false;false
5;false,false;workedunder(A, Q).;false;true
6;;genre(A, B) :- workedunder(A, C), workedunder(D, C).;true;true
6;false,false;workedunder(A, N).;true;true
6;false,false,false;workedunder(A, S), movie(T, A).;false;false
6;false,true,true;movie(K, I).;false;false
6;false,true;workedunder(J, I), movie(K, J).;true;false
6;false,false,true;movie(R, A), movie(R, N).;false;false
6;false;workedunder(A, I).;true;true
6;true;workedunder(A, E), movie(F, E).;false;false
7;;genre(A, B) :- movie(E, A).;true;true
7;false,false;workedunder(A, L).;true;true
7;false,false,false;workedunder(A, P).;false;false
7;false,true,true;workedunder(I, G).;false;false
7;false,true;movie(H, G).;true;false
7;false,false,true;workedunder(M, L), movie(N, M).;false;false
7;false;workedunder(A, G), movie(H, A).;true;true
7;true;movie(E, F), workedunder(A, F).;false;false
8;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true
8;false,false;workedunder(A, L), workedunder(M, L).;false;true
8;false,false,false;workedunder(A, Q).;false;false
8;false,true,false;workedunder(J, E), movie(K, J).;false;false
8;false;workedunder(A, E).;true;true
8;true;movie(D, C).;false;false
8;false,true;workedunder(F, E), movie(G, F).;false;true
9;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true
9;false,true,true;workedunder(K, G).;false;false
9;false,false;workedunder(A, N), workedunder(P, N).;false;true
9;false,false,false;workedunder(A, S).;false;false
9;false;workedunder(A, G).;true;true
9;true,false;movie(C, D).;false;false
9;false,true;workedunder(H, G).;true;false
9;true;movie(C, D).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( workedunder(A, E), workedunder(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, G), movie(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I), workedunder(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then return 0.29881865438287963;  // std dev = 2,140, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.16205286419737067;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( workedunder(A, E), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, G), workedunder(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5956741381003415;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then return 0.18124293657340532;  // std dev = 1,742, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then if ( workedunder(A, D) )
%   | | then return -0.1646756462461812;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.40884037541232365;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.10154728112696922;  // std dev = 1,463, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(A, C), workedunder(D, C) )
%   then if ( workedunder(A, E), movie(F, E) )
%   | then return -0.15617463765721928;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I), movie(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2849256207992032;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(A, D) )
%   | then return -0.13667972314320284;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.22203279368078926;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return -0.12133748739921944;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.17766167325668616;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then if ( movie(C, D) )
%   | then return -0.10898387868848616;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.14543634736358485;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.335562
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.108 seconds
Total inference time: 0.662 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A), workedunder(A, D)', 'false': 'workedunder(A, E), workedunder(F, E)', 'false,false,false': 'workedunder(A, I), workedunder(J, I)', 'false,false': 'workedunder(A, G), movie(H, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.961, 1, 12], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)'}, {'false': [0.0, 0, 0], 'true,true': [2.14, 12, 12], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(A, C), movie(D, A)', 'false': 'workedunder(A, E), movie(F, E)', 'false,false,false': 'workedunder(A, I)', 'false,false': 'workedunder(A, G), workedunder(H, G)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.961, 1, 12], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)'}, {'false': [0.0, 0, 0], 'true,true': [1.742, 12, 12], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)', 'true,true': 'workedunder(A, D)'}, {'true,true,true': [7.45e-09, 11, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.961, 1, 12], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.463, 12, 12]}], ['genre(A, B)', {'': 'workedunder(A, C), workedunder(D, C)', 'false,false': 'workedunder(A, H)', 'false,false,false': 'workedunder(A, I), movie(J, A)', 'false': 'workedunder(A, G)', 'true': 'workedunder(A, E), movie(F, E)'}, {'false,false,false,false': [0.961, 1, 12], 'true,true': [0.0, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(A, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 11, 0], 'true,false': [0.961, 1, 12]}], ['genre(A, B)', {'': 'workedunder(A, C), movie(D, A)', 'false,false': 'workedunder(A, F), workedunder(G, F)', 'false,false,false': 'workedunder(A, H)', 'false': 'workedunder(A, E)', 'true': 'movie(D, C)'}, {'false,false,false,false': [0.961, 1, 12], 'true,true': [0.0, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(A, D)', 'false,false': 'workedunder(A, F), workedunder(G, F)', 'false,false,false': 'workedunder(A, H)', 'false': 'workedunder(A, E)', 'true': 'movie(C, D)'}, {'false,false,false,false': [0.961, 1, 12], 'true,true': [7.45e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [-1.0092936587501423e-17, 0.07100591715976314], 'false': [nan, 0.07100591715976314], 'false,false,false': [nan, 0.07100591715976314], 'false,false': [nan, 0.07100591715976314]}, {'': [0.19076867375623552, nan], 'true': [0.19076867375623552, nan]}, {'': [0.0, 0.07100591715976333], 'false': [nan, 0.07100591715976333], 'false,false,false': [nan, 0.07100591715976333], 'false,false': [nan, 0.07100591715976333]}, {'': [0.12645378409069916, nan], 'true': [0.12645378409069916, nan]}, {'': [0.12012065248090788, nan], 'true': [0.12012065248090788, nan], 'true,true': [5.046468293750712e-18, 0.07100591715976326]}, {'': [0.08916977962150484, nan]}, {'': [-5.046468293750712e-18, 0.07100591715976333], 'false': [nan, 0.07100591715976333], 'false,false,false': [nan, 0.07100591715976333], 'false,false': [nan, 0.07100591715976333], 'true': [-5.046468293750712e-18, nan]}, {'': [0.07040681236925891, nan], 'true': [-2.523234146875356e-18, 0.0710059171597633]}, {'': [-2.523234146875356e-18, 0.07100591715976329], 'false': [nan, 0.07100591715976329], 'false,false,false': [nan, 0.07100591715976329], 'false,false': [nan, 0.07100591715976329], 'true': [-2.523234146875356e-18, nan]}, {'': [5.046468293750712e-18, 0.0710059171597633], 'false': [nan, 0.0710059171597633], 'false,false,false': [nan, 0.0710059171597633], 'false,false': [nan, 0.0710059171597633], 'true': [5.046468293750712e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true', '2;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(A, D).;true;true', '6;;genre(A, B) :- workedunder(A, C), workedunder(D, C).;true;true', '7;;genre(A, B) :- movie(C, D), workedunder(A, D).;true;true', '8;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true', '9;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(A, C), workedunder(D, C) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D), workedunder(A, D) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.267 seconds
Total inference time: 0.707 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 03:55:35
{'Mapping results': {'Finding best mapping': 7.152557373046875e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [433], 'Generating mappings time': 0.06673979759216309, 'Total time': 1.9010813236236572, 'Generating paths time': 1.8177928924560547, 'Knowledge compiling time': 0.0165407657623291}, 'CLL': -0.320018, 'Learning time': 2.375, 'AUC PR': 0.813953, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Recall': 1.0, 'Precision': [0.813953, 0.5], 'parameter': {'CLL': -0.335562, 'Learning time': 1.108, 'AUC PR': 0.813953, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Recall': 1.0, 'Precision': [0.813953, 0.5], 'Inference time': 0.662}, 'Inference time': 0.707}


Start learning from scratch in target domain

Starting fold 3

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.01769566535949707
   Generating paths time   = 1.844888687133789
   Generating mappings time   = 0.06733059883117676
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 1.9299228191375732


Best mapping found: ['sameperson(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A), workedunder(A, F).;false;true
0;false;workedunder(A, L), workedunder(M, L).;false;true
0;false,false,false;workedunder(A, Q), workedunder(R, Q).;false;false
0;false,false;workedunder(A, N), movie(P, A).;false;true
1;;genre(A, B) :- movie(C, A).;true;true
1;false,false;workedunder(A, M).;true;true
1;false,false,false;movie(Q, A).;false;false
1;false;workedunder(A, H), movie(I, H).;true;true
1;false,false,true;workedunder(N, M), movie(P, N).;false;false
1;true;movie(C, F), workedunder(G, F).;false;false
1;false,true;workedunder(J, H), movie(I, J).;false;false
2;;genre(A, B) :- workedunder(A, E), movie(F, A).;false;true
2;false,false;workedunder(A, M), workedunder(N, M).;false;true
2;false,false,false;workedunder(A, P).;false;false
2;false,true,true;movie(J, K).;false;false
2;false;workedunder(A, I), movie(J, I).;true;true
2;false,true;workedunder(K, I), movie(L, A).;true;false
3;;genre(A, B) :- movie(C, A).;true;true
3;false,false;workedunder(A, K), workedunder(L, K).;true;true
3;false,false,false;workedunder(A, N), movie(P, N).;false;false
3;false,true,true;movie(H, J).;false;false
3;false,true;workedunder(J, I).;true;false
3;false,false,true;movie(M, L), movie(M, K).;false;false
3;false;movie(H, A), workedunder(A, I).;true;true
3;true;movie(C, F), workedunder(G, F).;false;false
4;;genre(A, B) :- movie(C, A).;true;true
4;false,false;workedunder(A, L).;true;true
4;false,false,false;workedunder(A, P), movie(Q, P).;false;false
4;true,true;workedunder(A, F).;false;false
4;false;movie(I, A), workedunder(A, J).;true;true
4;false,false,true;workedunder(M, L), movie(N, M).;false;false
4;false,true;workedunder(K, J).;false;false
4;true;movie(C, F), workedunder(G, F).;true;false
5;;genre(A, B) :- workedunder(E, F).;false;true
5;false;workedunder(A, N), movie(P, A).;false;true
5;false,false,false;workedunder(A, R).;false;false
5;false,false;workedunder(A, Q).;false;true
6;;genre(A, B) :- workedunder(A, C), workedunder(D, C).;true;true
6;false,false;workedunder(A, N).;true;true
6;false,false,false;workedunder(A, S), movie(T, A).;false;false
6;false,true,true;movie(K, I).;false;false
6;false,true;workedunder(J, I), movie(K, J).;true;false
6;false,false,true;movie(R, A), movie(R, N).;false;false
6;false;workedunder(A, I).;true;true
6;true;workedunder(A, E), movie(F, E).;false;false
7;;genre(A, B) :- movie(E, A).;true;true
7;false,false;workedunder(A, L).;true;true
7;false,false,false;workedunder(A, P).;false;false
7;false,true,true;workedunder(I, G).;false;false
7;false,true;movie(H, G).;true;false
7;false,false,true;workedunder(M, L), movie(N, M).;false;false
7;false;workedunder(A, G), movie(H, A).;true;true
7;true;movie(E, F), workedunder(A, F).;false;false
8;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true
8;false,false;workedunder(A, L), workedunder(M, L).;false;true
8;false,false,false;workedunder(A, Q).;false;false
8;false,true,false;workedunder(J, E), movie(K, J).;false;false
8;false;workedunder(A, E).;true;true
8;true;movie(D, C).;false;false
8;false,true;workedunder(F, E), movie(G, F).;false;true
9;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true
9;false,true,true;workedunder(K, G).;false;false
9;false,false;workedunder(A, N), workedunder(P, N).;false;true
9;false,false,false;workedunder(A, S).;false;false
9;false;workedunder(A, G).;true;true
9;true,false;movie(C, D).;false;false
9;false,true;workedunder(H, G).;true;false
9;true;movie(C, D).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( workedunder(A, E), workedunder(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, G), movie(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I), workedunder(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then return 0.3036065954523843;  // std dev = 2,821, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.16270407948312035;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( workedunder(A, E), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, G), workedunder(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.43468426925455816;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then return 0.191822590534415;  // std dev = 2,608, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then if ( workedunder(A, D) )
%   | | then return -0.16670999812174656;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.29242147522756295;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.10840908496905355;  // std dev = 2,461, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(A, C), workedunder(D, C) )
%   then if ( workedunder(A, E), movie(F, E) )
%   | then return -0.15876754526334327;  // std dev = 1,05e-08, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I), movie(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.1927537790640691;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(A, D) )
%   | then return -0.1386922508600553;  // std dev = 9,13e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.14510609697048987;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return -0.122939170383654;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.11008550261035782;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then if ( movie(C, D) )
%   | then return -0.1102857285010126;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.08423300974648323;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.297236
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.388 seconds
Total inference time: 0.638 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A), workedunder(A, D)', 'false': 'workedunder(A, E), workedunder(F, E)', 'false,false,false': 'workedunder(A, I), workedunder(J, I)', 'false,false': 'workedunder(A, G), movie(H, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.245, 7, 18], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)'}, {'false': [0.0, 0, 0], 'true,true': [2.821, 18, 18], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(A, C), movie(D, A)', 'false': 'workedunder(A, E), movie(F, E)', 'false,false,false': 'workedunder(A, I)', 'false,false': 'workedunder(A, G), workedunder(H, G)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.245, 7, 18], 'false,false,true': [0.0, 0, 0], 'true': [7.45e-09, 11, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)'}, {'false': [0.0, 0, 0], 'true,true': [2.608, 18, 18], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)', 'true,true': 'workedunder(A, D)'}, {'true,true,true': [0.0, 11, 0], 'false': [0.0, 0, 0], 'true,true,false': [2.245, 7, 18], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [2.461, 18, 18]}], ['genre(A, B)', {'': 'workedunder(A, C), workedunder(D, C)', 'false,false': 'workedunder(A, H)', 'false,false,false': 'workedunder(A, I), movie(J, A)', 'false': 'workedunder(A, G)', 'true': 'workedunder(A, E), movie(F, E)'}, {'false,false,false,false': [2.245, 7, 18], 'true,true': [1.05e-08, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(A, D)'}, {'false': [0.0, 0, 0], 'true,true': [9.13e-09, 11, 0], 'true,false': [2.245, 7, 18]}], ['genre(A, B)', {'': 'workedunder(A, C), movie(D, A)', 'false,false': 'workedunder(A, F), workedunder(G, F)', 'false,false,false': 'workedunder(A, H)', 'false': 'workedunder(A, E)', 'true': 'movie(D, C)'}, {'false,false,false,false': [2.245, 7, 18], 'true,true': [0.0, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(A, D)', 'false,false': 'workedunder(A, F), workedunder(G, F)', 'false,false,false': 'workedunder(A, H)', 'false': 'workedunder(A, E)', 'true': 'movie(C, D)'}, {'false,false,false,false': [2.245, 7, 18], 'true,true': [5.27e-09, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [-1.0092936587501423e-17, 0.2015999999999996], 'false': [nan, 0.2015999999999996], 'false,false,false': [nan, 0.2015999999999996], 'false,false': [nan, 0.2015999999999996]}, {'': [0.22099738300738728, nan], 'true': [0.22099738300738728, nan]}, {'': [5.046468293750712e-18, 0.20159999999999986], 'false': [nan, 0.20159999999999986], 'false,false,false': [nan, 0.20159999999999986], 'false,false': [nan, 0.20159999999999986]}, {'': [0.18895488036883698, nan], 'true': [0.18895488036883698, nan]}, {'': [0.18473030108061328, nan], 'true': [0.18473030108061328, nan], 'true,true': [-1.0092936587501423e-17, 0.2016000000000001]}, {'': [0.1682145567185593, nan]}, {'': [1.0092936587501423e-17, 0.2015999999999999], 'false': [nan, 0.2015999999999999], 'false,false,false': [nan, 0.2015999999999999], 'false,false': [nan, 0.2015999999999999], 'true': [1.0092936587501423e-17, nan]}, {'': [0.15709021073581825, nan], 'true': [7.569702440626067e-18, 0.20160000000000008]}, {'': [-2.523234146875356e-18, 0.2016], 'false': [nan, 0.2016], 'false,false,false': [nan, 0.2016], 'false,false': [nan, 0.2016], 'true': [-2.523234146875356e-18, nan]}, {'': [2.523234146875356e-18, 0.20159999999999997], 'false': [nan, 0.20159999999999997], 'false,false,false': [nan, 0.20159999999999997], 'false,false': [nan, 0.20159999999999997], 'true': [2.523234146875356e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true', '2;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(A, D).;true;true', '6;;genre(A, B) :- workedunder(A, C), workedunder(D, C).;true;true', '7;;genre(A, B) :- movie(C, D), workedunder(A, D).;true;true', '8;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true', '9;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(A, C), workedunder(D, C) )
%   then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D), workedunder(A, D) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.455 seconds
Total inference time: 0.643 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 03:55:41
{'Mapping results': {'Finding best mapping': 7.152557373046875e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [433], 'Generating mappings time': 0.06733059883117676, 'Total time': 1.9299228191375732, 'Generating paths time': 1.844888687133789, 'Knowledge compiling time': 0.01769566535949707}, 'CLL': -0.264596, 'Learning time': 2.843, 'AUC PR': 0.935484, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Recall': 1.0, 'Precision': [0.935484, 0.5], 'parameter': {'CLL': -0.297236, 'Learning time': 1.388, 'AUC PR': 0.935484, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Recall': 1.0, 'Precision': [0.935484, 0.5], 'Inference time': 0.638}, 'Inference time': 0.643}


Start learning from scratch in target domain

Starting fold 4

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.017216920852661133
   Generating paths time   = 1.849909782409668
   Generating mappings time   = 0.06766295433044434
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 1.9347965717315674


Best mapping found: ['sameperson(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A), workedunder(A, F).;false;true
0;false;workedunder(A, L), workedunder(M, L).;false;true
0;false,false,false;workedunder(A, Q), workedunder(R, Q).;false;false
0;false,false;workedunder(A, N), movie(P, A).;false;true
1;;genre(A, B) :- movie(C, A).;true;true
1;false,false;workedunder(A, M).;true;true
1;false,false,false;movie(Q, A).;false;false
1;false;workedunder(A, H), movie(I, H).;true;true
1;false,false,true;workedunder(N, M), movie(P, N).;false;false
1;true;movie(C, F), workedunder(G, F).;false;false
1;false,true;workedunder(J, H), movie(I, J).;false;false
2;;genre(A, B) :- workedunder(A, E), movie(F, A).;false;true
2;false,false;workedunder(A, M), workedunder(N, M).;false;true
2;false,false,false;workedunder(A, P).;false;false
2;false,true,true;movie(J, K).;false;false
2;false;workedunder(A, I), movie(J, I).;true;true
2;false,true;workedunder(K, I), movie(L, A).;true;false
3;;genre(A, B) :- movie(C, A).;true;true
3;false,false;workedunder(A, K), workedunder(L, K).;true;true
3;false,false,false;workedunder(A, N), movie(P, N).;false;false
3;false,true,true;movie(H, J).;false;false
3;false,true;workedunder(J, I).;true;false
3;false,false,true;movie(M, L), movie(M, K).;false;false
3;false;movie(H, A), workedunder(A, I).;true;true
3;true;movie(C, F), workedunder(G, F).;false;false
4;;genre(A, B) :- movie(C, A).;true;true
4;false,false;workedunder(A, L).;true;true
4;false,false,false;workedunder(A, P), movie(Q, P).;false;false
4;true,true;workedunder(A, F).;false;false
4;false;movie(I, A), workedunder(A, J).;true;true
4;false,false,true;workedunder(M, L), movie(N, M).;false;false
4;false,true;workedunder(K, J).;false;false
4;true;movie(C, F), workedunder(G, F).;true;false
5;;genre(A, B) :- workedunder(E, F).;false;true
5;false;workedunder(A, N), movie(P, A).;false;true
5;false,false,false;workedunder(A, R).;false;false
5;false,false;workedunder(A, Q).;false;true
6;;genre(A, B) :- workedunder(A, C), workedunder(D, C).;true;true
6;false,false;workedunder(A, N).;true;true
6;false,false,false;workedunder(A, S), movie(T, A).;false;false
6;false,true,true;movie(K, I).;false;false
6;false,true;workedunder(J, I), movie(K, J).;true;false
6;false,false,true;movie(R, A), movie(R, N).;false;false
6;false;workedunder(A, I).;true;true
6;true;workedunder(A, E), movie(F, E).;false;false
7;;genre(A, B) :- movie(E, A).;true;true
7;false,false;workedunder(A, L).;true;true
7;false,false,false;workedunder(A, P).;false;false
7;false,true,true;workedunder(I, G).;false;false
7;false,true;movie(H, G).;true;false
7;false,false,true;workedunder(M, L), movie(N, M).;false;false
7;false;workedunder(A, G), movie(H, A).;true;true
7;true;movie(E, F), workedunder(A, F).;false;false
8;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true
8;false,false;workedunder(A, L), workedunder(M, L).;false;true
8;false,false,false;workedunder(A, Q).;false;false
8;false,true,false;workedunder(J, E), movie(K, J).;false;false
8;false;workedunder(A, E).;true;true
8;true;movie(D, C).;false;false
8;false,true;workedunder(F, E), movie(G, F).;false;true
9;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true
9;false,true,true;workedunder(K, G).;false;false
9;false,false;workedunder(A, N), workedunder(P, N).;false;true
9;false,false,false;workedunder(A, S).;false;false
9;false;workedunder(A, G).;true;true
9;true,false;movie(C, D).;false;false
9;false,true;workedunder(H, G).;true;false
9;true;movie(C, D).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( workedunder(A, E), workedunder(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, G), movie(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I), workedunder(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then return 0.30172034469051234;  // std dev = 1,295, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.16244727624482774;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( workedunder(A, E), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, G), workedunder(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.498492746475355;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then return 0.18729114333702548;  // std dev = 1,148, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then if ( workedunder(A, D) )
%   | | then return -0.16585589682022264;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.33851028557264023;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.10474473306284292;  // std dev = 1,048, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(A, C), workedunder(D, C) )
%   then if ( workedunder(A, E), movie(F, E) )
%   | then return -0.15757302014560617;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I), movie(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.22827118165083776;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(A, D) )
%   | then return -0.13776588890883956;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.17351202753319056;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return -0.12220244620436162;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.13387928610211502;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then if ( movie(C, D) )
%   | then return -0.10968727918968109;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.10479429292752847;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.326403
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 0.988 seconds
Total inference time: 0.664 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A), workedunder(A, D)', 'false': 'workedunder(A, E), workedunder(F, E)', 'false,false,false': 'workedunder(A, I), workedunder(J, I)', 'false,false': 'workedunder(A, G), movie(H, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.894, 1, 4], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 3, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)'}, {'false': [0.0, 0, 0], 'true,true': [1.295, 4, 4], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(A, C), movie(D, A)', 'false': 'workedunder(A, E), movie(F, E)', 'false,false,false': 'workedunder(A, I)', 'false,false': 'workedunder(A, G), workedunder(H, G)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.894, 1, 4], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 3, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)'}, {'false': [0.0, 0, 0], 'true,true': [1.148, 4, 4], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)', 'true,true': 'workedunder(A, D)'}, {'true,true,true': [0.0, 3, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.894, 1, 4], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [1.048, 4, 4]}], ['genre(A, B)', {'': 'workedunder(A, C), workedunder(D, C)', 'false,false': 'workedunder(A, H)', 'false,false,false': 'workedunder(A, I), movie(J, A)', 'false': 'workedunder(A, G)', 'true': 'workedunder(A, E), movie(F, E)'}, {'false,false,false,false': [0.894, 1, 4], 'true,true': [0.0, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(A, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 3, 0], 'true,false': [0.894, 1, 4]}], ['genre(A, B)', {'': 'workedunder(A, C), movie(D, A)', 'false,false': 'workedunder(A, F), workedunder(G, F)', 'false,false,false': 'workedunder(A, H)', 'false': 'workedunder(A, E)', 'true': 'movie(D, C)'}, {'false,false,false,false': [0.894, 1, 4], 'true,true': [2.63e-09, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(A, D)', 'false,false': 'workedunder(A, F), workedunder(G, F)', 'false,false,false': 'workedunder(A, H)', 'false': 'workedunder(A, E)', 'true': 'movie(C, D)'}, {'false,false,false,false': [0.894, 1, 4], 'true,true': [0.0, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [0.0, 0.15999999999999986], 'false': [nan, 0.15999999999999986], 'false,false,false': [nan, 0.15999999999999986], 'false,false': [nan, 0.15999999999999986]}, {'': [0.20948195373304385, nan], 'true': [0.20948195373304385, nan]}, {'': [0.0, 0.15999999999999992], 'false': [nan, 0.15999999999999992], 'false,false,false': [nan, 0.15999999999999992], 'false,false': [nan, 0.15999999999999992]}, {'': [0.16487698050829605, nan], 'true': [0.16487698050829605, nan]}, {'': [0.15962154201755097, nan], 'true': [0.15962154201755097, nan], 'true,true': [-4.625929269271485e-18, 0.16]}, {'': [0.13717276243905005, nan]}, {'': [-4.625929269271485e-18, 0.15999999999999998], 'false': [nan, 0.15999999999999998], 'false,false,false': [nan, 0.15999999999999998], 'false,false': [nan, 0.15999999999999998], 'true': [-4.625929269271485e-18, nan]}, {'': [0.12270951748386522, nan], 'true': [-2.3129646346357427e-18, 0.16]}, {'': [2.3129646346357427e-18, 0.15999999999999998], 'false': [nan, 0.15999999999999998], 'false,false,false': [nan, 0.15999999999999998], 'false,false': [nan, 0.15999999999999998], 'true': [2.3129646346357427e-18, nan]}, {'': [-2.3129646346357427e-18, 0.15999999999999998], 'false': [nan, 0.15999999999999998], 'false,false,false': [nan, 0.15999999999999998], 'false,false': [nan, 0.15999999999999998], 'true': [-2.3129646346357427e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true', '2;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(A, D).;true;true', '6;;genre(A, B) :- workedunder(A, C), workedunder(D, C).;true;true', '7;;genre(A, B) :- movie(C, D), workedunder(A, D).;true;true', '8;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true', '9;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(A, C), workedunder(D, C) )
%   then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D), workedunder(A, D) )
%   then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 0.975 seconds
Total inference time: 0.709 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 03:55:47
{'Mapping results': {'Finding best mapping': 7.152557373046875e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [433], 'Generating mappings time': 0.06766295433044434, 'Total time': 1.9347965717315674, 'Generating paths time': 1.849909782409668, 'Knowledge compiling time': 0.017216920852661133}, 'CLL': -0.300536, 'Learning time': 1.963, 'AUC PR': 0.843137, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Recall': 1.0, 'Precision': [0.843137, 0.5], 'parameter': {'CLL': -0.326403, 'Learning time': 0.988, 'AUC PR': 0.843137, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Recall': 1.0, 'Precision': [0.843137, 0.5], 'Inference time': 0.664}, 'Inference time': 0.709}


Start learning from scratch in target domain

Starting fold 5

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.01757979393005371
   Generating paths time   = 1.8456189632415771
   Generating mappings time   = 0.06743812561035156
   Possible mappings   = [433]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 1.9306433200836182


Best mapping found: ['sameperson(A,B) -> workedunder(A,B)', 'advisedby(A,B) -> workedunder(A,B)', 'projectmember(A,B) -> workedunder(A,B)', 'tempadvisedby(A,B) -> workedunder(A,B)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A), workedunder(A, F).;false;true
0;false;workedunder(A, L), workedunder(M, L).;false;true
0;false,false,false;workedunder(A, Q), workedunder(R, Q).;false;false
0;false,false;workedunder(A, N), movie(P, A).;false;true
1;;genre(A, B) :- movie(C, A).;true;true
1;false,false;workedunder(A, M).;true;true
1;false,false,false;movie(Q, A).;false;false
1;false;workedunder(A, H), movie(I, H).;true;true
1;false,false,true;workedunder(N, M), movie(P, N).;false;false
1;true;movie(C, F), workedunder(G, F).;false;false
1;false,true;workedunder(J, H), movie(I, J).;false;false
2;;genre(A, B) :- workedunder(A, E), movie(F, A).;false;true
2;false,false;workedunder(A, M), workedunder(N, M).;false;true
2;false,false,false;workedunder(A, P).;false;false
2;false,true,true;movie(J, K).;false;false
2;false;workedunder(A, I), movie(J, I).;true;true
2;false,true;workedunder(K, I), movie(L, A).;true;false
3;;genre(A, B) :- movie(C, A).;true;true
3;false,false;workedunder(A, K), workedunder(L, K).;true;true
3;false,false,false;workedunder(A, N), movie(P, N).;false;false
3;false,true,true;movie(H, J).;false;false
3;false,true;workedunder(J, I).;true;false
3;false,false,true;movie(M, L), movie(M, K).;false;false
3;false;movie(H, A), workedunder(A, I).;true;true
3;true;movie(C, F), workedunder(G, F).;false;false
4;;genre(A, B) :- movie(C, A).;true;true
4;false,false;workedunder(A, L).;true;true
4;false,false,false;workedunder(A, P), movie(Q, P).;false;false
4;true,true;workedunder(A, F).;false;false
4;false;movie(I, A), workedunder(A, J).;true;true
4;false,false,true;workedunder(M, L), movie(N, M).;false;false
4;false,true;workedunder(K, J).;false;false
4;true;movie(C, F), workedunder(G, F).;true;false
5;;genre(A, B) :- workedunder(E, F).;false;true
5;false;workedunder(A, N), movie(P, A).;false;true
5;false,false,false;workedunder(A, R).;false;false
5;false,false;workedunder(A, Q).;false;true
6;;genre(A, B) :- workedunder(A, C), workedunder(D, C).;true;true
6;false,false;workedunder(A, N).;true;true
6;false,false,false;workedunder(A, S), movie(T, A).;false;false
6;false,true,true;movie(K, I).;false;false
6;false,true;workedunder(J, I), movie(K, J).;true;false
6;false,false,true;movie(R, A), movie(R, N).;false;false
6;false;workedunder(A, I).;true;true
6;true;workedunder(A, E), movie(F, E).;false;false
7;;genre(A, B) :- movie(E, A).;true;true
7;false,false;workedunder(A, L).;true;true
7;false,false,false;workedunder(A, P).;false;false
7;false,true,true;workedunder(I, G).;false;false
7;false,true;movie(H, G).;true;false
7;false,false,true;workedunder(M, L), movie(N, M).;false;false
7;false;workedunder(A, G), movie(H, A).;true;true
7;true;movie(E, F), workedunder(A, F).;false;false
8;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true
8;false,false;workedunder(A, L), workedunder(M, L).;false;true
8;false,false,false;workedunder(A, Q).;false;false
8;false,true,false;workedunder(J, E), movie(K, J).;false;false
8;false;workedunder(A, E).;true;true
8;true;movie(D, C).;false;false
8;false,true;workedunder(F, E), movie(G, F).;false;true
9;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true
9;false,true,true;workedunder(K, G).;false;false
9;false,false;workedunder(A, N), workedunder(P, N).;false;true
9;false,false,false;workedunder(A, S).;false;false
9;false;workedunder(A, G).;true;true
9;true,false;movie(C, D).;false;false
9;false,true;workedunder(H, G).;true;false
9;true;movie(C, D).;false;true


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( workedunder(A, E), workedunder(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, G), movie(H, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I), workedunder(J, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then return 0.29701438684128156;  // std dev = 0,845, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.16180800894656575;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( workedunder(A, E), movie(F, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, G), workedunder(H, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6558459784192016;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then return 0.17810178394162224;  // std dev = 0,638, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(E, D) )
%   | then if ( workedunder(A, D) )
%   | | then return -0.1640300666814059;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.45286262642827846;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, D) )
%   then return 0.10102147813847273;  // std dev = 0,488, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(A, C), workedunder(D, C) )
%   then if ( workedunder(A, E), movie(F, E) )
%   | then return -0.1555719128353786;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, I), movie(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.3223495259487468;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(A, D) )
%   | then return -0.13621099618043714;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0.25628939830717334;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then if ( movie(D, C) )
%   | then return -0.12096383743884438;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.21054654811312246;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then if ( movie(C, D) )
%   | then return -0.10867975660794146;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(A, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(A, F), workedunder(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.17767485303052177;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.312266
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 0.848 seconds
Total inference time: 0.629 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A), workedunder(A, D)', 'false': 'workedunder(A, E), workedunder(F, E)', 'false,false,false': 'workedunder(A, I), workedunder(J, I)', 'false,false': 'workedunder(A, G), movie(H, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 2], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 2, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.845, 2, 2], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(A, C), movie(D, A)', 'false': 'workedunder(A, E), movie(F, E)', 'false,false,false': 'workedunder(A, I)', 'false,false': 'workedunder(A, G), workedunder(H, G)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 2], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 2, 0], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.638, 2, 2], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(E, D)', 'true,true': 'workedunder(A, D)'}, {'true,true,true': [0.0, 2, 0], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 2], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, D)'}, {'false': [0.0, 0, 0], 'true': [0.488, 2, 2]}], ['genre(A, B)', {'': 'workedunder(A, C), workedunder(D, C)', 'false,false': 'workedunder(A, H)', 'false,false,false': 'workedunder(A, I), movie(J, A)', 'false': 'workedunder(A, G)', 'true': 'workedunder(A, E), movie(F, E)'}, {'false,false,false,false': [0.0, 0, 2], 'true,true': [0.0, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(A, D)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 2]}], ['genre(A, B)', {'': 'workedunder(A, C), movie(D, A)', 'false,false': 'workedunder(A, F), workedunder(G, F)', 'false,false,false': 'workedunder(A, H)', 'false': 'workedunder(A, E)', 'true': 'movie(D, C)'}, {'false,false,false,false': [0.0, 0, 2], 'true,true': [0.0, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(A, D)', 'false,false': 'workedunder(A, F), workedunder(G, F)', 'false,false,false': 'workedunder(A, H)', 'false': 'workedunder(A, E)', 'true': 'movie(C, D)'}, {'false,false,false,false': [0.0, 0, 2], 'true,true': [0.0, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.17847162811629394, nan], 'true': [0.17847162811629394, nan]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.1018541174660169, nan], 'true': [0.1018541174660169, nan]}, {'': [0.09513914870302978, nan], 'true': [0.09513914870302978, nan], 'true,true': [0.0, 0.0]}, {'': [0.059428219185559406, nan]}, {'': [0.0, 0.0], 'false,false': [nan, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true': [0.0, nan]}, {'': [0.03851413991823246, nan], 'true': [0.0, 0.0]}, {'': [0.0, 0.0], 'false,false': [nan, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'false,false': [nan, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true', '2;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(A, D).;true;true', '6;;genre(A, B) :- workedunder(A, C), workedunder(D, C).;true;true', '7;;genre(A, B) :- movie(C, D), workedunder(A, D).;true;true', '8;;genre(A, B) :- workedunder(A, C), movie(D, A).;true;true', '9;;genre(A, B) :- movie(C, A), workedunder(A, D).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   return 0;  // std dev = 0,422, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   return 0;  // std dev = 0,334, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(A, C) )
%   then return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   return 0;  // std dev = 0,260, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(A, C), workedunder(D, C) )
%   then return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, D), workedunder(A, D) )
%   then return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(A, C), movie(D, A) )
%   then return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(A, D) )
%   then return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.300991
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 0.575 seconds
Total inference time: 0.524 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 03:55:52
{'Mapping results': {'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [433], 'Generating mappings time': 0.06743812561035156, 'Total time': 1.9306433200836182, 'Generating paths time': 1.8456189632415771, 'Knowledge compiling time': 0.01757979393005371}, 'CLL': -0.300991, 'Learning time': 1.423, 'AUC PR': 0.833333, 'F1': 0.909091, 'AUC ROC': 0.9, 'Recall': 1.0, 'Precision': [0.833333, 0.5], 'parameter': {'CLL': -0.312266, 'Learning time': 0.848, 'AUC PR': 0.833333, 'F1': 0.909091, 'AUC ROC': 0.9, 'Recall': 1.0, 'Precision': [0.833333, 0.5], 'Inference time': 0.629}, 'Inference time': 0.524}


Start learning from scratch in target domain

