Starting experiment #1 for 6_uwcse_imdb

Start learning from source dataset

Source train facts examples: 2247
Source train pos examples: 140
Source train neg examples: 140

WILL Produced-Tree #1
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F), publication(E, F) )
%   | then return 0.2719420385477882;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else if ( tempadvisedby(A, G), publication(E, G) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3581489350995123;  // std dev = 0,500, 18,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   else if ( advisedby(A, H), publication(I, H) )
%   | then if ( advisedby(J, H), publication(I, J) )
%   | | then if ( ta(K, J, L), ta(M, A, N) )
%   | | | then return 0.4735335504841277;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.36389606153629317;  // std dev = 4,663, 87,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=44 */
%   | | else return 0.5052077586289241;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, P), projectmember(Q, P) )
%   | | then return 0.24276431971489695;  // std dev = 0,487, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( tempadvisedby(A, R) )
%   | | | then return 0.37285481745245225;  // std dev = 4,121, 68,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=35 */
%   | | | else return 0.32689893509951234;  // std dev = 2,823, 32,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
WILL Produced-Tree #2
% FOR inphase(A, B):
%   if ( ta(C, A, D), publication(E, A) )
%   then if ( advisedby(A, F) )
%   | then return 0.2431522573300012;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(C, G, D), advisedby(G, H) )
%   | | then return 0.47540780245230163;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.24779728811959792;  // std dev = 0,493, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   else if ( advisedby(A, I), publication(J, I) )
%   | then if ( advisedby(K, I), publication(J, K) )
%   | | then if ( ta(L, K, M) )
%   | | | then return 0.352385192549306;  // std dev = 3,550, 51,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=28 */
%   | | | else return 0.2976465171991765;  // std dev = 3,499, 49,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=24 */
%   | | else return 0.43201604470553195;  // std dev = 0,478, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, N), projectmember(P, N) )
%   | | then return 0.2105717177991725;  // std dev = 0,487, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( advisedby(A, Q) )
%   | | | then return 0.4135282750962646;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.2970737521556617;  // std dev = 4,740, 90,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=44 */
WILL Produced-Tree #3
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( publication(E, A), advisedby(A, F) )
%   | then return 0.20416130465148977;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(C, G, D), advisedby(G, H) )
%   | | then return 0.2937165092129096;  // std dev = 0,494, 45,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   | | else if ( ta(C, I, J), advisedby(I, K) )
%   | | | then return 0.19117730108278366;  // std dev = 3,013, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | | else return 0.2660878293266564;  // std dev = 1,861, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( publication(L, A), advisedby(A, M) )
%   | then if ( tempadvisedby(N, M) )
%   | | then return 0.2560342001907423;  // std dev = 0,500, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | | else return 0.3968600790529526;  // std dev = 0,476, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( advisedby(A, P), projectmember(Q, P) )
%   | | then return 0.1845493580263703;  // std dev = 0,479, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( advisedby(A, R), tempadvisedby(S, R) )
%   | | | then return 0.2940889200085706;  // std dev = 2,339, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | | else return 0.2574108207956853;  // std dev = 3,833, 59,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=30 */
WILL Produced-Tree #4
% FOR inphase(A, B):
%   if ( ta(C, A, D) )
%   then if ( advisedby(A, E), publication(F, A) )
%   | then return 0.16705563921046157;  // std dev = 0,494, 40,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=17 */
%   | else if ( ta(C, G, D), advisedby(G, H) )
%   | | then return 0.2332825088822435;  // std dev = 0,494, 45,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   | | else if ( ta(C, I, J), advisedby(I, K) )
%   | | | then return 0.15448238129604663;  // std dev = 3,013, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | | else return 0.2151796082595101;  // std dev = 1,860, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( publication(L, A), tempadvisedby(A, M) )
%   | then return 0.13387044233928533;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( tempadvisedby(A, N) )
%   | | then if ( tempadvisedby(P, N), publication(Q, P) )
%   | | | then return 0.1497434582123012;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.33029901376785653;  // std dev = 1,936, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( advisedby(A, R) )
%   | | | then return 0.22473751236083742;  // std dev = 4,952, 100,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=53 */
%   | | | else return 0.1314267892175541;  // std dev = 1,708, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #5
% FOR inphase(A, B):
%   if ( ta(C, A, D), advisedby(A, E) )
%   then if ( advisedby(F, E), publication(G, F) )
%   | then if ( ta(H, F, I), publication(G, E) )
%   | | then if ( samecourse(C, H) )
%   | | | then return 0.1275475071783145;  // std dev = 2,652, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | | | else return 0.2589364961038559;  // std dev = 1,812, 14,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | else return 0.07876599338687089;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.26547065823550536;  // std dev = 1,142, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( publication(J, A), tempadvisedby(A, K) )
%   | then return 0.1048087989781984;  // std dev = 0,493, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | else if ( publication(L, A) )
%   | | then if ( advisedby(A, M), tempadvisedby(N, M) )
%   | | | then return 0.15720722081439206;  // std dev = 3,000, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | | | else return 0.24628232311941925;  // std dev = 2,457, 26,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | else if ( tempadvisedby(A, P) )
%   | | | then return 0.18928143435974154;  // std dev = 3,872, 61,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=32 */
%   | | | else return 0.13614660412636378;  // std dev = 3,983, 65,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=31 */
WILL Produced-Tree #6
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then return 0.1667328483055574;  // std dev = 0,483, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   else if ( ta(E, A, F), advisedby(A, G) )
%   | then if ( publication(H, G), tempadvisedby(I, G) )
%   | | then if ( ta(J, I, F), publication(H, A) )
%   | | | then return 0.18700218286149564;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.1020038318787115;  // std dev = 3,441, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   | | else if ( publication(K, A) )
%   | | | then return 0.014933280547652108;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.09371689552738231;  // std dev = 1,854, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( advisedby(A, L) )
%   | | then if ( tempadvisedby(M, L), publication(N, A) )
%   | | | then return 0.1148851364189708;  // std dev = 2,826, 32,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.15913544597059015;  // std dev = 3,616, 54,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | else if ( tempadvisedby(A, P) )
%   | | | then return 0.13544268630719156;  // std dev = 4,235, 73,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.0862461086284238;  // std dev = 2,555, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #7
% FOR inphase(A, B):
%   if ( advisedby(A, C), projectmember(D, C) )
%   then return 0.12910375669614788;  // std dev = 0,483, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   else if ( advisedby(A, E), ta(F, A, G) )
%   | then if ( publication(H, E), tempadvisedby(I, E) )
%   | | then if ( ta(F, I, J) )
%   | | | then return 0.04323403785630401;  // std dev = 1,556, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.09513167815833305;  // std dev = 3,305, 45,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=22 */
%   | | else if ( publication(K, A) )
%   | | | then return 0.011683905764523796;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.0710582896964304;  // std dev = 1,853, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( tempadvisedby(A, L), publication(M, A) )
%   | | then if ( publication(M, L) )
%   | | | then return 0.009287262001604388;  // std dev = 1,367, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.1348164222053717;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tempadvisedby(A, N), projectmember(P, N) )
%   | | | then return 0.1750937037576185;  // std dev = 1,086, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10139634794623488;  // std dev = 6,437, 169,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=88 */
WILL Produced-Tree #8
% FOR inphase(A, B):
%   if ( publication(C, A), advisedby(A, D) )
%   then if ( publication(C, D) )
%   | then return 0.06489731105206435;  // std dev = 0,495, 71,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=34 */
%   | else return 0.13869255819106718;  // std dev = 0,478, 22,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   else if ( tempadvisedby(A, E) )
%   | then if ( tempadvisedby(F, E), publication(G, F) )
%   | | then if ( ta(H, F, I) )
%   | | | then return 7.876350405999026E-5;  // std dev = 1,897, 15,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.05219724916196002;  // std dev = 1,646, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( advisedby(J, E), publication(K, J) )
%   | | | then return 0.14096089895799876;  // std dev = 2,717, 31,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=18 */
%   | | | else return 0.05393513413364466;  // std dev = 1,991, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | else if ( advisedby(A, L), publication(M, L) )
%   | | then if ( publication(M, N), projectmember(P, N) )
%   | | | then return 0.23618418101369526;  // std dev = 0,854, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.06228605257370525;  // std dev = 4,054, 67,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=35 */
%   | | else return 0.03522490574313149;  // std dev = 0,490, 43,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=19 */
WILL Produced-Tree #9
% FOR inphase(A, B):
%   if ( publication(C, A) )
%   then if ( advisedby(A, D), projectmember(E, D) )
%   | then return 0.17007167420249197;  // std dev = 1,099, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.05749983583028706;  // std dev = 0,491, 109,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=53 */
%   else if ( tempadvisedby(A, F) )
%   | then if ( tempadvisedby(G, F), publication(H, G) )
%   | | then if ( publication(H, F) )
%   | | | then return 0.026254768721924397;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return -0.07805900086799948;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( advisedby(I, F), publication(J, I) )
%   | | | then return 0.1061125965611436;  // std dev = 2,717, 31,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=18 */
%   | | | else return 0.04060567062920821;  // std dev = 1,991, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | else if ( advisedby(A, K), publication(L, K) )
%   | | then if ( advisedby(M, K), publication(N, M) )
%   | | | then return 0.04416388608706422;  // std dev = 3,906, 62,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=32 */
%   | | | else return 0.12371147513500816;  // std dev = 1,386, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return 0.006947469247794981;  // std dev = 0,488, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #10
% FOR inphase(A, B):
%   if ( publication(C, A) )
%   then if ( publication(C, D), advisedby(E, D) )
%   | then if ( ta(F, E, G), publication(H, E) )
%   | | then return 0.05599034168537681;  // std dev = 0,491, 80,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=39 */
%   | | else if ( tempadvisedby(I, D) )
%   | | | then return 0.0019004104904717036;  // std dev = 1,797, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return -0.12805835004140667;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.09536455561313642;  // std dev = 0,475, 16,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   else if ( tempadvisedby(A, J) )
%   | then if ( tempadvisedby(K, J), ta(L, K, M) )
%   | | then if ( publication(N, K) )
%   | | | then return -0.01773849276071394;  // std dev = 1,547, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.05145985152655931;  // std dev = 2,885, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | else return 0.08393727906781545;  // std dev = 0,487, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | else if ( advisedby(A, P), publication(Q, P) )
%   | | then return 0.040828232530988155;  // std dev = 0,492, 71,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=38 */
%   | | else return 0.005280769468264088;  // std dev = 0,488, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */


Predicates from source: ['inphase(person,prequals).', 'ta(course,person,quarter).', 'publication(title,person).', 'advisedby(person,person).', 'projectmember(project,person).', 'tempadvisedby(person,person).', 'samecourse(course,course).']

Starting fold 1

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.017008543014526367
   Generating paths time   = 1.8587651252746582
   Generating mappings time   = 0.07888507843017578
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 1.9546663761138916


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 204
Target train pos examples: 11
Target train neg examples: 11

Target test facts examples: 827
Target test pos examples: 36
Target test neg examples: 36

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true;workedunder(F, A), movie(E, F).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;false,false;workedunder(N, A), workedunder(N, P).;false;true
1;false,false,false;workedunder(Q, A).;false;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;true,false;workedunder(H, G).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
2;false,false;workedunder(P, A), workedunder(P, Q).;false;true
2;false;movie(L, A), workedunder(M, A).;true;true
2;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
2;false,true;workedunder(M, N).;false;false
3;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
3;false;movie(L, A), workedunder(M, A).;false;true
3;false,false,false;workedunder(R, A).;false;false
3;false,false,true;workedunder(N, P), movie(Q, P).;false;false
3;false,false;workedunder(N, A).;true;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true,true,true;workedunder(C, H).;false;false
4;false,false;movie(L, A).;true;true
4;false,false,false;workedunder(P, A).;false;false
4;true,true;movie(G, E).;true;false
4;false;movie(J, A), workedunder(K, A).;false;true
4;false,false,true;workedunder(M, A), workedunder(M, N).;false;false
4;true;workedunder(E, F), movie(G, F).;true;false
5;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(P, A).;false;false
5;false,true,false;movie(K, A).;false;false
5;false,true,true;movie(H, A).;false;false
5;false,false,true;workedunder(L, M), movie(N, A).;false;false
5;false;workedunder(G, A).;true;true
5;false,true;movie(H, G), workedunder(G, I).;true;true
6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
6;false,false;workedunder(L, A), movie(M, A).;true;true
6;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
6;false,true,false;movie(K, A).;false;false
6;false;workedunder(E, A).;true;true
6;false,false,true;movie(M, L).;false;false
6;false,true;movie(H, E), workedunder(E, I).;false;true
7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
7;false,false;workedunder(L, A), movie(M, L).;true;false
7;false,true,false;workedunder(E, J), movie(K, J).;false;false
7;false;workedunder(E, A).;true;true
7;false,false,true;movie(M, N), workedunder(N, P).;false;false
7;true;movie(C, D).;false;false
7;false,true;workedunder(E, F), movie(G, F).;false;true
8;;genre(A, B) :- movie(C, A).;true;true
8;false,false;workedunder(K, A), movie(L, K).;true;false
8;false,true,false;workedunder(F, I), movie(J, I).;false;false
8;false,true,true;movie(H, F).;false;false
8;false,true;workedunder(F, G), movie(H, G).;true;true
8;false,false,true;workedunder(K, M), movie(N, M).;false;false
8;false;workedunder(F, A).;true;true
8;true;workedunder(D, A), workedunder(D, E).;false;false
9;;genre(A, B) :- movie(C, A).;true;true
9;false,true,true;movie(N, K).;false;false
9;false,false;workedunder(P, A), movie(Q, P).;false;false
9;true,true,false;workedunder(D, I).;false;false
9;true,true;movie(H, E).;false;true
9;false;workedunder(J, A).;true;true
9;true;movie(C, D), workedunder(D, E).;true;false
9;false,true;workedunder(J, K).;true;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(J, A) )
%   | | then if ( workedunder(K, A), workedunder(K, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), workedunder(H, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( movie(F, E) )
%   | | then return 0.03490759496299247;  // std dev = 0,465, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.350389
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.23 seconds
Total inference time: 0.615 seconds
AUC ROC: 0.875


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 11, 0], 'true,true': [0.0, 0, 11]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true': [4.21e-08, 0, 11]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false,false': 'workedunder(I, A), workedunder(I, J)', 'false,false': 'workedunder(G, A), workedunder(G, H)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 0, 11], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false,false': 'workedunder(H, A)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true': [4.21e-08, 0, 11], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'movie(J, A)', 'true,true': 'movie(E, C)', 'false': 'movie(H, A), workedunder(I, A)', 'false,false,true': 'workedunder(K, A), workedunder(K, L)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [0.0, 0, 11], 'true,true,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(G, A)', 'false,false': 'workedunder(F, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true': [2.11e-08, 0, 11], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(H, A), workedunder(H, I)', 'false,false': 'workedunder(F, A), movie(G, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 0, 11], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false,false': 'workedunder(F, A), movie(G, F)', 'false': 'workedunder(E, A)', 'true': 'movie(C, D)'}, {'true,true': [7.45e-09, 0, 11], 'false,false,false': [2.63e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [7.45e-09, 0, 11], 'true,false': [2.63e-09, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'movie(F, E)'}, {'true,true,true': [0.465, 11, 11], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999958, nan], 'true': [-1.6148698540002277e-16, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.17847162811629388, nan], 'true': [1.6148698540002277e-16, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [-2.0185873175002846e-16, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [1.6148698540002277e-16, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [-6.055761952500853e-17, 0.0], 'true,true,true': [-6.055761952500853e-17, nan], 'false,false': [0.0, nan], 'true,true': [-6.055761952500853e-17, nan], 'false': [nan, 0.0], 'false,false,true': [nan, 0.0], 'true': [-6.055761952500853e-17, nan]}, {'': [4.0371746350005693e-17, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18]}, {'': [-2.5232341468753557e-17, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [5.046468293750712e-18, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19], 'false': [nan, 6.30808536718839e-19], 'true': [5.046468293750712e-18, nan]}, {'': [0.012229134667364477, nan], 'true': [5.046468293750712e-18, 6.30808536718839e-19]}, {'': [0.009820698026241881, nan], 'true': [0.009820698026241881, nan], 'true,true': [0.009820698026241881, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '3;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.13400703000801117;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.352709
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total learning time: 1.049 seconds
Total inference time: 0.591 seconds
AUC ROC: 0.875


Refined model AUC ROC: 0.875


Dataset: 6_uwcse_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:05:55
{'Mapping results': {'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.07888507843017578, 'Total time': 1.9546663761138916, 'Generating paths time': 1.8587651252746582, 'Knowledge compiling time': 0.017008543014526367}, 'CLL': -0.352709, 'Learning time': 2.279, 'AUC PR': 0.8, 'F1': 0.888889, 'AUC ROC': 0.875, 'Recall': 1.0, 'Precision': [0.8, 0.5], 'parameter': {'CLL': -0.350389, 'Learning time': 1.23, 'AUC PR': 0.8, 'F1': 0.888889, 'AUC ROC': 0.875, 'Recall': 1.0, 'Precision': [0.8, 0.5], 'Inference time': 0.615}, 'Inference time': 0.591}


Start learning from scratch in target domain

Starting fold 2

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.01934647560119629
   Generating paths time   = 1.9320955276489258
   Generating mappings time   = 0.056365251541137695
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 2.007814407348633


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 196
Target train pos examples: 12
Target train neg examples: 12

Target test facts examples: 835
Target test pos examples: 35
Target test neg examples: 35

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true;workedunder(F, A), movie(E, F).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;false,false;workedunder(N, A), workedunder(N, P).;false;true
1;false,false,false;workedunder(Q, A).;false;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;true,false;workedunder(H, G).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
2;false,false;workedunder(P, A), workedunder(P, Q).;false;true
2;false;movie(L, A), workedunder(M, A).;true;true
2;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
2;false,true;workedunder(M, N).;false;false
3;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
3;false;movie(L, A), workedunder(M, A).;false;true
3;false,false,false;workedunder(R, A).;false;false
3;false,false,true;workedunder(N, P), movie(Q, P).;false;false
3;false,false;workedunder(N, A).;true;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true,true,true;workedunder(C, H).;false;false
4;false,false;movie(L, A).;true;true
4;false,false,false;workedunder(P, A).;false;false
4;true,true;movie(G, E).;true;false
4;false;movie(J, A), workedunder(K, A).;false;true
4;false,false,true;workedunder(M, A), workedunder(M, N).;false;false
4;true;workedunder(E, F), movie(G, F).;true;false
5;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(P, A).;false;false
5;false,true,false;movie(K, A).;false;false
5;false,true,true;movie(H, A).;false;false
5;false,false,true;workedunder(L, M), movie(N, A).;false;false
5;false;workedunder(G, A).;true;true
5;false,true;movie(H, G), workedunder(G, I).;true;true
6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
6;false,false;workedunder(L, A), movie(M, A).;true;true
6;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
6;false,true,false;movie(K, A).;false;false
6;false;workedunder(E, A).;true;true
6;false,false,true;movie(M, L).;false;false
6;false,true;movie(H, E), workedunder(E, I).;false;true
7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
7;false,false;workedunder(L, A), movie(M, L).;true;false
7;false,true,false;workedunder(E, J), movie(K, J).;false;false
7;false;workedunder(E, A).;true;true
7;false,false,true;movie(M, N), workedunder(N, P).;false;false
7;true;movie(C, D).;false;false
7;false,true;workedunder(E, F), movie(G, F).;false;true
8;;genre(A, B) :- movie(C, A).;true;true
8;false,false;workedunder(K, A), movie(L, K).;true;false
8;false,true,false;workedunder(F, I), movie(J, I).;false;false
8;false,true,true;movie(H, F).;false;false
8;false,true;workedunder(F, G), movie(H, G).;true;true
8;false,false,true;workedunder(K, M), movie(N, M).;false;false
8;false;workedunder(F, A).;true;true
8;true;workedunder(D, A), workedunder(D, E).;false;false
9;;genre(A, B) :- movie(C, A).;true;true
9;false,true,true;movie(N, K).;false;false
9;false,false;workedunder(P, A), movie(Q, P).;false;false
9;true,true,false;workedunder(D, I).;false;false
9;true,true;movie(H, E).;false;true
9;false;workedunder(J, A).;true;true
9;true;movie(C, D), workedunder(D, E).;true;false
9;false,true;workedunder(J, K).;true;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.7812258581764353;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.657810671461647;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5123505661168763;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.3853022650638632;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.2920349799096258;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(J, A) )
%   | | then if ( workedunder(K, A), workedunder(K, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.22699179224124724;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.1812058810760637;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), workedunder(H, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.14804913120500338;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then return 0.12328872166165511;  // std dev = 0,961, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( movie(F, E) )
%   | | then return 0.027060352950578168;  // std dev = 1,045, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.321558
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.134 seconds
Total inference time: 0.631 seconds
AUC ROC: 0.885714


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 11, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true': [0.961, 1, 12]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false,false': 'workedunder(I, A), workedunder(I, J)', 'false,false': 'workedunder(G, A), workedunder(G, H)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.961, 1, 12], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false,false': 'workedunder(H, A)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.961, 1, 12], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'movie(J, A)', 'true,true': 'movie(E, C)', 'false': 'movie(H, A), workedunder(I, A)', 'false,false,true': 'workedunder(K, A), workedunder(K, L)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [0.961, 1, 12], 'true,true,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(G, A)', 'false,false': 'workedunder(F, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.961, 1, 12], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(H, A), workedunder(H, I)', 'false,false': 'workedunder(F, A), movie(G, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.961, 1, 12], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false,false': 'workedunder(F, A), movie(G, F)', 'false': 'workedunder(E, A)', 'true': 'movie(C, D)'}, {'true,true': [0.961, 1, 12], 'false,false,false': [2.63e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [0.961, 1, 12], 'true,false': [2.63e-09, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'movie(F, E)'}, {'true,true,true': [1.045, 12, 12], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999956, nan], 'true': [0.07100591715976314, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.19076867375623552, nan], 'true': [0.07100591715976333, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.07100591715976351, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.0710059171597632, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.07100591715976336, 0.0], 'true,true,true': [0.07100591715976336, nan], 'false,false': [0.0, nan], 'true,true': [0.07100591715976336, nan], 'false': [nan, 0.0], 'false,false,true': [nan, 0.0], 'true': [0.07100591715976336, nan]}, {'': [0.07100591715976326, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18]}, {'': [0.07100591715976336, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.07100591715976333, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19], 'false': [nan, 6.30808536718839e-19], 'true': [0.07100591715976333, nan]}, {'': [0.047586455214132045, nan], 'true': [0.07100591715976333, 6.30808536718839e-19]}, {'': [0.04550743000506589, nan], 'true': [0.04550743000506589, nan], 'true,true': [0.04550743000506589, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '3;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.10427374705508957;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.885714
   AUC PR    = 0.813953
   CLL	      = -0.320018
   Precision = 0.813953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.897436


Total learning time: 1.658 seconds
Total inference time: 0.611 seconds
AUC ROC: 0.885714


Refined model AUC ROC: 0.885714


Dataset: 6_uwcse_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:06:01
{'Mapping results': {'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.056365251541137695, 'Total time': 2.007814407348633, 'Generating paths time': 1.9320955276489258, 'Knowledge compiling time': 0.01934647560119629}, 'CLL': -0.320018, 'Learning time': 2.792, 'AUC PR': 0.813953, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Recall': 1.0, 'Precision': [0.813953, 0.5], 'parameter': {'CLL': -0.321558, 'Learning time': 1.134, 'AUC PR': 0.813953, 'F1': 0.897436, 'AUC ROC': 0.885714, 'Recall': 1.0, 'Precision': [0.813953, 0.5], 'Inference time': 0.631}, 'Inference time': 0.611}


Start learning from scratch in target domain

Starting fold 3

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.018442630767822266
   Generating paths time   = 1.8966782093048096
   Generating mappings time   = 0.056555747985839844
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 1.9716839790344238


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 323
Target train pos examples: 18
Target train neg examples: 18

Target test facts examples: 708
Target test pos examples: 29
Target test neg examples: 29

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true;workedunder(F, A), movie(E, F).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;false,false;workedunder(N, A), workedunder(N, P).;false;true
1;false,false,false;workedunder(Q, A).;false;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;true,false;workedunder(H, G).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
2;false,false;workedunder(P, A), workedunder(P, Q).;false;true
2;false;movie(L, A), workedunder(M, A).;true;true
2;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
2;false,true;workedunder(M, N).;false;false
3;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
3;false;movie(L, A), workedunder(M, A).;false;true
3;false,false,false;workedunder(R, A).;false;false
3;false,false,true;workedunder(N, P), movie(Q, P).;false;false
3;false,false;workedunder(N, A).;true;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true,true,true;workedunder(C, H).;false;false
4;false,false;movie(L, A).;true;true
4;false,false,false;workedunder(P, A).;false;false
4;true,true;movie(G, E).;true;false
4;false;movie(J, A), workedunder(K, A).;false;true
4;false,false,true;workedunder(M, A), workedunder(M, N).;false;false
4;true;workedunder(E, F), movie(G, F).;true;false
5;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(P, A).;false;false
5;false,true,false;movie(K, A).;false;false
5;false,true,true;movie(H, A).;false;false
5;false,false,true;workedunder(L, M), movie(N, A).;false;false
5;false;workedunder(G, A).;true;true
5;false,true;movie(H, G), workedunder(G, I).;true;true
6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
6;false,false;workedunder(L, A), movie(M, A).;true;true
6;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
6;false,true,false;movie(K, A).;false;false
6;false;workedunder(E, A).;true;true
6;false,false,true;movie(M, L).;false;false
6;false,true;movie(H, E), workedunder(E, I).;false;true
7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
7;false,false;workedunder(L, A), movie(M, L).;true;false
7;false,true,false;workedunder(E, J), movie(K, J).;false;false
7;false;workedunder(E, A).;true;true
7;false,false,true;movie(M, N), workedunder(N, P).;false;false
7;true;movie(C, D).;false;false
7;false,true;workedunder(E, F), movie(G, F).;false;true
8;;genre(A, B) :- movie(C, A).;true;true
8;false,false;workedunder(K, A), movie(L, K).;true;false
8;false,true,false;workedunder(F, I), movie(J, I).;false;false
8;false,true,true;movie(H, F).;false;false
8;false,true;workedunder(F, G), movie(H, G).;true;true
8;false,false,true;workedunder(K, M), movie(N, M).;false;false
8;false;workedunder(F, A).;true;true
8;true;workedunder(D, A), workedunder(D, E).;false;false
9;;genre(A, B) :- movie(C, A).;true;true
9;false,true,true;movie(N, K).;false;false
9;false,false;workedunder(P, A), movie(Q, P).;false;false
9;true,true,false;workedunder(D, I).;false;false
9;true,true;movie(H, E).;false;true
9;false;workedunder(J, A).;true;true
9;true;movie(C, D), workedunder(D, E).;true;false
9;false,true;workedunder(J, K).;true;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.5781489350995124;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.49238913840392534;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.39468718495146987;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.3029206894518932;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.2279628397230807;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(J, A) )
%   | | then if ( workedunder(K, A), workedunder(K, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.1711293278244227;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.129208558439337;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), workedunder(H, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.09837607626228805;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then return 0.07552905818195493;  // std dev = 2,245, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( movie(F, E) )
%   | | then return 0.020953930461774295;  // std dev = 2,270, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.272397
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.534 seconds
Total inference time: 0.606 seconds
AUC ROC: 0.965517


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 11, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [5.27e-09, 11, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true': [2.245, 7, 18]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false,false': 'workedunder(I, A), workedunder(I, J)', 'false,false': 'workedunder(G, A), workedunder(G, H)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [7.45e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true': [2.245, 7, 18], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false,false': 'workedunder(H, A)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true': [2.245, 7, 18], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'movie(J, A)', 'true,true': 'movie(E, C)', 'false': 'movie(H, A), workedunder(I, A)', 'false,false,true': 'workedunder(K, A), workedunder(K, L)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [2.245, 7, 18], 'true,true,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 11, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(G, A)', 'false,false': 'workedunder(F, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.27e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'true': [2.245, 7, 18], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(H, A), workedunder(H, I)', 'false,false': 'workedunder(F, A), movie(G, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 11, 0], 'false,false,true': [0.0, 0, 0], 'true': [2.245, 7, 18], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false,false': 'workedunder(F, A), movie(G, F)', 'false': 'workedunder(E, A)', 'true': 'movie(C, D)'}, {'true,true': [2.245, 7, 18], 'false,false,false': [2.63e-09, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [2.245, 7, 18], 'true,false': [2.63e-09, 11, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'movie(F, E)'}, {'true,true,true': [2.27, 18, 18], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2499999999999995, nan], 'true': [0.2015999999999996, -1.0092936587501423e-17], 'true,false': [nan, -1.0092936587501423e-17]}, {'': [0.22099738300738728, nan], 'true': [0.2016000000000001, 2.523234146875356e-18], 'true,false': [2.523234146875356e-18, nan]}, {'': [0.20160000000000053, 5.046468293750712e-18], 'false': [nan, 5.046468293750712e-18], 'false,false,false': [nan, 5.046468293750712e-18], 'false,false': [nan, 5.046468293750712e-18]}, {'': [0.2016000000000004, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.2016000000000001, 0.0], 'true,true,true': [0.2016000000000001, nan], 'false,false': [0.0, nan], 'true,true': [0.2016000000000001, nan], 'false': [nan, 0.0], 'false,false,true': [nan, 0.0], 'true': [0.2016000000000001, nan]}, {'': [0.2016, 2.523234146875356e-18], 'false': [nan, 2.523234146875356e-18], 'false,false,false': [nan, 2.523234146875356e-18], 'false,false': [nan, 2.523234146875356e-18]}, {'': [0.20160000000000003, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.2016, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19], 'false': [nan, 6.30808536718839e-19], 'true': [0.2016, nan]}, {'': [0.14439731372283962, nan], 'true': [0.2015999999999999, 6.30808536718839e-19]}, {'': [0.1431899129862588, nan], 'true': [0.1431899129862588, nan], 'true,true': [0.1431899129862588, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '3;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.5781489350995124;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.49238913840392534;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.39468718495146987;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.3029206894518932;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.2279628397230807;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.1711293278244227;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.129208558439337;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.09837607626228805;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.07552905818195493;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0.05841806950104655;  // std dev = 0,449, 25,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */


Results
   AUC ROC   = 0.965517
   AUC PR    = 0.935484
   CLL	      = -0.264596
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 2.148 seconds
Total inference time: 0.708 seconds
AUC ROC: 0.965517


Refined model AUC ROC: 0.965517


Dataset: 6_uwcse_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:06:09
{'Mapping results': {'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.056555747985839844, 'Total time': 1.9716839790344238, 'Generating paths time': 1.8966782093048096, 'Knowledge compiling time': 0.018442630767822266}, 'CLL': -0.264596, 'Learning time': 3.6820000000000004, 'AUC PR': 0.935484, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Recall': 1.0, 'Precision': [0.935484, 0.5], 'parameter': {'CLL': -0.272397, 'Learning time': 1.534, 'AUC PR': 0.935484, 'F1': 0.966667, 'AUC ROC': 0.965517, 'Recall': 1.0, 'Precision': [0.935484, 0.5], 'Inference time': 0.606}, 'Inference time': 0.708}


Start learning from scratch in target domain

Starting fold 4

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.01756906509399414
   Generating paths time   = 1.8780367374420166
   Generating mappings time   = 0.056391239166259766
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 1.9520044326782227


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 147
Target train pos examples: 4
Target train neg examples: 4

Target test facts examples: 884
Target test pos examples: 43
Target test neg examples: 43

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true;workedunder(F, A), movie(E, F).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;false,false;workedunder(N, A), workedunder(N, P).;false;true
1;false,false,false;workedunder(Q, A).;false;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;true,false;workedunder(H, G).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
2;false,false;workedunder(P, A), workedunder(P, Q).;false;true
2;false;movie(L, A), workedunder(M, A).;true;true
2;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
2;false,true;workedunder(M, N).;false;false
3;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
3;false;movie(L, A), workedunder(M, A).;false;true
3;false,false,false;workedunder(R, A).;false;false
3;false,false,true;workedunder(N, P), movie(Q, P).;false;false
3;false,false;workedunder(N, A).;true;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true,true,true;workedunder(C, H).;false;false
4;false,false;movie(L, A).;true;true
4;false,false,false;workedunder(P, A).;false;false
4;true,true;movie(G, E).;true;false
4;false;movie(J, A), workedunder(K, A).;false;true
4;false,false,true;workedunder(M, A), workedunder(M, N).;false;false
4;true;workedunder(E, F), movie(G, F).;true;false
5;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(P, A).;false;false
5;false,true,false;movie(K, A).;false;false
5;false,true,true;movie(H, A).;false;false
5;false,false,true;workedunder(L, M), movie(N, A).;false;false
5;false;workedunder(G, A).;true;true
5;false,true;movie(H, G), workedunder(G, I).;true;true
6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
6;false,false;workedunder(L, A), movie(M, A).;true;true
6;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
6;false,true,false;movie(K, A).;false;false
6;false;workedunder(E, A).;true;true
6;false,false,true;movie(M, L).;false;false
6;false,true;movie(H, E), workedunder(E, I).;false;true
7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
7;false,false;workedunder(L, A), movie(M, L).;true;false
7;false,true,false;workedunder(E, J), movie(K, J).;false;false
7;false;workedunder(E, A).;true;true
7;false,false,true;movie(M, N), workedunder(N, P).;false;false
7;true;movie(C, D).;false;false
7;false,true;workedunder(E, F), movie(G, F).;false;true
8;;genre(A, B) :- movie(C, A).;true;true
8;false,false;workedunder(K, A), movie(L, K).;true;false
8;false,true,false;workedunder(F, I), movie(J, I).;false;false
8;false,true,true;movie(H, F).;false;false
8;false,true;workedunder(F, G), movie(H, G).;true;true
8;false,false,true;workedunder(K, M), movie(N, M).;false;false
8;false;workedunder(F, A).;true;true
8;true;workedunder(D, A), workedunder(D, E).;false;false
9;;genre(A, B) :- movie(C, A).;true;true
9;false,true,true;movie(N, K).;false;false
9;false,false;workedunder(P, A), movie(Q, P).;false;false
9;true,true,false;workedunder(D, I).;false;false
9;true,true;movie(H, E).;false;true
9;false;workedunder(J, A).;true;true
9;true;movie(C, D), workedunder(D, E).;true;false
9;false,true;workedunder(J, K).;true;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(J, A) )
%   | | then if ( workedunder(K, A), workedunder(K, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), workedunder(H, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( movie(F, E) )
%   | | then return 0.02077062381399298;  // std dev = 0,914, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.305911
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 0.945 seconds
Total inference time: 0.641 seconds
AUC ROC: 0.906977


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 3, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.0, 3, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true': [0.894, 1, 4]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false,false': 'workedunder(I, A), workedunder(I, J)', 'false,false': 'workedunder(G, A), workedunder(G, H)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.63e-09, 3, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.894, 1, 4], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false,false': 'workedunder(H, A)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.894, 1, 4], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'movie(J, A)', 'true,true': 'movie(E, C)', 'false': 'movie(H, A), workedunder(I, A)', 'false,false,true': 'workedunder(K, A), workedunder(K, L)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [0.894, 1, 4], 'true,true,false': [0.0, 0, 0], 'false,false,true,false': [2.63e-09, 3, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(G, A)', 'false,false': 'workedunder(F, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.894, 1, 4], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(H, A), workedunder(H, I)', 'false,false': 'workedunder(F, A), movie(G, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.894, 1, 4], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false,false': 'workedunder(F, A), movie(G, F)', 'false': 'workedunder(E, A)', 'true': 'movie(C, D)'}, {'true,true': [0.894, 1, 4], 'false,false,false': [1.86e-09, 3, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [0.894, 1, 4], 'true,false': [0.0, 3, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'movie(F, E)'}, {'true,true,true': [0.914, 4, 4], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [0.24999999999999986, nan], 'true': [0.15999999999999986, 0.0], 'true,false': [nan, 0.0]}, {'': [0.20948195373304385, nan], 'true': [0.16, 0.0], 'true,false': [0.0, nan]}, {'': [0.15999999999999998, 2.3129646346357427e-18], 'false': [nan, 2.3129646346357427e-18], 'false,false,false': [nan, 2.3129646346357427e-18], 'false,false': [nan, 2.3129646346357427e-18]}, {'': [0.15999999999999998, -1.1564823173178713e-18], 'false': [nan, -1.1564823173178713e-18], 'false,false,false': [nan, -1.1564823173178713e-18], 'false,false': [nan, -1.1564823173178713e-18]}, {'': [0.16, 2.3129646346357427e-18], 'true,true,true': [0.16, nan], 'false,false': [2.3129646346357427e-18, nan], 'true,true': [0.16, nan], 'false': [nan, 2.3129646346357427e-18], 'false,false,true': [nan, 2.3129646346357427e-18], 'true': [0.16, nan]}, {'': [0.16, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.16, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.16, 1.1564823173178713e-18], 'false,false': [nan, 1.1564823173178713e-18], 'false': [nan, 1.1564823173178713e-18], 'true': [0.16, nan]}, {'': [0.10587514683359293, nan], 'true': [0.16, -5.782411586589357e-19]}, {'': [0.10433117216276941, nan], 'true': [0.10433117216276941, nan], 'true,true': [0.10433117216276941, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '3;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( actor(A) )
%   then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.906977
   AUC PR    = 0.843137
   CLL	      = -0.300536
   Precision = 0.843137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.914894


Total learning time: 0.825 seconds
Total inference time: 0.548 seconds
AUC ROC: 0.906977


Refined model AUC ROC: 0.906977


Dataset: 6_uwcse_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:06:14
{'Mapping results': {'Finding best mapping': 7.152557373046875e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.056391239166259766, 'Total time': 1.9520044326782227, 'Generating paths time': 1.8780367374420166, 'Knowledge compiling time': 0.01756906509399414}, 'CLL': -0.300536, 'Learning time': 1.77, 'AUC PR': 0.843137, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Recall': 1.0, 'Precision': [0.843137, 0.5], 'parameter': {'CLL': -0.305911, 'Learning time': 0.945, 'AUC PR': 0.843137, 'F1': 0.914894, 'AUC ROC': 0.906977, 'Recall': 1.0, 'Precision': [0.843137, 0.5], 'Inference time': 0.641}, 'Inference time': 0.548}


Start learning from scratch in target domain

Starting fold 5

Target predicate: genre
Mapping Results
   Knowledge compiling time   = 0.017310142517089844
   Generating paths time   = 1.904069423675537
   Generating mappings time   = 0.05790114402770996
   Possible mappings   = [435]
   Max mapping   = 4096
   Numbers predicates mapping   = [7]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 1.979288101196289


Best mapping found: ['tempadvisedby(A,B) -> workedunder(B,A)', 'advisedby(A,B) -> workedunder(B,A)', 'projectmember(A,B) -> workedunder(B,A)', 'inphase(A,B) -> genre(A,B)', 'publication(A,B) -> movie(A,B)', 'samecourse(A,B) -> workedunder(A,B)'] 

Transferred target predicate: genre 

Target train facts examples: 161
Target train pos examples: 2
Target train neg examples: 2

Target test facts examples: 870
Target test pos examples: 45
Target test neg examples: 45

******************************************
Performing Parameter Learning
******************************************
Refine
0;;genre(A, B) :- movie(E, A).;true;true
0;false,false;workedunder(P, A), workedunder(P, Q).;false;true
0;false,false,false;workedunder(R, A).;false;false
0;false;workedunder(H, A), movie(I, H).;true;true
0;true,false;workedunder(G, A), movie(E, G).;false;false
0;false,true;workedunder(H, J), movie(I, J).;false;false
0;true;workedunder(F, A), movie(E, F).;false;true
1;;genre(A, B) :- movie(E, A).;true;true
1;false,false;workedunder(N, A), workedunder(N, P).;false;true
1;false,false,false;workedunder(Q, A).;false;false
1;false;workedunder(I, A), movie(J, I).;true;true
1;true,false;workedunder(H, G).;false;false
1;false,true;workedunder(I, K), movie(J, K).;false;false
1;true;workedunder(F, A).;false;true
2;;genre(A, B) :- movie(E, A), workedunder(F, A).;false;true
2;false,false;workedunder(P, A), workedunder(P, Q).;false;true
2;false;movie(L, A), workedunder(M, A).;true;true
2;false,false,false;workedunder(R, A), workedunder(R, S).;false;false
2;false,true;workedunder(M, N).;false;false
3;;genre(A, B) :- workedunder(E, A), movie(F, A).;false;true
3;false;movie(L, A), workedunder(M, A).;false;true
3;false,false,false;workedunder(R, A).;false;false
3;false,false,true;workedunder(N, P), movie(Q, P).;false;false
3;false,false;workedunder(N, A).;true;true
4;;genre(A, B) :- workedunder(E, A).;true;true
4;true,true,true;workedunder(C, H).;false;false
4;false,false;movie(L, A).;true;true
4;false,false,false;workedunder(P, A).;false;false
4;true,true;movie(G, E).;true;false
4;false;movie(J, A), workedunder(K, A).;false;true
4;false,false,true;workedunder(M, A), workedunder(M, N).;false;false
4;true;workedunder(E, F), movie(G, F).;true;false
5;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
5;false,false;workedunder(L, A).;true;true
5;false,false,false;workedunder(P, A).;false;false
5;false,true,false;movie(K, A).;false;false
5;false,true,true;movie(H, A).;false;false
5;false,false,true;workedunder(L, M), movie(N, A).;false;false
5;false;workedunder(G, A).;true;true
5;false,true;movie(H, G), workedunder(G, I).;true;true
6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;false;true
6;false,false;workedunder(L, A), movie(M, A).;true;true
6;false,false,false;workedunder(N, A), workedunder(N, P).;false;false
6;false,true,false;movie(K, A).;false;false
6;false;workedunder(E, A).;true;true
6;false,false,true;movie(M, L).;false;false
6;false,true;movie(H, E), workedunder(E, I).;false;true
7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true
7;false,false;workedunder(L, A), movie(M, L).;true;false
7;false,true,false;workedunder(E, J), movie(K, J).;false;false
7;false;workedunder(E, A).;true;true
7;false,false,true;movie(M, N), workedunder(N, P).;false;false
7;true;movie(C, D).;false;false
7;false,true;workedunder(E, F), movie(G, F).;false;true
8;;genre(A, B) :- movie(C, A).;true;true
8;false,false;workedunder(K, A), movie(L, K).;true;false
8;false,true,false;workedunder(F, I), movie(J, I).;false;false
8;false,true,true;movie(H, F).;false;false
8;false,true;workedunder(F, G), movie(H, G).;true;true
8;false,false,true;workedunder(K, M), movie(N, M).;false;false
8;false;workedunder(F, A).;true;true
8;true;workedunder(D, A), workedunder(D, E).;false;false
9;;genre(A, B) :- movie(C, A).;true;true
9;false,true,true;movie(N, K).;false;false
9;false,false;workedunder(P, A), movie(Q, P).;false;false
9;true,true,false;workedunder(D, I).;false;false
9;true,true;movie(H, E).;false;true
9;false;workedunder(J, A).;true;true
9;true;movie(C, D), workedunder(D, E).;true;false
9;false,true;workedunder(J, K).;true;false


WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), movie(C, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, A), movie(C, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( workedunder(E, F) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A), workedunder(G, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(I, A), workedunder(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( movie(E, A), workedunder(F, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then if ( workedunder(C, D), movie(E, D) )
%   | then if ( movie(E, C) )
%   | | then if ( workedunder(F, G) )
%   | | | then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(H, A), workedunder(I, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(J, A) )
%   | | then if ( workedunder(K, A), workedunder(K, L) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( workedunder(H, A), workedunder(H, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then if ( movie(C, D) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( workedunder(E, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( workedunder(F, A), movie(G, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( workedunder(D, A), workedunder(D, E) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR genre(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, D), workedunder(D, E) )
%   | then if ( movie(F, E) )
%   | | then return 0.03490759496299248;  // std dev = 0,198, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.301101
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 0.824 seconds
Total inference time: 0.519 seconds
AUC ROC: 0.9


Structure after Parameter Learning
[['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), movie(C, D)', 'true,false': 'workedunder(E, A), movie(C, E)'}, {'true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 2, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A)', 'true,false': 'workedunder(E, F)'}, {'true,false,true': [0.0, 2, 0], 'false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false,false': 'workedunder(I, A), workedunder(I, J)', 'false,false': 'workedunder(G, A), workedunder(G, H)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 0, 2], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), movie(D, A)', 'false': 'movie(E, A), workedunder(F, A)', 'false,false,false': 'workedunder(H, A)', 'false,false': 'workedunder(G, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 0, 2], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A)', 'true,true,true': 'workedunder(F, G)', 'false,false': 'movie(J, A)', 'true,true': 'movie(E, C)', 'false': 'movie(H, A), workedunder(I, A)', 'false,false,true': 'workedunder(K, A), workedunder(K, L)', 'true': 'workedunder(C, D), movie(E, D)'}, {'true,true,true,true': [0.0, 0, 2], 'true,true,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(G, A)', 'false,false': 'workedunder(F, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 0, 2], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'workedunder(C, A), workedunder(C, D)', 'false': 'workedunder(E, A)', 'false,false,false': 'workedunder(H, A), workedunder(H, I)', 'false,false': 'workedunder(F, A), movie(G, A)'}, {'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'true': [0.0, 0, 2], 'false,true': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A), workedunder(D, A)', 'false,false': 'workedunder(F, A), movie(G, F)', 'false': 'workedunder(E, A)', 'true': 'movie(C, D)'}, {'true,true': [0.0, 0, 2], 'false,false,false': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'workedunder(D, A), workedunder(D, E)'}, {'false': [0.0, 0, 0], 'true,true': [0.0, 0, 2], 'true,false': [0.0, 2, 0]}], ['genre(A, B)', {'': 'movie(C, A)', 'true': 'movie(C, D), workedunder(D, E)', 'true,true': 'movie(F, E)'}, {'true,true,true': [0.198, 2, 2], 'false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}]]
[{'': [0.25, nan], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}, {'': [0.17847162811629394, nan], 'true': [0.0, 0.0], 'true,false': [0.0, nan]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'true,true,true': [0.0, nan], 'false,false': [0.0, nan], 'true,true': [0.0, nan], 'false': [nan, 0.0], 'false,false,true': [nan, 0.0], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'false': [nan, 0.0], 'false,false,false': [nan, 0.0], 'false,false': [nan, 0.0]}, {'': [0.0, 0.0], 'false,false': [nan, 0.0], 'false': [nan, 0.0], 'true': [0.0, nan]}, {'': [0.01222913466736446, nan], 'true': [0.0, 0.0]}, {'': [0.00982069802624188, nan], 'true': [0.00982069802624188, nan], 'true,true': [0.00982069802624188, nan]}]


******************************************
Performing Theory Revision
******************************************
Candidate for revision
['0;;genre(A, B) :- workedunder(D, A), movie(C, D).;true;true', '1;;genre(A, B) :- workedunder(D, A).;true;true', '2;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '3;;genre(A, B) :- workedunder(C, A), movie(D, A).;true;true', '4;;genre(A, B) :- workedunder(C, A).;true;true', '5;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '6;;genre(A, B) :- workedunder(C, A), workedunder(C, D).;true;true', '7;;genre(A, B) :- movie(C, A), workedunder(D, A).;true;true', '8;;genre(A, B) :- workedunder(D, A), workedunder(D, E).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, C) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR genre(A, B):
%   if ( workedunder(C, A), movie(D, A) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR genre(A, B):
%   if ( workedunder(C, A) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR genre(A, B):
%   if ( movie(C, A), workedunder(D, A) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR genre(A, B):
%   if ( workedunder(C, A), workedunder(C, D) )
%   then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR genre(A, B):
%   return 0;  // std dev = 0,099, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.299463
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total learning time: 0.572 seconds
Total inference time: 0.781 seconds
AUC ROC: 0.9


Refined model AUC ROC: 0.9


Dataset: 6_uwcse_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:06:19
{'Mapping results': {'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 4096, 'Numbers preds mapping': [7], 'Possible mappings': [435], 'Generating mappings time': 0.05790114402770996, 'Total time': 1.979288101196289, 'Generating paths time': 1.904069423675537, 'Knowledge compiling time': 0.017310142517089844}, 'CLL': -0.299463, 'Learning time': 1.396, 'AUC PR': 0.833333, 'F1': 0.909091, 'AUC ROC': 0.9, 'Recall': 1.0, 'Precision': [0.833333, 0.5], 'parameter': {'CLL': -0.301101, 'Learning time': 0.824, 'AUC PR': 0.833333, 'F1': 0.909091, 'AUC ROC': 0.9, 'Recall': 1.0, 'Precision': [0.833333, 0.5], 'Inference time': 0.519}, 'Inference time': 0.781}


Start learning from scratch in target domain

