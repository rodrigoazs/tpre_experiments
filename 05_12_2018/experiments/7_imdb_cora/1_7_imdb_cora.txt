Starting experiment #1 for 7_imdb_cora

Start learning from source dataset

Source train facts examples: 696
Source train pos examples: 382
Source train neg examples: 382

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 5,77e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.14185106490048804;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.12544463852839202;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.11231637819360675;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783623;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.10159632948783649;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.09269127618926053;  // std dev = 1,13e-07, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.08518475138839678;  // std dev = 9,19e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109176;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07877675473109143;  // std dev = 2,98e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07324622576333703;  // std dev = 8,56e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06842697784420307;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06419184008202618;  // std dev = 4,71e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */


Predicates from source: ['workedunder(person,person).', 'actor(person).', 'director(person).', 'movie(movie,person).']

Starting fold 1

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.08337163925170898
   Generating paths time   = 1.816645860671997
   Generating mappings time   = 0.0014982223510742188
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 1.9015226364135742


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

Target train facts examples: 7095
Target train pos examples: 368
Target train neg examples: 368

Target test facts examples: 32446
Target test pos examples: 2649
Target test neg examples: 2372

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39877393509950776;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.08731560176617863;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.34300337446082674;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.07635080560123796;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2829757526611641;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.06620209782707072;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2252798172623557;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.05696901974896947;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.17475296268559667;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.04869607932732711;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13334329939108758;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.0413815147045419;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10079964128532884;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.03498823961218326;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07583443148005016;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.029454875605481722;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05692841477064725;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.024705527060021732;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042702080777636764;  // std dev = 12,607, 640,000 (wgt'ed) examples reached here.  /* #neg=294 #pos=346 */
%   else return 0.020657656117816402;  // std dev = 4,118, 96,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */


Results
   AUC ROC   = 0.546475
   AUC PR    = 0.552575
   CLL	      = -0.684943
   Precision = 0.553319 at threshold = 0.5
   Recall    = 0.94413
   F1        = 0.697726


Total learning time: 167.707 seconds
Total inference time: 2.408 seconds
AUC ROC: 0.546475


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.118, 74, 22], 'true': [12.607, 294, 346]}]]
[{'': [0.2483496093749918, 0.17664930555555647]}, {'': [0.24834960937500003, 0.17664930555555483]}, {'': [0.24834960937499692, 0.17664930555555602]}, {'': [0.24834960937499745, 0.17664930555555527]}, {'': [0.24834960937500034, 0.1766493055555556]}, {'': [0.2483496093749967, 0.17664930555555505]}, {'': [0.24834960937499817, 0.17664930555555614]}, {'': [0.24834960937500314, 0.176649305555556]}, {'': [0.24834960937499853, 0.17664930555555555]}, {'': [0.24834960937500156, 0.17664930555555547]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7024603123450174;  // std dev = 6,626, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.015414283291292909;  // std dev = 5,369, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.524815601766179;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.06968739663797391;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else return 0.10814893509951236;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5942136425412414;  // std dev = 6,627, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.013904354802370374;  // std dev = 5,355, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.4646455502738005;  // std dev = 0,395, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.5585419988249184;  // std dev = 0,795, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.448295606241962;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( title(N, M), venue(N, A) )
%   | | then return 0.07394219720148484;  // std dev = 0,417, 49,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | else return -0.15054759871688242;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.0944674378357556;  // std dev = 0,433, 44,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.46768301019503045;  // std dev = 6,627, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.012235682998794096;  // std dev = 5,355, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.3726967994569488;  // std dev = 0,380, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.46029189793691755;  // std dev = 0,772, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36236334632262296;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.05290169416458231;  // std dev = 0,408, 52,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return -0.0016809401244716193;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.09481028794570397;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3533621097410997;  // std dev = 6,627, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.010781066007370312;  // std dev = 5,355, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.2885510231515225;  // std dev = 0,370, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.36105789666799165;  // std dev = 0,758, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2807538536965852;  // std dev = 0,471, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.0014457284444529817;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | | then return -0.15506206409685358;  // std dev = 0,038, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.0769470717443601;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.08111586171947816;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.14463892092491;  // std dev = 0,375, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.22704955361363058;  // std dev = 0,352, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.21248070121827137;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.29471137466238473;  // std dev = 0,938, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2124807012182711;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.001243639429858362;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordvenue(B, P) )
%   | | | then return -0.13584134497233616;  // std dev = 0,034, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.0659412629687449;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.06872469594312823;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.11740806764923589;  // std dev = 0,372, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.16466600581000013;  // std dev = 0,365, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.1594898822817116;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2362140216559318;  // std dev = 0,768, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.15948988228171185;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.0010699543163498932;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordvenue(B, P) )
%   | | | then return -0.12068830117610065;  // std dev = 0,031, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.05606587037345368;  // std dev = 2,883, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else return 0.05773394015532547;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.09470240725273993;  // std dev = 0,369, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.13303276722417942;  // std dev = 0,352, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.11975529938157474;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.19723409143093698;  // std dev = 0,960, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.11975529938157481;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.10846955215750412;  // std dev = 0,028, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.04734373988801981;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return -9.206406698204032E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.048149987800384667;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.1816021755735684;  // std dev = 6,625, 334,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=282 */
%   | | | else return -0.057287190204512645;  // std dev = 5,345, 261,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=33 */
%   | | else return 0.09435570761005414;  // std dev = 0,368, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then return 0.15490280052415045;  // std dev = 0,779, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.09028081829440963;  // std dev = 0,471, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.004700511556190279;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return -7.92248938739859E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.0238933301610495;  // std dev = 2,761, 47,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
%   | | | else return 0.03991180075732592;  // std dev = 2,714, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.05814969768130699;  // std dev = 0,361, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.08007563483700318;  // std dev = 0,356, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.06840311429118533;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.13260020464781877;  // std dev = 0,976, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.06840311429118515;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -6.818255196689623E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then if ( title(P, N), venue(P, A) )
%   | | | then return 0.02447101054805514;  // std dev = 2,896, 49,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=11 */
%   | | | else return -0.08914443333560117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.0329144419205752;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.04764426008377603;  // std dev = 0,361, 595,000 (wgt'ed) examples reached here.  /* #neg=280 #pos=315 */
%   | | else return 0.062343956154489;  // std dev = 0,357, 17,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.10528163015439695;  // std dev = 0,976, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.052078905701252655;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.052078905701252745;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return -0.09894791808214719;  // std dev = 0,038, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.032285440614689014;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return -5.868394712637837E-4;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.027029246451147803;  // std dev = 0,440, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */


Results
   AUC ROC   = 0.860336
   AUC PR    = 0.824542
   CLL	      = -0.439439
   Precision = 0.836168 at threshold = 0.5
   Recall    = 0.9094
   F1        = 0.871248


Total learning time: 324.275 seconds
Total inference time: 108.709 seconds
AUC ROC: 0.860336


Refined model AUC ROC: 0.860336


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:16:31
{'Mapping results': {'Finding best mapping': 7.152557373046875e-07, 'Max mapping': 121, 'Numbers preds mapping': [4], 'Possible mappings': [6], 'Generating mappings time': 0.0014982223510742188, 'Total time': 1.9015226364135742, 'Generating paths time': 1.816645860671997, 'Knowledge compiling time': 0.08337163925170898}, 'CLL': -0.439439, 'Learning time': 491.98199999999997, 'AUC PR': 0.824542, 'F1': 0.871248, 'AUC ROC': 0.860336, 'Recall': 0.9094, 'Precision': [0.836168, 0.5], 'parameter': {'CLL': -0.684943, 'Learning time': 167.707, 'AUC PR': 0.552575, 'F1': 0.697726, 'AUC ROC': 0.546475, 'Recall': 0.94413, 'Precision': [0.553319, 0.5], 'Inference time': 2.408}, 'Inference time': 108.709}


Start learning from scratch in target domain

Starting fold 2

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.1725461483001709
   Generating paths time   = 1.8993253707885742
   Generating mappings time   = 0.001802682876586914
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 2.0736844539642334


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

Target train facts examples: 8245
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 31296
Target test pos examples: 2246
Target test neg examples: 2196

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4414164962676211;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.5248156017661779;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3787969446767008;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.4482956062419621;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3103334241075902;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.362363346322623;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.24464825732418644;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.28075385369658573;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1879000024300933;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.21248070121827115;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14221832519355396;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.15948988228171201;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10692152875355714;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.11975529938157527;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08020885463571227;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.09028081829440925;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060173047356757485;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.06840311429118519;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04518722595669958;  // std dev = 17,549, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else return 0.05207890570125296;  // std dev = 3,266, 48,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */


Results
   AUC ROC   = 0.437142
   AUC PR    = 0.443375
   CLL	      = -0.710286
   Precision = 0.505628 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671651


Total learning time: 43.04 seconds
Total inference time: 2.042 seconds
AUC ROC: 0.437142


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [3.266, 16, 32], 'true': [17.549, 528, 739]}]]
[{'': [0.24306651325713594, 0.22222222222222385]}, {'': [0.24306651325713258, 0.2222222222222228]}, {'': [0.24306651325712605, 0.22222222222222254]}, {'': [0.24306651325712475, 0.2222222222222224]}, {'': [0.2430665132571118, 0.22222222222222243]}, {'': [0.2430665132571173, 0.2222222222222221]}, {'': [0.243066513257112, 0.22222222222222207]}, {'': [0.2430665132571141, 0.2222222222222223]}, {'': [0.2430665132571123, 0.22222222222222213]}, {'': [0.2430665132571154, 0.22222222222222218]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.7081489350995123;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.7002541982574071;  // std dev = 1,589, 19,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.4376191337750041;  // std dev = 0,494, 1.208,000 (wgt'ed) examples reached here.  /* #neg=508 #pos=700 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.6001383562404599;  // std dev = 0,357, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.17780077116908896;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.16192241470236868;  // std dev = 1,398, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else return 0.37710642675844525;  // std dev = 0,493, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5189017583596216;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.2824376308635427;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.038306022451227634;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.3085047733469113;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3960247457796654;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.23056499721007007;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.03184294023981726;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.24331986303346764;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.33238863295283755;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1828555557722805;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.024454895151708567;  // std dev = 1,224, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.18676385188715255;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1422040150842405;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.21665453420555297;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10870367874679364;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.03584959541943602;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.10622731241617235;  // std dev = 0,492, 1.235,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=718 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08372807955323866;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08046896973881414;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06457405393631672;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060480208231896;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04949778322519479;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045500695931231454;  // std dev = 0,490, 1.267,000 (wgt'ed) examples reached here.  /* #neg=528 #pos=739 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03777940363354101;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.545898
   AUC PR    = 0.515703
   CLL	      = -0.707483
   Precision = 0.53694 at threshold = 0.5
   Recall    = 0.954586
   F1        = 0.68729


Total learning time: 146.173 seconds
Total inference time: 6.391 seconds
AUC ROC: 0.545898


Refined model AUC ROC: 0.545898


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:19:52
{'Mapping results': {'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 121, 'Numbers preds mapping': [4], 'Possible mappings': [6], 'Generating mappings time': 0.001802682876586914, 'Total time': 2.0736844539642334, 'Generating paths time': 1.8993253707885742, 'Knowledge compiling time': 0.1725461483001709}, 'CLL': -0.707483, 'Learning time': 189.213, 'AUC PR': 0.515703, 'F1': 0.68729, 'AUC ROC': 0.545898, 'Recall': 0.954586, 'Precision': [0.53694, 0.5], 'parameter': {'CLL': -0.710286, 'Learning time': 43.04, 'AUC PR': 0.443375, 'F1': 0.671651, 'AUC ROC': 0.437142, 'Recall': 1.0, 'Precision': [0.505628, 0.5], 'Inference time': 2.042}, 'Inference time': 6.391}


Start learning from scratch in target domain

Starting fold 3

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.14842534065246582
   Generating paths time   = 1.815748691558838
   Generating mappings time   = 0.0014925003051757812
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 1.9656736850738525


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

Target train facts examples: 8725
Target train pos examples: 581
Target train neg examples: 581

Target test facts examples: 30816
Target test pos examples: 2436
Target test neg examples: 2159

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39141703686075996;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.11529179224236799;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3368104452725042;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.1006698265126728;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2782019553062949;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.08691854825778976;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2218655867177258;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.074287373672246;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1724245980376236;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.06292492981534978;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13178285263632983;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.05288752556858072;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09974654995840213;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.044156924602564436;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07510777615464852;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.036661434327724535;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.056412350427134834;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.030295939098124496;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04232482322953948;  // std dev = 15,949, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else return 0.02493848785740836;  // std dev = 5,171, 140,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=36 */


Results
   AUC ROC   = 0.547299
   AUC PR    = 0.555563
   CLL	      = -0.684914
   Precision = 0.556307 at threshold = 0.5
   Recall    = 0.944992
   F1        = 0.700335


Total learning time: 23.239 seconds
Total inference time: 2.041 seconds
AUC ROC: 0.547299


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [5.171, 104, 36], 'true': [15.949, 477, 545]}]]
[{'': [0.24889323340519648, 0.19102040816326663]}, {'': [0.24889323340519198, 0.1910204081632664]}, {'': [0.2488932334051973, 0.19102040816326585]}, {'': [0.2488932334051982, 0.1910204081632639]}, {'': [0.248893233405201, 0.19102040816326604]}, {'': [0.24889323340520084, 0.1910204081632663]}, {'': [0.24889323340520145, 0.19102040816326452]}, {'': [0.2488932334051957, 0.1910204081632664]}, {'': [0.24889323340520308, 0.19102040816326624]}, {'': [0.24889323340520328, 0.19102040816326568]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39141703686075996;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.039967116917694;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.12044401706672549;  // std dev = 3,436, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.058148935099512175;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.1340110040650296;  // std dev = 0,447, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.40354234351124585;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.2228971822209235;  // std dev = 0,493, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | else return 0.34005349969786425;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.04248464503493671;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.09340115831662328;  // std dev = 3,238, 56,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | | | else return 0.05092203251355425;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.10321377852455527;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.12675460295257243;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.22730675224602884;  // std dev = 0,499, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | else return 0.2798795401250795;  // std dev = 0,499, 989,000 (wgt'ed) examples reached here.  /* #neg=460 #pos=529 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then return 0.03676440303201761;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.08066648659001248;  // std dev = 3,238, 56,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | | | else return 0.0443462976046685;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.10666054374019221;  // std dev = 0,449, 64,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2218504913689444;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.008148736612374934;  // std dev = 0,385, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.08247944071626748;  // std dev = 3,435, 61,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return 0.038428662236904595;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.08395220375992413;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1724170070080112;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.006976255807354687;  // std dev = 0,385, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.019772654264792824;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06411845510851152;  // std dev = 3,452, 63,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | | else return 0.07961847845904753;  // std dev = 3,381, 56,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06538125476726817;  // std dev = 0,496, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else return 0.13420556825826563;  // std dev = 0,499, 986,000 (wgt'ed) examples reached here.  /* #neg=457 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5248252042235927;  // std dev = 2,095, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.19796287445113708;  // std dev = 0,076, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.07405061962425052;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then return 0.0727415920182446;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.05762224849941164;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09973636258987471;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4270819024450436;  // std dev = 2,097, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1684173609835002;  // std dev = 0,067, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.06305510576267426;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.04936132818623649;  // std dev = 0,445, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07510651007596839;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3306258697013837;  // std dev = 2,098, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14614173748312834;  // std dev = 0,059, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.05328125537882232;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.0406924160998396;  // std dev = 0,445, 66,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05641638734565574;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then return -0.0027284315616122727;  // std dev = 0,314, 66,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=16 */
%   | | else return 0.04472549551284156;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.047741532949049814;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.03138955554938067;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042331648272862156;  // std dev = 0,499, 1.022,000 (wgt'ed) examples reached here.  /* #neg=477 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.250178070366686;  // std dev = 2,098, 22,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.12853570055655478;  // std dev = 0,053, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0.03733290263590528;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.03992886723943215;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.02554683528577126;  // std dev = 0,446, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */


Results
   AUC ROC   = 0.557006
   AUC PR    = 0.565039
   CLL	      = -0.674198
   Precision = 0.559086 at threshold = 0.5
   Recall    = 0.924466
   F1        = 0.696782


Total learning time: 57.128 seconds
Total inference time: 4.569 seconds
AUC ROC: 0.557006


Refined model AUC ROC: 0.557006


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:21:22
{'Mapping results': {'Finding best mapping': 7.152557373046875e-07, 'Max mapping': 121, 'Numbers preds mapping': [4], 'Possible mappings': [6], 'Generating mappings time': 0.0014925003051757812, 'Total time': 1.9656736850738525, 'Generating paths time': 1.815748691558838, 'Knowledge compiling time': 0.14842534065246582}, 'CLL': -0.674198, 'Learning time': 80.367, 'AUC PR': 0.565039, 'F1': 0.696782, 'AUC ROC': 0.557006, 'Recall': 0.924466, 'Precision': [0.559086, 0.5], 'parameter': {'CLL': -0.684914, 'Learning time': 23.239, 'AUC PR': 0.555563, 'F1': 0.700335, 'AUC ROC': 0.547299, 'Recall': 0.944992, 'Precision': [0.556307, 0.5], 'Inference time': 2.041}, 'Inference time': 4.569}


Start learning from scratch in target domain

Starting fold 4

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.12020707130432129
   Generating paths time   = 1.824537992477417
   Generating mappings time   = 0.0015101432800292969
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 7.152557373046875e-07
   Total time   = 1.9462628364562988


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

Target train facts examples: 7382
Target train pos examples: 747
Target train neg examples: 747

Target test facts examples: 32159
Target test pos examples: 2270
Target test neg examples: 1993

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3735611214794357;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.14097721792779405;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32175803168015193;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.12293506238583077;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26654831388655753;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.10572355771962352;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2134839465271646;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.08978633290599357;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16668724369451127;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.07541323198647286;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12794262506462942;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.06274216592519288;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09717611751164584;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.05178372301620736;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07336126033252563;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.04245584308854262;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05519822955528243;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.034618468956100754;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04145936304187153;  // std dev = 18,666, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else return 0.02810245705359781;  // std dev = 4,481, 99,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=28 */


Results
   AUC ROC   = 0.558035
   AUC PR    = 0.56414
   CLL	      = -0.686242
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 72.405 seconds
Total inference time: 1.76 seconds
AUC ROC: 0.558035


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [4.481, 71, 28], 'true': [18.666, 676, 719]}]]
[{'': [0.24976246451101256, 0.20283644526068886]}, {'': [0.24976246451099404, 0.20283644526068717]}, {'': [0.24976246451098316, 0.20283644526068828]}, {'': [0.24976246451099413, 0.202836445260688]}, {'': [0.24976246451098344, 0.20283644526068864]}, {'': [0.24976246451099202, 0.20283644526068909]}, {'': [0.24976246451098205, 0.20283644526068767]}, {'': [0.24976246451097817, 0.20283644526068803]}, {'': [0.24976246451099463, 0.2028364452606869]}, {'': [0.24976246451098966, 0.20283644526068803]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3735611214794357;  // std dev = 0,500, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.44148226843284566;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.10259337954395681;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32175803168015193;  // std dev = 0,500, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.28139904905404495;  // std dev = 0,483, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.10429356789691546;  // std dev = 0,420, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.08964016548715838;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.26654831388655753;  // std dev = 0,500, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.2363983370350988;  // std dev = 0,480, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.0896696523376372;  // std dev = 0,418, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.07754550154840685;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2134839465271646;  // std dev = 0,500, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(B, F) )
%   | | then return 0.1928916221085101;  // std dev = 0,477, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.07630722797489459;  // std dev = 0,417, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.06648308448032317;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6512750573145673;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3487249426854328;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.6512750573145671;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.16433746660340687;  // std dev = 0,500, 1.378,000 (wgt'ed) examples reached here.  /* #neg=671 #pos=707 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then return 0.153731620131889;  // std dev = 0,476, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.0643547789439816;  // std dev = 0,416, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.056548150925513005;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4933437755280914;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2742085972133768;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.4933437755280914;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.12615038910253523;  // std dev = 0,500, 1.378,000 (wgt'ed) examples reached here.  /* #neg=671 #pos=707 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then return 0.12039710454524001;  // std dev = 0,474, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.05385721277832773;  // std dev = 0,415, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.047766754411616555;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.37285919109619514;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2231189649415394;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.37285919109619536;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.09583381027905141;  // std dev = 0,500, 1.378,000 (wgt'ed) examples reached here.  /* #neg=671 #pos=707 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then return 0.09314263036969508;  // std dev = 0,473, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.04477865966925784;  // std dev = 0,414, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | else return 0.040110342621182196;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07331134900833562;  // std dev = 0,497, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.27504045153733897;  // std dev = 2,389, 24,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=14 */
%   | | | else return -0.195570260963858;  // std dev = 0,187, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.08998193586417014;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.03351176627816061;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05522284459189909;  // std dev = 0,497, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then return 0.04935330436913478;  // std dev = 0,456, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.027880036700617013;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.022166022251911333;  // std dev = 0,392, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04152474383760008;  // std dev = 0,497, 1.395,000 (wgt'ed) examples reached here.  /* #neg=676 #pos=719 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then return 0.03774762855804319;  // std dev = 0,455, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return 0.023112424984988816;  // std dev = 0,430, 45,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.018231242431611117;  // std dev = 0,391, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */


Results
   AUC ROC   = 0.56685
   AUC PR    = 0.578825
   CLL	      = -0.677465
   Precision = 0.594937 at threshold = 0.5
   Recall    = 0.04141
   F1        = 0.07743


Total learning time: 98.90899999999999 seconds
Total inference time: 6.477 seconds
AUC ROC: 0.56685


Refined model AUC ROC: 0.56685


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:24:25
{'Mapping results': {'Finding best mapping': 7.152557373046875e-07, 'Max mapping': 121, 'Numbers preds mapping': [4], 'Possible mappings': [6], 'Generating mappings time': 0.0015101432800292969, 'Total time': 1.9462628364562988, 'Generating paths time': 1.824537992477417, 'Knowledge compiling time': 0.12020707130432129}, 'CLL': -0.677465, 'Learning time': 171.314, 'AUC PR': 0.578825, 'F1': 0.07743, 'AUC ROC': 0.56685, 'Recall': 0.04141, 'Precision': [0.594937, 0.5], 'parameter': {'CLL': -0.686242, 'Learning time': 72.405, 'AUC PR': 0.56414, 'F1': nan, 'AUC ROC': 0.558035, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 1.76}, 'Inference time': 6.477}


Start learning from scratch in target domain

Starting fold 5

Target predicate: samevenue
Mapping Results
   Knowledge compiling time   = 0.11563944816589355
   Generating paths time   = 2.004758834838867
   Generating mappings time   = 0.00164031982421875
   Possible mappings   = [6]
   Max mapping   = 121
   Numbers predicates mapping   = [4]
   Finding best mapping   = 9.5367431640625e-07
   Total time   = 2.1220479011535645


Best mapping found: ['movie(A,B) -> haswordvenue(B,A)', 'workedunder(A,B) -> samevenue(A,B)'] 

Transferred target predicate: samevenue 

Target train facts examples: 8094
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 31447
Target test pos examples: 2467
Target test neg examples: 2240

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.45384271500381385;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.10113958930511996;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3891944611307275;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.08837649359551082;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.31820707987498087;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.0764692153151211;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25016592060681264;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.06558360802849682;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1916369618474441;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.055809457085346785;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14477344598529676;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.04716976949296712;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10873567483835977;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03963499455671531;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08155848265741104;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.03313850883384021;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06121987810203538;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.027590839218657345;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04602448061244918;  // std dev = 14,190, 836,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=498 */
%   else return 0.02289130765878614;  // std dev = 6,274, 214,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=52 */


Results
   AUC ROC   = 0.535236
   AUC PR    = 0.542776
   CLL	      = -0.685676
   Precision = 0.543247 at threshold = 0.5
   Recall    = 0.952169
   F1        = 0.691798


Total learning time: 45.635 seconds
Total inference time: 2.094 seconds
AUC ROC: 0.535236


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'false': [6.274, 162, 52], 'true': [14.19, 338, 498]}]]
[{'': [0.24084270048762138, 0.18394619617433927]}, {'': [0.2408427004876197, 0.18394619617434038]}, {'': [0.24084270048763987, 0.18394619617433852]}, {'': [0.24084270048762046, 0.18394619617433824]}, {'': [0.24084270048762352, 0.1839461961743386]}, {'': [0.2408427004876279, 0.18394619617433638]}, {'': [0.24084270048762227, 0.18394619617433644]}, {'': [0.2408427004876221, 0.183946196174339]}, {'': [0.2408427004876295, 0.1839461961743406]}, {'': [0.24084270048762518, 0.1839461961743367]}]


******************************************
Performing Theory Revision
******************************************
Pruning resulted in null theory

Candidate for revision
['0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true', '9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true']


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.44587899644920087;  // std dev = 0,492, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.762910839861417;  // std dev = 0,294, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0,445, 44,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.23314893509951226;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.14762261931003867;  // std dev = 2,796, 38,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.04458961306561406;  // std dev = 2,992, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2,966, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return -0.20519745475529086;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.5864692119113756;  // std dev = 1,990, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.38156481117013774;  // std dev = 0,492, 783,000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.6699615757960478;  // std dev = 0,285, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(L, I), venue(L, A) )
%   | | | then return -0.1585410350598063;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1341418917694617;  // std dev = 2,913, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.07259278949336569;  // std dev = 0,417, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.31226488747628683;  // std dev = 0,490, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.5307179033413495;  // std dev = 0,283, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6179200564254488;  // std dev = 0,896, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1820799435745512;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.17297264196921977;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11919141375224729;  // std dev = 2,866, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.023319838448629077;  // std dev = 0,379, 66,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.11798637424202806;  // std dev = 4,072, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1670425715043744;  // std dev = 0,031, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.24532771954151453;  // std dev = 0,490, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.42385466198805843;  // std dev = 0,279, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.05757404844839186;  // std dev = 0,328, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.118788487271051;  // std dev = 0,930, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.10309441630180478;  // std dev = 2,862, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.002829537111260272;  // std dev = 0,787, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1244590750404511;  // std dev = 2,933, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.01409281791542898;  // std dev = 2,982, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.042607668651139956;  // std dev = 2,958, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.18826728989579727;  // std dev = 0,490, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.32038359000424005;  // std dev = 0,279, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4874387205677735;  // std dev = 0,903, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16631649056740044;  // std dev = 0,017, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.16514356689337803;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08364730914788139;  // std dev = 2,859, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return -0.0022093538247848986;  // std dev = 0,703, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.10245327048502088;  // std dev = 2,880, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.02403991512581544;  // std dev = 0,394, 114,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.4435673976952855;  // std dev = 2,11e-08, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.33747742642752065;  // std dev = 1,965, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return -0.2615198405024852;  // std dev = 1,752, 21,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.23346489263575507;  // std dev = 0,902, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.10157029796768449;  // std dev = 2,245, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.21630887756684344;  // std dev = 1,912, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.16898111907690438;  // std dev = 0,484, 726,000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.06637100290120225;  // std dev = 0,424, 54,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.03637929472614142;  // std dev = 0,408, 160,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10546633454946111;  // std dev = 0,484, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.24847938413590306;  // std dev = 0,279, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( author(I, G), venue(I, A) )
%   | | | then return 0.2142821559627838;  // std dev = 0,723, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14743519779392097;  // std dev = 0,009, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.06355837454734961;  // std dev = 0,442, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.012165881049371441;  // std dev = 0,698, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07332620483572118;  // std dev = 2,873, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.0032058630049606467;  // std dev = 2,982, 59,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.0284628388858312;  // std dev = 2,957, 55,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.07924996651765709;  // std dev = 0,484, 815,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.196872565371022;  // std dev = 0,279, 21,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.086103693987935;  // std dev = 0,374, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return -0.13164937313714864;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05124532743871888;  // std dev = 2,855, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.17625263528643945;  // std dev = 0,044, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.04183111666487517;  // std dev = 3,002, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.06877824279932308;  // std dev = 4,040, 83,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.17698624612380445;  // std dev = 0,084, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(A, F) )
%   | | then return 0.2037926705598192;  // std dev = 0,342, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.03258656164360011;  // std dev = 2,235, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.22172592284353498;  // std dev = 1,848, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | else return 0.06929612711954232;  // std dev = 0,483, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( title(K, I), venue(K, B) )
%   | | | then return 0.6410241639573505;  // std dev = 1,752, 29,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.19736794687275375;  // std dev = 0,277, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.17000370442924667;  // std dev = 0,096, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.05349780553853966;  // std dev = 0,432, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.19150320612572733;  // std dev = 0,052, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordvenue(B, F) )
%   | | then return 0.16001986178155894;  // std dev = 0,342, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.007580042559347146;  // std dev = 2,238, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.24455881510419986;  // std dev = 1,775, 23,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | else return 0.05505729959165993;  // std dev = 0,482, 775,000 (wgt'ed) examples reached here.  /* #neg=307 #pos=468 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return -0.0036129707635086175;  // std dev = 0,240, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.03609792124288599;  // std dev = 0,428, 46,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.14792903848689112;  // std dev = 0,139, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.015720581220376922;  // std dev = 2,978, 54,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else return 0.02685760596731;  // std dev = 0,362, 94,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */


Results
   AUC ROC   = 0.540774
   AUC PR    = 0.561597
   CLL	      = -0.686226
   Precision = 0.540655 at threshold = 0.5
   Recall    = 0.929874
   F1        = 0.683756


Total learning time: 95.297 seconds
Total inference time: 12.737 seconds
AUC ROC: 0.540774


Refined model AUC ROC: 0.540774


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:27:04
{'Mapping results': {'Finding best mapping': 9.5367431640625e-07, 'Max mapping': 121, 'Numbers preds mapping': [4], 'Possible mappings': [6], 'Generating mappings time': 0.00164031982421875, 'Total time': 2.1220479011535645, 'Generating paths time': 2.004758834838867, 'Knowledge compiling time': 0.11563944816589355}, 'CLL': -0.686226, 'Learning time': 140.932, 'AUC PR': 0.561597, 'F1': 0.683756, 'AUC ROC': 0.540774, 'Recall': 0.929874, 'Precision': [0.540655, 0.5], 'parameter': {'CLL': -0.685676, 'Learning time': 45.635, 'AUC PR': 0.542776, 'F1': 0.691798, 'AUC ROC': 0.535236, 'Recall': 0.952169, 'Precision': [0.543247, 0.5], 'Inference time': 2.094}, 'Inference time': 12.737}


Start learning from scratch in target domain

