Starting experiment #5 for 54_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 698
Source train neg examples: 27996

WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5221700991206722;  // std dev = 0,472, 378,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.10435106490048782;  // std dev = 3,800, 400,000 (wgt'ed) examples reached here.  /* #neg=385 #pos=15 */
%   | | | else return 0.11455919150976876;  // std dev = 2,727, 39,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.04419481490048794;  // std dev = 4,750, 256,000 (wgt'ed) examples reached here.  /* #neg=231 #pos=25 */
%   | | | else return 0.2818415711720796;  // std dev = 15,126, 937,000 (wgt'ed) examples reached here.  /* #neg=540 #pos=397 */
%   else return -0.14185106490048785;  // std dev = 0,000, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.49312830976761385;  // std dev = 0,453, 353,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.09202282681535699;  // std dev = 3,799, 399,000 (wgt'ed) examples reached here.  /* #neg=384 #pos=15 */
%   | | | else return 0.26029030710336576;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.049143346716098366;  // std dev = 4,776, 286,000 (wgt'ed) examples reached here.  /* #neg=261 #pos=25 */
%   | | | else return 0.24669034064288625;  // std dev = 15,090, 931,000 (wgt'ed) examples reached here.  /* #neg=534 #pos=397 */
%   else return -0.12544463852839116;  // std dev = 7,30e-08, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.3878098472078952;  // std dev = 0,458, 358,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.07803291960303835;  // std dev = 3,792, 361,000 (wgt'ed) examples reached here.  /* #neg=346 #pos=15 */
%   | | | else return 0.10026222999727363;  // std dev = 2,657, 34,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.04375630875510656;  // std dev = 4,777, 287,000 (wgt'ed) examples reached here.  /* #neg=262 #pos=25 */
%   | | | else return 0.23626918617552498;  // std dev = 14,706, 872,000 (wgt'ed) examples reached here.  /* #neg=475 #pos=397 */
%   else return -0.11231637819360618;  // std dev = 8,82e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then if ( author(F, D), title(F, B) )
%   | | | then return 0.5979406396403263;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.264607306306993;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( author(G, D), title(G, B) )
%   | | | then return -0.28441230153614433;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0.3386813803810656;  // std dev = 7,888, 324,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=240 */
%   | else if ( haswordtitle(A, H), haswordauthor(I, H) )
%   | | then if ( haswordvenue(J, H) )
%   | | | then return -0.06825674173545093;  // std dev = 3,788, 346,000 (wgt'ed) examples reached here.  /* #neg=331 #pos=15 */
%   | | | else return 0.03389627687558511;  // std dev = 2,750, 41,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | else if ( haswordtitle(B, K), haswordauthor(L, K) )
%   | | | then return -0.029442310195721546;  // std dev = 4,753, 259,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=25 */
%   | | | else return 0.16804174583669057;  // std dev = 15,041, 923,000 (wgt'ed) examples reached here.  /* #neg=526 #pos=397 */
%   else return -0.10159632948783635;  // std dev = 0,000, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.49748934997178434;  // std dev = 0,267, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.33597031533831995;  // std dev = 1,49e-08, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.20057191182464834;  // std dev = 0,464, 353,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.06733033689160525;  // std dev = 3,799, 398,000 (wgt'ed) examples reached here.  /* #neg=383 #pos=15 */
%   | | | else return 0.02241028530772473;  // std dev = 2,760, 42,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.02660751126549041;  // std dev = 4,754, 260,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=25 */
%   | | | else return 0.14331310925508498;  // std dev = 14,922, 904,000 (wgt'ed) examples reached here.  /* #neg=507 #pos=397 */
%   else return -0.0926912761892608;  // std dev = 7,60e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.3796226911523778;  // std dev = 0,267, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.26555866193005484;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.17441776952604013;  // std dev = 0,454, 341,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.06172790461352246;  // std dev = 3,800, 404,000 (wgt'ed) examples reached here.  /* #neg=389 #pos=15 */
%   | | | else return 0.07461751030554724;  // std dev = 2,657, 34,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | else return 0.092470104868857;  // std dev = 0,467, 1.123,000 (wgt'ed) examples reached here.  /* #neg=701 #pos=422 */
%   else return -0.0851847513883968;  // std dev = 7,15e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then if ( author(F, D), title(F, B) )
%   | | | then return 0.2538542000275741;  // std dev = 7,45e-09, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.10628646068458307;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.11350083498960876;  // std dev = 0,455, 355,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.055613397693677125;  // std dev = 3,799, 396,000 (wgt'ed) examples reached here.  /* #neg=381 #pos=15 */
%   | | | else return 0.011351747238369379;  // std dev = 2,750, 41,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.03569256609280443;  // std dev = 4,758, 265,000 (wgt'ed) examples reached here.  /* #neg=240 #pos=25 */
%   | | | else return 0.08338661737212107;  // std dev = 15,035, 922,000 (wgt'ed) examples reached here.  /* #neg=525 #pos=397 */
%   else return -0.07877675473109154;  // std dev = 7,38e-08, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.11232967256297048;  // std dev = 0,438, 354,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.05090954974415937;  // std dev = 3,799, 395,000 (wgt'ed) examples reached here.  /* #neg=380 #pos=15 */
%   | | | else return 0.09875053768961371;  // std dev = 2,582, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.03801938091660014;  // std dev = 4,775, 284,000 (wgt'ed) examples reached here.  /* #neg=259 #pos=25 */
%   | | | else return 0.047210175678046556;  // std dev = 15,259, 960,000 (wgt'ed) examples reached here.  /* #neg=563 #pos=397 */
%   else return -0.07324622576333722;  // std dev = 1,05e-08, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.04205912781591426;  // std dev = 0,454, 380,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=251 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.0474402745592172;  // std dev = 3,800, 401,000 (wgt'ed) examples reached here.  /* #neg=386 #pos=15 */
%   | | | else return 0.08055745208550487;  // std dev = 2,582, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | else return 0.043403692997547615;  // std dev = 0,460, 1.162,000 (wgt'ed) examples reached here.  /* #neg=740 #pos=422 */
%   else return -0.06842697784420264;  // std dev = 5,37e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.07340838123251969;  // std dev = 0,443, 353,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.04296963204818039;  // std dev = 3,798, 392,000 (wgt'ed) examples reached here.  /* #neg=377 #pos=15 */
%   | | | else return 0.04420777899899994;  // std dev = 2,622, 32,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.030488032485133074;  // std dev = 4,754, 260,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=25 */
%   | | | else return 0.042976585540343296;  // std dev = 15,035, 922,000 (wgt'ed) examples reached here.  /* #neg=525 #pos=397 */
%   else return -0.06419184008202626;  // std dev = 0,000, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5423594614153026;  // std dev = 0,465, 95,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,94e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4158745742085544;  // std dev = 0,481, 102,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839147;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3488370181044785;  // std dev = 0,477, 100,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936062;  // std dev = 7,74e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.2978795074344475;  // std dev = 4,581, 96,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=65 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783624;  // std dev = 4,71e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16765597055678508;  // std dev = 0,486, 105,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926103;  // std dev = 3,16e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11432457436383854;  // std dev = 0,488, 107,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,77e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.06918999030059436;  // std dev = 5,157, 110,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=65 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109162;  // std dev = 4,94e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15253817118562454;  // std dev = 0,462, 94,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1456642523569885;  // std dev = 0,448, 90,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420267;  // std dev = 3,94e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.025588205498821025;  // std dev = 0,481, 102,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.321145
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.322 seconds
Total inference time: 1.668 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.87254
   AUC PR    = 0.104502
   CLL	      = -0.297081
   Precision = 0.104502 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.189229


Total scoring time: 1.232 seconds
Parameter learned model CLL: -0.297081


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.94e-08, 99, 0], 'true,true': [0.465, 30, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 79, 0], 'true,true': [0.481, 37, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.74e-08, 97, 0], 'true,true': [0.477, 35, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [4.71e-08, 94, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.581, 31, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [3.16e-08, 91, 0], 'true,true': [0.486, 40, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.77e-08, 105, 0], 'true,true': [0.488, 42, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [4.94e-08, 86, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [5.157, 45, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 100, 0], 'true,true': [0.462, 29, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.94e-08, 84, 0], 'true,true': [0.448, 25, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 112, 0], 'true,true': [0.481, 37, 65], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2160664819944591, 8.074349270001139e-17], 'true': [0.2160664819944591, nan]}, {'': [0.2311610918877348, -2.5296220814244072e-17], 'true': [0.2311610918877348, nan]}, {'': [0.22750000000000128, 6.180623023686439e-17], 'true': [0.22750000000000128, nan]}, {'': [0.21864149305555516, 2.362176648138631e-17], 'true': [0.21864149305555516, nan], 'true,true': [0.21864149305555516, nan]}, {'': [0.2358276643990923, 1.0980227716072976e-17], 'true': [0.2358276643990923, nan]}, {'': [0.2384487728185864, 3.172065784643304e-17], 'true': [0.2384487728185864, nan]}, {'': [0.24173553719008256, 2.840105411831796e-17], 'true': [0.24173553719008256, nan], 'true,true': [0.24173553719008256, nan]}, {'': [0.2133318243549111, -5.551115123125783e-18], 'true': [0.2133318243549111, nan]}, {'': [0.2006172839506177, 1.850371707708594e-17], 'true': [0.2006172839506177, nan]}, {'': [0.23116109188773518, -1.734723475976807e-17], 'true': [0.23116109188773518, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.14185106490048774;  // std dev = 1,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109542;  // std dev = 1,19e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.12544463852839136;  // std dev = 1,05e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.12544463852839136;  // std dev = 0,000, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.11591643820482724;  // std dev = 0,113, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.11231637819360621;  // std dev = 7,45e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.10470441730717261;  // std dev = 0,105, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.10159632948783623;  // std dev = 5,05e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.09994072443611704;  // std dev = 0,164, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.09269127618926108;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.0892147307537628;  // std dev = 0,126, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.08518475138839682;  // std dev = 5,37e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.08436557154641712;  // std dev = 0,117, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.07877675473109161;  // std dev = 5,27e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07627088403100044;  // std dev = 0,111, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333707;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1527438580936707;  // std dev = 4,94e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07434867537929324;  // std dev = 0,144, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420265;  // std dev = 4,41e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.0656755088736195;  // std dev = 0,070, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.06419184008202626;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062921
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.807 seconds
Total inference time: 1.582 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064509
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.245 seconds
Refined model CLL: -0.064509


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062921
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.606000000000001 seconds
Total inference time: 1.582 seconds
AUC ROC: 1.0
Total revision time: 5.606000000000001
Best scored revision CLL: -0.064509


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 14:26:50
{'parameter_0.2': {'F1': 0.106262, 'Inference time': 1.668, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 1.322, 'CLL': -0.321145}, 'F1': 1.0, 'Inference time': 1.582, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.606000000000001, 'CLL': -0.062921}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.14185106490048763;  // std dev = 7,88e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109542;  // std dev = 1,19e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.12544463852839138;  // std dev = 0,000, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.11231637819360624;  // std dev = 6,99e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.10159632948783631;  // std dev = 1,49e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.09269127618926101;  // std dev = 3,49e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.08518475138839683;  // std dev = 6,05e-08, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.0787767547310916;  // std dev = 6,14e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07324622576333707;  // std dev = 0,000, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936707;  // std dev = 4,94e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06842697784420267;  // std dev = 5,27e-08, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.06419184008202626;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.146 seconds
Total inference time: 1.348 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 14:26:54
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.348, 'Precision': [1.0, 0.5], 'Learning time': 2.146, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.14185106490048782;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.794 seconds
Total inference time: 0.85 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 14:26:56
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.85, 'Precision': [nan, 0.5], 'Learning time': 0.794, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5248156017661759;  // std dev = 0,471, 195,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048832;  // std dev = 0,000, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4316289395752982;  // std dev = 0,477, 200,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839158;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3658801745476923;  // std dev = 0,471, 195,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936065;  // std dev = 0,000, 184,000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.25759286557705313;  // std dev = 6,837, 203,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=130 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783652;  // std dev = 0,000, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20479959233012132;  // std dev = 0,477, 200,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892606;  // std dev = 8,82e-08, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14738498862309057;  // std dev = 0,479, 202,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,15e-08, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.1269208802288225;  // std dev = 6,649, 197,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=130 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109146;  // std dev = 7,15e-08, 207,000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0791682375361361;  // std dev = 0,479, 202,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333667;  // std dev = 1,13e-07, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06301507268158817;  // std dev = 0,478, 201,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 8,36e-08, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0816508074366642;  // std dev = 0,466, 191,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 1,05e-08, 220,000 (wgt'ed) examples reached here.  /* #neg=220 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.321636
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.681 seconds
Total inference time: 1.642 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.871654
   AUC PR    = 0.103834
   CLL	      = -0.299049
   Precision = 0.103834 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.188133


Total scoring time: 1.599 seconds
Parameter learned model CLL: -0.299049


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 185, 0], 'true,true': [0.471, 65, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 188, 0], 'true,true': [0.477, 70, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 184, 0], 'true,true': [0.471, 65, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 180, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.837, 73, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.82e-08, 186, 0], 'true,true': [0.477, 70, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.15e-08, 179, 0], 'true,true': [0.479, 72, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [7.15e-08, 207, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.649, 67, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.13e-07, 192, 0], 'true,true': [0.479, 72, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.36e-08, 209, 0], 'true,true': [0.478, 71, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.05e-08, 220, 0], 'true,true': [0.466, 61, 130], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22222222222222657, -2.1124243495570547e-16], 'true': [0.22222222222222657, nan]}, {'': [0.2274999999999983, -2.362176648138631e-17], 'true': [0.2274999999999983, nan]}, {'': [0.22222222222221993, -2.172175482962263e-17], 'true': [0.22222222222221993, nan]}, {'': [0.23028949986653446, -8.388351741612294e-17], 'true': [0.23028949986653446, nan], 'true,true': [0.23028949986653446, nan]}, {'': [0.22750000000000017, 4.178258694825858e-17], 'true': [0.22750000000000017, nan]}, {'': [0.22938927556121766, 2.8530871023886705e-17], 'true': [0.22938927556121766, nan]}, {'': [0.22443247700275784, 2.4671622769447922e-17], 'true': [0.22443247700275784, nan], 'true,true': [0.22443247700275784, nan]}, {'': [0.22938927556122002, 6.707597440443654e-17], 'true': [0.22938927556122002, nan]}, {'': [0.22845969159179244, 3.346605289539946e-17], 'true': [0.22845969159179244, nan]}, {'': [0.21737342726350667, 5.046468293750711e-19], 'true': [0.21737342726350667, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.14185106490048768;  // std dev = 5,37e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.1418510649004884;  // std dev = 0,000, 203,000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109556;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.1254446385283915;  // std dev = 0,000, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11231637819360628;  // std dev = 4,94e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.11231637819360651;  // std dev = 0,000, 187,000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830914;  // std dev = 3,86e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.10159632948783619;  // std dev = 4,59e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.10159632948783653;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601497;  // std dev = 2,53e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.09269127618926057;  // std dev = 9,19e-08, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694897;  // std dev = 5,96e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.0851847513883968;  // std dev = 1,67e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.08518475138839678;  // std dev = 7,30e-08, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325353;  // std dev = 2,11e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.07877675473109147;  // std dev = 7,45e-08, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.07324622576333664;  // std dev = 1,22e-07, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.0684269778442027;  // std dev = 1,49e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.06842697784420262;  // std dev = 8,02e-08, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.06419184008202626;  // std dev = 0,000, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.467 seconds
Total inference time: 1.519 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064211
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.784 seconds
Refined model CLL: -0.064211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.531 seconds
Total inference time: 1.519 seconds
AUC ROC: 1.0
Total revision time: 7.531
Best scored revision CLL: -0.064211


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 14:27:07
{'F1': 1.0, 'Inference time': 1.519, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.106262, 'Inference time': 1.642, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 1.681, 'CLL': -0.321636}, 'Recall': 1.0, 'Learning time': 7.531, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.1418510649004884;  // std dev = 0,000, 213,000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109556;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.1254446385283917;  // std dev = 0,000, 222,000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.11231637819360678;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830914;  // std dev = 3,86e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.10159632948783646;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601497;  // std dev = 2,53e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.09269127618926058;  // std dev = 5,77e-08, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694897;  // std dev = 5,96e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.08518475138839682;  // std dev = 1,58e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 244,000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325353;  // std dev = 2,11e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07877675473109146;  // std dev = 6,99e-08, 229,000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.0732462257633368;  // std dev = 9,42e-08, 214,000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.06842697784420261;  // std dev = 6,14e-08, 239,000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06419184008202619;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.06419184008202622;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.604 seconds
Total inference time: 1.445 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 14:27:12
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.445, 'Precision': [1.0, 0.5], 'Learning time': 2.604, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.1418510649004877;  // std dev = 3,33e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.1418510649004884;  // std dev = 0,000, 217,000 (wgt'ed) examples reached here.  /* #neg=217 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.003 seconds
Total inference time: 0.867 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 14:27:14
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.867, 'Precision': [nan, 0.5], 'Learning time': 1.003, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5081489350995085;  // std dev = 0,477, 300,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048793;  // std dev = 0,000, 286,000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4259077047405854;  // std dev = 0,480, 304,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839208;  // std dev = 0,000, 332,000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.36942990535035264;  // std dev = 0,472, 293,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360688;  // std dev = 0,000, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.291742723774006;  // std dev = 8,021, 291,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=195 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2075802059644005;  // std dev = 0,475, 297,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926044;  // std dev = 1,35e-07, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16940072451328053;  // std dev = 0,470, 291,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,12e-07, 333,000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.12946732711521508;  // std dev = 7,992, 290,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=195 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 4,94e-08, 280,000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09756124228267911;  // std dev = 0,469, 290,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333688;  // std dev = 1,10e-07, 273,000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06930346676375397;  // std dev = 0,471, 292,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420287;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07645069657714781;  // std dev = 0,462, 282,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202597;  // std dev = 1,13e-07, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.332136
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.422 seconds
Total inference time: 1.505 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.871492
   AUC PR    = 0.103723
   CLL	      = -0.308365
   Precision = 0.103723 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.187952


Total scoring time: 2.08 seconds
Parameter learned model CLL: -0.308365


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 286, 0], 'true,true': [0.477, 105, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 332, 0], 'true,true': [0.48, 109, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 295, 0], 'true,true': [0.472, 98, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 298, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.021, 96, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.35e-07, 278, 0], 'true,true': [0.475, 102, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.12e-07, 333, 0], 'true,true': [0.47, 96, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [4.94e-08, 280, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.992, 95, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.1e-07, 273, 0], 'true,true': [0.469, 95, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 276, 0], 'true,true': [0.471, 97, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.13e-07, 296, 0], 'true,true': [0.462, 87, 195], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22750000000000478, -9.316556850001314e-18], 'true': [0.22750000000000478, nan]}, {'': [0.22999264196675231, -9.36332671370614e-17], 'true': [0.22999264196675231, nan]}, {'': [0.2226001467693252, -9.182861627408074e-17], 'true': [0.2226001467693252, nan]}, {'': [0.22106493782548506, -5.513859316930308e-17], 'true': [0.22106493782548506, nan], 'true,true': [0.22106493782548506, nan]}, {'': [0.22548719518416732, 6.549517123687974e-17], 'true': [0.22548719518416732, nan]}, {'': [0.22106493782548614, 3.734083446186713e-17], 'true': [0.22106493782548614, nan]}, {'': [0.22027348394768154, 8.723180907769087e-18], 'true': [0.22027348394768154, nan], 'true,true': [0.22027348394768154, nan]}, {'': [0.220273483947682, 4.3920910864291905e-17], 'true': [0.220273483947682, nan]}, {'': [0.2218404015762817, -3.459390583976937e-17], 'true': [0.2218404015762817, nan]}, {'': [0.2133318243549125, 4.2758589461914814e-17], 'true': [0.2133318243549125, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.14185106490048768;  // std dev = 7,30e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.14185106490048785;  // std dev = 8,94e-08, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.12544463852839147;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.12544463852839194;  // std dev = 0,000, 271,000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.11231637819360622;  // std dev = 7,60e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.11231637819360667;  // std dev = 0,000, 323,000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415830997;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.10159632948783627;  // std dev = 4,21e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.10159632948783662;  // std dev = 0,000, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.320711847160149;  // std dev = 4,00e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.09269127618926044;  // std dev = 1,69e-07, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.0851847513883968;  // std dev = 2,98e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07877675473109165;  // std dev = 4,59e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.07877675473109143;  // std dev = 3,65e-08, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.07324622576333686;  // std dev = 1,12e-07, 269,000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06842697784420268;  // std dev = 3,25e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.06842697784420299;  // std dev = 0,000, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.06419184008202596;  // std dev = 1,14e-07, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.82 seconds
Total inference time: 1.431 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064211
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.671 seconds
Refined model CLL: -0.064211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.993 seconds
Total inference time: 1.431 seconds
AUC ROC: 1.0
Total revision time: 8.993
Best scored revision CLL: -0.064211


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 14:27:26
{'F1': 1.0, 'Inference time': 1.431, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.106262, 'Inference time': 1.505, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 2.422, 'CLL': -0.332136}, 'Recall': 1.0, 'Learning time': 8.993, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1418510649004877;  // std dev = 3,65e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.1418510649004878;  // std dev = 1,23e-07, 360,000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.12544463852839205;  // std dev = 0,000, 370,000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.11231637819360643;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.11231637819360682;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830997;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.10159632948783655;  // std dev = 0,000, 331,000 (wgt'ed) examples reached here.  /* #neg=331 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.320711847160149;  // std dev = 4,00e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.09269127618926046;  // std dev = 1,63e-07, 348,000 (wgt'ed) examples reached here.  /* #neg=348 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 353,000 (wgt'ed) examples reached here.  /* #neg=353 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.07877675473109147;  // std dev = 3,65e-08, 362,000 (wgt'ed) examples reached here.  /* #neg=362 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.07324622576333714;  // std dev = 5,77e-08, 372,000 (wgt'ed) examples reached here.  /* #neg=372 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06842697784420276;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.06842697784420303;  // std dev = 0,000, 322,000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06419184008202596;  // std dev = 1,18e-07, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.0 seconds
Total inference time: 1.35 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 14:27:31
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.35, 'Precision': [1.0, 0.5], 'Learning time': 3.0, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1418510649004877;  // std dev = 3,33e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.1418510649004878;  // std dev = 1,26e-07, 355,000 (wgt'ed) examples reached here.  /* #neg=355 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.17 seconds
Total inference time: 0.891 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 14:27:33
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.891, 'Precision': [nan, 0.5], 'Learning time': 1.17, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.48314893509950807;  // std dev = 0,484, 416,000 (wgt'ed) examples reached here.  /* #neg=156 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048757;  // std dev = 2,17e-07, 345,000 (wgt'ed) examples reached here.  /* #neg=345 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4166766523798175;  // std dev = 0,483, 414,000 (wgt'ed) examples reached here.  /* #neg=154 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839227;  // std dev = 0,000, 416,000 (wgt'ed) examples reached here.  /* #neg=416 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3951958694486589;  // std dev = 0,465, 380,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936062;  // std dev = 0,000, 399,000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.27200764439697467;  // std dev = 9,561, 401,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=260 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783605;  // std dev = 1,88e-07, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2128925562993603;  // std dev = 0,475, 397,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926083;  // std dev = 1,53e-07, 393,000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1533984693368886;  // std dev = 0,477, 401,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,21e-07, 366,000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.1102836051486086;  // std dev = 9,627, 404,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=260 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109154;  // std dev = 1,01e-07, 421,000 (wgt'ed) examples reached here.  /* #neg=421 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.10777892235758907;  // std dev = 0,471, 389,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333718;  // std dev = 4,71e-08, 379,000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07462477932227361;  // std dev = 0,473, 393,000 (wgt'ed) examples reached here.  /* #neg=133 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420332;  // std dev = 0,000, 387,000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.045080121420490615;  // std dev = 0,477, 400,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202564;  // std dev = 1,86e-07, 384,000 (wgt'ed) examples reached here.  /* #neg=384 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.319678
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.305 seconds
Total inference time: 1.425 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.871711
   AUC PR    = 0.103875
   CLL	      = -0.297269
   Precision = 0.103875 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.188201


Total scoring time: 2.486 seconds
Parameter learned model CLL: -0.297269


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.17e-07, 345, 0], 'true,true': [0.484, 156, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 416, 0], 'true,true': [0.483, 154, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 399, 0], 'true,true': [0.465, 120, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [1.88e-07, 383, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.561, 141, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.53e-07, 393, 0], 'true,true': [0.475, 137, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.21e-07, 366, 0], 'true,true': [0.477, 141, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [1.01e-07, 421, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.627, 144, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.71e-08, 379, 0], 'true,true': [0.471, 129, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 387, 0], 'true,true': [0.473, 133, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.86e-07, 384, 0], 'true,true': [0.477, 140, 260], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23437500000000341, 1.3644480070755548e-16], 'true': [0.23437500000000341, nan]}, {'': [0.23361105276668248, -1.2810265668751805e-16], 'true': [0.23361105276668248, nan]}, {'': [0.21606648199445325, -2.6712132923312036e-17], 'true': [0.21606648199445325, nan]}, {'': [0.2279836568180523, 9.276014827155354e-17], 'true': [0.2279836568180523, nan], 'true,true': [0.2279836568180523, nan]}, {'': [0.22600232220241412, 5.988989344033924e-17], 'true': [0.22600232220241412, nan]}, {'': [0.22798365681805244, 4.004083039631712e-17], 'true': [0.22798365681805244, nan]}, {'': [0.22938927556122174, 2.4261405763780144e-17], 'true': [0.22938927556122174, nan], 'true,true': [0.22938927556122174, nan]}, {'': [0.22164801977253695, 5.8586966998689e-18], 'true': [0.22164801977253695, nan]}, {'': [0.2238926765469497, -1.0729287111364562e-16], 'true': [0.2238926765469497, nan]}, {'': [0.22749999999999992, 8.962737959213503e-17], 'true': [0.22749999999999992, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048796;  // std dev = 0,000, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.14185106490048732;  // std dev = 3,01e-07, 405,000 (wgt'ed) examples reached here.  /* #neg=405 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.1254446385283911;  // std dev = 7,60e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.12544463852839224;  // std dev = 0,000, 402,000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,95e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11231637819360621;  // std dev = 9,54e-08, 147,000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.11231637819360644;  // std dev = 0,000, 356,000 (wgt'ed) examples reached here.  /* #neg=356 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.417513584158311;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.10159632948783644;  // std dev = 0,000, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.10159632948783591;  // std dev = 2,23e-07, 402,000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601502;  // std dev = 1,33e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.09269127618926089;  // std dev = 6,83e-08, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.09269127618926061;  // std dev = 1,85e-07, 365,000 (wgt'ed) examples reached here.  /* #neg=365 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08518475138839679;  // std dev = 5,77e-08, 151,000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.08518475138839678;  // std dev = 1,37e-07, 421,000 (wgt'ed) examples reached here.  /* #neg=421 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.0787767547310916;  // std dev = 6,23e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.07877675473109143;  // std dev = 2,19e-07, 387,000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07324622576333722;  // std dev = 0,000, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.0732462257633377;  // std dev = 0,000, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06842697784420267;  // std dev = 4,94e-08, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.06842697784420333;  // std dev = 0,000, 391,000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202626;  // std dev = 0,000, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0.1340070300080112;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   else return -0.06419184008202561;  // std dev = 1,91e-07, 392,000 (wgt'ed) examples reached here.  /* #neg=392 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063433
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.146 seconds
Total inference time: 1.451 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064353
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.202 seconds
Refined model CLL: -0.064353


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063433
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.139 seconds
Total inference time: 1.451 seconds
AUC ROC: 1.0
Total revision time: 10.139
Best scored revision CLL: -0.064353


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 14:27:47
{'F1': 1.0, 'Inference time': 1.451, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.106262, 'Inference time': 1.425, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 2.305, 'CLL': -0.319678}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.139, 'CLL': -0.063433}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048768;  // std dev = 5,37e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.14185106490048754;  // std dev = 1,52e-07, 493,000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.12544463852839227;  // std dev = 0,000, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,95e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11231637819360633;  // std dev = 2,36e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.11231637819360606;  // std dev = 0,000, 453,000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158311;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.10159632948783606;  // std dev = 1,93e-07, 451,000 (wgt'ed) examples reached here.  /* #neg=451 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601502;  // std dev = 1,33e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.09269127618926104;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.09269127618926108;  // std dev = 1,01e-07, 440,000 (wgt'ed) examples reached here.  /* #neg=440 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08518475138839679;  // std dev = 1,05e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.08518475138839678;  // std dev = 1,25e-07, 457,000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.07877675473109169;  // std dev = 5,16e-08, 450,000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.0732462257633372;  // std dev = 0,000, 474,000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06842697784420271;  // std dev = 1,05e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.06842697784420342;  // std dev = 0,000, 470,000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080112;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.06419184008202562;  // std dev = 2,16e-07, 521,000 (wgt'ed) examples reached here.  /* #neg=521 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.451 seconds
Total inference time: 1.282 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 14:27:52
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.282, 'Precision': [1.0, 0.5], 'Learning time': 3.451, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048766;  // std dev = 5,77e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.14185106490048724;  // std dev = 2,98e-07, 459,000 (wgt'ed) examples reached here.  /* #neg=459 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.227 seconds
Total inference time: 0.927 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 14:27:54
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.927, 'Precision': [nan, 0.5], 'Learning time': 1.227, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5221000552624407;  // std dev = 0,472, 491,000 (wgt'ed) examples reached here.  /* #neg=165 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048743;  // std dev = 2,02e-07, 473,000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4433496950123671;  // std dev = 0,473, 493,000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839233;  // std dev = 0,000, 471,000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3532518093680073;  // std dev = 0,475, 497,000 (wgt'ed) examples reached here.  /* #neg=171 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360578;  // std dev = 0,000, 515,000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.3191297044561626;  // std dev = 9,872, 465,000 (wgt'ed) examples reached here.  /* #neg=139 #pos=326 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783558;  // std dev = 3,04e-07, 459,000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.17346327520090873;  // std dev = 0,482, 515,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926114;  // std dev = 9,42e-08, 438,000 (wgt'ed) examples reached here.  /* #neg=438 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14528772719939628;  // std dev = 0,478, 503,000 (wgt'ed) examples reached here.  /* #neg=177 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,50e-07, 509,000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.11555269259580238;  // std dev = 10,611, 498,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109202;  // std dev = 1,38e-07, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12452741462717132;  // std dev = 0,462, 471,000 (wgt'ed) examples reached here.  /* #neg=145 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333709;  // std dev = 9,88e-08, 466,000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07151902139400969;  // std dev = 0,470, 487,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420353;  // std dev = 0,000, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.02551828598777511;  // std dev = 0,480, 509,000 (wgt'ed) examples reached here.  /* #neg=183 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820254;  // std dev = 2,43e-07, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.323449
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.581 seconds
Total inference time: 1.496 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.871431
   AUC PR    = 0.103954
   CLL	      = -0.301013
   Precision = 0.103954 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18833


Total scoring time: 2.628 seconds
Parameter learned model CLL: -0.301013


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.02e-07, 473, 0], 'true,true': [0.472, 165, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 471, 0], 'true,true': [0.473, 167, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 515, 0], 'true,true': [0.475, 171, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [3.04e-07, 459, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.872, 139, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.42e-08, 438, 0], 'true,true': [0.482, 189, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.5e-07, 509, 0], 'true,true': [0.478, 177, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [1.38e-07, 492, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.611, 172, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [9.88e-08, 466, 0], 'true,true': [0.462, 145, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 485, 0], 'true,true': [0.47, 161, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.43e-07, 482, 0], 'true,true': [0.48, 183, 326], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22312003019732227, 8.637675963257032e-17], 'true': [0.22312003019732227, nan]}, {'': [0.22399598434883652, -1.3577249727900003e-16], 'true': [0.22399598434883652, nan]}, {'': [0.22568408438558774, 0.0], 'true': [0.22568408438558774, nan]}, {'': [0.20956873627008754, 2.0124304062922227e-16], 'true': [0.20956873627008754, nan], 'true,true': [0.20956873627008754, nan]}, {'': [0.23230841738147046, 2.0278046111875004e-17], 'true': [0.23230841738147046, nan]}, {'': [0.22806303333082756, 4.449616837397484e-17], 'true': [0.22806303333082756, nan]}, {'': [0.2260931275302017, 3.8812674844619295e-17], 'true': [0.2260931275302017, nan], 'true,true': [0.2260931275302017, nan]}, {'': [0.2130805396657961, 2.096558501438064e-17], 'true': [0.2130805396657961, nan]}, {'': [0.22130210946624326, -1.2178116476300687e-16], 'true': [0.22130210946624326, nan]}, {'': [0.23026775410006822, 1.225391388175484e-16], 'true': [0.23026775410006822, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048818;  // std dev = 0,000, 174,000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.1418510649004876;  // std dev = 1,12e-07, 487,000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839136;  // std dev = 2,98e-08, 166,000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.12544463852839235;  // std dev = 0,000, 504,000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360639;  // std dev = 6,32e-08, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.11231637819360575;  // std dev = 0,000, 522,000 (wgt'ed) examples reached here.  /* #neg=522 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783644;  // std dev = 0,000, 149,000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.10159632948783544;  // std dev = 3,37e-07, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926075;  // std dev = 7,15e-08, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.09269127618926135;  // std dev = 0,000, 478,000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6,66e-08, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.08518475138839678;  // std dev = 1,48e-07, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,46e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109158;  // std dev = 6,83e-08, 148,000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.07877675473109214;  // std dev = 1,05e-07, 513,000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2,76e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333689;  // std dev = 6,83e-08, 166,000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.07324622576333692;  // std dev = 1,55e-07, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6,23e-08, 167,000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.06842697784420347;  // std dev = 0,000, 454,000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.06419184008202539;  // std dev = 2,45e-07, 490,000 (wgt'ed) examples reached here.  /* #neg=490 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.222 seconds
Total inference time: 1.725 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064216
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.975 seconds
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.405999999999999 seconds
Total inference time: 1.725 seconds
AUC ROC: 1.0
Total revision time: 10.405999999999999
Best scored revision CLL: -0.064216


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 14:28:09
{'parameter_1.0': {'F1': 0.106262, 'Inference time': 1.496, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 2.581, 'CLL': -0.323449}, 'F1': 1.0, 'Inference time': 1.725, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.405999999999999, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048766;  // std dev = 6,14e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.14185106490048843;  // std dev = 0,000, 604,000 (wgt'ed) examples reached here.  /* #neg=604 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.1254446385283923;  // std dev = 0,000, 578,000 (wgt'ed) examples reached here.  /* #neg=578 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360632;  // std dev = 3,16e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.11231637819360603;  // std dev = 0,000, 532,000 (wgt'ed) examples reached here.  /* #neg=532 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1015963294878363;  // std dev = 2,24e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.10159632948783547;  // std dev = 3,72e-07, 643,000 (wgt'ed) examples reached here.  /* #neg=643 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.09269127618926176;  // std dev = 0,000, 601,000 (wgt'ed) examples reached here.  /* #neg=601 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.08518475138839678;  // std dev = 1,52e-07, 627,000 (wgt'ed) examples reached here.  /* #neg=627 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,46e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109173;  // std dev = 2,36e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.0787767547310923;  // std dev = 0,000, 576,000 (wgt'ed) examples reached here.  /* #neg=576 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2,76e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.0732462257633369;  // std dev = 1,56e-07, 606,000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420268;  // std dev = 1,97e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.06842697784420361;  // std dev = 0,000, 591,000 (wgt'ed) examples reached here.  /* #neg=591 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.06419184008202553;  // std dev = 2,34e-07, 563,000 (wgt'ed) examples reached here.  /* #neg=563 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.231 seconds
Total inference time: 1.244 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 14:28:14
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.244, 'Precision': [1.0, 0.5], 'Learning time': 4.231, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048766;  // std dev = 6,83e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.1418510649004884;  // std dev = 0,000, 596,000 (wgt'ed) examples reached here.  /* #neg=596 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.305 seconds
Total inference time: 0.884 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 14:28:17
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.884, 'Precision': [nan, 0.5], 'Learning time': 1.305, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5692600462106242;  // std dev = 0,453, 90,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.37207889836955865;  // std dev = 0,490, 107,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839133;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.34884548102584295;  // std dev = 0,478, 99,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936062;  // std dev = 8,16e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.24612246310709734;  // std dev = 4,923, 103,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=64 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783626;  // std dev = 4,59e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24639498649746383;  // std dev = 0,466, 94,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926108;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13177540375870506;  // std dev = 0,483, 102,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.11141189414751412;  // std dev = 4,800, 100,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=64 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109165;  // std dev = 4,28e-08, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14706332024978677;  // std dev = 0,457, 91,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08151199871920542;  // std dev = 0,469, 95,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 4,53e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return -0.002176371605337438;  // std dev = 0,488, 105,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.298387
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.348 seconds
Total inference time: 1.667 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.86309
   AUC PR    = 0.097561
   CLL	      = -0.309355
   Precision = 0.097561 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.177778


Total scoring time: 1.252 seconds
Parameter learned model CLL: -0.309355


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.69e-08, 96, 0], 'true,true': [0.453, 26, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 107, 0], 'true,true': [0.49, 43, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.16e-08, 103, 0], 'true,true': [0.478, 35, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [4.59e-08, 96, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.923, 39, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 87, 0], 'true,true': [0.466, 30, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.58e-08, 98, 0], 'true,true': [0.483, 38, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [4.28e-08, 78, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.8, 36, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 89, 0], 'true,true': [0.457, 27, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.53e-08, 95, 0], 'true,true': [0.469, 31, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 91, 0], 'true,true': [0.488, 41, 64], 'true,false': [0.0, 0, 0]}]]
[{'': [0.20543209876543136, 7.864079757761526e-17], 'true': [0.20543209876543136, nan]}, {'': [0.24037033802078822, -6.22554967079527e-18], 'true': [0.24037033802078822, nan]}, {'': [0.2285481073359863, 6.467318590049455e-17], 'true': [0.2285481073359863, nan]}, {'': [0.23527193891978573, 2.1973164029039556e-17], 'true': [0.23527193891978573, nan], 'true,true': [0.23527193891978573, nan]}, {'': [0.21729289271163443, 0.0], 'true': [0.21729289271163443, nan]}, {'': [0.23375624759707794, 3.172065784643304e-17], 'true': [0.23375624759707794, nan]}, {'': [0.23039999999999977, 2.348548705937831e-17], 'true': [0.23039999999999977, nan], 'true,true': [0.23039999999999977, nan]}, {'': [0.20867045042869195, -7.484649604214538e-18], 'true': [0.20867045042869195, nan]}, {'': [0.2198337950138502, 2.162013258480568e-17], 'true': [0.2198337950138502, nan]}, {'': [0.23800453514739203, -1.2810265668751807e-17], 'true': [0.23800453514739203, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.14185106490048766;  // std dev = 7,88e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109542;  // std dev = 8,43e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.12544463852839133;  // std dev = 0,000, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1123163781936062;  // std dev = 7,88e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.41751358415831036;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.1015963294878362;  // std dev = 5,27e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.09400436000357398;  // std dev = 0,053, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.09269127618926103;  // std dev = 3,49e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08633436725527392;  // std dev = 0,049, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839682;  // std dev = 5,16e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07859821950068444;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.20975771563253567;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.07877675473109158;  // std dev = 5,96e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07902623550150177;  // std dev = 0,105, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07324622576333707;  // std dev = 0,000, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06791471486040294;  // std dev = 1,83e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return 0.1527438580936707;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.06842697784420265;  // std dev = 4,34e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801095;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.06908199559102617;  // std dev = 0,132, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.06419184008202626;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063345
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.766 seconds
Total inference time: 1.494 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065057
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.451 seconds
Refined model CLL: -0.065057


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063345
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.817 seconds
Total inference time: 1.494 seconds
AUC ROC: 1.0
Total revision time: 5.817
Best scored revision CLL: -0.065057


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 14:28:26
{'parameter_0.2': {'F1': 0.113837, 'Inference time': 1.667, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 1.348, 'CLL': -0.298387}, 'F1': 1.0, 'Inference time': 1.494, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.817, 'CLL': -0.063345}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.14185106490048766;  // std dev = 8,16e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109542;  // std dev = 8,43e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839136;  // std dev = 0,000, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.11231637819360621;  // std dev = 7,88e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.10159632948783623;  // std dev = 5,05e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.09269127618926101;  // std dev = 3,80e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.08518475138839683;  // std dev = 4,94e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07877675473109164;  // std dev = 5,58e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07324622576333707;  // std dev = 0,000, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936707;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06842697784420267;  // std dev = 4,94e-08, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06419184008202626;  // std dev = 0,000, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.187 seconds
Total inference time: 1.403 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 14:28:30
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.403, 'Precision': [1.0, 0.5], 'Learning time': 2.187, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.1418510649004878;  // std dev = 0,000, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.785 seconds
Total inference time: 0.889 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 14:28:32
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.889, 'Precision': [nan, 0.5], 'Learning time': 0.785, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5300239350995093;  // std dev = 0,470, 192,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004884;  // std dev = 0,000, 200,000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4162066308858314;  // std dev = 0,481, 203,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3368252492870815;  // std dev = 0,481, 203,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360663;  // std dev = 0,000, 203,000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.29138139092395;  // std dev = 6,574, 194,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=129 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783653;  // std dev = 0,000, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22110127242345518;  // std dev = 0,472, 194,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926058;  // std dev = 8,94e-08, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12430378429199583;  // std dev = 0,485, 207,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 6,66e-08, 164,000 (wgt'ed) examples reached here.  /* #neg=164 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.1454679112268125;  // std dev = 6,471, 191,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=129 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109147;  // std dev = 7,60e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08888113574953116;  // std dev = 0,475, 197,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333661;  // std dev = 1,31e-07, 217,000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07390487123278984;  // std dev = 0,473, 195,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 8,02e-08, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.036372082228571814;  // std dev = 0,479, 201,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.300244
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.706 seconds
Total inference time: 1.361 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.872139
   AUC PR    = 0.104453
   CLL	      = -0.295606
   Precision = 0.104453 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18915


Total scoring time: 1.782 seconds
Parameter learned model CLL: -0.295606


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 200, 0], 'true,true': [0.47, 63, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 192, 0], 'true,true': [0.481, 74, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 203, 0], 'true,true': [0.481, 74, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 206, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.574, 65, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.94e-08, 190, 0], 'true,true': [0.472, 65, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.66e-08, 164, 0], 'true,true': [0.485, 78, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [7.6e-08, 188, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.471, 62, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.31e-07, 217, 0], 'true,true': [0.475, 68, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.02e-08, 194, 0], 'true,true': [0.473, 66, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 176, 0], 'true,true': [0.479, 72, 129], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2204589843750043, -2.3980817331903383e-16], 'true': [0.2204589843750043, nan]}, {'': [0.2316484263146377, -4.625929269271486e-17], 'true': [0.2316484263146377, nan]}, {'': [0.2316484263146384, -4.594026308793751e-17], 'true': [0.2316484263146384, nan]}, {'': [0.22279200765224882, -8.838668739734256e-17], 'true': [0.22279200765224882, nan], 'true,true': [0.22279200765224882, nan]}, {'': [0.22279200765224902, 4.207160935421646e-17], 'true': [0.22279200765224902, nan]}, {'': [0.23482461667716872, 2.7078610356711135e-17], 'true': [0.23482461667716872, nan]}, {'': [0.2192374112551748, 3.0708296425802203e-17], 'true': [0.2192374112551748, nan], 'true,true': [0.2192374112551748, nan]}, {'': [0.22603004457728834, 7.879002110243047e-17], 'true': [0.22603004457728834, nan]}, {'': [0.2239053254437871, 3.3192234756834576e-17], 'true': [0.2239053254437871, nan]}, {'': [0.2298952996212965, -5.046468293750712e-18], 'true': [0.2298952996212965, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.14185106490048768;  // std dev = 5,77e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.14185106490048835;  // std dev = 0,000, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109555;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.12544463852839163;  // std dev = 0,000, 198,000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.1123163781936063;  // std dev = 3,94e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.1123163781936066;  // std dev = 0,000, 200,000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583092;  // std dev = 3,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.10159632948783623;  // std dev = 3,80e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.10159632948783645;  // std dev = 0,000, 150,000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601498;  // std dev = 2,49e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09269127618926104;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.09269127618926055;  // std dev = 9,31e-08, 201,000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694898;  // std dev = 4,21e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.0851847513883968;  // std dev = 7,45e-09, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.08518475138839678;  // std dev = 7,30e-08, 184,000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253534;  // std dev = 2,09e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07877675473109175;  // std dev = 1,05e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.07877675473109147;  // std dev = 7,74e-08, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.07324622576333663;  // std dev = 1,26e-07, 211,000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06842697784420268;  // std dev = 2,58e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.06842697784420262;  // std dev = 7,67e-08, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.06419184008202626;  // std dev = 0,000, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.389 seconds
Total inference time: 1.624 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064216
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.789 seconds
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.6659999999999995 seconds
Total inference time: 1.624 seconds
AUC ROC: 1.0
Total revision time: 7.6659999999999995
Best scored revision CLL: -0.064216


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 14:28:43
{'F1': 1.0, 'Inference time': 1.624, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.113837, 'Inference time': 1.361, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 1.706, 'CLL': -0.300244}, 'Recall': 1.0, 'Learning time': 7.6659999999999995, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.14185106490048846;  // std dev = 0,000, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109555;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.1254446385283918;  // std dev = 0,000, 246,000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.11231637819360671;  // std dev = 0,000, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583092;  // std dev = 3,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.10159632948783648;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601498;  // std dev = 2,49e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09269127618926104;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.09269127618926055;  // std dev = 6,32e-08, 241,000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694898;  // std dev = 4,21e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 243,000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253534;  // std dev = 2,09e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.07877675473109144;  // std dev = 6,83e-08, 240,000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.0732462257633367;  // std dev = 1,22e-07, 248,000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.06842697784420265;  // std dev = 4,21e-08, 246,000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06419184008202619;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.06419184008202623;  // std dev = 1,49e-08, 264,000 (wgt'ed) examples reached here.  /* #neg=264 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.707 seconds
Total inference time: 1.304 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 14:28:48
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.304, 'Precision': [1.0, 0.5], 'Learning time': 2.707, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.14185106490048846;  // std dev = 0,000, 218,000 (wgt'ed) examples reached here.  /* #neg=218 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.983 seconds
Total inference time: 0.898 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 14:28:50
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.898, 'Precision': [nan, 0.5], 'Learning time': 0.983, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5341071232528186;  // std dev = 0,468, 287,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048774;  // std dev = 1,52e-07, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.47788059213981804;  // std dev = 0,459, 278,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839194;  // std dev = 0,000, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.34952041123209826;  // std dev = 0,473, 293,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360682;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.25028372170842944;  // std dev = 8,329, 302,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=194 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21129719880432263;  // std dev = 0,472, 292,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926044;  // std dev = 1,72e-07, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08932001917653692;  // std dev = 0,491, 326,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.12733269269788242;  // std dev = 8,176, 296,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=194 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 4,21e-08, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12344858269510509;  // std dev = 0,465, 284,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333703;  // std dev = 8,82e-08, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07457105579886084;  // std dev = 0,472, 292,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420305;  // std dev = 0,000, 314,000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.054390553452533;  // std dev = 0,473, 293,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202607;  // std dev = 9,06e-08, 279,000 (wgt'ed) examples reached here.  /* #neg=279 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.304501
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.87 seconds
Total inference time: 1.525 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.868892
   AUC PR    = 0.102375
   CLL	      = -0.305275
   Precision = 0.102375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185735


Total scoring time: 2.171 seconds
Parameter learned model CLL: -0.305275


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.52e-07, 316, 0], 'true,true': [0.468, 93, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 272, 0], 'true,true': [0.459, 84, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 303, 0], 'true,true': [0.473, 99, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 288, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.329, 108, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.72e-07, 300, 0], 'true,true': [0.472, 98, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.05e-07, 305, 0], 'true,true': [0.491, 132, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [4.21e-08, 289, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.176, 102, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.82e-08, 316, 0], 'true,true': [0.465, 90, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 314, 0], 'true,true': [0.472, 98, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [9.06e-08, 279, 0], 'true,true': [0.473, 99, 194], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21903871602180922, 7.307797124114954e-17], 'true': [0.21903871602180922, nan]}, {'': [0.21085865120853162, -7.18379604169219e-17], 'true': [0.21085865120853162, nan]}, {'': [0.22371838926487475, -6.888512496024073e-17], 'true': [0.22371838926487475, nan]}, {'': [0.22972676636989367, -5.551115123125783e-17], 'true': [0.22972676636989367, nan], 'true,true': [0.22972676636989367, nan]}, {'': [0.22297804466128873, 9.917992353318065e-17], 'true': [0.22297804466128873, nan]}, {'': [0.2409575068689076, 3.6400754905742835e-17], 'true': [0.2409575068689076, nan]}, {'': [0.22584915997078117, 6.146563458132355e-18], 'true': [0.22584915997078117, nan], 'true,true': [0.22584915997078117, nan]}, {'': [0.216474905772666, 2.4593548013848403e-17], 'true': [0.216474905772666, nan]}, {'': [0.22297804466128762, -6.788624863950002e-17], 'true': [0.22297804466128762, nan]}, {'': [0.22371838926487195, 2.944677556353462e-17], 'true': [0.22371838926487195, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.14185106490048768;  // std dev = 6,99e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else return -0.14185106490048788;  // std dev = 7,88e-08, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210957;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.12544463852839147;  // std dev = 0,000, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.125444638528392;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11231637819360625;  // std dev = 6,32e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.11231637819360679;  // std dev = 0,000, 304,000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583099;  // std dev = 3,04e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1015963294878363;  // std dev = 2,58e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.1015963294878366;  // std dev = 0,000, 280,000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.320711847160149;  // std dev = 3,95e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.09269127618926108;  // std dev = 0,000, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.09269127618926043;  // std dev = 1,43e-07, 286,000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.08518475138839679;  // std dev = 3,65e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07877675473109164;  // std dev = 4,83e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.07877675473109143;  // std dev = 4,21e-08, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.07324622576333686;  // std dev = 1,11e-07, 270,000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06842697784420267;  // std dev = 3,80e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.06842697784420304;  // std dev = 0,000, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.06419184008202597;  // std dev = 1,13e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.685 seconds
Total inference time: 1.538 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064221
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.647 seconds
Refined model CLL: -0.064221


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.373000000000001 seconds
Total inference time: 1.538 seconds
AUC ROC: 1.0
Total revision time: 8.373000000000001
Best scored revision CLL: -0.064221


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 14:29:02
{'F1': 1.0, 'Inference time': 1.538, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.113837, 'Inference time': 1.525, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 1.87, 'CLL': -0.304501}, 'Recall': 1.0, 'Learning time': 8.373000000000001, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.14185106490048782;  // std dev = 1,12e-07, 358,000 (wgt'ed) examples reached here.  /* #neg=358 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.12544463852839208;  // std dev = 0,000, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.11231637819360683;  // std dev = 0,000, 328,000 (wgt'ed) examples reached here.  /* #neg=328 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583099;  // std dev = 3,04e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.10159632948783652;  // std dev = 0,000, 333,000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.320711847160149;  // std dev = 3,95e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.09269127618926096;  // std dev = 9,13e-09, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.0926912761892605;  // std dev = 1,38e-07, 338,000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.08518475138839682;  // std dev = 1,75e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 348,000 (wgt'ed) examples reached here.  /* #neg=348 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109148;  // std dev = 2,98e-08, 356,000 (wgt'ed) examples reached here.  /* #neg=356 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.07324622576333713;  // std dev = 6,32e-08, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06842697784420276;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.0684269778442032;  // std dev = 0,000, 370,000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.06419184008202602;  // std dev = 9,88e-08, 339,000 (wgt'ed) examples reached here.  /* #neg=339 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.015 seconds
Total inference time: 1.391 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 14:29:07
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.391, 'Precision': [1.0, 0.5], 'Learning time': 3.015, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1418510649004877;  // std dev = 3,33e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.14185106490048785;  // std dev = 8,43e-08, 354,000 (wgt'ed) examples reached here.  /* #neg=354 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.174 seconds
Total inference time: 0.918 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 14:29:09
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.918, 'Precision': [nan, 0.5], 'Learning time': 1.174, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5040342218825505;  // std dev = 0,478, 401,000 (wgt'ed) examples reached here.  /* #neg=142 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048727;  // std dev = 3,01e-07, 415,000 (wgt'ed) examples reached here.  /* #neg=415 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4578825199368841;  // std dev = 0,469, 385,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839224;  // std dev = 0,000, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.36558714771715023;  // std dev = 0,471, 388,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360642;  // std dev = 0,000, 361,000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.3066410485155476;  // std dev = 8,951, 375,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=259 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783594;  // std dev = 2,15e-07, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.23388234677179806;  // std dev = 0,461, 374,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 1,33e-07, 410,000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14371402002975645;  // std dev = 0,473, 392,000 (wgt'ed) examples reached here.  /* #neg=133 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,21e-07, 384,000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.09476156794926911;  // std dev = 9,555, 400,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=259 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 6,99e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07966477918676208;  // std dev = 0,475, 395,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333724;  // std dev = 0,000, 410,000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06033640240861169;  // std dev = 0,475, 395,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420322;  // std dev = 0,000, 355,000 (wgt'ed) examples reached here.  /* #neg=355 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07902206644803805;  // std dev = 0,463, 376,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202565;  // std dev = 1,83e-07, 380,000 (wgt'ed) examples reached here.  /* #neg=380 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.309699
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.699 seconds
Total inference time: 1.432 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.869249
   AUC PR    = 0.102737
   CLL	      = -0.30958
   Precision = 0.102737 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.186331


Total scoring time: 2.234 seconds
Parameter learned model CLL: -0.30958


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.01e-07, 415, 0], 'true,true': [0.478, 142, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 390, 0], 'true,true': [0.469, 126, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 361, 0], 'true,true': [0.471, 129, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [2.15e-07, 397, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.951, 116, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.33e-07, 410, 0], 'true,true': [0.461, 115, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.21e-07, 384, 0], 'true,true': [0.473, 133, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [6.99e-08, 347, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.555, 141, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 410, 0], 'true,true': [0.475, 136, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 355, 0], 'true,true': [0.475, 136, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.83e-07, 380, 0], 'true,true': [0.463, 117, 259], 'true,false': [0.0, 0, 0]}]]
[{'': [0.228717483100233, 2.1829927423954886e-16], 'true': [0.228717483100233, nan]}, {'': [0.2201652892561939, -1.2753331154668464e-16], 'true': [0.2201652892561939, nan]}, {'': [0.22193511531511975, -2.952393638892383e-17], 'true': [0.22193511531511975, nan]}, {'': [0.21364622222222435, 1.1633571240404662e-16], 'true': [0.21364622222222435, nan], 'true,true': [0.21364622222222435, nan]}, {'': [0.21293860276244644, 4.332577657073782e-17], 'true': [0.21293860276244644, nan]}, {'': [0.2241709183673459, 3.8163916471489756e-17], 'true': [0.2241709183673459, nan]}, {'': [0.2282437500000014, 1.4077755931846366e-17], 'true': [0.2282437500000014, nan], 'true,true': [0.2282437500000014, nan]}, {'': [0.22575869251722447, -1.0831444142684454e-18], 'true': [0.22575869251722447, nan]}, {'': [0.22575869251722547, -8.881784197001253e-17], 'true': [0.22575869251722547, nan]}, {'': [0.21434331145314572, 8.764918615461762e-17], 'true': [0.21434331145314572, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.141851064900488;  // std dev = 0,000, 142,000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.1418510649004875;  // std dev = 2,44e-07, 360,000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.1254446385283911;  // std dev = 7,30e-08, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.12544463852839222;  // std dev = 0,000, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 4,13e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.1123163781936062;  // std dev = 9,19e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.11231637819360635;  // std dev = 0,000, 373,000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.417513584158311;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.10159632948783638;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.1015963294878361;  // std dev = 1,70e-07, 374,000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601502;  // std dev = 1,46e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.09269127618926087;  // std dev = 7,30e-08, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.09269127618926057;  // std dev = 1,91e-07, 360,000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.08518475138839682;  // std dev = 6,23e-08, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.08518475138839678;  // std dev = 1,19e-07, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07877675473109158;  // std dev = 6,99e-08, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.07877675473109143;  // std dev = 8,43e-08, 359,000 (wgt'ed) examples reached here.  /* #neg=359 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07324622576333716;  // std dev = 0,000, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.07324622576333771;  // std dev = 0,000, 400,000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06842697784420267;  // std dev = 5,05e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.06842697784420329;  // std dev = 0,000, 379,000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.06419184008202562;  // std dev = 1,90e-07, 389,000 (wgt'ed) examples reached here.  /* #neg=389 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.972 seconds
Total inference time: 1.436 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064223
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.914 seconds
Refined model CLL: -0.064223


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.818999999999999 seconds
Total inference time: 1.436 seconds
AUC ROC: 1.0
Total revision time: 9.818999999999999
Best scored revision CLL: -0.064223


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 14:29:22
{'F1': 1.0, 'Inference time': 1.436, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.113837, 'Inference time': 1.432, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 2.699, 'CLL': -0.309699}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 9.818999999999999, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.14185106490048766;  // std dev = 5,77e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.14185106490048754;  // std dev = 1,58e-07, 501,000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839227;  // std dev = 0,000, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 4,13e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.11231637819360633;  // std dev = 2,79e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.11231637819360597;  // std dev = 0,000, 479,000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158311;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.10159632948783621;  // std dev = 4,08e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.10159632948783594;  // std dev = 2,29e-07, 459,000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601502;  // std dev = 1,46e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.09269127618926132;  // std dev = 0,000, 495,000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.08518475138839678;  // std dev = 1,35e-07, 512,000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07877675473109177;  // std dev = 1,29e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07877675473109182;  // std dev = 0,000, 473,000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07324622576333704;  // std dev = 1,18e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.07324622576333722;  // std dev = 0,000, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.06842697784420347;  // std dev = 0,000, 486,000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.06419184008202569;  // std dev = 1,90e-07, 474,000 (wgt'ed) examples reached here.  /* #neg=474 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.52 seconds
Total inference time: 1.224 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 14:29:27
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.224, 'Precision': [1.0, 0.5], 'Learning time': 3.52, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.14185106490048768;  // std dev = 4,34e-08, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.14185106490048738;  // std dev = 2,31e-07, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.316 seconds
Total inference time: 0.889 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 14:29:30
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.889, 'Precision': [nan, 0.5], 'Learning time': 1.316, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.537394218118376;  // std dev = 0,467, 477,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048738;  // std dev = 2,23e-07, 469,000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4447720937288036;  // std dev = 0,472, 487,000 (wgt'ed) examples reached here.  /* #neg=163 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839235;  // std dev = 0,000, 500,000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.32782717946221224;  // std dev = 0,482, 511,000 (wgt'ed) examples reached here.  /* #neg=187 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360593;  // std dev = 0,000, 468,000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.2937046392197464;  // std dev = 10,284, 481,000 (wgt'ed) examples reached here.  /* #neg=157 #pos=324 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783547;  // std dev = 3,32e-07, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.18671375662951137;  // std dev = 0,481, 508,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926146;  // std dev = 0,000, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1439811682627348;  // std dev = 0,480, 505,000 (wgt'ed) examples reached here.  /* #neg=181 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,38e-07, 465,000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.15144164371881705;  // std dev = 10,103, 473,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=324 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109194;  // std dev = 0,000, 478,000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09569057277004682;  // std dev = 0,471, 486,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333703;  // std dev = 1,19e-07, 476,000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.05898487921632297;  // std dev = 0,476, 496,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420355;  // std dev = 0,000, 502,000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.05691715844096361;  // std dev = 0,472, 487,000 (wgt'ed) examples reached here.  /* #neg=163 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202544;  // std dev = 2,31e-07, 460,000 (wgt'ed) examples reached here.  /* #neg=460 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.305317
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.603 seconds
Total inference time: 1.314 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.86826
   AUC PR    = 0.102112
   CLL	      = -0.307176
   Precision = 0.102112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185302


Total scoring time: 2.29 seconds
Parameter learned model CLL: -0.307176


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.23e-07, 469, 0], 'true,true': [0.467, 153, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 500, 0], 'true,true': [0.472, 163, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 468, 0], 'true,true': [0.482, 187, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [3.32e-07, 483, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.284, 157, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 499, 0], 'true,true': [0.481, 184, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.38e-07, 465, 0], 'true,true': [0.48, 181, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 478, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.103, 149, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.19e-07, 476, 0], 'true,true': [0.471, 162, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 502, 0], 'true,true': [0.476, 172, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.31e-07, 460, 0], 'true,true': [0.472, 163, 324], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21787112851548868, 1.0605115459105973e-16], 'true': [0.21787112851548868, nan]}, {'': [0.22267665672999654, -1.403321903126198e-16], 'true': [0.22267665672999654, nan]}, {'': [0.23203036140333716, -7.591268544445516e-18], 'true': [0.23203036140333716, nan]}, {'': [0.21986419491616913, 2.280209607511709e-16], 'true': [0.21986419491616913, nan], 'true,true': [0.21986419491616913, nan]}, {'': [0.23101246202492667, -2.847866676393187e-17], 'true': [0.23101246202492667, nan]}, {'': [0.2299539260856755, 4.1066314029145573e-17], 'true': [0.2299539260856755, nan]}, {'': [0.21577891109333078, -2.3226423109312897e-17], 'true': [0.21577891109333078, nan], 'true,true': [0.21577891109333078, nan]}, {'': [0.2222222222222199, 2.9854736796642864e-17], 'true': [0.2222222222222199, nan]}, {'': [0.22652185223725163, -1.2031102099523608e-16], 'true': [0.22652185223725163, nan]}, {'': [0.22267665673001066, 1.1633206475420118e-16], 'true': [0.22267665673001066, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048824;  // std dev = 0,000, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.14185106490048782;  // std dev = 0,000, 509,000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839138;  // std dev = 2,11e-08, 163,000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.1254446385283923;  // std dev = 0,000, 500,000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360628;  // std dev = 8,82e-08, 158,000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.11231637819360582;  // std dev = 0,000, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783648;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.10159632948783538;  // std dev = 3,54e-07, 503,000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926072;  // std dev = 7,45e-08, 166,000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.09269127618926139;  // std dev = 0,000, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6,32e-08, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.08518475138839678;  // std dev = 1,43e-07, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109158;  // std dev = 6,91e-08, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.07877675473109179;  // std dev = 0,000, 455,000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2,73e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333681;  // std dev = 9,13e-08, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.0732462257633372;  // std dev = 4,71e-08, 448,000 (wgt'ed) examples reached here.  /* #neg=448 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6,66e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.06842697784420342;  // std dev = 0,000, 426,000 (wgt'ed) examples reached here.  /* #neg=426 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.06419184008202539;  // std dev = 2,45e-07, 494,000 (wgt'ed) examples reached here.  /* #neg=494 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.394 seconds
Total inference time: 1.698 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064225
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.329 seconds
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.616000000000001 seconds
Total inference time: 1.698 seconds
AUC ROC: 1.0
Total revision time: 10.616000000000001
Best scored revision CLL: -0.064225


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 14:29:44
{'parameter_1.0': {'F1': 0.113837, 'Inference time': 1.314, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 2.603, 'CLL': -0.305317}, 'F1': 1.0, 'Inference time': 1.698, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.616000000000001, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048768;  // std dev = 4,94e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.14185106490048832;  // std dev = 0,000, 591,000 (wgt'ed) examples reached here.  /* #neg=591 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.1254446385283923;  // std dev = 0,000, 594,000 (wgt'ed) examples reached here.  /* #neg=594 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360628;  // std dev = 4,59e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.11231637819360592;  // std dev = 0,000, 624,000 (wgt'ed) examples reached here.  /* #neg=624 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1015963294878363;  // std dev = 2,24e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.10159632948783552;  // std dev = 3,48e-07, 592,000 (wgt'ed) examples reached here.  /* #neg=592 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.09269127618926165;  // std dev = 0,000, 577,000 (wgt'ed) examples reached here.  /* #neg=577 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.08518475138839678;  // std dev = 1,46e-07, 600,000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109177;  // std dev = 1,05e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.07877675473109241;  // std dev = 0,000, 594,000 (wgt'ed) examples reached here.  /* #neg=594 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2,73e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07324622576333695;  // std dev = 1,43e-07, 594,000 (wgt'ed) examples reached here.  /* #neg=594 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0684269778442027;  // std dev = 1,39e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.06842697784420357;  // std dev = 0,000, 577,000 (wgt'ed) examples reached here.  /* #neg=577 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.06419184008202548;  // std dev = 2,46e-07, 584,000 (wgt'ed) examples reached here.  /* #neg=584 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.109 seconds
Total inference time: 1.466 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 14:29:50
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.466, 'Precision': [1.0, 0.5], 'Learning time': 4.109, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.14185106490048857;  // std dev = 0,000, 620,000 (wgt'ed) examples reached here.  /* #neg=620 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.651 seconds
Total inference time: 0.927 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 14:29:52
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.927, 'Precision': [nan, 0.5], 'Learning time': 1.651, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4930695700201471;  // std dev = 0,481, 63,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048768;  // std dev = 4,94e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4321603427485747;  // std dev = 0,478, 62,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3724039502786471;  // std dev = 0,471, 60,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936063;  // std dev = 3,33e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.23839983622245822;  // std dev = 3,922, 65,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783619;  // std dev = 4,21e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14532119013029735;  // std dev = 0,494, 69,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926105;  // std dev = 0,000, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2843435133754976;  // std dev = 0,430, 53,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.022050200842059126;  // std dev = 4,179, 71,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=40 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 2,36e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.13116634258540746;  // std dev = 0,467, 59,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08760687317931135;  // std dev = 0,471, 60,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0684269778442027;  // std dev = 1,97e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.05548412103230854;  // std dev = 0,475, 61,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.272035
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.178 seconds
Total inference time: 1.551 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.862254
   AUC PR    = 0.063593
   CLL	      = -0.310385
   Precision = 0.063593 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.119581


Total scoring time: 1.259 seconds
Parameter learned model CLL: -0.310385


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.94e-08, 46, 0], 'true,true': [0.481, 23, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 60, 0], 'true,true': [0.478, 22, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.33e-08, 52, 0], 'true,true': [0.471, 20, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [4.21e-08, 63, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.922, 25, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 47, 0], 'true,true': [0.494, 29, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.83e-08, 60, 0], 'true,true': [0.43, 13, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [2.36e-08, 60, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.179, 31, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 61, 0], 'true,true': [0.467, 19, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.97e-08, 59, 0], 'true,true': [0.471, 20, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 67, 0], 'true,true': [0.475, 21, 40], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2317964222726136, 5.3097622916855314e-17], 'true': [0.2317964222726136, nan]}, {'': [0.22892819979188447, -4.070817756958907e-17], 'true': [0.22892819979188447, nan]}, {'': [0.22222222222222104, 2.1350442781253012e-17], 'true': [0.22222222222222104, nan]}, {'': [0.23668639053254426, 2.819614030794048e-17], 'true': [0.23668639053254426, nan], 'true,true': [0.23668639053254426, nan]}, {'': [0.24364629279563102, -3.543264972207946e-18], 'true': [0.24364629279563102, nan]}, {'': [0.1851192595229617, 5.551115123125783e-18], 'true': [0.1851192595229617, nan]}, {'': [0.24598293989287862, 9.25185853854297e-18], 'true': [0.24598293989287862, nan], 'true,true': [0.24598293989287862, nan]}, {'': [0.21832806664751525, -9.10018872643571e-19], 'true': [0.21832806664751525, nan]}, {'': [0.2222222222222223, 6.586068790149234e-18], 'true': [0.2222222222222223, nan]}, {'': [0.2257457672668638, -4.9711478714559245e-18], 'true': [0.2257457672668638, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.8581489350995117;  // std dev = 2,46e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.14185106490048766;  // std dev = 6,14e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.719473412210955;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.1254446385283916;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.5553664367462842;  // std dev = 1,40e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.11231637819360629;  // std dev = 3,94e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.4175135841583102;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.10159632948783619;  // std dev = 4,21e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926103;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.09269127618926107;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.08518475138839679;  // std dev = 1,97e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.20975771563253542;  // std dev = 5,96e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.07877675473109179;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.17709649774527753;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936709;  // std dev = 3,94e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.06842697784420268;  // std dev = 2,69e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1340070300080111;  // std dev = 1,83e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.0641918400820262;  // std dev = 6,45e-09, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.06419184008202625;  // std dev = 0,000, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.599 seconds
Total inference time: 1.542 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 0.998831
   AUC PR    = 0.888889
   CLL	      = -0.068271
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total scoring time: 1.188 seconds
Refined model CLL: -0.068271


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 5.223999999999999 seconds
Total inference time: 1.542 seconds
AUC ROC: 0.985041
Total revision time: 5.223999999999999
Best scored revision CLL: -0.068271


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 14:30:02
{'parameter_0.2': {'F1': 0.309835, 'Inference time': 1.551, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.178, 'CLL': -0.272035}, 'F1': 0.770563, 'Inference time': 1.542, 'Precision': [0.626761, 0.5], 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'Learning time': 5.223999999999999, 'CLL': -0.124249}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 6,83e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1254446385283915;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else if ( female(A) )
%   | then return 0.7194734122109543;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.6612032018151375;  // std dev = 0,214, 29,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5650450000474204;  // std dev = 0,042, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.2199595469833062;  // std dev = 0,009, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1138399084100301;  // std dev = 0,104, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10145735438774552;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else if ( female(A) )
%   | then return 0.4151616923550436;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.4075292678328985;  // std dev = 0,114, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09257490130014905;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.32889643556674836;  // std dev = 0,043, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.2535576813946731;  // std dev = 0,011, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.085085976222075;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.26076183082193416;  // std dev = 0,037, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.20956506821950027;  // std dev = 0,013, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07869193165442716;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.21370588158512843;  // std dev = 0,033, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.17742063522637377;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07317263708689838;  // std dev = 1,29e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1799915932337625;  // std dev = 0,029, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.15299280403967327;  // std dev = 0,010, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06836256046416896;  // std dev = 2,89e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.154939626167141;  // std dev = 0,025, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.13356036180937805;  // std dev = 0,007, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06413500153655062;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else if ( female(A) )
%   | then return 0.11235945667046074;  // std dev = 0,066, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.12909354218869443;  // std dev = 0,047, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.125682
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.678 seconds
Total inference time: 1.368 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 14:30:05
{'F1': 0.770563, 'Recall': 1.0, 'Inference time': 1.368, 'Precision': [0.626761, 0.5], 'Learning time': 1.678, 'AUC PR': 1.0, 'CLL': -0.125682, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.763 seconds
Total inference time: 0.96 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 14:30:07
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.96, 'Precision': [nan, 0.5], 'Learning time': 0.763, 'AUC PR': 1.0, 'CLL': -0.188432, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.48122585817643404;  // std dev = 0,485, 130,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 7,30e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4168846601112006;  // std dev = 0,483, 129,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839133;  // std dev = 0,000, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.359337636877559;  // std dev = 0,478, 125,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360618;  // std dev = 8,69e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.27526298481042294;  // std dev = 5,379, 126,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=81 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783633;  // std dev = 0,000, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21965300982341457;  // std dev = 0,476, 124,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 4,94e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.17044329646774928;  // std dev = 0,474, 123,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0851847513883968;  // std dev = 6,66e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.1173366666032289;  // std dev = 5,340, 125,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=81 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109157;  // std dev = 6,32e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09347664313872557;  // std dev = 0,476, 124,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333722;  // std dev = 0,000, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.050172399129613784;  // std dev = 0,482, 128,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 4,71e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12202652020143447;  // std dev = 0,451, 113,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.277013
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.435 seconds
Total inference time: 1.439 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.861819
   AUC PR    = 0.064133
   CLL	      = -0.318226
   Precision = 0.064133 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.120536


Total scoring time: 1.957 seconds
Parameter learned model CLL: -0.318226


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.3e-08, 114, 0], 'true,true': [0.485, 49, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 133, 0], 'true,true': [0.483, 48, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.69e-08, 112, 0], 'true,true': [0.478, 44, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 109, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [5.379, 45, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.94e-08, 100, 0], 'true,true': [0.476, 43, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.66e-08, 126, 0], 'true,true': [0.474, 42, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [6.32e-08, 108, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [5.34, 44, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 133, 0], 'true,true': [0.476, 43, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.71e-08, 97, 0], 'true,true': [0.482, 47, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 128, 0], 'true,true': [0.451, 32, 81], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23485207100591848, 4.674623261579606e-17], 'true': [0.23485207100591848, nan]}, {'': [0.23363980530016198, -6.678033230828009e-18], 'true': [0.23363980530016198, nan]}, {'': [0.22809599999999972, 6.740639792367021e-17], 'true': [0.22809599999999972, nan]}, {'': [0.22959183673469613, -4.0742129344042444e-18], 'true': [0.22959183673469613, nan], 'true,true': [0.22959183673469613, nan]}, {'': [0.22652185223725227, 2.4424906541753444e-17], 'true': [0.22652185223725227, nan]}, {'': [0.22486615110053487, 3.52451753849256e-17], 'true': [0.22486615110053487, nan]}, {'': [0.22809599999999952, 3.700743415417188e-17], 'true': [0.22809599999999952, nan], 'true,true': [0.22809599999999952, nan]}, {'': [0.2265218522372524, -1.9199345538630526e-17], 'true': [0.2265218522372524, nan]}, {'': [0.23236083984375033, 2.2891196384023845e-17], 'true': [0.23236083984375033, nan]}, {'': [0.2029916203304879, -1.5612511283791264e-17], 'true': [0.2029916203304879, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 4,47e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839158;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0.7194734122109537;  // std dev = 2,53e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.12544463852839133;  // std dev = 0,000, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462836;  // std dev = 3,42e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.11870709329091614;  // std dev = 0,329, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.11231637819360618;  // std dev = 8,69e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10101450342321114;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.4175135841583104;  // std dev = 8,43e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.10159632948783637;  // std dev = 0,000, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601501;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( actor(A) )
%   | | then return -0.09220390541993362;  // std dev = 0,000, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.16335290684248266;  // std dev = 0,390, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926089;  // std dev = 6,50e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08417547018245054;  // std dev = 0,011, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.0851847513883968;  // std dev = 6,66e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( actor(A) )
%   | | then return -0.07846437935921059;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.1515535216239278;  // std dev = 0,428, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109153;  // std dev = 7,60e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527716;  // std dev = 3,65e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( actor(A) )
%   | | then return -0.07297517332357815;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.21059026250388513;  // std dev = 0,360, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333711;  // std dev = 4,21e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0673960575639629;  // std dev = 0,022, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.15274385809367116;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.06842697784420265;  // std dev = 6,14e-08, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06243901091483637;  // std dev = 0,032, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0.1340070300080109;  // std dev = 5,58e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.06419184008202626;  // std dev = 3,16e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.084033
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 2.34 seconds
Total inference time: 1.428 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064654
   Precision = 0.9 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.947368


Total scoring time: 2.079 seconds
Refined model CLL: -0.064654


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.084033
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 7.811 seconds
Total inference time: 1.428 seconds
AUC ROC: 1.0
Total revision time: 7.811
Best scored revision CLL: -0.064654


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 14:30:18
{'F1': 0.770563, 'Inference time': 1.428, 'Precision': [0.626761, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.309835, 'Inference time': 1.439, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.435, 'CLL': -0.277013}, 'Recall': 1.0, 'Learning time': 7.811, 'CLL': -0.084033}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048816;  // std dev = 0,000, 161,000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839113;  // std dev = 7,30e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109537;  // std dev = 2,53e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360615;  // std dev = 1,04e-07, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462836;  // std dev = 3,42e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783648;  // std dev = 0,000, 157,000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583104;  // std dev = 8,43e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926067;  // std dev = 8,02e-08, 160,000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601501;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A) )
%   | then return -0.08518475138839678;  // std dev = 6,83e-08, 160,000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.2500955028989253;  // std dev = 0,571, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07851706289370433;  // std dev = 0,022, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527716;  // std dev = 3,65e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( actor(A) )
%   | then return -0.07326385591484265;  // std dev = 2,79e-08, 136,000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.2677383520039472;  // std dev = 0,502, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07326385591484273;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06804932325295233;  // std dev = 0,034, 150,000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367116;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080109;  // std dev = 5,58e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(A) )
%   | then return -0.0642290772677748;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else if ( actor(B) )
%   | | then return -0.058942282415335515;  // std dev = 0,022, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.4560332569999807;  // std dev = 0,480, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.084
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 2.303 seconds
Total inference time: 1.451 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 14:30:22
{'F1': 0.770563, 'Recall': 1.0, 'Inference time': 1.451, 'Precision': [0.626761, 0.5], 'Learning time': 2.303, 'AUC PR': 1.0, 'CLL': -0.084, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.141851064900488;  // std dev = 0,000, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.891 seconds
Total inference time: 0.98 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 14:30:24
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.98, 'Precision': [nan, 0.5], 'Learning time': 0.891, 'AUC PR': 1.0, 'CLL': -0.188432, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.47121426173267505;  // std dev = 0,487, 199,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048838;  // std dev = 0,000, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.39162493240083474;  // std dev = 0,490, 203,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839163;  // std dev = 0,000, 198,000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4490647189934811;  // std dev = 0,444, 167,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936063;  // std dev = 5,16e-08, 161,000 (wgt'ed) examples reached here.  /* #neg=161 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.282701294875475;  // std dev = 6,412, 184,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783652;  // std dev = 0,000, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20357535272263524;  // std dev = 0,476, 187,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926061;  // std dev = 8,43e-08, 178,000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1563688381878673;  // std dev = 0,475, 186,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.09685603977570258;  // std dev = 6,669, 192,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109151;  // std dev = 7,96e-08, 145,000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08641377324764399;  // std dev = 0,477, 188,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333667;  // std dev = 1,13e-07, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09411709140511096;  // std dev = 0,467, 180,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 7,81e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08292959184539173;  // std dev = 0,463, 177,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 174,000 (wgt'ed) examples reached here.  /* #neg=174 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.278055
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.634 seconds
Total inference time: 1.463 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.860094
   AUC PR    = 0.063641
   CLL	      = -0.322827
   Precision = 0.063641 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.119667


Total scoring time: 2.671 seconds
Parameter learned model CLL: -0.322827


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 196, 0], 'true,true': [0.487, 77, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 198, 0], 'true,true': [0.49, 81, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.16e-08, 161, 0], 'true,true': [0.444, 45, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 182, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.412, 62, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.43e-08, 178, 0], 'true,true': [0.476, 65, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.6e-08, 185, 0], 'true,true': [0.475, 64, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [7.96e-08, 145, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.669, 70, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.13e-07, 191, 0], 'true,true': [0.477, 66, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.81e-08, 188, 0], 'true,true': [0.467, 58, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 174, 0], 'true,true': [0.463, 55, 122], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23721623191333946, -2.333734112987574e-16], 'true': [0.23721623191333946, nan]}, {'': [0.23980198500327693, -3.140024716111554e-17], 'true': [0.23980198500327693, nan]}, {'': [0.19685180537129168, 1.654990844161724e-17], 'true': [0.19685180537129168, nan]}, {'': [0.22341682419659784, -8.540177112501205e-17], 'true': [0.22341682419659784, nan], 'true,true': [0.22341682419659784, nan]}, {'': [0.22677228402299282, 3.991813122247754e-17], 'true': [0.22677228402299282, nan]}, {'': [0.22569083130997952, 3.120626880027467e-17], 'true': [0.22569083130997952, nan]}, {'': [0.23166232638888806, 4.364324993354064e-17], 'true': [0.23166232638888806, nan], 'true,true': [0.23166232638888806, nan]}, {'': [0.22781801720235428, 6.626462031794128e-17], 'true': [0.22781801720235428, nan]}, {'': [0.2183950617283949, 3.2479928911906176e-17], 'true': [0.2183950617283949, nan]}, {'': [0.21417855660889282, -5.742532885992189e-18], 'true': [0.21417855660889282, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.14185106490048768;  // std dev = 6,50e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.1418510649004882;  // std dev = 0,000, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839158;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0.7194734122109553;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.12544463852839158;  // std dev = 0,000, 187,000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360625;  // std dev = 5,37e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0.5553664367462834;  // std dev = 4,69e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.11231637819360638;  // std dev = 6,66e-08, 165,000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783615;  // std dev = 5,77e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0.4175135841583093;  // std dev = 3,53e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.10159632948783648;  // std dev = 0,000, 158,000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926107;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0.3207118471601499;  // std dev = 2,19e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.09269127618926071;  // std dev = 7,30e-08, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0851847513883968;  // std dev = 1,97e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0.2551722425694898;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.08518475138839678;  // std dev = 7,15e-08, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109168;  // std dev = 3,73e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0.2097577156325354;  // std dev = 1,93e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.0787767547310915;  // std dev = 8,23e-08, 151,000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0.1770964977452781;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.0732462257633368;  // std dev = 8,09e-08, 154,000 (wgt'ed) examples reached here.  /* #neg=154 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936714;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else if ( actor(A) )
%   | | then return -0.06842697784420267;  // std dev = 2,98e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( female(B) )
%   | | | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.24062407956753587;  // std dev = 0,720, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420262;  // std dev = 7,96e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06389645678189118;  // std dev = 0,013, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0.1340070300080111;  // std dev = 5,16e-08, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.06419184008202626;  // std dev = 0,000, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.093109
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 2.588 seconds
Total inference time: 1.707 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064942
   Precision = 0.924242 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.96063


Total scoring time: 1.917 seconds
Refined model CLL: -0.064942


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.093109
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 8.81 seconds
Total inference time: 1.707 seconds
AUC ROC: 1.0
Total revision time: 8.81
Best scored revision CLL: -0.064942


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 14:30:37
{'F1': 0.770563, 'Inference time': 1.707, 'Precision': [0.626761, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.309835, 'Inference time': 1.463, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.634, 'CLL': -0.278055}, 'Recall': 1.0, 'Learning time': 8.81, 'CLL': -0.093109}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.1418510649004884;  // std dev = 0,000, 236,000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109553;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.12544463852839183;  // std dev = 0,000, 241,000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360674;  // std dev = 0,000, 224,000 (wgt'ed) examples reached here.  /* #neg=224 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,69e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583093;  // std dev = 3,53e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.10159632948783649;  // std dev = 0,000, 223,000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926044;  // std dev = 1,21e-07, 267,000 (wgt'ed) examples reached here.  /* #neg=267 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 2,19e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839678;  // std dev = 9,54e-08, 267,000 (wgt'ed) examples reached here.  /* #neg=267 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694898;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109143;  // std dev = 5,77e-08, 265,000 (wgt'ed) examples reached here.  /* #neg=265 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325354;  // std dev = 1,93e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452781;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07414097960659774;  // std dev = 0,230, 258,000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06836996402491916;  // std dev = 6,99e-08, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936714;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080111;  // std dev = 5,16e-08, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06515270157633944;  // std dev = 0,256, 254,000 (wgt'ed) examples reached here.  /* #neg=254 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.074021
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.422 seconds
Total inference time: 1.488 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 14:30:41
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.488, 'Precision': [1.0, 0.5], 'Learning time': 2.422, 'AUC PR': 1.0, 'CLL': -0.074021, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.14185106490048846;  // std dev = 0,000, 217,000 (wgt'ed) examples reached here.  /* #neg=217 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.971 seconds
Total inference time: 0.981 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 14:30:43
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.981, 'Precision': [nan, 0.5], 'Learning time': 0.971, 'AUC PR': 1.0, 'CLL': -0.188432, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5049743319249056;  // std dev = 0,478, 252,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048832;  // std dev = 0,000, 243,000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4475982468548723;  // std dev = 0,473, 246,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839174;  // std dev = 0,000, 222,000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3494295975081527;  // std dev = 0,477, 251,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360686;  // std dev = 0,000, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.2587074471064305;  // std dev = 7,695, 256,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=163 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783658;  // std dev = 0,000, 244,000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22214039234994423;  // std dev = 0,473, 246,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892605;  // std dev = 6,99e-08, 222,000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1615454554959131;  // std dev = 0,475, 248,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 8,94e-08, 242,000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.10068247362929994;  // std dev = 7,695, 256,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=163 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 6,66e-08, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08586074988886493;  // std dev = 0,478, 252,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333674;  // std dev = 1,23e-07, 241,000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07263071570347421;  // std dev = 0,475, 249,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420271;  // std dev = 0,000, 248,000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return -0.019473772059541115;  // std dev = 0,494, 281,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 2,36e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.263478
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.903 seconds
Total inference time: 1.556 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.861644
   AUC PR    = 0.064427
   CLL	      = -0.299305
   Precision = 0.064427 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121055


Total scoring time: 1.937 seconds
Parameter learned model CLL: -0.299305


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 243, 0], 'true,true': [0.478, 89, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 222, 0], 'true,true': [0.473, 83, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 251, 0], 'true,true': [0.477, 88, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 244, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.695, 93, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.99e-08, 222, 0], 'true,true': [0.473, 83, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.94e-08, 242, 0], 'true,true': [0.475, 85, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [6.66e-08, 233, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.695, 93, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.23e-07, 241, 0], 'true,true': [0.478, 89, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 248, 0], 'true,true': [0.475, 86, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.36e-08, 235, 0], 'true,true': [0.494, 118, 163], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22844230284706993, -1.5716737467944603e-16], 'true': [0.22844230284706993, nan]}, {'': [0.22356071121687104, -5.001004615428633e-17], 'true': [0.22356071121687104, nan]}, {'': [0.22767892573133214, -9.377182518746342e-17], 'true': [0.22767892573133214, nan]}, {'': [0.23130798339843756, -7.280150981148567e-17], 'true': [0.23130798339843756, nan], 'true,true': [0.23130798339843756, nan]}, {'': [0.22356071121686638, 2.2004420307885986e-17], 'true': [0.22356071121686638, nan]}, {'': [0.22526990114464132, 3.303142883182284e-17], 'true': [0.22526990114464132, nan]}, {'': [0.23130798339843825, 1.9059622740346035e-17], 'true': [0.23130798339843825, nan], 'true,true': [0.23130798339843825, nan]}, {'': [0.228442302847064, 6.265158977137813e-17], 'true': [0.228442302847064, nan]}, {'': [0.22609312753020008, -5.3720468933475315e-18], 'true': [0.22609312753020008, nan]}, {'': [0.24358860703385218, 2.362176648138631e-18], 'true': [0.24358860703385218, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.14185106490048763;  // std dev = 8,02e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.14185106490048835;  // std dev = 0,000, 238,000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109564;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.1254446385283914;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.12544463852839177;  // std dev = 0,000, 225,000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1123163781936062;  // std dev = 7,88e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0.5553664367462833;  // std dev = 5,53e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.1123163781936068;  // std dev = 0,000, 240,000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783623;  // std dev = 4,83e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0.41751358415830914;  // std dev = 4,38e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.10159632948783656;  // std dev = 0,000, 228,000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0926912761892609;  // std dev = 6,14e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0.3207118471601493;  // std dev = 3,63e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.09269127618926047;  // std dev = 9,88e-08, 249,000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694906;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else if ( actor(A) )
%   | | then return -0.08518475138839683;  // std dev = 3,94e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839691;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.2582292642264267;  // std dev = 0,474, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839678;  // std dev = 8,43e-08, 228,000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253515;  // std dev = 2,65e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.08352884899640804;  // std dev = 0,373, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.07877675473109143;  // std dev = 6,50e-08, 243,000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.0722849731547815;  // std dev = 0,024, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.07324622576333674;  // std dev = 1,23e-07, 241,000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07196422536988692;  // std dev = 0,407, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.06842697784420261;  // std dev = 6,50e-08, 225,000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1340070300080108;  // std dev = 9,42e-08, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.06320862854717589;  // std dev = 0,021, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.06419184008202626;  // std dev = 1,49e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.082661
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.097 seconds
Total inference time: 1.521 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06433
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.844 seconds
Refined model CLL: -0.06433


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.082661
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.780999999999999 seconds
Total inference time: 1.521 seconds
AUC ROC: 1.0
Total revision time: 8.780999999999999
Best scored revision CLL: -0.06433


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 14:30:56
{'F1': 1.0, 'Inference time': 1.521, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.309835, 'Inference time': 1.556, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.903, 'CLL': -0.263478}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 8.780999999999999, 'CLL': -0.082661}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.14185106490048785;  // std dev = 8,94e-08, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109564;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.12544463852839202;  // std dev = 0,000, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 5,53e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.11231637819360697;  // std dev = 0,000, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783662;  // std dev = 0,000, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830914;  // std dev = 4,38e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601493;  // std dev = 3,63e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.0928750182929698;  // std dev = 0,054, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694906;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.0853321098079965;  // std dev = 0,050, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253515;  // std dev = 2,65e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.07875272979332723;  // std dev = 8,43e-08, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07351384947132732;  // std dev = 0,062, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06851744033266166;  // std dev = 0,041, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 9,42e-08, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.0641918400820262;  // std dev = 6,45e-09, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.06427309450552626;  // std dev = 0,039, 323,000 (wgt'ed) examples reached here.  /* #neg=323 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066547
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.927 seconds
Total inference time: 1.46 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 14:31:00
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.46, 'Precision': [1.0, 0.5], 'Learning time': 2.927, 'AUC PR': 1.0, 'CLL': -0.066547, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.14185106490048782;  // std dev = 1,12e-07, 329,000 (wgt'ed) examples reached here.  /* #neg=329 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.126 seconds
Total inference time: 0.895 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 14:31:03
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.895, 'Precision': [nan, 0.5], 'Learning time': 1.126, 'AUC PR': 1.0, 'CLL': -0.188432, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4820021461086827;  // std dev = 0,484, 327,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 1,15e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4014610213343101;  // std dev = 0,487, 333,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839194;  // std dev = 0,000, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3558453702283759;  // std dev = 0,480, 318,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360699;  // std dev = 0,000, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.325801705410923;  // std dev = 7,963, 296,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=204 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21230008237432016;  // std dev = 0,476, 312,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926042;  // std dev = 1,62e-07, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15121679874789423;  // std dev = 0,478, 316,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,07e-07, 319,000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.12383603476578293;  // std dev = 8,378, 311,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=204 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 3,65e-08, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12178108327210371;  // std dev = 0,465, 298,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333698;  // std dev = 9,77e-08, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08525672627601254;  // std dev = 0,467, 301,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420297;  // std dev = 0,000, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.034723262292726244;  // std dev = 0,478, 315,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202605;  // std dev = 9,42e-08, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.275684
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.923 seconds
Total inference time: 1.463 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.861638
   AUC PR    = 0.064496
   CLL	      = -0.316693
   Precision = 0.064496 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121176


Total scoring time: 2.551 seconds
Parameter learned model CLL: -0.316693


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.15e-07, 305, 0], 'true,true': [0.484, 123, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 277, 0], 'true,true': [0.487, 129, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 283, 0], 'true,true': [0.48, 114, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 303, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.963, 92, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.62e-07, 308, 0], 'true,true': [0.476, 108, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.07e-07, 319, 0], 'true,true': [0.478, 112, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [3.65e-08, 293, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.378, 107, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [9.77e-08, 298, 0], 'true,true': [0.465, 94, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 293, 0], 'true,true': [0.467, 97, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [9.42e-08, 281, 0], 'true,true': [0.478, 111, 204], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2346603821227214, 4.3680905886891404e-17], 'true': [0.2346603821227214, nan]}, {'': [0.23731839948056918, -7.695408690542601e-17], 'true': [0.23731839948056918, nan]}, {'': [0.22997508009968243, -1.0513772812704662e-16], 'true': [0.22997508009968243, nan]}, {'': [0.21420745069393962, -5.27630744376312e-17], 'true': [0.21420745069393962, nan], 'true,true': [0.21420745069393962, nan]}, {'': [0.22633136094674194, 8.506903695179771e-17], 'true': [0.22633136094674194, nan]}, {'': [0.2288094856593496, 3.6195358796556825e-17], 'true': [0.2288094856593496, nan]}, {'': [0.22568004880015693, 4.54698849675832e-18], 'true': [0.22568004880015693, nan], 'true,true': [0.22568004880015693, nan]}, {'': [0.2159362190892306, 3.203999332810855e-17], 'true': [0.2159362190892306, nan]}, {'': [0.21840818534011638, -5.077470488046791e-17], 'true': [0.21840818534011638, nan]}, {'': [0.22820861678004561, 3.160777294306496e-17], 'true': [0.22820861678004561, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048768;  // std dev = 6,32e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.14185106490048793;  // std dev = 0,000, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12796629623994665;  // std dev = 0,218, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.12544463852839186;  // std dev = 0,000, 246,000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11206521104123846;  // std dev = 0,000, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360697;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1013892789435277;  // std dev = 6,99e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783662;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.09251788748943585;  // std dev = 2,11e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( female(B) )
%   | | | then return -0.09251788748943594;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.2458245822225294;  // std dev = 0,420, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926042;  // std dev = 1,62e-07, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.084626783450442;  // std dev = 0,022, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 1,07e-07, 319,000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08155978055550452;  // std dev = 0,399, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.07877675473109143;  // std dev = 4,21e-08, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07258262051569714;  // std dev = 0,019, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.07324622576333699;  // std dev = 9,54e-08, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.0714906995903231;  // std dev = 0,433, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.06842697784420299;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.06380157184851855;  // std dev = 1,97e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( female(B) )
%   | | | then return -0.06380157184851856;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.17777277764182958;  // std dev = 0,513, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06419184008202612;  // std dev = 7,60e-08, 270,000 (wgt'ed) examples reached here.  /* #neg=270 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.079767
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.991 seconds
Total inference time: 1.972 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063959
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.13 seconds
Refined model CLL: -0.063959


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.079767
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.594999999999999 seconds
Total inference time: 1.972 seconds
AUC ROC: 1.0
Total revision time: 9.594999999999999
Best scored revision CLL: -0.063959


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 14:31:16
{'parameter_1.0': {'F1': 0.309835, 'Inference time': 1.463, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.923, 'CLL': -0.275684}, 'F1': 1.0, 'Inference time': 1.972, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 9.594999999999999, 'CLL': -0.079767}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.1418510649004874;  // std dev = 2,92e-07, 416,000 (wgt'ed) examples reached here.  /* #neg=416 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.12544463852839222;  // std dev = 0,000, 370,000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360638;  // std dev = 1,05e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.11231637819360628;  // std dev = 0,000, 422,000 (wgt'ed) examples reached here.  /* #neg=422 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.10159632948783628;  // std dev = 1,15e-07, 381,000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.09269127618926072;  // std dev = 1,71e-07, 379,000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.08518475138839678;  // std dev = 1,19e-07, 367,000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.07877675473109144;  // std dev = 9,88e-08, 402,000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.07324622576333716;  // std dev = 5,58e-08, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420328;  // std dev = 0,000, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.0641918400820257;  // std dev = 1,79e-07, 404,000 (wgt'ed) examples reached here.  /* #neg=404 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065858
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.38 seconds
Total inference time: 1.376 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 14:31:21
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.376, 'Precision': [1.0, 0.5], 'Learning time': 3.38, 'AUC PR': 1.0, 'CLL': -0.065858, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048754;  // std dev = 2,27e-07, 351,000 (wgt'ed) examples reached here.  /* #neg=351 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.193993
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.127 seconds
Total inference time: 0.877 seconds
AUC ROC: 0.985041


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 14:31:24
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.877, 'Precision': [nan, 0.5], 'Learning time': 1.127, 'AUC PR': 0.626761, 'CLL': -0.193993, 'AUC ROC': 0.985041}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.47851930546988364;  // std dev = 0,485, 108,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,43e-08, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4873446166888025;  // std dev = 0,459, 96,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283913;  // std dev = 0,000, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.31190766989019675;  // std dev = 0,487, 109,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360621;  // std dev = 8,43e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.2657639329037367;  // std dev = 4,924, 105,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 2,11e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.19584245540511822;  // std dev = 0,482, 106,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 4,59e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22791682265213217;  // std dev = 0,452, 94,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 4,94e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.09636881035538075;  // std dev = 4,924, 105,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109161;  // std dev = 5,58e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.060631549402565835;  // std dev = 0,484, 107,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0896293419010937;  // std dev = 0,470, 100,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 5,05e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04845690982711741;  // std dev = 0,477, 103,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.325118
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.399 seconds
Total inference time: 1.157 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.865938
   AUC PR    = 0.091907
   CLL	      = -0.305533
   Precision = 0.091907 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.168342


Total scoring time: 1.443 seconds
Parameter learned model CLL: -0.305533


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.43e-08, 106, 0], 'true,true': [0.485, 41, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 118, 0], 'true,true': [0.459, 29, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.43e-08, 113, 0], 'true,true': [0.487, 42, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [2.11e-08, 104, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.924, 38, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.59e-08, 98, 0], 'true,true': [0.482, 39, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.94e-08, 84, 0], 'true,true': [0.452, 27, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [5.58e-08, 95, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.924, 38, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 89, 0], 'true,true': [0.484, 40, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.05e-08, 105, 0], 'true,true': [0.47, 33, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 106, 0], 'true,true': [0.477, 36, 67], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23551097393689918, 6.70323335622736e-17], 'true': [0.23551097393689918, nan]}, {'': [0.2108289930555551, -3.7634678800852764e-18], 'true': [0.2108289930555551, nan]}, {'': [0.23684875010521142, 6.287988812036285e-17], 'true': [0.23684875010521142, nan]}, {'': [0.2309297052154195, 4.270088556250602e-18], 'true': [0.2309297052154195, nan], 'true,true': [0.2309297052154195, nan]}, {'': [0.23255606977572071, 2.1524732110079565e-17], 'true': [0.23255606977572071, nan]}, {'': [0.2047306473517431, 2.9077269692563625e-17], 'true': [0.2047306473517431, nan]}, {'': [0.23092970521541897, 3.272236283105724e-17], 'true': [0.23092970521541897, nan], 'true,true': [0.23092970521541897, nan]}, {'': [0.2340815791772203, -7.484649604214538e-18], 'true': [0.2340815791772203, nan]}, {'': [0.22109999999999994, 2.4319171015598667e-17], 'true': [0.22109999999999994, nan]}, {'': [0.22735413328306167, -1.6234393284613138e-17], 'true': [0.22735413328306167, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.14185106490048777;  // std dev = 1,49e-08, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.1254446385283914;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.11231637819360621;  // std dev = 7,60e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.10159632948783635;  // std dev = 0,000, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.09269127618926107;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.0863091209947329;  // std dev = 0,038, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.08518475138839678;  // std dev = 4,34e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08226323180617046;  // std dev = 0,068, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109158;  // std dev = 5,67e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07293385109488387;  // std dev = 1,18e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.07324622576333704;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07002631285768286;  // std dev = 0,055, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.06842697784420265;  // std dev = 4,83e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06499224371090197;  // std dev = 0,052, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.06419184008202626;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063846
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.79 seconds
Total inference time: 1.118 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064445
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.303 seconds
Refined model CLL: -0.064445


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063846
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.935 seconds
Total inference time: 1.118 seconds
AUC ROC: 1.0
Total revision time: 5.935
Best scored revision CLL: -0.064445


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 14:31:32
{'parameter_0.2': {'F1': 0.140406, 'Inference time': 1.157, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 1.399, 'CLL': -0.325118}, 'F1': 1.0, 'Inference time': 1.118, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.935, 'CLL': -0.063846}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.14185106490048766;  // std dev = 7,88e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.12544463852839133;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.1123163781936062;  // std dev = 9,06e-08, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.10159632948783641;  // std dev = 0,000, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926071;  // std dev = 8,56e-08, 149,000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08616497104520263;  // std dev = 0,065, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07917211266096084;  // std dev = 0,050, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07342272937673415;  // std dev = 0,033, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06856486784760439;  // std dev = 0,031, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.06431911068757926;  // std dev = 0,030, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063809
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.872 seconds
Total inference time: 1.108 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 14:31:36
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.108, 'Precision': [1.0, 0.5], 'Learning time': 1.872, 'AUC PR': 1.0, 'CLL': -0.063809, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.14185106490048768;  // std dev = 6,66e-08, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.814 seconds
Total inference time: 0.766 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 14:31:37
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.766, 'Precision': [nan, 0.5], 'Learning time': 0.814, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4902244067976223;  // std dev = 0,482, 212,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048838;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4508419387108694;  // std dev = 0,473, 202,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839152;  // std dev = 0,000, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.386111285459537;  // std dev = 0,465, 196,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360668;  // std dev = 0,000, 213,000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.2827182220405201;  // std dev = 6,683, 201,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783649;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15098702479222975;  // std dev = 0,489, 222,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926054;  // std dev = 9,77e-08, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14484912380807566;  // std dev = 0,481, 211,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 8,02e-08, 211,000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.09110311794407452;  // std dev = 7,159, 217,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109147;  // std dev = 7,74e-08, 187,000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.10781223106280384;  // std dev = 0,475, 204,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333664;  // std dev = 1,23e-07, 205,000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.056497266348482636;  // std dev = 0,482, 212,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 7,67e-08, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09786200189725175;  // std dev = 0,464, 195,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #neg=163 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.32456
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.743 seconds
Total inference time: 1.198 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.866241
   AUC PR    = 0.092096
   CLL	      = -0.304503
   Precision = 0.092096 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.16866


Total scoring time: 1.713 seconds
Parameter learned model CLL: -0.304503


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 194, 0], 'true,true': [0.482, 78, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 180, 0], 'true,true': [0.473, 68, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 213, 0], 'true,true': [0.465, 62, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 178, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.683, 67, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.77e-08, 216, 0], 'true,true': [0.489, 88, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.02e-08, 211, 0], 'true,true': [0.481, 77, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [7.74e-08, 187, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.159, 83, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.23e-07, 205, 0], 'true,true': [0.475, 70, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.67e-08, 183, 0], 'true,true': [0.482, 78, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 163, 0], 'true,true': [0.464, 61, 134], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23255606977572527, -2.3120108347864086e-16], 'true': [0.23255606977572527, nan]}, {'': [0.22331144005489434, -1.7270135938613546e-17], 'true': [0.22331144005489434, nan]}, {'': [0.21626405664306517, -5.837792429953875e-17], 'true': [0.21626405664306517, nan]}, {'': [0.22222222222222004, -8.607347044846719e-17], 'true': [0.22222222222222004, nan], 'true,true': [0.22222222222222004, nan]}, {'': [0.23926629332034585, 4.4203324128594195e-17], 'true': [0.23926629332034585, nan]}, {'': [0.23175580063340923, 3.051797887595217e-17], 'true': [0.23175580063340923, nan]}, {'': [0.23619104249400028, 3.2059916219122166e-17], 'true': [0.23619104249400028, nan], 'true,true': [0.23619104249400028, nan]}, {'': [0.22539407920030827, 7.365382017025429e-17], 'true': [0.22539407920030827, nan]}, {'': [0.23255606977572088, 3.2154000166739505e-17], 'true': [0.23255606977572088, nan]}, {'': [0.21496383957922405, -7.492302620169768e-18], 'true': [0.21496383957922405, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048768;  // std dev = 5,96e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.14185106490048838;  // std dev = 0,000, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.1254446385283916;  // std dev = 0,000, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360626;  // std dev = 5,58e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.1123163781936066;  // std dev = 0,000, 200,000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783626;  // std dev = 3,65e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.10159632948783649;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.09269127618926055;  // std dev = 9,54e-08, 207,000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.0851847513883968;  // std dev = 1,83e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.08518475138839678;  // std dev = 7,30e-08, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109168;  // std dev = 3,80e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.07877675473109147;  // std dev = 7,30e-08, 198,000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.07324622576333667;  // std dev = 1,13e-07, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420268;  // std dev = 2,79e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   else return -0.06842697784420262;  // std dev = 8,43e-08, 211,000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06469657267958387;  // std dev = 0,020, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.06419184008202626;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063869
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.385 seconds
Total inference time: 1.235 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064173
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.488 seconds
Refined model CLL: -0.064173


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063869
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.329000000000001 seconds
Total inference time: 1.235 seconds
AUC ROC: 1.0
Total revision time: 7.329000000000001
Best scored revision CLL: -0.064173


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 14:31:48
{'F1': 1.0, 'Inference time': 1.235, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.140406, 'Inference time': 1.198, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 1.743, 'CLL': -0.32456}, 'Recall': 1.0, 'Learning time': 7.329000000000001, 'CLL': -0.063869}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.14185106490048838;  // std dev = 0,000, 240,000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.12544463852839177;  // std dev = 0,000, 236,000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360638;  // std dev = 1,29e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.11231637819360674;  // std dev = 0,000, 242,000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.10159632948783652;  // std dev = 0,000, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.09269127618926054;  // std dev = 7,30e-08, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839682;  // std dev = 1,49e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.08518475138839678;  // std dev = 8,02e-08, 259,000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.07877675473109144;  // std dev = 6,32e-08, 247,000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.0732462257633368;  // std dev = 1,19e-07, 262,000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.0684269778442027;  // std dev = 0,000, 258,000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.06419184008202623;  // std dev = 0,000, 264,000 (wgt'ed) examples reached here.  /* #neg=264 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.678 seconds
Total inference time: 1.072 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 14:31:52
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.072, 'Precision': [1.0, 0.5], 'Learning time': 2.678, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.1418510649004884;  // std dev = 0,000, 253,000 (wgt'ed) examples reached here.  /* #neg=253 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.015 seconds
Total inference time: 0.776 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 14:31:54
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.776, 'Precision': [nan, 0.5], 'Learning time': 1.015, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.533734219380445;  // std dev = 0,468, 299,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048804;  // std dev = 0,000, 271,000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.44676950769403245;  // std dev = 0,471, 303,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839194;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3564244843379349;  // std dev = 0,473, 305,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360694;  // std dev = 0,000, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.23912963321786931;  // std dev = 8,699, 323,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22908606631680903;  // std dev = 0,469, 300,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926043;  // std dev = 1,43e-07, 286,000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15455818094293663;  // std dev = 0,475, 308,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.0973830934881526;  // std dev = 8,560, 317,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 315,000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08980205155486501;  // std dev = 0,476, 309,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333698;  // std dev = 9,66e-08, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.10121229091390742;  // std dev = 0,464, 294,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0684269778442031;  // std dev = 0,000, 323,000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04779317125315438;  // std dev = 0,474, 307,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820261;  // std dev = 8,02e-08, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.33071
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.962 seconds
Total inference time: 1.256 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.868368
   AUC PR    = 0.093866
   CLL	      = -0.306317
   Precision = 0.093866 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.171623


Total scoring time: 1.841 seconds
Parameter learned model CLL: -0.306317


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 271, 0], 'true,true': [0.468, 97, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 274, 0], 'true,true': [0.471, 101, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 275, 0], 'true,true': [0.473, 103, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 298, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.699, 121, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.43e-07, 286, 0], 'true,true': [0.469, 98, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.01e-07, 290, 0], 'true,true': [0.475, 106, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [3.65e-08, 315, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.56, 115, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [9.66e-08, 301, 0], 'true,true': [0.476, 107, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 323, 0], 'true,true': [0.464, 92, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.02e-08, 275, 0], 'true,true': [0.474, 105, 202], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21916980794398744, -5.243857828487824e-17], 'true': [0.21916980794398744, nan]}, {'': [0.22222222222221874, -7.455512282154335e-17], 'true': [0.22222222222221874, nan]}, {'': [0.2236603063692577, -1.0981115007201549e-16], 'true': [0.2236603063692577, nan]}, {'': [0.2342781010073887, -5.513859316930308e-17], 'true': [0.2342781010073887, nan], 'true,true': [0.2342781010073887, nan]}, {'': [0.2199555555555529, 7.142693585001007e-17], 'true': [0.2199555555555529, nan]}, {'': [0.22571259908922364, 3.522086836741876e-17], 'true': [0.22571259908922364, nan]}, {'': [0.23116958075013166, 4.229421046191073e-18], 'true': [0.23116958075013166, nan], 'true,true': [0.23116958075013166, nan]}, {'': [0.22636964422241052, 3.0982968129074136e-17], 'true': [0.22636964422241052, nan]}, {'': [0.21500300800592487, -7.561890570202304e-17], 'true': [0.21500300800592487, nan]}, {'': [0.2250421755137995, 2.34156128830033e-17], 'true': [0.2250421755137995, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.14185106490048763;  // std dev = 8,16e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.1418510649004878;  // std dev = 1,15e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1254446385283914;  // std dev = 0,000, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.12544463852839194;  // std dev = 0,000, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360622;  // std dev = 7,60e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.11231637819360685;  // std dev = 0,000, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1015963294878362;  // std dev = 5,48e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.10159632948783663;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926103;  // std dev = 2,98e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.09269127618926043;  // std dev = 1,38e-07, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08518475138839685;  // std dev = 5,27e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109161;  // std dev = 5,58e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.07877675473109143;  // std dev = 1,49e-08, 317,000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333707;  // std dev = 0,000, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.07324622576333692;  // std dev = 1,05e-07, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420265;  // std dev = 4,94e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.0684269778442029;  // std dev = 0,000, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.06419184008202587;  // std dev = 1,35e-07, 319,000 (wgt'ed) examples reached here.  /* #neg=319 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.897 seconds
Total inference time: 1.208 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06406
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.416 seconds
Refined model CLL: -0.06406


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.116 seconds
Total inference time: 1.208 seconds
AUC ROC: 1.0
Total revision time: 9.116
Best scored revision CLL: -0.06406


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 14:32:06
{'F1': 1.0, 'Inference time': 1.208, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.140406, 'Inference time': 1.256, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 1.962, 'CLL': -0.33071}, 'Recall': 1.0, 'Learning time': 9.116, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1418510649004879;  // std dev = 0,000, 336,000 (wgt'ed) examples reached here.  /* #neg=336 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.12544463852839213;  // std dev = 0,000, 386,000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.11231637819360654;  // std dev = 0,000, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.10159632948783637;  // std dev = 2,98e-08, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.092691276189261;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.09269127618926053;  // std dev = 1,69e-07, 361,000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.0851847513883968;  // std dev = 2,17e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 353,000 (wgt'ed) examples reached here.  /* #neg=353 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.07877675473109147;  // std dev = 2,98e-08, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.07324622576333704;  // std dev = 8,56e-08, 338,000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.06842697784420318;  // std dev = 0,000, 363,000 (wgt'ed) examples reached here.  /* #neg=363 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.06419184008202582;  // std dev = 1,56e-07, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.178 seconds
Total inference time: 1.163 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 14:32:11
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.163, 'Precision': [1.0, 0.5], 'Learning time': 3.178, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 2,98e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.1418510649004876;  // std dev = 2,19e-07, 402,000 (wgt'ed) examples reached here.  /* #neg=402 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.181 seconds
Total inference time: 0.778 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 14:32:13
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.778, 'Precision': [nan, 0.5], 'Learning time': 1.181, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4940827412460802;  // std dev = 0,481, 423,000 (wgt'ed) examples reached here.  /* #neg=154 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048738;  // std dev = 2,87e-07, 388,000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.42730535405973696;  // std dev = 0,480, 420,000 (wgt'ed) examples reached here.  /* #neg=151 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839224;  // std dev = 0,000, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3642362025758129;  // std dev = 0,474, 409,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360628;  // std dev = 0,000, 387,000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.2900292105385543;  // std dev = 9,504, 405,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783615;  // std dev = 1,59e-07, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21355426945031392;  // std dev = 0,474, 409,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926075;  // std dev = 1,67e-07, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1462386992017986;  // std dev = 0,479, 418,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,23e-07, 388,000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.13203163815552843;  // std dev = 9,481, 404,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 1,01e-07, 377,000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08643893987347695;  // std dev = 0,476, 412,000 (wgt'ed) examples reached here.  /* #neg=143 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333727;  // std dev = 0,000, 429,000 (wgt'ed) examples reached here.  /* #neg=429 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09691124030945406;  // std dev = 0,465, 393,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420336;  // std dev = 0,000, 406,000 (wgt'ed) examples reached here.  /* #neg=406 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.029640039928691596;  // std dev = 0,480, 420,000 (wgt'ed) examples reached here.  /* #neg=151 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202562;  // std dev = 1,90e-07, 391,000 (wgt'ed) examples reached here.  /* #neg=391 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.328126
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.916 seconds
Total inference time: 1.184 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.870342
   AUC PR    = 0.095053
   CLL	      = -0.300559
   Precision = 0.095053 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173604


Total scoring time: 2.584 seconds
Parameter learned model CLL: -0.300559


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.87e-07, 388, 0], 'true,true': [0.481, 154, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 397, 0], 'true,true': [0.48, 151, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 387, 0], 'true,true': [0.474, 140, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [1.59e-07, 369, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.504, 136, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.67e-07, 382, 0], 'true,true': [0.474, 140, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.23e-07, 388, 0], 'true,true': [0.479, 149, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [1.01e-07, 377, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.481, 135, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 429, 0], 'true,true': [0.476, 143, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 406, 0], 'true,true': [0.465, 124, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.9e-07, 391, 0], 'true,true': [0.48, 151, 269], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2315220003465095, 2.1288812637142178e-16], 'true': [0.2315220003465095, nan]}, {'': [0.2302664399092922, -1.2752183859674342e-16], 'true': [0.2302664399092922, nan]}, {'': [0.22513017019267148, -2.2950346762277136e-17], 'true': [0.22513017019267148, nan]}, {'': [0.22303917085810063, 6.859914623700155e-17], 'true': [0.22303917085810063, nan], 'true,true': [0.22303917085810063, nan]}, {'': [0.22513017019266945, 7.323984350930352e-17], 'true': [0.22513017019266945, nan]}, {'': [0.22939607609716073, 3.8915033852840536e-17], 'true': [0.22939607609716073, nan]}, {'': [0.2224965689638285, 2.70929756672452e-17], 'true': [0.2224965689638285, nan], 'true,true': [0.2224965689638285, nan]}, {'': [0.22661773022905105, -5.175864916667397e-18], 'true': [0.22661773022905105, nan]}, {'': [0.21596773044823966, -1.1649138140155583e-16], 'true': [0.21596773044823966, nan]}, {'': [0.23026643990929752, 9.256590947002584e-17], 'true': [0.23026643990929752, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.141851064900488;  // std dev = 0,000, 149,000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.14185106490048724;  // std dev = 2,98e-07, 425,000 (wgt'ed) examples reached here.  /* #neg=425 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839108;  // std dev = 7,88e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.12544463852839222;  // std dev = 0,000, 372,000 (wgt'ed) examples reached here.  /* #neg=372 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360621;  // std dev = 8,94e-08, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.11231637819360611;  // std dev = 0,000, 423,000 (wgt'ed) examples reached here.  /* #neg=423 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783641;  // std dev = 0,000, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.10159632948783624;  // std dev = 1,28e-07, 357,000 (wgt'ed) examples reached here.  /* #neg=357 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926079;  // std dev = 7,88e-08, 151,000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.0926912761892608;  // std dev = 1,65e-07, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08518475138839683;  // std dev = 6,14e-08, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.08518475138839678;  // std dev = 1,21e-07, 384,000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109157;  // std dev = 7,15e-08, 149,000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.07877675473109143;  // std dev = 9,88e-08, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333722;  // std dev = 0,000, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.07324622576333771;  // std dev = 0,000, 401,000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420265;  // std dev = 5,77e-08, 149,000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.06842697784420339;  // std dev = 0,000, 415,000 (wgt'ed) examples reached here.  /* #neg=415 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.06419184008202553;  // std dev = 2,12e-07, 425,000 (wgt'ed) examples reached here.  /* #neg=425 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.125 seconds
Total inference time: 1.262 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064058
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.238 seconds
Refined model CLL: -0.064058


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.863 seconds
Total inference time: 1.262 seconds
AUC ROC: 1.0
Total revision time: 10.863
Best scored revision CLL: -0.064058


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 14:32:27
{'F1': 1.0, 'Inference time': 1.262, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.140406, 'Inference time': 1.184, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 2.916, 'CLL': -0.328126}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.863, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 4,94e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.14185106490048738;  // std dev = 2,35e-07, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.1254446385283923;  // std dev = 0,000, 498,000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360636;  // std dev = 1,05e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.11231637819360588;  // std dev = 0,000, 508,000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.10159632948783594;  // std dev = 2,35e-07, 478,000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926103;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.0926912761892613;  // std dev = 0,000, 495,000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0851847513883968;  // std dev = 1,97e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.08518475138839678;  // std dev = 1,33e-07, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.07877675473109196;  // std dev = 0,000, 491,000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333704;  // std dev = 9,13e-09, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.07324622576333714;  // std dev = 6,66e-08, 516,000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.06842697784420347;  // std dev = 0,000, 477,000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06419184008202557;  // std dev = 2,25e-07, 508,000 (wgt'ed) examples reached here.  /* #neg=508 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.695 seconds
Total inference time: 1.081 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 14:32:32
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.081, 'Precision': [1.0, 0.5], 'Learning time': 3.695, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 5,05e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.14185106490048766;  // std dev = 0,000, 513,000 (wgt'ed) examples reached here.  /* #neg=513 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.253 seconds
Total inference time: 0.731 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 14:32:34
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.731, 'Precision': [nan, 0.5], 'Learning time': 1.253, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5241568402378479;  // std dev = 0,472, 506,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004877;  // std dev = 0,000, 498,000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4517214788026155;  // std dev = 0,470, 503,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283923;  // std dev = 0,000, 521,000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.34070442718816535;  // std dev = 0,478, 522,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360571;  // std dev = 0,000, 537,000 (wgt'ed) examples reached here.  /* #neg=537 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.2966228946041622;  // std dev = 10,416, 497,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783544;  // std dev = 3,38e-07, 490,000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20864579219155932;  // std dev = 0,473, 509,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926129;  // std dev = 0,000, 465,000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12799600571953482;  // std dev = 0,482, 532,000 (wgt'ed) examples reached here.  /* #neg=195 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,53e-07, 520,000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.1312588751002697;  // std dev = 10,567, 504,000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0787767547310919;  // std dev = 1,65e-07, 472,000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09096688310253051;  // std dev = 0,473, 510,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333686;  // std dev = 1,67e-07, 509,000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0888482400510221;  // std dev = 0,466, 495,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420355;  // std dev = 0,000, 504,000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.03860478034661394;  // std dev = 0,476, 517,000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202534;  // std dev = 2,47e-07, 522,000 (wgt'ed) examples reached here.  /* #neg=522 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.331322
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.876 seconds
Total inference time: 1.235 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.870352
   AUC PR    = 0.095252
   CLL	      = -0.303342
   Precision = 0.095252 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173935


Total scoring time: 2.517 seconds
Parameter learned model CLL: -0.303342


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 498, 0], 'true,true': [0.472, 169, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 521, 0], 'true,true': [0.47, 166, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 537, 0], 'true,true': [0.478, 185, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [3.38e-07, 490, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.416, 160, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 465, 0], 'true,true': [0.473, 172, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.53e-07, 520, 0], 'true,true': [0.482, 195, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [1.65e-07, 472, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.567, 167, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.67e-07, 509, 0], 'true,true': [0.473, 173, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 504, 0], 'true,true': [0.466, 158, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.47e-07, 522, 0], 'true,true': [0.476, 180, 337], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22244137543158254, -2.140188963132832e-17], 'true': [0.22244137543158254, nan]}, {'': [0.2211067590481049, -1.5001861983418622e-16], 'true': [0.2211067590481049, nan]}, {'': [0.2288024250965194, -3.307927075233241e-18], 'true': [0.2288024250965194, nan]}, {'': [0.218291641195263, 2.3382656355370643e-16], 'true': [0.218291641195263, nan], 'true,true': [0.218291641195263, nan]}, {'': [0.22372925841725175, -2.865091676452017e-18], 'true': [0.22372925841725175, nan]}, {'': [0.2321887896432827, 4.526293869625638e-17], 'true': [0.2321887896432827, nan]}, {'': [0.22155690980095938, 5.739288517130046e-17], 'true': [0.22155690980095938, nan], 'true,true': [0.22155690980095938, nan]}, {'': [0.2241484044598206, 5.4965855050204214e-17], 'true': [0.2241484044598206, nan]}, {'': [0.21730843791449933, -1.1983359630874705e-16], 'true': [0.21730843791449933, nan]}, {'': [0.22694536625151143, 1.1655214894532294e-16], 'true': [0.22694536625151143, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.14185106490048752;  // std dev = 1,63e-07, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839144;  // std dev = 0,000, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.12544463852839233;  // std dev = 0,000, 470,000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360653;  // std dev = 0,000, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.11231637819360588;  // std dev = 0,000, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783648;  // std dev = 0,000, 174,000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.10159632948783534;  // std dev = 3,63e-07, 512,000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926075;  // std dev = 7,30e-08, 161,000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.09269127618926142;  // std dev = 0,000, 491,000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 5,16e-08, 151,000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.08518475138839678;  // std dev = 1,49e-07, 500,000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109155;  // std dev = 8,16e-08, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.07877675473109214;  // std dev = 1,12e-07, 511,000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333678;  // std dev = 9,25e-08, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.07324622576333703;  // std dev = 1,19e-07, 477,000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420267;  // std dev = 5,87e-08, 167,000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.06842697784420355;  // std dev = 0,000, 504,000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.06419184008202543;  // std dev = 2,36e-07, 468,000 (wgt'ed) examples reached here.  /* #neg=468 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.534 seconds
Total inference time: 1.167 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064062
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.966 seconds
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.893 seconds
Total inference time: 1.167 seconds
AUC ROC: 1.0
Total revision time: 11.893
Best scored revision CLL: -0.064062


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 14:32:49
{'parameter_1.0': {'F1': 0.140406, 'Inference time': 1.235, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 2.876, 'CLL': -0.331322}, 'F1': 1.0, 'Inference time': 1.167, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 11.893, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048768;  // std dev = 4,71e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.1418510649004887;  // std dev = 0,000, 650,000 (wgt'ed) examples reached here.  /* #neg=650 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.12544463852839233;  // std dev = 0,000, 635,000 (wgt'ed) examples reached here.  /* #neg=635 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1123163781936063;  // std dev = 3,49e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.1123163781936058;  // std dev = 0,000, 605,000 (wgt'ed) examples reached here.  /* #neg=605 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783624;  // std dev = 2,98e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.10159632948783531;  // std dev = 4,10e-07, 666,000 (wgt'ed) examples reached here.  /* #neg=666 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926103;  // std dev = 0,000, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.09269127618926183;  // std dev = 0,000, 620,000 (wgt'ed) examples reached here.  /* #neg=620 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.08518475138839678;  // std dev = 1,46e-07, 583,000 (wgt'ed) examples reached here.  /* #neg=583 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.07877675473109269;  // std dev = 0,000, 667,000 (wgt'ed) examples reached here.  /* #neg=667 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07324622576333675;  // std dev = 1,72e-07, 622,000 (wgt'ed) examples reached here.  /* #neg=622 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0684269778442027;  // std dev = 1,18e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.06842697784420362;  // std dev = 0,000, 592,000 (wgt'ed) examples reached here.  /* #neg=592 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.06419184008202539;  // std dev = 2,48e-07, 621,000 (wgt'ed) examples reached here.  /* #neg=621 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.729 seconds
Total inference time: 1.088 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 14:32:55
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.088, 'Precision': [1.0, 0.5], 'Learning time': 4.729, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048766;  // std dev = 5,58e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.1418510649004884;  // std dev = 0,000, 596,000 (wgt'ed) examples reached here.  /* #neg=596 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.457 seconds
Total inference time: 0.768 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 14:32:58
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.768, 'Precision': [nan, 0.5], 'Learning time': 1.457, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5086343719927171;  // std dev = 0,477, 103,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.42860901542159435;  // std dev = 0,479, 104,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283913;  // std dev = 0,000, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.38690973716896915;  // std dev = 0,465, 98,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360624;  // std dev = 7,30e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.3004401658574567;  // std dev = 4,604, 98,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 2,58e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22741305771118098;  // std dev = 0,465, 98,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926104;  // std dev = 2,36e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14386408767400385;  // std dev = 0,475, 102,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,77e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.16395430464365612;  // std dev = 4,387, 94,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109158;  // std dev = 6,23e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.03717021629254816;  // std dev = 0,484, 107,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333714;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.028202771750821937;  // std dev = 0,484, 107,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 4,71e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0789471201758029;  // std dev = 0,465, 98,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.314338
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 1.37 seconds
Total inference time: 1.213 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.874024
   AUC PR    = 0.098529
   CLL	      = -0.297528
   Precision = 0.098529 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.179384


Total scoring time: 1.304 seconds
Parameter learned model CLL: -0.297528


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.69e-08, 102, 0], 'true,true': [0.477, 36, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 114, 0], 'true,true': [0.479, 37, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.3e-08, 97, 0], 'true,true': [0.465, 31, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [2.58e-08, 103, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.604, 31, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [2.36e-08, 89, 0], 'true,true': [0.465, 31, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.77e-08, 107, 0], 'true,true': [0.475, 35, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [6.23e-08, 107, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.387, 27, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 120, 0], 'true,true': [0.484, 40, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.71e-08, 97, 0], 'true,true': [0.484, 40, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 111, 0], 'true,true': [0.465, 31, 67], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2273541332830608, 7.401486830834377e-17], 'true': [0.2273541332830608, nan]}, {'': [0.2291974852070989, -5.843279076974508e-18], 'true': [0.2291974852070989, nan]}, {'': [0.21626405664306472, 5.493887132165723e-17], 'true': [0.21626405664306472, nan]}, {'': [0.21626405664306486, 6.467318590049456e-18], 'true': [0.21626405664306486, nan], 'true,true': [0.21626405664306486, nan]}, {'': [0.216264056643065, 6.237208003512115e-18], 'true': [0.216264056643065, nan]}, {'': [0.22539407920030738, 3.112774835397635e-17], 'true': [0.22539407920030738, nan]}, {'': [0.20473064735174298, 3.631570641297241e-17], 'true': [0.20473064735174298, nan], 'true,true': [0.20473064735174298, nan]}, {'': [0.2340815791772212, -1.0177044392397268e-17], 'true': [0.2340815791772212, nan]}, {'': [0.23408157917722053, 2.2891196384023845e-17], 'true': [0.23408157917722053, nan]}, {'': [0.21626405664306522, -1.650331523091449e-17], 'true': [0.21626405664306522, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004877;  // std dev = 2,98e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.12544463852839133;  // std dev = 0,000, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.11231637819360618;  // std dev = 8,82e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10767761582809893;  // std dev = 0,132, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.10159632948783623;  // std dev = 4,83e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09488769970989396;  // std dev = 0,072, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.09269127618926105;  // std dev = 2,36e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09102187181289828;  // std dev = 0,129, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.0851847513883968;  // std dev = 6,05e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08085227316389176;  // std dev = 0,087, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.0787767547310916;  // std dev = 5,58e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07215477022909884;  // std dev = 1,39e-08, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.07324622576333707;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07007036987558603;  // std dev = 0,084, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06842697784420265;  // std dev = 4,89e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06319341834947667;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.06419184008202626;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063631
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.02 seconds
Total inference time: 1.21 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064995
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.361 seconds
Refined model CLL: -0.064995


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063631
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.055000000000001 seconds
Total inference time: 1.21 seconds
AUC ROC: 1.0
Total revision time: 6.055000000000001
Best scored revision CLL: -0.064995


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 14:33:07
{'parameter_0.2': {'F1': 0.137825, 'Inference time': 1.213, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 1.37, 'CLL': -0.314338}, 'F1': 1.0, 'Inference time': 1.21, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 6.055000000000001, 'CLL': -0.063631}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.1418510649004878;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.1254446385283911;  // std dev = 8,02e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.11231637819360625;  // std dev = 8,43e-08, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.10159632948783644;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #neg=147 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.0926912761892609;  // std dev = 6,32e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.08518475138839683;  // std dev = 5,37e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.07877675473109162;  // std dev = 5,77e-08, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333717;  // std dev = 0,000, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420265;  // std dev = 4,94e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06419184008202626;  // std dev = 0,000, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.353 seconds
Total inference time: 1.104 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 14:33:11
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.104, 'Precision': [1.0, 0.5], 'Learning time': 2.353, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.14185106490048766;  // std dev = 8,69e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.828 seconds
Total inference time: 0.767 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 14:33:12
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.767, 'Precision': [nan, 0.5], 'Learning time': 0.828, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4814047490529974;  // std dev = 0,485, 215,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048838;  // std dev = 0,000, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4394333348388623;  // std dev = 0,477, 206,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839155;  // std dev = 0,000, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3477968447809548;  // std dev = 0,480, 209,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360658;  // std dev = 0,000, 198,000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.28345997345303514;  // std dev = 6,812, 205,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783652;  // std dev = 0,000, 199,000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22502714372387034;  // std dev = 0,473, 202,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926057;  // std dev = 9,19e-08, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16908557571888813;  // std dev = 0,473, 202,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.13351306888206527;  // std dev = 6,650, 200,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109147;  // std dev = 7,15e-08, 203,000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11072529953296464;  // std dev = 0,466, 197,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0732462257633368;  // std dev = 8,23e-08, 155,000 (wgt'ed) examples reached here.  /* #neg=155 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.012700851396976536;  // std dev = 0,488, 220,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420261;  // std dev = 6,83e-08, 218,000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.020926883150247617;  // std dev = 0,485, 216,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.301915
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 1.668 seconds
Total inference time: 1.108 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.868064
   AUC PR    = 0.094499
   CLL	      = -0.296338
   Precision = 0.094499 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.17268


Total scoring time: 1.574 seconds
Parameter learned model CLL: -0.296338


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 197, 0], 'true,true': [0.485, 81, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 181, 0], 'true,true': [0.477, 72, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 198, 0], 'true,true': [0.48, 75, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 199, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.812, 71, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.19e-08, 196, 0], 'true,true': [0.473, 68, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.6e-08, 195, 0], 'true,true': [0.473, 68, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [7.15e-08, 203, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.65, 66, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.23e-08, 155, 0], 'true,true': [0.466, 63, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [6.83e-08, 218, 0], 'true,true': [0.488, 86, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 212, 0], 'true,true': [0.485, 82, 134], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23480800432666737, -2.366972945901349e-16], 'true': [0.23480800432666737, nan]}, {'': [0.2273541332830604, -1.7174720822930598e-17], 'true': [0.2273541332830604, nan]}, {'': [0.23007715024839523, -4.0371746350005693e-17], 'true': [0.23007715024839523, nan]}, {'': [0.2263890541344446, -9.149576685353049e-17], 'true': [0.2263890541344446, nan], 'true,true': [0.2263890541344446, nan]}, {'': [0.22331144005489656, 4.304946422015913e-17], 'true': [0.22331144005489656, nan]}, {'': [0.22331144005489645, 2.960594732333751e-17], 'true': [0.22331144005489645, nan]}, {'': [0.22110000000000027, 2.5157763119584828e-17], 'true': [0.22110000000000027, nan], 'true,true': [0.22110000000000027, nan]}, {'': [0.21752686232574855, 4.369264806589326e-17], 'true': [0.21752686232574855, nan]}, {'': [0.23809917355371862, 2.1389617905622283e-17], 'true': [0.23809917355371862, nan]}, {'': [0.23551097393689885, -1.047380211910525e-18], 'true': [0.23551097393689885, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048768;  // std dev = 5,77e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.14185106490048832;  // std dev = 0,000, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.12544463852839172;  // std dev = 0,000, 211,000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360628;  // std dev = 4,94e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.11231637819360665;  // std dev = 0,000, 208,000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783623;  // std dev = 4,34e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.10159632948783653;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.09269127618926054;  // std dev = 5,58e-08, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839679;  // std dev = 2,11e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.07877675473109146;  // std dev = 8,02e-08, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.07324622576333666;  // std dev = 1,18e-07, 199,000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420268;  // std dev = 2,11e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.06842697784420261;  // std dev = 6,75e-08, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.06419184008202626;  // std dev = 0,000, 203,000 (wgt'ed) examples reached here.  /* #neg=203 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.392 seconds
Total inference time: 1.322 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064077
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.52 seconds
Refined model CLL: -0.064077


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.154 seconds
Total inference time: 1.322 seconds
AUC ROC: 1.0
Total revision time: 7.154
Best scored revision CLL: -0.064077


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 14:33:23
{'F1': 1.0, 'Inference time': 1.322, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.137825, 'Inference time': 1.108, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 1.668, 'CLL': -0.301915}, 'Recall': 1.0, 'Learning time': 7.154, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.1418510649004883;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.1254446385283919;  // std dev = 0,000, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.1123163781936068;  // std dev = 0,000, 241,000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.10159632948783648;  // std dev = 0,000, 224,000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926094;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.09269127618926055;  // std dev = 5,96e-08, 234,000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.08518475138839678;  // std dev = 8,30e-08, 242,000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.07877675473109144;  // std dev = 5,96e-08, 259,000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.07324622576333678;  // std dev = 1,19e-07, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.06842697784420261;  // std dev = 5,96e-08, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202619;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.06419184008202625;  // std dev = 2,11e-08, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.484 seconds
Total inference time: 1.189 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 14:33:27
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.189, 'Precision': [1.0, 0.5], 'Learning time': 2.484, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.14185106490048835;  // std dev = 0,000, 256,000 (wgt'ed) examples reached here.  /* #neg=256 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.984 seconds
Total inference time: 0.806 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 14:33:29
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.806, 'Precision': [nan, 0.5], 'Learning time': 0.984, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5248156017661751;  // std dev = 0,471, 303,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048788;  // std dev = 5,96e-08, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4594812885685806;  // std dev = 0,467, 298,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839202;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3513039250909216;  // std dev = 0,474, 307,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360665;  // std dev = 0,000, 323,000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.24530726472525885;  // std dev = 8,631, 320,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783663;  // std dev = 0,000, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21685001082900351;  // std dev = 0,473, 305,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926044;  // std dev = 1,71e-07, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1761457613011953;  // std dev = 0,468, 299,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,10e-07, 317,000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.11035495808998418;  // std dev = 8,364, 309,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 4,21e-08, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07477739483259181;  // std dev = 0,478, 313,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333692;  // std dev = 1,03e-07, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08006706567433687;  // std dev = 0,471, 302,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420301;  // std dev = 0,000, 304,000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08137445780542066;  // std dev = 0,463, 293,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202597;  // std dev = 1,13e-07, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.316926
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.304 seconds
Total inference time: 1.202 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.869366
   AUC PR    = 0.09578
   CLL	      = -0.308272
   Precision = 0.09578 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174816


Total scoring time: 1.989 seconds
Parameter learned model CLL: -0.308272


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.96e-08, 293, 0], 'true,true': [0.471, 101, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 307, 0], 'true,true': [0.467, 96, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 323, 0], 'true,true': [0.474, 105, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 310, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.631, 118, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.71e-07, 299, 0], 'true,true': [0.473, 103, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.1e-07, 317, 0], 'true,true': [0.468, 97, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [4.21e-08, 285, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.364, 107, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.03e-07, 285, 0], 'true,true': [0.478, 111, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 304, 0], 'true,true': [0.471, 100, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.13e-07, 296, 0], 'true,true': [0.463, 91, 202], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2222222222222269, 1.2125302658022188e-17], 'true': [0.2222222222222269, nan]}, {'': [0.21836854195757402, -8.679267944952364e-17], 'true': [0.21836854195757402, nan]}, {'': [0.22504217551379754, -4.949601100496054e-17], 'true': [0.22504217551379754, nan]}, {'': [0.23277343749999954, -5.1571650176136306e-17], 'true': [0.23277343749999954, nan], 'true,true': [0.23277343749999954, nan]}, {'': [0.22366030636925802, 9.802638076957904e-17], 'true': [0.22366030636925802, nan]}, {'': [0.21916980794398383, 3.7824633015620474e-17], 'true': [0.21916980794398383, nan]}, {'': [0.2263696442224112, 6.2328310154394754e-18], 'true': [0.2263696442224112, nan], 'true,true': [0.2263696442224112, nan]}, {'': [0.2288683154875527, 3.739698609263685e-17], 'true': [0.2288683154875527, nan]}, {'': [0.221481513968687, -5.989361053898871e-17], 'true': [0.221481513968687, nan]}, {'': [0.21412014117811498, 4.2758589461914814e-17], 'true': [0.21412014117811498, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.14185106490048766;  // std dev = 8,16e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.14185106490048785;  // std dev = 9,88e-08, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839136;  // std dev = 0,000, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.12544463852839202;  // std dev = 0,000, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1123163781936062;  // std dev = 8,82e-08, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.11231637819360696;  // std dev = 0,000, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783619;  // std dev = 5,37e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.10159632948783662;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926108;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.09269127618926042;  // std dev = 1,65e-07, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08518475138839685;  // std dev = 5,16e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.08518475138839678;  // std dev = 1,12e-07, 337,000 (wgt'ed) examples reached here.  /* #neg=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109165;  // std dev = 5,05e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 311,000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333707;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.07324622576333698;  // std dev = 9,77e-08, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420267;  // std dev = 4,83e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.06842697784420292;  // std dev = 0,000, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.06419184008202594;  // std dev = 1,18e-07, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.749 seconds
Total inference time: 1.229 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064085
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.097 seconds
Refined model CLL: -0.064085


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.139 seconds
Total inference time: 1.229 seconds
AUC ROC: 1.0
Total revision time: 9.139
Best scored revision CLL: -0.064085


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 14:33:41
{'F1': 1.0, 'Inference time': 1.229, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.137825, 'Inference time': 1.202, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 2.304, 'CLL': -0.316926}, 'Recall': 1.0, 'Learning time': 9.139, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 2,36e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.14185106490048768;  // std dev = 1,84e-07, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839124;  // std dev = 4,34e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.1254446385283922;  // std dev = 0,000, 380,000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.11231637819360646;  // std dev = 0,000, 407,000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.10159632948783653;  // std dev = 0,000, 377,000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926104;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.0926912761892605;  // std dev = 1,85e-07, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08518475138839682;  // std dev = 1,83e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.08518475138839678;  // std dev = 1,10e-07, 374,000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109141;  // std dev = 1,13e-07, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20833636356177818;  // std dev = 0,288, 203,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=202 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17730373119002013;  // std dev = 1,43e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333704;  // std dev = 5,27e-09, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.07347579588045408;  // std dev = 0,044, 384,000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15290104728938744;  // std dev = 1,69e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.06857510072704757;  // std dev = 0,036, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13412973321939706;  // std dev = 1,95e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.06432899979262723;  // std dev = 0,034, 367,000 (wgt'ed) examples reached here.  /* #neg=367 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06372
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.229 seconds
Total inference time: 1.147 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 14:33:45
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.147, 'Precision': [1.0, 0.5], 'Learning time': 3.229, 'AUC PR': 1.0, 'CLL': -0.06372, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.14185106490048768;  // std dev = 3,94e-08, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.14185106490048782;  // std dev = 1,07e-07, 360,000 (wgt'ed) examples reached here.  /* #neg=360 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.179 seconds
Total inference time: 0.808 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 14:33:48
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.808, 'Precision': [nan, 0.5], 'Learning time': 1.179, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5142464960751179;  // std dev = 0,475, 410,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048738;  // std dev = 2,92e-07, 392,000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4163687348838628;  // std dev = 0,482, 425,000 (wgt'ed) examples reached here.  /* #neg=156 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839222;  // std dev = 0,000, 367,000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3688151959733096;  // std dev = 0,472, 405,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360633;  // std dev = 0,000, 377,000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.26459794691775435;  // std dev = 9,813, 419,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783617;  // std dev = 1,50e-07, 366,000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2278749111989424;  // std dev = 0,471, 402,000 (wgt'ed) examples reached here.  /* #neg=133 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926105;  // std dev = 1,07e-07, 426,000 (wgt'ed) examples reached here.  /* #neg=426 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.17117839653532624;  // std dev = 0,471, 402,000 (wgt'ed) examples reached here.  /* #neg=133 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,25e-07, 392,000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.09827456889169578;  // std dev = 9,855, 421,000 (wgt'ed) examples reached here.  /* #neg=152 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109146;  // std dev = 1,15e-07, 412,000 (wgt'ed) examples reached here.  /* #neg=412 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1410670864712009;  // std dev = 0,456, 381,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0732462257633372;  // std dev = 3,65e-08, 392,000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07323024663990584;  // std dev = 0,469, 400,000 (wgt'ed) examples reached here.  /* #neg=131 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420335;  // std dev = 0,000, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.05077278861481642;  // std dev = 0,471, 403,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202554;  // std dev = 2,10e-07, 422,000 (wgt'ed) examples reached here.  /* #neg=422 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.317872
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.336 seconds
Total inference time: 1.245 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.870068
   AUC PR    = 0.09614
   CLL	      = -0.307888
   Precision = 0.09614 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.175416


Total scoring time: 2.154 seconds
Parameter learned model CLL: -0.307888


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.92e-07, 392, 0], 'true,true': [0.475, 141, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 367, 0], 'true,true': [0.482, 156, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 377, 0], 'true,true': [0.472, 136, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [1.5e-07, 366, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.813, 150, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.07e-07, 426, 0], 'true,true': [0.471, 133, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.25e-07, 392, 0], 'true,true': [0.471, 133, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [1.15e-07, 412, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.855, 152, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.65e-08, 392, 0], 'true,true': [0.456, 112, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 397, 0], 'true,true': [0.469, 131, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.1e-07, 422, 0], 'true,true': [0.471, 134, 269], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22563355145746922, 2.1751308237554087e-16], 'true': [0.22563355145746922, nan]}, {'': [0.2323266435986091, -1.210052342915702e-16], 'true': [0.2323266435986091, nan]}, {'': [0.2230391708580975, -2.591502020345193e-17], 'true': [0.2230391708580975, nan]}, {'': [0.22983464436862733, 6.188128333976282e-17], 'true': [0.22983464436862733, nan], 'true,true': [0.22983464436862733, nan]}, {'': [0.221386846860222, 2.7104036281928704e-17], 'true': [0.221386846860222, nan]}, {'': [0.2213868468602257, 3.9650822308041306e-17], 'true': [0.2213868468602257, nan]}, {'': [0.23069154428151475, 3.2336592950247276e-17], 'true': [0.23069154428151475, nan], 'true,true': [0.23069154428151475, nan]}, {'': [0.2075488595421639, 3.398641912117826e-18], 'true': [0.2075488595421639, nan]}, {'': [0.22024375000000082, -1.1242056823660275e-16], 'true': [0.22024375000000082, nan]}, {'': [0.22194582812528785, 1.0418206581790569e-16], 'true': [0.22194582812528785, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.141851064900488;  // std dev = 0,000, 145,000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.14185106490048735;  // std dev = 3,01e-07, 399,000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839108;  // std dev = 7,88e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.12544463852839227;  // std dev = 0,000, 417,000 (wgt'ed) examples reached here.  /* #neg=417 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1123163781936062;  // std dev = 9,42e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.11231637819360615;  // std dev = 0,000, 412,000 (wgt'ed) examples reached here.  /* #neg=412 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783642;  // std dev = 0,000, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.10159632948783588;  // std dev = 2,29e-07, 406,000 (wgt'ed) examples reached here.  /* #neg=406 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926085;  // std dev = 7,45e-08, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.09269127618926075;  // std dev = 1,71e-07, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08518475138839683;  // std dev = 5,48e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.08518475138839678;  // std dev = 1,28e-07, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0787767547310916;  // std dev = 6,75e-08, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.0787767547310915;  // std dev = 2,18e-07, 417,000 (wgt'ed) examples reached here.  /* #neg=417 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333713;  // std dev = 0,000, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.07324622576333771;  // std dev = 0,000, 395,000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420265;  // std dev = 5,77e-08, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.06842697784420333;  // std dev = 0,000, 391,000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 156,000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.0641918400820256;  // std dev = 1,97e-07, 400,000 (wgt'ed) examples reached here.  /* #neg=400 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.397 seconds
Total inference time: 1.255 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064083
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.12 seconds
Refined model CLL: -0.064083


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.007000000000001 seconds
Total inference time: 1.255 seconds
AUC ROC: 1.0
Total revision time: 10.007000000000001
Best scored revision CLL: -0.064083


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 14:34:01
{'F1': 1.0, 'Inference time': 1.255, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.137825, 'Inference time': 1.245, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 2.336, 'CLL': -0.317872}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.007000000000001, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 5,16e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.14185106490048718;  // std dev = 2,92e-07, 466,000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839144;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839227;  // std dev = 0,000, 489,000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360592;  // std dev = 0,000, 474,000 (wgt'ed) examples reached here.  /* #neg=474 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( director(A) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360632;  // std dev = 3,16e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.10159632948783627;  // std dev = 1,23e-07, 416,000 (wgt'ed) examples reached here.  /* #neg=416 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.09269127618926137;  // std dev = 0,000, 512,000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 1,37e-07, 514,000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.07877675473109197;  // std dev = 0,000, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.07324622576333725;  // std dev = 0,000, 508,000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0684269778442027;  // std dev = 1,49e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.06842697784420343;  // std dev = 0,000, 462,000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.06419184008202569;  // std dev = 1,83e-07, 445,000 (wgt'ed) examples reached here.  /* #neg=445 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.929 seconds
Total inference time: 1.147 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 14:34:06
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.147, 'Precision': [1.0, 0.5], 'Learning time': 3.929, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 3,94e-08, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.14185106490048757;  // std dev = 1,33e-07, 507,000 (wgt'ed) examples reached here.  /* #neg=507 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.388 seconds
Total inference time: 0.762 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 14:34:09
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.762, 'Precision': [nan, 0.5], 'Learning time': 1.388, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;true;true
3;true,true,false;author(G, D), title(G, B).;false;false
3;true,false,true;haswordvenue(J, H).;false;false
3;true,true;author(E, D), title(E, A).;true;true
3;true,true,true;author(F, D), title(F, B).;false;false
3;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
3;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, A).;true;false
6;true,true,true;author(F, D), title(F, B).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5112497102933063;  // std dev = 0,476, 516,000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048724;  // std dev = 2,76e-07, 456,000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.45793558763222086;  // std dev = 0,469, 500,000 (wgt'ed) examples reached here.  /* #neg=163 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839233;  // std dev = 0,000, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3547302917309928;  // std dev = 0,474, 512,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360579;  // std dev = 0,000, 511,000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.26992361517693625;  // std dev = 10,812, 516,000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783547;  // std dev = 3,33e-07, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2321665041788872;  // std dev = 0,466, 495,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892613;  // std dev = 0,000, 468,000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14282456533430185;  // std dev = 0,477, 519,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,49e-07, 491,000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.11867671604889975;  // std dev = 10,692, 510,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109214;  // std dev = 1,12e-07, 511,000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08553438431851419;  // std dev = 0,475, 513,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0732462257633374;  // std dev = 0,000, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06859063686811678;  // std dev = 0,473, 510,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420353;  // std dev = 0,000, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.01658407328953218;  // std dev = 0,484, 539,000 (wgt'ed) examples reached here.  /* #neg=202 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202541;  // std dev = 2,41e-07, 478,000 (wgt'ed) examples reached here.  /* #neg=478 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.307159
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.869 seconds
Total inference time: 1.223 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.868927
   AUC PR    = 0.095576
   CLL	      = -0.299857
   Precision = 0.095576 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174476


Total scoring time: 3.018 seconds
Parameter learned model CLL: -0.299857


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.76e-07, 456, 0], 'true,true': [0.476, 179, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 481, 0], 'true,true': [0.469, 163, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 511, 0], 'true,true': [0.474, 175, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [3.33e-07, 484, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.812, 179, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 468, 0], 'true,true': [0.466, 158, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.49e-07, 491, 0], 'true,true': [0.477, 182, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [1.12e-07, 511, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.692, 173, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 483, 0], 'true,true': [0.475, 176, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 484, 0], 'true,true': [0.473, 173, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.41e-07, 478, 0], 'true,true': [0.484, 202, 337], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22656015263506063, 1.675073335399359e-16], 'true': [0.22656015263506063, nan]}, {'': [0.2197240000000037, -1.3479630901893793e-16], 'true': [0.2197240000000037, nan]}, {'': [0.2249717712402431, -1.7381182381607146e-18], 'true': [0.2249717712402431, nan]}, {'': [0.22656015263505483, 2.2938492244321414e-16], 'true': [0.22656015263505483, nan], 'true,true': [0.22656015263505483, nan]}, {'': [0.21730843791450075, -5.693451408334136e-18], 'true': [0.21730843791450075, nan]}, {'': [0.22770185735871182, 4.52229337932854e-17], 'true': [0.22770185735871182, nan]}, {'': [0.22414840445982154, 2.4333655334250005e-17], 'true': [0.22414840445982154, nan], 'true,true': [0.22414840445982154, nan]}, {'': [0.22537608912903598, -2.3905423304558237e-17], 'true': [0.22537608912903598, nan]}, {'': [0.2241484044598225, -1.2111523905001707e-16], 'true': [0.2241484044598225, nan]}, {'': [0.23431696848076516, 1.2124192863061332e-16], 'true': [0.23431696848076516, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048807;  // std dev = 0,000, 161,000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.14185106490048777;  // std dev = 0,000, 505,000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.1254446385283923;  // std dev = 0,000, 498,000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360621;  // std dev = 9,06e-08, 154,000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.11231637819360588;  // std dev = 0,000, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783646;  // std dev = 0,000, 177,000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.10159632948783542;  // std dev = 3,44e-07, 493,000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926078;  // std dev = 7,30e-08, 161,000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.09269127618926147;  // std dev = 0,000, 503,000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6,32e-08, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.08518475138839678;  // std dev = 1,38e-07, 474,000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 8,02e-08, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else return -0.07877675473109208;  // std dev = 0,000, 501,000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333682;  // std dev = 9,06e-08, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.07324622576333727;  // std dev = 0,000, 431,000 (wgt'ed) examples reached here.  /* #neg=431 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6,41e-08, 167,000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.0684269778442035;  // std dev = 0,000, 475,000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 169,000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.0641918400820254;  // std dev = 2,43e-07, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.472 seconds
Total inference time: 1.315 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064087
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.685 seconds
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.044 seconds
Total inference time: 1.315 seconds
AUC ROC: 1.0
Total revision time: 12.044
Best scored revision CLL: -0.064087


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 14:34:24
{'parameter_1.0': {'F1': 0.137825, 'Inference time': 1.223, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 2.869, 'CLL': -0.307159}, 'F1': 1.0, 'Inference time': 1.315, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 12.044, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048766;  // std dev = 6,14e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.1418510649004886;  // std dev = 0,000, 626,000 (wgt'ed) examples reached here.  /* #neg=626 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.12544463852839235;  // std dev = 0,000, 649,000 (wgt'ed) examples reached here.  /* #neg=649 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360633;  // std dev = 2,79e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.11231637819360606;  // std dev = 0,000, 638,000 (wgt'ed) examples reached here.  /* #neg=638 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783628;  // std dev = 1,83e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.10159632948783529;  // std dev = 4,17e-07, 672,000 (wgt'ed) examples reached here.  /* #neg=672 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926104;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.0926912761892617;  // std dev = 0,000, 598,000 (wgt'ed) examples reached here.  /* #neg=598 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1,05e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.08518475138839678;  // std dev = 1,52e-07, 625,000 (wgt'ed) examples reached here.  /* #neg=625 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0787767547310927;  // std dev = 0,000, 647,000 (wgt'ed) examples reached here.  /* #neg=647 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2030670612472911;  // std dev = 0,807, 345,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=337 */
%   | else return -0.07877675473109165;  // std dev = 3,16e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17807365652042553;  // std dev = 3,58e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.07331585626288593;  // std dev = 0,030, 620,000 (wgt'ed) examples reached here.  /* #neg=620 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15348472758732776;  // std dev = 3,14e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0684269778442027;  // std dev = 1,39e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.06864216864917028;  // std dev = 0,053, 647,000 (wgt'ed) examples reached here.  /* #neg=647 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13458514997776458;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.06436311768265127;  // std dev = 0,047, 610,000 (wgt'ed) examples reached here.  /* #neg=610 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063732
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.472 seconds
Total inference time: 1.192 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 14:34:30
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.192, 'Precision': [1.0, 0.5], 'Learning time': 4.472, 'AUC PR': 1.0, 'CLL': -0.063732, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048766;  // std dev = 6,14e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.14185106490048846;  // std dev = 0,000, 614,000 (wgt'ed) examples reached here.  /* #neg=614 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.418 seconds
Total inference time: 0.735 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 14:34:32
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.735, 'Precision': [nan, 0.5], 'Learning time': 1.418, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


