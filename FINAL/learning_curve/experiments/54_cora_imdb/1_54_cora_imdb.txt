Starting experiment #1 for 54_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 698
Source train neg examples: 27996

WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5186752508889819;  // std dev = 0,474, 380,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.10248098616033043;  // std dev = 3,796, 381,000 (wgt'ed) examples reached here.  /* #neg=366 #pos=15 */
%   | | | else return 0.12130682983635446;  // std dev = 2,714, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.04457480030904825;  // std dev = 4,751, 257,000 (wgt'ed) examples reached here.  /* #neg=232 #pos=25 */
%   | | | else return 0.28274786558079096;  // std dev = 15,114, 935,000 (wgt'ed) examples reached here.  /* #neg=538 #pos=397 */
%   else return -0.14185106490048788;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.7826751936518119;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.21732480634818824;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4923526130066508;  // std dev = 0,454, 341,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.08906706373617147;  // std dev = 3,793, 368,000 (wgt'ed) examples reached here.  /* #neg=353 #pos=15 */
%   | | | else return 0.060122712097127676;  // std dev = 2,798, 46,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.04527026092775606;  // std dev = 4,766, 274,000 (wgt'ed) examples reached here.  /* #neg=249 #pos=25 */
%   | | | else return 0.2607550185893062;  // std dev = 14,902, 901,000 (wgt'ed) examples reached here.  /* #neg=504 #pos=397 */
%   else return -0.12544463852839108;  // std dev = 7,88e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.3894711168270832;  // std dev = 0,452, 359,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=251 */
%   | else return 0.10117153146993989;  // std dev = 0,433, 1.586,000 (wgt'ed) examples reached here.  /* #neg=1.139 #pos=447 */
%   else return -0.11231637819360617;  // std dev = 9,88e-08, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.34602290022002674;  // std dev = 0,428, 337,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.09141374660078153;  // std dev = 3,795, 377,000 (wgt'ed) examples reached here.  /* #neg=362 #pos=15 */
%   | | | else return 0.17729799706512503;  // std dev = 2,535, 28,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.046710333087815116;  // std dev = 4,753, 259,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=25 */
%   | | | else return 0.19436209329323087;  // std dev = 14,992, 915,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=397 */
%   else return -0.10159632948783642;  // std dev = 0,000, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.44106412948015195;  // std dev = 2,58e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.3179615570743069;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.23146723457957286;  // std dev = 0,450, 337,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.08532860127645543;  // std dev = 3,803, 419,000 (wgt'ed) examples reached here.  /* #neg=404 #pos=15 */
%   | | | else return 0.05566443351174738;  // std dev = 2,714, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.04144430406361764;  // std dev = 4,754, 260,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=25 */
%   | | | else return 0.14836820380202193;  // std dev = 15,108, 934,000 (wgt'ed) examples reached here.  /* #neg=537 #pos=397 */
%   else return -0.09269127618926072;  // std dev = 8,43e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.3367282431311649;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.2532946749289216;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.1490295655528182;  // std dev = 0,461, 349,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.07357432039048409;  // std dev = 3,797, 387,000 (wgt'ed) examples reached here.  /* #neg=372 #pos=15 */
%   | | | else return 0.08623432285815942;  // std dev = 2,640, 33,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.04378565028372041;  // std dev = 4,772, 281,000 (wgt'ed) examples reached here.  /* #neg=256 #pos=25 */
%   | | | else return 0.11726119886045559;  // std dev = 15,114, 935,000 (wgt'ed) examples reached here.  /* #neg=538 #pos=397 */
%   else return -0.0851847513883968;  // std dev = 6,91e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(B, D) )
%   | | then return 0.10235020261897994;  // std dev = 0,451, 374,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=251 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.06410822728226964;  // std dev = 3,793, 365,000 (wgt'ed) examples reached here.  /* #neg=350 #pos=15 */
%   | | | else return 0.12534766285543736;  // std dev = 2,535, 28,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | else if ( haswordtitle(B, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.06631772352779584;  // std dev = 3,752, 244,000 (wgt'ed) examples reached here.  /* #neg=229 #pos=15 */
%   | | | else return 0.5388735333028052;  // std dev = 1,826, 15,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | else return 0.10924601012922652;  // std dev = 0,497, 898,000 (wgt'ed) examples reached here.  /* #neg=501 #pos=397 */
%   else return -0.07877675473109155;  // std dev = 6,66e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.24657058487098338;  // std dev = 1,05e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.22582080684492342;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.13660833472367342;  // std dev = 0,437, 326,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.061054842282145014;  // std dev = 3,798, 392,000 (wgt'ed) examples reached here.  /* #neg=377 #pos=15 */
%   | | | else return 0.06772003079509847;  // std dev = 2,603, 31,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return 0.05642138196570682;  // std dev = 0,457, 1.177,000 (wgt'ed) examples reached here.  /* #neg=755 #pos=422 */
%   else return -0.07324622576333725;  // std dev = 0,000, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(B, D) )
%   | | then return 0.07091925131861736;  // std dev = 0,440, 361,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=251 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.050512223976670434;  // std dev = 3,788, 345,000 (wgt'ed) examples reached here.  /* #neg=330 #pos=15 */
%   | | | else return 0.044566880143542625;  // std dev = 2,622, 32,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | else if ( haswordtitle(B, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.06922285964895053;  // std dev = 3,760, 261,000 (wgt'ed) examples reached here.  /* #neg=246 #pos=15 */
%   | | | else return 0.5043509863613973;  // std dev = 1,690, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0.05129697549467749;  // std dev = 0,494, 941,000 (wgt'ed) examples reached here.  /* #neg=544 #pos=397 */
%   else return -0.06842697784420264;  // std dev = 5,67e-08, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.062431538567964;  // std dev = 0,438, 356,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.04901550337400563;  // std dev = 3,793, 368,000 (wgt'ed) examples reached here.  /* #neg=353 #pos=15 */
%   | | | else return 0.08037829072347438;  // std dev = 2,535, 28,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.037679980267106596;  // std dev = 4,476, 270,000 (wgt'ed) examples reached here.  /* #neg=245 #pos=25 */
%   | | | else return 0.05266985179579581;  // std dev = 14,973, 912,000 (wgt'ed) examples reached here.  /* #neg=515 #pos=397 */
%   else return -0.06419184008202626;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5017132915351568;  // std dev = 0,479, 101,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,56e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.41661445884171083;  // std dev = 0,483, 103,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839133;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.37043393853321765;  // std dev = 0,473, 98,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=65 */
%   else return -0.11231637819360621;  // std dev = 7,15e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2500967186008557;  // std dev = 0,484, 104,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783624;  // std dev = 4,71e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16124717501615957;  // std dev = 0,491, 109,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.092691276189261;  // std dev = 4,21e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.18821816377945066;  // std dev = 0,473, 98,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,58e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.09114095400757562;  // std dev = 5,014, 106,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=65 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0787767547310916;  // std dev = 5,67e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1467432192808679;  // std dev = 0,462, 94,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.026640215294804946;  // std dev = 5,051, 107,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=65 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420267;  // std dev = 3,65e-08, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04375988776702214;  // std dev = 0,483, 103,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.30751
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.333 seconds
Total inference time: 1.621 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.867048
   AUC PR    = 0.100619
   CLL	      = -0.294542
   Precision = 0.100619 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.182841


Total scoring time: 1.197 seconds
Parameter learned model CLL: -0.294542


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.56e-08, 93, 0], 'true,true': [0.479, 36, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 111, 0], 'true,true': [0.483, 38, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.473, 33, 65], 'false': [7.15e-08, 87, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.71e-08, 94, 0], 'true,true': [0.484, 39, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.21e-08, 97, 0], 'true,true': [0.491, 44, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.58e-08, 101, 0], 'true,true': [0.473, 33, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [5.67e-08, 98, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [5.014, 41, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 89, 0], 'true,true': [0.462, 29, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [3.65e-08, 78, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [5.051, 42, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 91, 0], 'true,true': [0.483, 38, 65], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22938927556121883, 7.879002110243047e-17], 'true': [0.22938927556121883, nan]}, {'': [0.23282118955603603, -6.00120553851436e-18], 'true': [0.23282118955603603, nan]}, {'': [0.22334443981674154, 5.870144727903127e-17]}, {'': [0.23437499999999944, 2.362176648138631e-17], 'true': [0.23437499999999944, nan]}, {'': [0.24072047807423608, 1.8312957107219077e-17], 'true': [0.24072047807423608, nan]}, {'': [0.22334443981674315, 3.0778460088618204e-17], 'true': [0.22334443981674315, nan]}, {'': [0.23718405126379496, 3.285353848380565e-17], 'true': [0.23718405126379496, nan], 'true,true': [0.23718405126379496, nan]}, {'': [0.21333182435491188, -7.484649604214538e-18], 'true': [0.21333182435491188, nan]}, {'': [0.23844877281858656, 1.708035422500241e-17], 'true': [0.23844877281858656, nan], 'true,true': [0.23844877281858656, nan]}, {'': [0.23282118955603762, -1.342027831964475e-17], 'true': [0.23282118955603762, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 2,79e-08, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.14185106490048763;  // std dev = 8,94e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109542;  // std dev = 1,19e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.13339755900329672;  // std dev = 0,214, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1254446385283913;  // std dev = 0,000, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.12377278683791068;  // std dev = 0,237, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.11231637819360625;  // std dev = 6,66e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.10862579762676701;  // std dev = 0,180, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.10159632948783613;  // std dev = 5,96e-08, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.09944690835278552;  // std dev = 0,204, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.09269127618926108;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.09240985722628686;  // std dev = 0,189, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.08518475138839682;  // std dev = 5,58e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.08409346486753834;  // std dev = 0,177, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.0787767547310916;  // std dev = 5,77e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.08021005577271116;  // std dev = 0,134, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.07324622576333707;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936707;  // std dev = 4,94e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.06749578663744235;  // std dev = 0,093, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06842697784420265;  // std dev = 4,41e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.06322733476844777;  // std dev = 0,088, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.06419184008202626;  // std dev = 0,000, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062665
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.885 seconds
Total inference time: 1.516 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06457
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.333 seconds
Refined model CLL: -0.06457


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062665
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.748 seconds
Total inference time: 1.516 seconds
AUC ROC: 1.0
Total revision time: 5.748
Best scored revision CLL: -0.06457


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:35:58
{'parameter_0.2': {'F1': 0.106262, 'Inference time': 1.621, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 1.333, 'CLL': -0.30751}, 'F1': 1.0, 'Inference time': 1.516, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.748, 'CLL': -0.062665}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.14185106490048768;  // std dev = 6,66e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109542;  // std dev = 1,19e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.1123163781936062;  // std dev = 8,69e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.10159632948783633;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.092691276189261;  // std dev = 3,65e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.08518475138839679;  // std dev = 5,05e-08, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.0787767547310916;  // std dev = 6,14e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333716;  // std dev = 0,000, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936707;  // std dev = 4,94e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.06842697784420265;  // std dev = 4,83e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.06419184008202626;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.17 seconds
Total inference time: 1.383 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 02:36:02
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.383, 'Precision': [1.0, 0.5], 'Learning time': 2.17, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.14185106490048763;  // std dev = 8,94e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.82 seconds
Total inference time: 0.852 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 02:36:04
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.852, 'Precision': [nan, 0.5], 'Learning time': 0.82, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4801585044774995;  // std dev = 0,485, 209,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048838;  // std dev = 0,000, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4111649036769586;  // std dev = 0,485, 209,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283915;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3969398025061351;  // std dev = 0,465, 190,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=130 */
%   else return -0.11231637819360636;  // std dev = 2,98e-08, 167,000 (wgt'ed) examples reached here.  /* #neg=167 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.29878865963001466;  // std dev = 0,469, 193,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783653;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20960241921362463;  // std dev = 0,475, 198,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926054;  // std dev = 9,54e-08, 211,000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2311735054953969;  // std dev = 0,444, 178,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.1133912368738438;  // std dev = 6,549, 194,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=130 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109147;  // std dev = 8,02e-08, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08561648285582321;  // std dev = 0,470, 194,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333668;  // std dev = 1,13e-07, 187,000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.06498532683807749;  // std dev = 6,549, 194,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=130 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 7,88e-08, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04613138448778179;  // std dev = 0,471, 195,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.330933
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.691 seconds
Total inference time: 1.295 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.868909
   AUC PR    = 0.101881
   CLL	      = -0.312022
   Precision = 0.101881 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.184922


Total scoring time: 1.731 seconds
Parameter learned model CLL: -0.312022


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 193, 0], 'true,true': [0.485, 79, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 176, 0], 'true,true': [0.485, 79, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.465, 60, 130], 'false': [2.98e-08, 167, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 195, 0], 'true,true': [0.469, 63, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.54e-08, 211, 0], 'true,true': [0.475, 68, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.45e-08, 181, 0], 'true,true': [0.444, 48, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [8.02e-08, 182, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.549, 64, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.13e-07, 187, 0], 'true,true': [0.47, 64, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [7.88e-08, 190, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.549, 64, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 212, 0], 'true,true': [0.471, 65, 130], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2351136649802016, -2.277970558298249e-16], 'true': [0.2351136649802016, nan]}, {'': [0.23511366498019992, -1.2616170734376778e-17], 'true': [0.23511366498019992, nan]}, {'': [0.2160664819944627, 5.318433650898954e-18]}, {'': [0.21987167440736774, -9.109522253334617e-17], 'true': [0.21987167440736774, nan]}, {'': [0.22548719518416593, 4.3146108066001346e-17], 'true': [0.22548719518416593, nan]}, {'': [0.19694483019820605, 3.0669144326661785e-17], 'true': [0.19694483019820605, nan]}, {'': [0.22106493782548647, 3.53807337517907e-17], 'true': [0.22106493782548647, nan], 'true,true': [0.22106493782548647, nan]}, {'': [0.2210649378254852, 6.768204535148013e-17], 'true': [0.2210649378254852, nan]}, {'': [0.2210649378254862, 3.272236283105724e-17], 'true': [0.2210649378254862, nan], 'true,true': [0.2210649378254862, nan]}, {'': [0.22222222222222252, -5.236901059552625e-19], 'true': [0.22222222222222252, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.14185106490048768;  // std dev = 6,14e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.14185106490048827;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109556;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.12544463852839172;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11231637819360629;  // std dev = 4,71e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.11231637819360661;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830914;  // std dev = 3,86e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.10159632948783623;  // std dev = 3,49e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.10159632948783652;  // std dev = 0,000, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926105;  // std dev = 0,000, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return 0.3207118471601497;  // std dev = 2,53e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   else return -0.0926912761892606;  // std dev = 8,82e-08, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694897;  // std dev = 5,96e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.0866550808736055;  // std dev = 0,053, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.08518475138839678;  // std dev = 6,99e-08, 174,000 (wgt'ed) examples reached here.  /* #neg=174 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325353;  // std dev = 2,11e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.0803961041943038;  // std dev = 0,060, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.07877675473109147;  // std dev = 7,45e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07453279688243546;  // std dev = 0,057, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.07324622576333663;  // std dev = 1,26e-07, 210,000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06861053055920993;  // std dev = 0,031, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.06842697784420262;  // std dev = 8,36e-08, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06433623281191717;  // std dev = 0,029, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.06419184008202626;  // std dev = 0,000, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063368
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.178 seconds
Total inference time: 1.493 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064462
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.792 seconds
Refined model CLL: -0.064462


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063368
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.3919999999999995 seconds
Total inference time: 1.493 seconds
AUC ROC: 1.0
Total revision time: 7.3919999999999995
Best scored revision CLL: -0.064462


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:36:15
{'F1': 1.0, 'Inference time': 1.493, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.106262, 'Inference time': 1.295, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 1.691, 'CLL': -0.330933}, 'Recall': 1.0, 'Learning time': 7.3919999999999995, 'CLL': -0.063368}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.14185106490048838;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109556;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.12544463852839174;  // std dev = 0,000, 225,000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11231637819360638;  // std dev = 1,29e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.11231637819360678;  // std dev = 0,000, 246,000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830914;  // std dev = 3,86e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.10159632948783646;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601497;  // std dev = 2,53e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.09269127618926094;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.09269127618926057;  // std dev = 6,32e-08, 234,000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694897;  // std dev = 5,96e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325353;  // std dev = 2,11e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.07877675473109144;  // std dev = 6,32e-08, 246,000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.0732462257633368;  // std dev = 1,17e-07, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.06842697784420261;  // std dev = 6,14e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.06419184008202623;  // std dev = 0,000, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.63 seconds
Total inference time: 1.384 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 02:36:19
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.384, 'Precision': [1.0, 0.5], 'Learning time': 2.63, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.14185106490048832;  // std dev = 0,000, 255,000 (wgt'ed) examples reached here.  /* #neg=255 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.049 seconds
Total inference time: 0.907 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 02:36:21
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.907, 'Precision': [nan, 0.5], 'Learning time': 1.049, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4995963035205611;  // std dev = 0,480, 304,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048793;  // std dev = 0,000, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.45371113583723816;  // std dev = 0,471, 292,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.125444638528392;  // std dev = 0,000, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.33094083283233006;  // std dev = 0,483, 309,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=195 */
%   else return -0.11231637819360697;  // std dev = 0,000, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2827194993739187;  // std dev = 0,475, 297,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878366;  // std dev = 0,000, 280,000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20156020015434614;  // std dev = 0,479, 303,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892604;  // std dev = 1,75e-07, 323,000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16222977381118425;  // std dev = 0,476, 298,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.1173570599979377;  // std dev = 8,261, 300,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=195 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13972641290516272;  // std dev = 0,458, 278,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333693;  // std dev = 1,02e-07, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.043581353550079284;  // std dev = 8,386, 305,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=195 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0684269778442029;  // std dev = 0,000, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06852717015570554;  // std dev = 0,468, 289,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202615;  // std dev = 6,66e-08, 264,000 (wgt'ed) examples reached here.  /* #neg=264 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.324498
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.895 seconds
Total inference time: 1.447 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.867678
   AUC PR    = 0.101036
   CLL	      = -0.308545
   Precision = 0.101036 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.183529


Total scoring time: 2.177 seconds
Parameter learned model CLL: -0.308545


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 285, 0], 'true,true': [0.48, 109, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 299, 0], 'true,true': [0.471, 97, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.483, 114, 195], 'false': [0.0, 284, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 280, 0], 'true,true': [0.475, 102, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.75e-07, 323, 0], 'true,true': [0.479, 108, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.03e-07, 292, 0], 'true,true': [0.476, 103, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [3.65e-08, 303, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.261, 105, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.02e-07, 288, 0], 'true,true': [0.458, 83, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 281, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.386, 110, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [6.66e-08, 264, 0], 'true,true': [0.468, 94, 195], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22999264196676378, -9.349246523159213e-18], 'true': [0.22999264196676378, nan]}, {'': [0.22184040157628657, -8.614439522175128e-17], 'true': [0.22184040157628657, nan]}, {'': [0.23282118955603887, -1.1571338566515715e-16]}, {'': [0.22548719518416302, -6.026924990822278e-17], 'true': [0.22548719518416302, nan]}, {'': [0.22938927556122216, 9.486735442617437e-17], 'true': [0.22938927556122216, nan]}, {'': [0.226172244493491, 3.650048300137501e-17], 'true': [0.226172244493491, nan]}, {'': [0.22749999999999962, 4.3969228698026e-18], 'true': [0.22749999999999962, nan], 'true,true': [0.22749999999999962, nan]}, {'': [0.20942239014543607, 3.623644594262664e-17], 'true': [0.20942239014543607, nan]}, {'': [0.2305831765654393, -3.9509716178831196e-17], 'true': [0.2305831765654393, nan], 'true,true': [0.2305831765654393, nan]}, {'': [0.21946576310149565, 1.682156097916904e-17], 'true': [0.21946576310149565, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.14185106490048768;  // std dev = 6,83e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else return -0.1418510649004879;  // std dev = 4,21e-08, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.12544463852839197;  // std dev = 0,000, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.11231637819360625;  // std dev = 6,32e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.11231637819360697;  // std dev = 0,000, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415830997;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.1015963294878366;  // std dev = 0,000, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.320711847160149;  // std dev = 4,00e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.09269127618926043;  // std dev = 1,37e-07, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08518475138839679;  // std dev = 3,80e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07877675473109161;  // std dev = 6,05e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.07877675473109143;  // std dev = 5,96e-08, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.07324622576333682;  // std dev = 1,15e-07, 258,000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06842697784420268;  // std dev = 3,80e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.06842697784420294;  // std dev = 0,000, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.0641918400820261;  // std dev = 8,16e-08, 273,000 (wgt'ed) examples reached here.  /* #neg=273 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.131 seconds
Total inference time: 1.354 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064211
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.647 seconds
Refined model CLL: -0.064211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.85 seconds
Total inference time: 1.354 seconds
AUC ROC: 1.0
Total revision time: 8.85
Best scored revision CLL: -0.064211


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:36:34
{'F1': 1.0, 'Inference time': 1.354, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.106262, 'Inference time': 1.447, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 1.895, 'CLL': -0.324498}, 'Recall': 1.0, 'Learning time': 8.85, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1418510649004877;  // std dev = 2,58e-08, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048788;  // std dev = 5,16e-08, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.1254446385283921;  // std dev = 0,000, 381,000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.11231637819360665;  // std dev = 0,000, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830997;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.10159632948783633;  // std dev = 1,49e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.10159632948783655;  // std dev = 0,000, 341,000 (wgt'ed) examples reached here.  /* #neg=341 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.320711847160149;  // std dev = 4,00e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.09269127618926055;  // std dev = 1,50e-07, 344,000 (wgt'ed) examples reached here.  /* #neg=344 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08518475138839682;  // std dev = 1,75e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 351,000 (wgt'ed) examples reached here.  /* #neg=351 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07877675473109176;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.07877675473109147;  // std dev = 3,65e-08, 365,000 (wgt'ed) examples reached here.  /* #neg=365 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07324622576333704;  // std dev = 1,18e-08, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.07324622576333709;  // std dev = 7,30e-08, 353,000 (wgt'ed) examples reached here.  /* #neg=353 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.06842697784420314;  // std dev = 0,000, 350,000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.06419184008202607;  // std dev = 8,56e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.004 seconds
Total inference time: 1.624 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 02:36:38
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.624, 'Precision': [1.0, 0.5], 'Learning time': 3.004, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1418510649004877;  // std dev = 3,65e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.14185106490048785;  // std dev = 7,88e-08, 349,000 (wgt'ed) examples reached here.  /* #neg=349 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.131 seconds
Total inference time: 0.865 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 02:36:41
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.865, 'Precision': [nan, 0.5], 'Learning time': 1.131, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5265293978244439;  // std dev = 0,471, 389,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048727;  // std dev = 3,01e-07, 415,000 (wgt'ed) examples reached here.  /* #neg=415 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.42971533124116684;  // std dev = 0,477, 401,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839224;  // std dev = 0,000, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3476345818919216;  // std dev = 0,477, 401,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=260 */
%   else return -0.11231637819360644;  // std dev = 0,000, 357,000 (wgt'ed) examples reached here.  /* #neg=357 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2899277093018809;  // std dev = 0,471, 389,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783602;  // std dev = 1,92e-07, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21632802143694935;  // std dev = 0,472, 391,000 (wgt'ed) examples reached here.  /* #neg=131 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 1,37e-07, 408,000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14103061770012165;  // std dev = 0,479, 404,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,19e-07, 364,000 (wgt'ed) examples reached here.  /* #neg=364 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.11228038556372948;  // std dev = 9,539, 400,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=260 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109155;  // std dev = 9,19e-08, 424,000 (wgt'ed) examples reached here.  /* #neg=424 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.10289724622330253;  // std dev = 0,471, 389,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0732462257633372;  // std dev = 3,65e-08, 392,000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.03593093005227644;  // std dev = 9,854, 415,000 (wgt'ed) examples reached here.  /* #neg=155 #pos=260 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420333;  // std dev = 0,000, 393,000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04116014530934532;  // std dev = 0,480, 406,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202564;  // std dev = 1,85e-07, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.315114
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.379 seconds
Total inference time: 1.381 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.870796
   AUC PR    = 0.103216
   CLL	      = -0.294918
   Precision = 0.103216 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.187118


Total scoring time: 2.606 seconds
Parameter learned model CLL: -0.294918


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.01e-07, 415, 0], 'true,true': [0.471, 129, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 383, 0], 'true,true': [0.477, 141, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.477, 141, 260], 'false': [0.0, 357, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.92e-07, 385, 0], 'true,true': [0.471, 129, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.37e-07, 408, 0], 'true,true': [0.472, 131, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.19e-07, 364, 0], 'true,true': [0.479, 144, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [9.19e-08, 424, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.539, 140, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [3.65e-08, 392, 0], 'true,true': [0.471, 129, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 393, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.854, 155, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.85e-07, 383, 0], 'true,true': [0.48, 146, 260], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2216480197725401, 2.1829927423954886e-16], 'true': [0.2216480197725401, nan]}, {'': [0.22798365681805768, -1.252262001665973e-16], 'true': [0.22798365681805768, nan]}, {'': [0.22798365681805527, -2.9854736796642864e-17]}, {'': [0.22164801977253915, 9.573871277287064e-17], 'true': [0.22164801977253915, nan]}, {'': [0.22278765837481743, 4.5715065719859385e-17], 'true': [0.22278765837481743, nan]}, {'': [0.22938927556121944, 3.9040809657148365e-17], 'true': [0.22938927556121944, nan]}, {'': [0.22749999999999843, 1.9900224026299974e-17], 'true': [0.22749999999999843, nan], 'true,true': [0.22749999999999843, nan]}, {'': [0.22164801977253615, 3.398641912117826e-18], 'true': [0.22164801977253615, nan]}, {'': [0.23399622586732394, -1.1073980296515557e-16], 'true': [0.23399622586732394, nan], 'true,true': [0.23399622586732394, nan]}, {'': [0.23028949986653297, 8.928164271137029e-17], 'true': [0.23028949986653297, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048804;  // std dev = 0,000, 156,000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.14185106490048735;  // std dev = 2,97e-07, 394,000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.12544463852839113;  // std dev = 7,45e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.12544463852839227;  // std dev = 0,000, 420,000 (wgt'ed) examples reached here.  /* #neg=420 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,95e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11231637819360622;  // std dev = 8,02e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.11231637819360624;  // std dev = 0,000, 394,000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.417513584158311;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.10159632948783638;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.10159632948783608;  // std dev = 1,79e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601502;  // std dev = 1,33e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.09269127618926083;  // std dev = 7,60e-08, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.0926912761892608;  // std dev = 1,59e-07, 389,000 (wgt'ed) examples reached here.  /* #neg=389 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08518475138839679;  // std dev = 5,37e-08, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.08518475138839678;  // std dev = 1,25e-07, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07877675473109158;  // std dev = 6,66e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.07877675473109143;  // std dev = 8,94e-08, 365,000 (wgt'ed) examples reached here.  /* #neg=365 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07324622576333722;  // std dev = 0,000, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.07324622576333768;  // std dev = 0,000, 357,000 (wgt'ed) examples reached here.  /* #neg=357 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06842697784420267;  // std dev = 5,16e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.0684269778442033;  // std dev = 0,000, 387,000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080112;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.06419184008202561;  // std dev = 1,93e-07, 395,000 (wgt'ed) examples reached here.  /* #neg=395 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.732 seconds
Total inference time: 1.372 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064211
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.251 seconds
Refined model CLL: -0.064211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.967999999999998 seconds
Total inference time: 1.372 seconds
AUC ROC: 1.0
Total revision time: 10.967999999999998
Best scored revision CLL: -0.064211


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:36:55
{'F1': 1.0, 'Inference time': 1.372, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.106262, 'Inference time': 1.381, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 2.379, 'CLL': -0.315114}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.967999999999998, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048768;  // std dev = 5,37e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.1418510649004875;  // std dev = 1,84e-07, 491,000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.1254446385283923;  // std dev = 0,000, 502,000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,95e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11231637819360633;  // std dev = 2,79e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.11231637819360611;  // std dev = 0,000, 439,000 (wgt'ed) examples reached here.  /* #neg=439 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158311;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.10159632948783624;  // std dev = 3,16e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.10159632948783595;  // std dev = 2,29e-07, 476,000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601502;  // std dev = 1,33e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.09269127618926126;  // std dev = 0,000, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.0851847513883968;  // std dev = 1,97e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.08518475138839678;  // std dev = 1,26e-07, 469,000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.07877675473109187;  // std dev = 0,000, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07324622576333704;  // std dev = 1,29e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.0732462257633372;  // std dev = 0,000, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06842697784420268;  // std dev = 1,67e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.06842697784420343;  // std dev = 0,000, 456,000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080112;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202578;  // std dev = 1,66e-07, 436,000 (wgt'ed) examples reached here.  /* #neg=436 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.584 seconds
Total inference time: 1.293 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 02:37:00
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.293, 'Precision': [1.0, 0.5], 'Learning time': 3.584, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048768;  // std dev = 4,47e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.1418510649004877;  // std dev = 0,000, 518,000 (wgt'ed) examples reached here.  /* #neg=518 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.15 seconds
Total inference time: 0.886 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 02:37:02
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.886, 'Precision': [nan, 0.5], 'Learning time': 1.15, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.507551325537755;  // std dev = 0,477, 502,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048796;  // std dev = 0,000, 523,000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4553432573556476;  // std dev = 0,470, 486,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839224;  // std dev = 0,000, 464,000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3320964785324253;  // std dev = 0,482, 514,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=326 */
%   else return -0.11231637819360588;  // std dev = 0,000, 479,000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2616005012619791;  // std dev = 0,481, 511,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783548;  // std dev = 3,28e-07, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2661811389557143;  // std dev = 0,456, 462,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926151;  // std dev = 0,000, 512,000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1835248295996978;  // std dev = 0,463, 473,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,43e-07, 491,000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.09671908552261511;  // std dev = 10,711, 503,000 (wgt'ed) examples reached here.  /* #neg=177 #pos=326 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0787767547310923;  // std dev = 0,000, 544,000 (wgt'ed) examples reached here.  /* #neg=544 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07164560909614585;  // std dev = 0,478, 504,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0732462257633371;  // std dev = 9,66e-08, 465,000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.05168372033575126;  // std dev = 10,769, 506,000 (wgt'ed) examples reached here.  /* #neg=180 #pos=326 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420355;  // std dev = 0,000, 504,000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06855294160660504;  // std dev = 0,469, 484,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202536;  // std dev = 2,44e-07, 515,000 (wgt'ed) examples reached here.  /* #neg=515 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.32365
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.7 seconds
Total inference time: 1.308 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.871431
   AUC PR    = 0.103954
   CLL	      = -0.301186
   Precision = 0.103954 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18833


Total scoring time: 3.274 seconds
Parameter learned model CLL: -0.301186


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 523, 0], 'true,true': [0.477, 176, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 464, 0], 'true,true': [0.47, 160, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.482, 188, 326], 'false': [0.0, 479, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.28e-07, 480, 0], 'true,true': [0.481, 185, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 512, 0], 'true,true': [0.456, 136, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.43e-07, 491, 0], 'true,true': [0.463, 147, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 544, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.711, 177, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.66e-08, 465, 0], 'true,true': [0.478, 178, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 504, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.769, 180, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.44e-07, 515, 0], 'true,true': [0.469, 158, 326], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22767892573134024, -1.1548017693997805e-16], 'true': [0.22767892573134024, nan]}, {'': [0.2208335450219391, -1.2059319060583598e-16], 'true': [0.2208335450219391, nan]}, {'': [0.23197928810428292, -1.1125408179959815e-17]}, {'': [0.23096572087269351, 2.238949766327399e-16], 'true': [0.23096572087269351, nan]}, {'': [0.20771724667828415, -3.8163916471489756e-17], 'true': [0.20771724667828415, nan]}, {'': [0.2141966396846176, 4.160509908982257e-17], 'true': [0.2141966396846176, nan]}, {'': [0.22806303333082933, -6.693991766122267e-17], 'true': [0.22806303333082933, nan], 'true,true': [0.22806303333082933, nan]}, {'': [0.22844230284706454, 2.0055641735164117e-17], 'true': [0.22844230284706454, nan]}, {'': [0.22918652064553513, -1.2600150200110903e-16], 'true': [0.22918652064553513, nan], 'true,true': [0.22918652064553513, nan]}, {'': [0.219879106618399, 1.1554942547555028e-16], 'true': [0.219879106618399, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 154,000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.14185106490048774;  // std dev = 0,000, 501,000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839144;  // std dev = 0,000, 174,000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.12544463852839224;  // std dev = 0,000, 446,000 (wgt'ed) examples reached here.  /* #neg=446 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360621;  // std dev = 9,42e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.11231637819360596;  // std dev = 0,000, 456,000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783648;  // std dev = 0,000, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.1015963294878356;  // std dev = 2,98e-07, 455,000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0926912761892608;  // std dev = 6,83e-08, 147,000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.09269127618926148;  // std dev = 0,000, 506,000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5,37e-08, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.08518475138839678;  // std dev = 1,44e-07, 508,000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,46e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109157;  // std dev = 7,88e-08, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.078776754731092;  // std dev = 0,000, 487,000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2,76e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333686;  // std dev = 7,74e-08, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.07324622576333692;  // std dev = 1,53e-07, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6,58e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.06842697784420357;  // std dev = 0,000, 508,000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.0641918400820254;  // std dev = 2,43e-07, 486,000 (wgt'ed) examples reached here.  /* #neg=486 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.471 seconds
Total inference time: 1.365 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064216
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.248 seconds
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.693000000000001 seconds
Total inference time: 1.365 seconds
AUC ROC: 1.0
Total revision time: 11.693000000000001
Best scored revision CLL: -0.064216


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:37:17
{'parameter_1.0': {'F1': 0.106262, 'Inference time': 1.308, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 2.7, 'CLL': -0.32365}, 'F1': 1.0, 'Inference time': 1.365, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 11.693000000000001, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048766;  // std dev = 6,66e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.14185106490048824;  // std dev = 0,000, 584,000 (wgt'ed) examples reached here.  /* #neg=584 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.12544463852839233;  // std dev = 0,000, 608,000 (wgt'ed) examples reached here.  /* #neg=608 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360632;  // std dev = 2,98e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.11231637819360567;  // std dev = 0,000, 588,000 (wgt'ed) examples reached here.  /* #neg=588 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783617;  // std dev = 4,47e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.10159632948783559;  // std dev = 3,38e-07, 592,000 (wgt'ed) examples reached here.  /* #neg=592 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.09269127618926178;  // std dev = 0,000, 611,000 (wgt'ed) examples reached here.  /* #neg=611 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.08518475138839678;  // std dev = 1,46e-07, 600,000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,46e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109177;  // std dev = 1,05e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.07877675473109243;  // std dev = 0,000, 599,000 (wgt'ed) examples reached here.  /* #neg=599 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2,76e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.07324622576333688;  // std dev = 1,65e-07, 609,000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420268;  // std dev = 2,47e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.06842697784420365;  // std dev = 0,000, 644,000 (wgt'ed) examples reached here.  /* #neg=644 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.06419184008202546;  // std dev = 2,48e-07, 590,000 (wgt'ed) examples reached here.  /* #neg=590 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.067 seconds
Total inference time: 1.53 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 02:37:23
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.53, 'Precision': [1.0, 0.5], 'Learning time': 4.067, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048766;  // std dev = 6,66e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.1418510649004883;  // std dev = 0,000, 588,000 (wgt'ed) examples reached here.  /* #neg=588 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.562 seconds
Total inference time: 0.867 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 02:37:26
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.867, 'Precision': [nan, 0.5], 'Learning time': 1.562, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6292332724489106;  // std dev = 0,420, 83,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 7,74e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3846428006737812;  // std dev = 0,485, 103,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283914;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.38265063110550285;  // std dev = 0,460, 92,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=64 */
%   else return -0.11231637819360622;  // std dev = 6,83e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2803729337926058;  // std dev = 0,466, 94,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 2,58e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.23403298955473714;  // std dev = 0,457, 91,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.092691276189261;  // std dev = 3,94e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11875989507832624;  // std dev = 0,478, 99,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 4,34e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.046601593277724;  // std dev = 5,036, 106,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=64 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0787767547310916;  // std dev = 5,27e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.03513614099834959;  // std dev = 0,489, 106,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.14186679141614797;  // std dev = 4,240, 89,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=64 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420267;  // std dev = 3,94e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04837096425788767;  // std dev = 0,474, 97,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.305975
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.362 seconds
Total inference time: 1.343 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.875116
   AUC PR    = 0.10596
   CLL	      = -0.295592
   Precision = 0.10596 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.191617


Total scoring time: 1.194 seconds
Parameter learned model CLL: -0.295592


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.74e-08, 81, 0], 'true,true': [0.42, 19, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 90, 0], 'true,true': [0.485, 39, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.46, 28, 64], 'false': [6.83e-08, 83, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.58e-08, 103, 0], 'true,true': [0.466, 30, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [3.94e-08, 95, 0], 'true,true': [0.457, 27, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.34e-08, 101, 0], 'true,true': [0.478, 35, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [5.27e-08, 93, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [5.036, 42, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 93, 0], 'true,true': [0.489, 42, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [3.94e-08, 84, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.24, 25, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 83, 0], 'true,true': [0.474, 33, 64], 'true,false': [0.0, 0, 0]}]]
[{'': [0.1765132820438372, 7.401486830834377e-17], 'true': [0.1765132820438372, nan]}, {'': [0.2352719389197861, -1.7270135938613546e-17], 'true': [0.2352719389197861, nan]}, {'': [0.21172022684310052, 5.617996028223683e-17]}, {'': [0.2172928927116335, 6.467318590049456e-18], 'true': [0.2172928927116335, nan]}, {'': [0.20867045042869264, 1.636118141552862e-17], 'true': [0.20867045042869264, nan]}, {'': [0.2285481073359865, 1.8686922196661052e-17], 'true': [0.2285481073359865, nan]}, {'': [0.23923104307582788, 2.984470496304184e-17], 'true': [0.23923104307582788, nan], 'true,true': [0.23923104307582788, nan]}, {'': [0.2392310430758279, -8.356517389651716e-18], 'true': [0.2392310430758279, nan]}, {'': [0.20199469763918723, 1.850371707708594e-17], 'true': [0.20199469763918723, nan], 'true,true': [0.20199469763918723, nan]}, {'': [0.22446593686895544, -1.070094481566416e-17], 'true': [0.22446593686895544, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.14185106490048763;  // std dev = 8,94e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109542;  // std dev = 8,43e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.1254446385283914;  // std dev = 0,000, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.1123163781936062;  // std dev = 8,16e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.1015963294878363;  // std dev = 2,58e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.092691276189261;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.32071184716014983;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.09269127618926108;  // std dev = 0,000, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08634319280098549;  // std dev = 0,038, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.08518475138839678;  // std dev = 3,94e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08193630555762631;  // std dev = 0,059, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.07877675473109157;  // std dev = 6,14e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07712585295898834;  // std dev = 0,062, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.07324622576333707;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936707;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07066939834832547;  // std dev = 0,052, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.06842697784420265;  // std dev = 4,41e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801095;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.06356754000136487;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.06419184008202626;  // std dev = 0,000, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063325
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.815 seconds
Total inference time: 1.562 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06459
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.464 seconds
Refined model CLL: -0.06459


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063325
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.835000000000001 seconds
Total inference time: 1.562 seconds
AUC ROC: 1.0
Total revision time: 5.835000000000001
Best scored revision CLL: -0.06459


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:37:35
{'parameter_0.2': {'F1': 0.113837, 'Inference time': 1.343, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 1.362, 'CLL': -0.305975}, 'F1': 1.0, 'Inference time': 1.562, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.835000000000001, 'CLL': -0.063325}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.14185106490048766;  // std dev = 7,88e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109542;  // std dev = 8,43e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.1254446385283914;  // std dev = 0,000, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.11231637819360621;  // std dev = 8,43e-08, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.10159632948783635;  // std dev = 0,000, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926101;  // std dev = 3,49e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.08518475138839679;  // std dev = 4,34e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.07877675473109164;  // std dev = 5,05e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07324622576333704;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936707;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420265;  // std dev = 4,83e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.06419184008202626;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.229 seconds
Total inference time: 1.517 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 02:37:39
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.517, 'Precision': [1.0, 0.5], 'Learning time': 2.229, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.14185106490048793;  // std dev = 0,000, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.815 seconds
Total inference time: 0.921 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 02:37:41
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.921, 'Precision': [nan, 0.5], 'Learning time': 0.815, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5554462323968067;  // std dev = 0,459, 185,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004885;  // std dev = 0,000, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.451748338809809;  // std dev = 0,468, 191,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839166;  // std dev = 0,000, 200,000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.320786334071964;  // std dev = 0,482, 204,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=129 */
%   else return -0.1123163781936067;  // std dev = 0,000, 217,000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.28080999117008393;  // std dev = 0,472, 194,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783648;  // std dev = 0,000, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.18627102651870042;  // std dev = 0,480, 202,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926054;  // std dev = 5,37e-08, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16962829913298103;  // std dev = 0,471, 193,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,30e-08, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.117083517886983;  // std dev = 6,641, 196,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=129 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109147;  // std dev = 8,56e-08, 169,000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.10189397382166765;  // std dev = 0,470, 192,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333668;  // std dev = 1,08e-07, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.013733160586644907;  // std dev = 7,107, 212,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=129 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420261;  // std dev = 6,41e-08, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.05675930263529557;  // std dev = 0,475, 197,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.298671
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.785 seconds
Total inference time: 1.658 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.868208
   AUC PR    = 0.101655
   CLL	      = -0.300897
   Precision = 0.101655 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.184549


Total scoring time: 1.956 seconds
Parameter learned model CLL: -0.300897


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 226, 0], 'true,true': [0.459, 56, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 200, 0], 'true,true': [0.468, 62, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.482, 75, 129], 'false': [0.0, 217, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 168, 0], 'true,true': [0.472, 65, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.37e-08, 191, 0], 'true,true': [0.48, 73, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.3e-08, 183, 0], 'true,true': [0.471, 64, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [8.56e-08, 169, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.641, 67, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.08e-07, 185, 0], 'true,true': [0.47, 63, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [6.41e-08, 196, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.107, 83, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 190, 0], 'true,true': [0.475, 68, 129], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21107377647918624, -2.2793959443631533e-16], 'true': [0.21107377647918624, nan]}, {'': [0.21923741125517263, -5.329070518200751e-17], 'true': [0.21923741125517263, nan]}, {'': [0.23248269896193993, -6.139482163825751e-17]}, {'': [0.2227920076522467, -8.194503276995204e-17], 'true': [0.2227920076522467, nan]}, {'': [0.23078619743162285, 1.5112983581284854e-17], 'true': [0.23078619743162285, nan]}, {'': [0.22164353405460627, 2.912060392459427e-17], 'true': [0.22164353405460627, nan]}, {'': [0.224984381507705, 4.335782226346765e-17], 'true': [0.224984381507705, nan], 'true,true': [0.224984381507705, nan]}, {'': [0.22045898437500014, 6.301265815440077e-17], 'true': [0.22045898437500014, nan]}, {'': [0.23822979708081088, 2.095829179139326e-17], 'true': [0.23822979708081088, nan], 'true,true': [0.23822979708081088, nan]}, {'': [0.226030044577289, -4.090295353882155e-18], 'true': [0.226030044577289, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.1418510649004877;  // std dev = 4,71e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.1418510649004883;  // std dev = 0,000, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839122;  // std dev = 5,16e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0.7194734122109555;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return -0.12544463852839158;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.11909296174413964;  // std dev = 0,224, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.11231637819360653;  // std dev = 0,000, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583092;  // std dev = 3,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.10983687227342737;  // std dev = 0,249, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.10159632948783652;  // std dev = 0,000, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601498;  // std dev = 2,49e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09936865453908895;  // std dev = 0,211, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.09269127618926058;  // std dev = 8,82e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694898;  // std dev = 4,21e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.0906561035544029;  // std dev = 0,196, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.08518475138839678;  // std dev = 7,30e-08, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253534;  // std dev = 2,09e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07945714406539266;  // std dev = 0,119, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.07877675473109148;  // std dev = 8,16e-08, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07703965937514683;  // std dev = 0,173, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.0732462257633367;  // std dev = 1,07e-07, 184,000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06848280159114724;  // std dev = 0,106, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.06842697784420262;  // std dev = 7,38e-08, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06510570563640823;  // std dev = 0,122, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.06419184008202626;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063004
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.357 seconds
Total inference time: 1.322 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064695
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.445 seconds
Refined model CLL: -0.064695


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063004
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.543 seconds
Total inference time: 1.322 seconds
AUC ROC: 1.0
Total revision time: 7.543
Best scored revision CLL: -0.064695


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:37:53
{'F1': 1.0, 'Inference time': 1.322, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.113837, 'Inference time': 1.658, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 1.785, 'CLL': -0.298671}, 'Recall': 1.0, 'Learning time': 7.543, 'CLL': -0.063004}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.1418510649004883;  // std dev = 0,000, 242,000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109555;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.12544463852839172;  // std dev = 0,000, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.11231637819360672;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583092;  // std dev = 3,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.10159632948783652;  // std dev = 0,000, 218,000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601498;  // std dev = 2,49e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09269127618926093;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.09269127618926058;  // std dev = 5,96e-08, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694898;  // std dev = 4,21e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.08518475138839683;  // std dev = 1,49e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.08518475138839678;  // std dev = 7,30e-08, 230,000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253534;  // std dev = 2,09e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.07877675473109144;  // std dev = 6,50e-08, 240,000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.07324622576333671;  // std dev = 1,14e-07, 228,000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06842697784420276;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.06842697784420264;  // std dev = 4,47e-08, 242,000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.06419184008202626;  // std dev = 0,000, 244,000 (wgt'ed) examples reached here.  /* #neg=244 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.014 seconds
Total inference time: 1.332 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 02:37:57
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.332, 'Precision': [1.0, 0.5], 'Learning time': 3.014, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.1418510649004884;  // std dev = 0,000, 242,000 (wgt'ed) examples reached here.  /* #neg=242 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.002 seconds
Total inference time: 0.911 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 02:37:59
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.911, 'Precision': [nan, 0.5], 'Learning time': 1.002, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5248156017661753;  // std dev = 0,471, 291,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048824;  // std dev = 0,000, 249,000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4575871277286024;  // std dev = 0,468, 287,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839202;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3469247226281672;  // std dev = 0,476, 297,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=194 */
%   else return -0.11231637819360689;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2731700457402256;  // std dev = 0,475, 295,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878366;  // std dev = 0,000, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16313979920787725;  // std dev = 0,487, 316,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926043;  // std dev = 1,46e-07, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.17070587146850655;  // std dev = 0,473, 293,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 9,54e-08, 267,000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.11263357959608455;  // std dev = 8,279, 300,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=194 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 5,16e-08, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1001914132316306;  // std dev = 0,473, 293,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333696;  // std dev = 1,00e-07, 294,000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.05596826026806914;  // std dev = 8,329, 302,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=194 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420287;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06446244898952234;  // std dev = 0,472, 292,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202614;  // std dev = 6,32e-08, 266,000 (wgt'ed) examples reached here.  /* #neg=266 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.301029
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.954 seconds
Total inference time: 1.456 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.86789
   AUC PR    = 0.101677
   CLL	      = -0.303714
   Precision = 0.101677 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.184586


Total scoring time: 2.167 seconds
Parameter learned model CLL: -0.303714


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 249, 0], 'true,true': [0.471, 97, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 305, 0], 'true,true': [0.468, 93, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.476, 103, 194], 'false': [0.0, 260, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 275, 0], 'true,true': [0.475, 101, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.46e-07, 289, 0], 'true,true': [0.487, 122, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.54e-08, 267, 0], 'true,true': [0.473, 99, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [5.16e-08, 278, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.279, 106, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1e-07, 294, 0], 'true,true': [0.473, 99, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 276, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.329, 108, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [6.32e-08, 266, 0], 'true,true': [0.472, 98, 194], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22222222222222712, -1.319783193931913e-16], 'true': [0.22222222222222712, nan]}, {'': [0.21903871602180866, -8.736181177378281e-17], 'true': [0.21903871602180866, nan]}, {'': [0.2265301726581178, -1.0077408992751421e-16]}, {'': [0.2251536914679702, -6.297992430600888e-17], 'true': [0.2251536914679702, nan]}, {'': [0.23702131068738913, 7.375876149758825e-17], 'true': [0.23702131068738913, nan]}, {'': [0.22371838926487272, 3.409673708586623e-17], 'true': [0.22371838926487272, nan]}, {'': [0.22848888888888969, 9.584659205397035e-18], 'true': [0.22848888888888969, nan], 'true,true': [0.22848888888888969, nan]}, {'': [0.22371838926487164, 3.398641912117826e-17], 'true': [0.22371838926487164, nan]}, {'': [0.22972676636989664, -3.539841527790354e-17], 'true': [0.22972676636989664, nan], 'true,true': [0.22972676636989664, nan]}, {'': [0.2229780446612869, 1.502557476936302e-17], 'true': [0.2229780446612869, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.14185106490048768;  // std dev = 7,88e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.1418510649004879;  // std dev = 0,000, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1254446385283914;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.12544463852839194;  // std dev = 0,000, 279,000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11231637819360628;  // std dev = 5,96e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.11231637819360693;  // std dev = 0,000, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583099;  // std dev = 3,04e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1015963294878362;  // std dev = 5,48e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.10159632948783662;  // std dev = 0,000, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.320711847160149;  // std dev = 3,95e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return -0.09269127618926042;  // std dev = 1,65e-07, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.0851847513883968;  // std dev = 2,79e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07877675473109165;  // std dev = 4,94e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.07877675473109141;  // std dev = 4,71e-08, 291,000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.07324622576333693;  // std dev = 1,03e-07, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06842697784420267;  // std dev = 3,87e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.06842697784420308;  // std dev = 0,000, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.064191840082026;  // std dev = 1,06e-07, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.647 seconds
Total inference time: 1.532 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064221
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.373 seconds
Refined model CLL: -0.064221


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.140999999999998 seconds
Total inference time: 1.532 seconds
AUC ROC: 1.0
Total revision time: 9.140999999999998
Best scored revision CLL: -0.064221


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:38:12
{'F1': 1.0, 'Inference time': 1.532, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.113837, 'Inference time': 1.456, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 1.954, 'CLL': -0.301029}, 'Recall': 1.0, 'Learning time': 9.140999999999998, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.14185106490048768;  // std dev = 3,94e-08, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.14185106490048782;  // std dev = 1,03e-07, 358,000 (wgt'ed) examples reached here.  /* #neg=358 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.12544463852839147;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.12544463852839202;  // std dev = 0,000, 332,000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.11231637819360646;  // std dev = 0,000, 391,000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783655;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( actor(A) )
%   | | then return 0.4175135841583099;  // std dev = 3,04e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else return -0.10159632948783626;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.320711847160149;  // std dev = 3,95e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.09269127618926054;  // std dev = 1,56e-07, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.08518475138839682;  // std dev = 1,75e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 353,000 (wgt'ed) examples reached here.  /* #neg=353 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109147;  // std dev = 5,16e-08, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07324622576333714;  // std dev = 5,96e-08, 374,000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.06842697784420312;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.0641918400820259;  // std dev = 1,43e-07, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.169 seconds
Total inference time: 1.566 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 02:38:17
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.566, 'Precision': [1.0, 0.5], 'Learning time': 3.169, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1418510649004877;  // std dev = 2,58e-08, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048796;  // std dev = 0,000, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.187 seconds
Total inference time: 0.942 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 02:38:19
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.942, 'Precision': [nan, 0.5], 'Learning time': 1.187, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5171820139799153;  // std dev = 0,474, 393,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048735;  // std dev = 2,97e-07, 394,000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4353220252791718;  // std dev = 0,476, 397,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839222;  // std dev = 0,000, 365,000 (wgt'ed) examples reached here.  /* #neg=365 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.36244569149757616;  // std dev = 0,473, 391,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=259 */
%   else return -0.11231637819360632;  // std dev = 0,000, 379,000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2763001171316418;  // std dev = 0,475, 394,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783597;  // std dev = 2,09e-07, 394,000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21610141127005617;  // std dev = 0,472, 390,000 (wgt'ed) examples reached here.  /* #neg=131 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892607;  // std dev = 1,80e-07, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15719527236721553;  // std dev = 0,474, 393,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,25e-07, 360,000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.09846210579020735;  // std dev = 9,663, 405,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=259 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 2,14e-07, 373,000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1073515355869759;  // std dev = 0,469, 385,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0732462257633377;  // std dev = 0,000, 387,000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.01930305056741748;  // std dev = 10,039, 424,000 (wgt'ed) examples reached here.  /* #neg=165 #pos=259 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420329;  // std dev = 0,000, 377,000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.05129837542475288;  // std dev = 0,478, 400,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202573;  // std dev = 1,63e-07, 353,000 (wgt'ed) examples reached here.  /* #neg=353 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.296668
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.37 seconds
Total inference time: 1.68 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.867919
   AUC PR    = 0.101808
   CLL	      = -0.299498
   Precision = 0.101808 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.184802


Total scoring time: 2.044 seconds
Parameter learned model CLL: -0.299498


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.97e-07, 394, 0], 'true,true': [0.474, 134, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 365, 0], 'true,true': [0.476, 138, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.473, 132, 259], 'false': [0.0, 379, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.09e-07, 394, 0], 'true,true': [0.475, 135, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.8e-07, 375, 0], 'true,true': [0.472, 131, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.25e-07, 360, 0], 'true,true': [0.474, 134, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.14e-07, 373, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.663, 146, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 387, 0], 'true,true': [0.469, 126, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 377, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.039, 165, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.63e-07, 353, 0], 'true,true': [0.478, 141, 259], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22470847982182174, 2.2317173489927e-16], 'true': [0.22470847982182174, nan]}, {'': [0.2267763896731771, -1.2166827667125003e-16], 'true': [0.2267763896731771, nan]}, {'': [0.22362491087840256, -2.34347867994756e-17]}, {'': [0.22523770259476214, 1.1045873747539628e-16], 'true': [0.22523770259476214, nan]}, {'': [0.2230703484549612, 8.644936618414552e-17], 'true': [0.2230703484549612, nan]}, {'': [0.22470847982182038, 4.3175339846533866e-17], 'true': [0.22470847982182038, nan]}, {'': [0.230538027739673, 1.2263053247870363e-16], 'true': [0.230538027739673, nan], 'true,true': [0.230538027739673, nan]}, {'': [0.22016528925619788, -6.885104028683141e-17], 'true': [0.22016528925619788, nan]}, {'': [0.2377124866500542, -1.0189314761811781e-16], 'true': [0.2377124866500542, nan], 'true,true': [0.2377124866500542, nan]}, {'': [0.22824375000000036, 7.548258524363671e-17], 'true': [0.22824375000000036, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.141851064900488;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.1418510649004874;  // std dev = 2,81e-07, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.12544463852839122;  // std dev = 6,32e-08, 145,000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.12544463852839224;  // std dev = 0,000, 384,000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 4,13e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.11231637819360622;  // std dev = 8,82e-08, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.11231637819360643;  // std dev = 0,000, 358,000 (wgt'ed) examples reached here.  /* #neg=358 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.417513584158311;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.10159632948783641;  // std dev = 0,000, 140,000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.10159632948783609;  // std dev = 1,75e-07, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601502;  // std dev = 1,46e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.09269127618926089;  // std dev = 5,16e-08, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.09269127618926078;  // std dev = 1,63e-07, 386,000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.08518475138839679;  // std dev = 4,59e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.08518475138839678;  // std dev = 1,23e-07, 393,000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0787767547310916;  // std dev = 6,66e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.07877675473109141;  // std dev = 1,07e-07, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07324622576333699;  // std dev = 3,65e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.07324622576333713;  // std dev = 6,83e-08, 358,000 (wgt'ed) examples reached here.  /* #neg=358 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06842697784420268;  // std dev = 4,83e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.0684269778442034;  // std dev = 0,000, 420,000 (wgt'ed) examples reached here.  /* #neg=420 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 150,000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.06419184008202573;  // std dev = 1,65e-07, 354,000 (wgt'ed) examples reached here.  /* #neg=354 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.15 seconds
Total inference time: 1.642 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064223
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.107 seconds
Refined model CLL: -0.064223


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.671 seconds
Total inference time: 1.642 seconds
AUC ROC: 1.0
Total revision time: 9.671
Best scored revision CLL: -0.064223


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:38:33
{'F1': 1.0, 'Inference time': 1.642, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.113837, 'Inference time': 1.68, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 2.37, 'CLL': -0.296668}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 9.671, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.14185106490048768;  // std dev = 5,37e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.1418510649004872;  // std dev = 3,01e-07, 455,000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.12544463852839144;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.1254446385283923;  // std dev = 0,000, 505,000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 4,13e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.11231637819360635;  // std dev = 1,83e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.11231637819360597;  // std dev = 0,000, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158311;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.10159632948783631;  // std dev = 1,83e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.10159632948783603;  // std dev = 2,04e-07, 460,000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601502;  // std dev = 1,46e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926129;  // std dev = 0,000, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.08518475138839678;  // std dev = 1,26e-07, 460,000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.07877675473109184;  // std dev = 0,000, 476,000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07324622576333704;  // std dev = 1,18e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.07324622576333721;  // std dev = 0,000, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0684269778442027;  // std dev = 1,39e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.06842697784420343;  // std dev = 0,000, 475,000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.06419184008202575;  // std dev = 1,82e-07, 460,000 (wgt'ed) examples reached here.  /* #neg=460 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.653 seconds
Total inference time: 1.342 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 02:38:38
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.342, 'Precision': [1.0, 0.5], 'Learning time': 3.653, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.14185106490048766;  // std dev = 5,58e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.14185106490048752;  // std dev = 1,63e-07, 494,000 (wgt'ed) examples reached here.  /* #neg=494 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.302 seconds
Total inference time: 0.903 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 02:38:41
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.903, 'Precision': [nan, 0.5], 'Learning time': 1.302, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.503567261792735;  // std dev = 0,478, 502,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048752;  // std dev = 1,69e-07, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4131409833212556;  // std dev = 0,483, 516,000 (wgt'ed) examples reached here.  /* #neg=192 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839235;  // std dev = 0,000, 496,000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.34782009441377554;  // std dev = 0,480, 506,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=324 */
%   else return -0.11231637819360582;  // std dev = 0,000, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.26605250085436694;  // std dev = 0,481, 510,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878354;  // std dev = 3,49e-07, 498,000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24335948974900742;  // std dev = 0,468, 479,000 (wgt'ed) examples reached here.  /* #neg=155 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926146;  // std dev = 0,000, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.19587625092640568;  // std dev = 0,463, 470,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,50e-07, 508,000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.1411918884014281;  // std dev = 10,126, 474,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=324 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109197;  // std dev = 1,50e-07, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.05941084170356045;  // std dev = 0,481, 509,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333693;  // std dev = 1,48e-07, 494,000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.041252205094377006;  // std dev = 10,907, 512,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=324 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420354;  // std dev = 0,000, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0665526278277519;  // std dev = 0,471, 485,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202544;  // std dev = 2,34e-07, 465,000 (wgt'ed) examples reached here.  /* #neg=465 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.302353
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.271 seconds
Total inference time: 1.221 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.86826
   AUC PR    = 0.102112
   CLL	      = -0.304345
   Precision = 0.102112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185302


Total scoring time: 2.124 seconds
Parameter learned model CLL: -0.304345


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.69e-07, 480, 0], 'true,true': [0.478, 178, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 496, 0], 'true,true': [0.483, 192, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.48, 182, 324], 'false': [0.0, 499, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.49e-07, 498, 0], 'true,true': [0.481, 186, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 499, 0], 'true,true': [0.468, 155, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.5e-07, 508, 0], 'true,true': [0.463, 146, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [1.5e-07, 483, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.126, 150, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.48e-07, 494, 0], 'true,true': [0.481, 185, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 499, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.907, 188, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.34e-07, 465, 0], 'true,true': [0.471, 161, 324], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22885351026174455, 5.921189464667501e-17], 'true': [0.22885351026174455, nan]}, {'': [0.2336398053001592, -1.3788253692925331e-16], 'true': [0.2336398053001592, nan]}, {'': [0.230311362464647, -8.89958336372871e-18]}, {'': [0.23169550173010892, 2.4433823995766495e-16], 'true': [0.23169550173010892, nan]}, {'': [0.2188797991640616, -2.847866676393187e-17], 'true': [0.2188797991640616, nan]}, {'': [0.21414214576731566, 4.4583759256600775e-17], 'true': [0.21414214576731566, nan]}, {'': [0.21631148854350432, 4.689140725124885e-17], 'true': [0.21631148854350432, nan], 'true,true': [0.21631148854350432, nan]}, {'': [0.2313562167816264, 4.404933458026937e-17], 'true': [0.2313562167816264, nan]}, {'': [0.23236083984374772, -1.2014437541033758e-16], 'true': [0.23236083984374772, nan], 'true,true': [0.23236083984374772, nan]}, {'': [0.22176214262939803, 1.1794627401394135e-16], 'true': [0.22176214262939803, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1418510649004883;  // std dev = 0,000, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.14185106490048766;  // std dev = 4,21e-08, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1254446385283912;  // std dev = 6,66e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.12544463852839233;  // std dev = 0,000, 461,000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360633;  // std dev = 7,60e-08, 162,000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.11231637819360596;  // std dev = 0,000, 455,000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783646;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.1015963294878354;  // std dev = 3,50e-07, 500,000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926078;  // std dev = 7,30e-08, 164,000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.0926912761892614;  // std dev = 0,000, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6,14e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.08518475138839678;  // std dev = 1,41e-07, 490,000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109155;  // std dev = 7,30e-08, 151,000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.07877675473109196;  // std dev = 0,000, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2,73e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333692;  // std dev = 5,87e-08, 151,000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.07324622576333727;  // std dev = 0,000, 429,000 (wgt'ed) examples reached here.  /* #neg=429 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6,50e-08, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.06842697784420347;  // std dev = 0,000, 460,000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 169,000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.06419184008202547;  // std dev = 2,25e-07, 451,000 (wgt'ed) examples reached here.  /* #neg=451 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.284 seconds
Total inference time: 1.796 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064225
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.84 seconds
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.518999999999998 seconds
Total inference time: 1.796 seconds
AUC ROC: 1.0
Total revision time: 10.518999999999998
Best scored revision CLL: -0.064225


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:38:55
{'parameter_1.0': {'F1': 0.113837, 'Inference time': 1.221, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 2.271, 'CLL': -0.302353}, 'F1': 1.0, 'Inference time': 1.796, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.518999999999998, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048766;  // std dev = 5,37e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.14185106490048816;  // std dev = 0,000, 563,000 (wgt'ed) examples reached here.  /* #neg=563 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.1254446385283923;  // std dev = 0,000, 588,000 (wgt'ed) examples reached here.  /* #neg=588 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1123163781936063;  // std dev = 3,65e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.11231637819360585;  // std dev = 0,000, 583,000 (wgt'ed) examples reached here.  /* #neg=583 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783626;  // std dev = 2,98e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.10159632948783544;  // std dev = 3,77e-07, 619,000 (wgt'ed) examples reached here.  /* #neg=619 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.09269127618926173;  // std dev = 0,000, 603,000 (wgt'ed) examples reached here.  /* #neg=603 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.08518475138839678;  // std dev = 1,49e-07, 593,000 (wgt'ed) examples reached here.  /* #neg=593 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109175;  // std dev = 1,97e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07877675473109239;  // std dev = 0,000, 590,000 (wgt'ed) examples reached here.  /* #neg=590 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2,73e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 1,29e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.07324622576333702;  // std dev = 1,13e-07, 565,000 (wgt'ed) examples reached here.  /* #neg=565 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0684269778442027;  // std dev = 1,39e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.06842697784420362;  // std dev = 0,000, 612,000 (wgt'ed) examples reached here.  /* #neg=612 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.06419184008202553;  // std dev = 2,37e-07, 592,000 (wgt'ed) examples reached here.  /* #neg=592 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.994 seconds
Total inference time: 1.44 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 02:39:01
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.44, 'Precision': [1.0, 0.5], 'Learning time': 3.994, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048768;  // std dev = 4,94e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.14185106490048813;  // std dev = 0,000, 563,000 (wgt'ed) examples reached here.  /* #neg=563 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.476 seconds
Total inference time: 0.916 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 02:39:04
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.916, 'Precision': [nan, 0.5], 'Learning time': 1.476, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.513886640017545;  // std dev = 0,475, 61,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 5,58e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3988732239228785;  // std dev = 0,487, 65,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839158;  // std dev = 0,000, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3979754777738649;  // std dev = 0,463, 58,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=40 */
%   else return -0.11231637819360629;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.25485382425467284;  // std dev = 0,481, 63,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783623;  // std dev = 3,80e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.052162991409745965;  // std dev = 0,500, 81,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.23509144156595357;  // std dev = 0,463, 58,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0851847513883968;  // std dev = 1,83e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.08380709900570484;  // std dev = 4,015, 67,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=40 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 2,36e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.05412568169214714;  // std dev = 0,492, 68,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 1,05e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.14210520766262136;  // std dev = 3,523, 58,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=40 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0684269778442027;  // std dev = 1,67e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.023600260269672917;  // std dev = 0,489, 66,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.260537
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.094 seconds
Total inference time: 1.494 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.851497
   AUC PR    = 0.059259
   CLL	      = -0.311432
   Precision = 0.059259 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.111888


Total scoring time: 1.327 seconds
Parameter learned model CLL: -0.311432


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.58e-08, 54, 0], 'true,true': [0.475, 21, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 51, 0], 'true,true': [0.487, 25, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.463, 18, 40], 'false': [3.8e-08, 55, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.8e-08, 56, 0], 'true,true': [0.481, 23, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 60, 0], 'true,true': [0.5, 41, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.83e-08, 51, 0], 'true,true': [0.463, 18, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.36e-08, 60, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.015, 27, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.05e-08, 51, 0], 'true,true': [0.492, 28, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [1.67e-08, 54, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.523, 18, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 54, 0], 'true,true': [0.489, 26, 40], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22574576726686454, 5.756711979537848e-17], 'true': [0.22574576726686454, nan]}, {'': [0.23668639053254387, -3.2653618371328135e-17], 'true': [0.23668639053254387, nan]}, {'': [0.21403091557669338, 2.62416351275037e-17]}, {'': [0.23179642227261224, 2.577303450022685e-17], 'true': [0.23179642227261224, nan]}, {'': [0.24996189605243144, -1.8503717077085942e-18], 'true': [0.24996189605243144, nan]}, {'': [0.21403091557669457, 6.530723674265627e-18], 'true': [0.21403091557669457, nan]}, {'': [0.24058810425484525, 9.25185853854297e-18], 'true': [0.24058810425484525, nan], 'true,true': [0.24058810425484525, nan]}, {'': [0.2422145328719722, 2.1769078914218755e-18], 'true': [0.2422145328719722, nan]}, {'': [0.21403091557669432, 5.13992141030165e-18], 'true': [0.21403091557669432, nan], 'true,true': [0.21403091557669432, nan]}, {'': [0.23875114784205692, -3.0839528461809902e-18], 'true': [0.23875114784205692, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 3,33e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.8581489350995117;  // std dev = 2,46e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.14185106490048766;  // std dev = 5,58e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.719473412210955;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.12544463852839158;  // std dev = 0,000, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 1,05e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.5553664367462842;  // std dev = 1,40e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.11231637819360628;  // std dev = 4,59e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.4175135841583102;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.10159632948783623;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 5,27e-09, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.09269127618926107;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0851847513883968;  // std dev = 1,97e-08, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109179;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.20975771563253542;  // std dev = 5,96e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.07877675473109175;  // std dev = 2,11e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0.17709649774527753;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420275;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.1527438580936709;  // std dev = 3,94e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.0684269778442027;  // std dev = 1,58e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1340070300080111;  // std dev = 1,83e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.06419184008202622;  // std dev = 3,73e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.06419184008202625;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.875 seconds
Total inference time: 1.437 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 0.999298
   AUC PR    = 0.930233
   CLL	      = -0.066376
   Precision = 0.930233 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.963855


Total scoring time: 1.156 seconds
Refined model CLL: -0.066376


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 5.452 seconds
Total inference time: 1.437 seconds
AUC ROC: 0.985041
Total revision time: 5.452
Best scored revision CLL: -0.066376


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:39:13
{'parameter_0.2': {'F1': 0.309835, 'Inference time': 1.494, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.094, 'CLL': -0.260537}, 'F1': 0.770563, 'Inference time': 1.437, 'Precision': [0.626761, 0.5], 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'Learning time': 5.452, 'CLL': -0.124249}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.7470378239884012;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | else return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.14185106490048766;  // std dev = 6,99e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7282213723121573;  // std dev = 0,068, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.27323662103804347;  // std dev = 0,018, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1254446385283916;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360621;  // std dev = 6,99e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else if ( female(A) )
%   | then return 0.5339928323368729;  // std dev = 0,186, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.5219249376304985;  // std dev = 0,153, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783619;  // std dev = 4,83e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.4332693603796588;  // std dev = 0,075, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.32467600526149615;  // std dev = 0,024, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.331467980883887;  // std dev = 0,068, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.2579052009356499;  // std dev = 0,021, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09387519023666499;  // std dev = 0,057, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.26253049909464055;  // std dev = 0,060, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.2073235278014145;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08609123867545777;  // std dev = 0,053, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07862518577812086;  // std dev = 2,36e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.21496132619760905;  // std dev = 0,052, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.17411370777563379;  // std dev = 0,013, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.16994797504241313;  // std dev = 0,079, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.17501053974245984;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.07342869848838977;  // std dev = 0,024, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0682918795631373;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15669890571355646;  // std dev = 0,043, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.18206150779942962;  // std dev = 0,014, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0640726293883124;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13709327234521568;  // std dev = 0,038, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.15112736564167822;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.087298
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.917 seconds
Total inference time: 1.245 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 02:39:16
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.245, 'Precision': [1.0, 0.5], 'Learning time': 1.917, 'AUC PR': 1.0, 'CLL': -0.087298, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.8181489350995119;  // std dev = 0,196, 25,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   else return -0.14185106490048768;  // std dev = 5,58e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */


Results
   AUC ROC   = 0.91462
   AUC PR    = 0.226342
   CLL	      = -0.21953
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.764 seconds
Total inference time: 1.103 seconds
AUC ROC: 0.91462


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 02:39:18
{'F1': nan, 'Recall': 0.0, 'Inference time': 1.103, 'Precision': [nan, 0.5], 'Learning time': 0.764, 'AUC PR': 0.226342, 'CLL': -0.21953, 'AUC ROC': 0.91462}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5166855204653644;  // std dev = 0,474, 123,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004879;  // std dev = 0,000, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4524349335632936;  // std dev = 0,470, 121,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839105;  // std dev = 8,30e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3659623606727377;  // std dev = 0,470, 121,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=81 */
%   else return -0.1123163781936062;  // std dev = 7,88e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2570371618058739;  // std dev = 0,479, 126,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783638;  // std dev = 0,000, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.19978365801340767;  // std dev = 0,478, 125,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926078;  // std dev = 7,74e-08, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.177024080313113;  // std dev = 0,468, 120,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0851847513883968;  // std dev = 6,14e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.09068071506771895;  // std dev = 5,454, 128,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=81 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109157;  // std dev = 6,41e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1337358293043895;  // std dev = 0,459, 116,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 4,71e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.08358476718187718;  // std dev = 5,086, 119,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=81 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 5,87e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.006054475751537021;  // std dev = 0,485, 130,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 4,08e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.274404
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.625 seconds
Total inference time: 1.467 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.860299
   AUC PR    = 0.06348
   CLL	      = -0.317228
   Precision = 0.06348 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.119381


Total scoring time: 1.772 seconds
Parameter learned model CLL: -0.317228


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 133, 0], 'true,true': [0.474, 42, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.3e-08, 127, 0], 'true,true': [0.47, 40, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.47, 40, 81], 'false': [7.88e-08, 98, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 124, 0], 'true,true': [0.479, 45, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.74e-08, 131, 0], 'true,true': [0.478, 44, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.14e-08, 114, 0], 'true,true': [0.468, 39, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [6.41e-08, 111, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [5.454, 47, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.71e-08, 105, 0], 'true,true': [0.459, 35, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [5.87e-08, 125, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [5.086, 38, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.08e-08, 135, 0], 'true,true': [0.485, 49, 81], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22486615110053693, -5.0085249231210067e-17], 'true': [0.22486615110053693, nan]}, {'': [0.22129635953828405, 5.419986419429898e-17], 'true': [0.22129635953828405, nan]}, {'': [0.2212963595382835, 6.344131569286608e-17]}, {'': [0.229591836734694, -2.865091676452017e-17], 'true': [0.229591836734694, nan]}, {'': [0.2280960000000004, 4.57649185723347e-17], 'true': [0.2280960000000004, nan]}, {'': [0.2193750000000004, 3.311191476952221e-17], 'true': [0.2193750000000004, nan]}, {'': [0.23236083984374956, 3.700743415417188e-17], 'true': [0.23236083984374956, nan], 'true,true': [0.23236083984374956, nan]}, {'': [0.21068668252080838, 2.114710523095536e-17], 'true': [0.21068668252080838, nan]}, {'': [0.217357531247793, 2.7533531010703882e-17], 'true': [0.217357531247793, nan], 'true,true': [0.217357531247793, nan]}, {'': [0.2348520710059172, 1.2335811384723961e-17], 'true': [0.2348520710059172, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 4,94e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839155;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0.7194734122109537;  // std dev = 2,53e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.12544463852839136;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360636;  // std dev = 1,05e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return 0.5553664367462836;  // std dev = 3,42e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.11231637819360618;  // std dev = 8,82e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.4175135841583104;  // std dev = 8,43e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.10159632948783627;  // std dev = 1,97e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.10159632948783634;  // std dev = 0,000, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601501;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926101;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.12202112002179048;  // std dev = 0,572, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.09269127618926096;  // std dev = 4,94e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08413361741197534;  // std dev = 0,009, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.08518475138839682;  // std dev = 5,77e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0781651463136339;  // std dev = 0,007, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0.20975771563253567;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.07877675473109155;  // std dev = 6,91e-08, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07262497414946781;  // std dev = 0,007, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.17709649774527716;  // std dev = 3,65e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.07324622576333707;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06778656063640473;  // std dev = 0,006, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.15274385809367116;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.06842697784420265;  // std dev = 5,16e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06360673279014173;  // std dev = 0,006, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0.1340070300080109;  // std dev = 5,58e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.06419184008202626;  // std dev = 0,000, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.113395
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.963 seconds
Total inference time: 1.462 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065338
   Precision = 0.94186 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.97006


Total scoring time: 1.71 seconds
Refined model CLL: -0.065338


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.113395
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 7.07 seconds
Total inference time: 1.462 seconds
AUC ROC: 1.0
Total revision time: 7.07
Best scored revision CLL: -0.065338


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:39:29
{'F1': 0.770563, 'Inference time': 1.462, 'Precision': [0.626761, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.309835, 'Inference time': 1.467, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.625, 'CLL': -0.274404}, 'Recall': 1.0, 'Learning time': 7.07, 'CLL': -0.113395}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.14185106490048824;  // std dev = 0,000, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839144;  // std dev = 0,000, 166,000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109537;  // std dev = 2,53e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1123163781936062;  // std dev = 9,88e-08, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462836;  // std dev = 3,42e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583104;  // std dev = 8,43e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10159632948783642;  // std dev = 0,000, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601501;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.0926912761892607;  // std dev = 7,74e-08, 165,000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.08518475138839679;  // std dev = 6,50e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.20280507779244827;  // std dev = 0,403, 83,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=81 */
%   else return -0.07877675473109155;  // std dev = 6,91e-08, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17811200455134643;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.09480919470888347;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07324622576333685;  // std dev = 7,81e-08, 158,000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420262;  // std dev = 6,99e-08, 160,000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1535137861558891;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.0869792871295272;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202626;  // std dev = 0,000, 157,000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13460781434219998;  // std dev = 7,15e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.08031551515955448;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.076473
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.178 seconds
Total inference time: 1.36 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 02:39:33
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.36, 'Precision': [1.0, 0.5], 'Learning time': 2.178, 'AUC PR': 1.0, 'CLL': -0.076473, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.141851064900488;  // std dev = 0,000, 142,000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.193993
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.853 seconds
Total inference time: 0.868 seconds
AUC ROC: 0.985041


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 02:39:35
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.868, 'Precision': [nan, 0.5], 'Learning time': 0.853, 'AUC PR': 0.626761, 'CLL': -0.193993, 'AUC ROC': 0.985041}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4968923905968915;  // std dev = 0,480, 191,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048832;  // std dev = 0,000, 184,000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.37859053375041707;  // std dev = 0,491, 206,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839144;  // std dev = 0,000, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3547050517766509;  // std dev = 0,480, 191,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=122 */
%   else return -0.11231637819360654;  // std dev = 0,000, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2946337780025771;  // std dev = 0,475, 186,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783648;  // std dev = 0,000, 160,000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20048806476155462;  // std dev = 0,482, 193,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892606;  // std dev = 8,69e-08, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21580672666955533;  // std dev = 0,459, 175,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 6,50e-08, 154,000 (wgt'ed) examples reached here.  /* #neg=154 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.10688455578876692;  // std dev = 6,608, 190,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109147;  // std dev = 8,02e-08, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13545841433501166;  // std dev = 0,459, 175,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333666;  // std dev = 1,19e-07, 200,000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.05422894587948913;  // std dev = 6,544, 188,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 7,38e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06262157054377644;  // std dev = 0,470, 182,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.27638
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.913 seconds
Total inference time: 1.592 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.860249
   AUC PR    = 0.063708
   CLL	      = -0.320155
   Precision = 0.063708 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.119784


Total scoring time: 1.827 seconds
Parameter learned model CLL: -0.320155


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 184, 0], 'true,true': [0.48, 69, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 168, 0], 'true,true': [0.491, 84, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.48, 69, 122], 'false': [0.0, 185, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 160, 0], 'true,true': [0.475, 64, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.69e-08, 180, 0], 'true,true': [0.482, 71, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.5e-08, 154, 0], 'true,true': [0.459, 53, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [8.02e-08, 183, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.608, 68, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.19e-07, 200, 0], 'true,true': [0.459, 53, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [7.38e-08, 170, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.544, 66, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 180, 0], 'true,true': [0.47, 60, 122], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23075025355664988, -2.0756343503861623e-16], 'true': [0.23075025355664988, nan]}, {'': [0.24149307192007344, -5.28677630773884e-18], 'true': [0.24149307192007344, nan]}, {'': [0.23075025355664247, -7.201446646217232e-18]}, {'': [0.22569083130997813, -6.800116025829084e-17], 'true': [0.22569083130997813, nan]}, {'': [0.2325431555209519, 4.194175870806147e-17], 'true': [0.2325431555209519, nan]}, {'': [0.2111346938775527, 2.739511359464672e-17], 'true': [0.2111346938775527, nan]}, {'': [0.22980609418282513, 3.5187396408884745e-17], 'true': [0.22980609418282513, nan], 'true,true': [0.22980609418282513, nan]}, {'': [0.21113469387755074, 7.105427357601002e-17], 'true': [0.21113469387755074, nan]}, {'': [0.22781801720235448, 3.200054600390157e-17], 'true': [0.22781801720235448, nan], 'true,true': [0.22781801720235448, nan]}, {'': [0.2209878034053861, -4.3175339846533866e-18], 'true': [0.2209878034053861, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 6,66e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.14185106490048832;  // std dev = 0,000, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1254446385283915;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0.7194734122109553;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.12544463852839152;  // std dev = 0,000, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,69e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.11720339562096083;  // std dev = 0,330, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.11231637819360635;  // std dev = 3,65e-08, 166,000 (wgt'ed) examples reached here.  /* #neg=166 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10115113701908982;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0.4175135841583093;  // std dev = 3,53e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.10159632948783644;  // std dev = 0,000, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0923183956976319;  // std dev = 2,36e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0.3207118471601499;  // std dev = 2,19e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.09269127618926067;  // std dev = 8,02e-08, 161,000 (wgt'ed) examples reached here.  /* #neg=161 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08486820015553115;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0.2551722425694898;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07850486994440871;  // std dev = 2,89e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0.2097577156325354;  // std dev = 1,93e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.0787767547310915;  // std dev = 8,56e-08, 160,000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1770964977452781;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.07301031525778881;  // std dev = 2,11e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.0732462257633367;  // std dev = 1,08e-07, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06822044122612247;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0.1527438580936714;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.06842697784420262;  // std dev = 7,45e-08, 174,000 (wgt'ed) examples reached here.  /* #neg=174 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0640095814004183;  // std dev = 1,49e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0.1340070300080111;  // std dev = 5,16e-08, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.06419184008202626;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.108142
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 2.304 seconds
Total inference time: 1.379 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06511
   Precision = 0.945736 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.972112


Total scoring time: 1.648 seconds
Refined model CLL: -0.06511


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.108142
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 7.692 seconds
Total inference time: 1.379 seconds
AUC ROC: 1.0
Total revision time: 7.692
Best scored revision CLL: -0.06511


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:39:46
{'F1': 0.770563, 'Inference time': 1.379, 'Precision': [0.626761, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.309835, 'Inference time': 1.592, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.913, 'CLL': -0.27638}, 'Recall': 1.0, 'Learning time': 7.692, 'CLL': -0.108142}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.14185106490048846;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109553;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.12544463852839177;  // std dev = 0,000, 225,000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,69e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.11231637819360679;  // std dev = 0,000, 239,000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583093;  // std dev = 3,53e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.10159632948783649;  // std dev = 0,000, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926047;  // std dev = 9,88e-08, 248,000 (wgt'ed) examples reached here.  /* #neg=248 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 2,19e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694898;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.08518475138839678;  // std dev = 7,88e-08, 223,000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325354;  // std dev = 1,93e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07892017936357032;  // std dev = 0,036, 249,000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07323649052073657;  // std dev = 6,32e-08, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452781;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936714;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.0684184513583736;  // std dev = 8,68e-07, 249,000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080111;  // std dev = 5,16e-08, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06418431648448213;  // std dev = 8,24e-07, 220,000 (wgt'ed) examples reached here.  /* #neg=220 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067007
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.536 seconds
Total inference time: 1.396 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 02:39:50
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.396, 'Precision': [1.0, 0.5], 'Learning time': 2.536, 'AUC PR': 1.0, 'CLL': -0.067007, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.1418510649004884;  // std dev = 0,000, 241,000 (wgt'ed) examples reached here.  /* #neg=241 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.897 seconds
Total inference time: 0.932 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 02:39:52
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.932, 'Precision': [nan, 0.5], 'Learning time': 0.897, 'AUC PR': 1.0, 'CLL': -0.188432, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5234550575484884;  // std dev = 0,472, 245,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048832;  // std dev = 0,000, 243,000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.45820962299102436;  // std dev = 0,468, 241,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839183;  // std dev = 0,000, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.38749988169765137;  // std dev = 0,461, 235,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=163 */
%   else return -0.11231637819360689;  // std dev = 0,000, 261,000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.24780542906440625;  // std dev = 0,479, 254,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783658;  // std dev = 0,000, 247,000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20554921736365447;  // std dev = 0,474, 247,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926049;  // std dev = 7,30e-08, 232,000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11414229885248003;  // std dev = 0,485, 263,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 8,56e-08, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.07637458914598536;  // std dev = 7,968, 267,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=163 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 6,50e-08, 243,000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09376688998240358;  // std dev = 0,478, 252,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333671;  // std dev = 1,25e-07, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.0631109710330757;  // std dev = 7,669, 255,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=163 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420287;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0528305872925338;  // std dev = 0,479, 253,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 1,05e-08, 221,000 (wgt'ed) examples reached here.  /* #neg=221 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.267676
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.83 seconds
Total inference time: 1.576 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.86065
   AUC PR    = 0.063997
   CLL	      = -0.306993
   Precision = 0.063997 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.120295


Total scoring time: 2.092 seconds
Parameter learned model CLL: -0.306993


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 243, 0], 'true,true': [0.472, 82, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 237, 0], 'true,true': [0.468, 78, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.461, 72, 163], 'false': [0.0, 261, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 247, 0], 'true,true': [0.479, 91, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.3e-08, 232, 0], 'true,true': [0.474, 84, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.56e-08, 226, 0], 'true,true': [0.485, 100, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [6.5e-08, 243, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.968, 104, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.25e-07, 237, 0], 'true,true': [0.478, 89, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 274, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.669, 92, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.05e-08, 221, 0], 'true,true': [0.479, 90, 163], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2226738858808883, -1.5716737467944603e-16], 'true': [0.2226738858808883, nan]}, {'': [0.2189011897178084, -5.808761816604195e-17], 'true': [0.2189011897178084, nan]}, {'': [0.2125124490719776, -1.0038798230327086e-16]}, {'': [0.22991195982392112, -7.191728094737856e-17], 'true': [0.22991195982392112, nan]}, {'': [0.22442590437476487, 2.2970131543968756e-17], 'true': [0.22442590437476487, nan]}, {'': [0.23565470080527437, 3.2422442312062095e-17], 'true': [0.23565470080527437, nan]}, {'': [0.23779264683190954, 1.7361512319241132e-17], 'true': [0.23779264683190954, nan], 'true,true': [0.23779264683190954, nan]}, {'': [0.22844230284706493, 6.558279470359575e-17], 'true': [0.22844230284706493, nan]}, {'': [0.23061899269511626, -3.322565256177476e-17], 'true': [0.23061899269511626, nan], 'true,true': [0.23061899269511626, nan]}, {'': [0.22918652064553413, 5.023633595588944e-19], 'true': [0.22918652064553413, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.14185106490048768;  // std dev = 6,83e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.1418510649004885;  // std dev = 0,000, 227,000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0.7194734122109564;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.1254446385283918;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462833;  // std dev = 5,53e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.11231637819360624;  // std dev = 6,32e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.11231637819360675;  // std dev = 0,000, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830914;  // std dev = 4,38e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.10159632948783621;  // std dev = 5,05e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.10159632948783656;  // std dev = 0,000, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601493;  // std dev = 3,63e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.09706160374273626;  // std dev = 0,343, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.09269127618926049;  // std dev = 7,15e-08, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08484479598903588;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0.2551722425694906;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.08518475138839678;  // std dev = 8,69e-08, 232,000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07848476278961052;  // std dev = 0,000, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0.20975771563253515;  // std dev = 2,65e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.07877675473109143;  // std dev = 6,66e-08, 238,000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07299286446751997;  // std dev = 2,36e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0.17709649774527822;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.07324622576333675;  // std dev = 1,21e-07, 243,000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06820516011361465;  // std dev = 1,49e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0.15274385809367147;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.06842697784420261;  // std dev = 6,32e-08, 227,000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06399609406503882;  // std dev = 0,000, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0.1340070300080108;  // std dev = 9,42e-08, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.06419184008202625;  // std dev = 1,83e-08, 229,000 (wgt'ed) examples reached here.  /* #neg=229 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.092854
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.033 seconds
Total inference time: 1.426 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064608
   Precision = 0.942197 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.970238


Total scoring time: 2.256 seconds
Refined model CLL: -0.064608


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.092854
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 9.211 seconds
Total inference time: 1.426 seconds
AUC ROC: 1.0
Total revision time: 9.211
Best scored revision CLL: -0.064608


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:40:05
{'F1': 0.770563, 'Inference time': 1.426, 'Precision': [0.626761, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.309835, 'Inference time': 1.576, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.83, 'CLL': -0.267676}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 9.211, 'CLL': -0.092854}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 1,79e-07, 328,000 (wgt'ed) examples reached here.  /* #neg=328 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109564;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.12544463852839216;  // std dev = 0,000, 325,000 (wgt'ed) examples reached here.  /* #neg=325 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1123163781936066;  // std dev = 0,000, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 5,53e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830914;  // std dev = 4,38e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.10159632948783662;  // std dev = 0,000, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601493;  // std dev = 3,63e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.09269127618926047;  // std dev = 1,85e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694906;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253515;  // std dev = 2,65e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.07960039797543346;  // std dev = 0,233, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.0731903355064033;  // std dev = 0,000, 319,000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06837805385291526;  // std dev = 0,000, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 9,42e-08, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.06414867265229746;  // std dev = 0,000, 325,000 (wgt'ed) examples reached here.  /* #neg=325 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07198
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.031 seconds
Total inference time: 1.464 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 02:40:10
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.464, 'Precision': [1.0, 0.5], 'Learning time': 3.031, 'AUC PR': 1.0, 'CLL': -0.07198, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.1418510649004879;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.106 seconds
Total inference time: 0.935 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 02:40:12
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.935, 'Precision': [nan, 0.5], 'Learning time': 1.106, 'AUC PR': 1.0, 'CLL': -0.188432, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5381489350995085;  // std dev = 0,466, 300,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048774;  // std dev = 1,52e-07, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4460112603733841;  // std dev = 0,471, 306,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.125444638528392;  // std dev = 0,000, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3556901955210816;  // std dev = 0,473, 308,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=204 */
%   else return -0.112316378193607;  // std dev = 0,000, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.26273119561637526;  // std dev = 0,477, 314,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.18869336258282282;  // std dev = 0,480, 319,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926042;  // std dev = 1,55e-07, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11849544825992098;  // std dev = 0,486, 331,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 286,000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.10416387073392297;  // std dev = 8,669, 323,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=204 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109141;  // std dev = 3,94e-08, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07829843677634671;  // std dev = 0,482, 323,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333698;  // std dev = 9,77e-08, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.09850998358305917;  // std dev = 8,192, 304,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=204 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420308;  // std dev = 0,000, 318,000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.05529571484587771;  // std dev = 0,476, 313,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820259;  // std dev = 1,30e-07, 313,000 (wgt'ed) examples reached here.  /* #neg=313 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.270251
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.995 seconds
Total inference time: 1.573 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.861638
   AUC PR    = 0.064496
   CLL	      = -0.308988
   Precision = 0.064496 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121176


Total scoring time: 2.421 seconds
Parameter learned model CLL: -0.308988


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.52e-07, 316, 0], 'true,true': [0.466, 96, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 296, 0], 'true,true': [0.471, 102, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.473, 104, 204], 'false': [0.0, 284, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 290, 0], 'true,true': [0.477, 110, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.55e-07, 298, 0], 'true,true': [0.48, 115, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.01e-07, 286, 0], 'true,true': [0.486, 127, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [3.94e-08, 305, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.669, 119, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.77e-08, 299, 0], 'true,true': [0.482, 119, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 318, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.192, 100, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.3e-07, 313, 0], 'true,true': [0.476, 109, 204], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2176000000000047, 7.307797124114954e-17], 'true': [0.2176000000000047, nan]}, {'': [0.22222222222221963, -8.401687753920104e-17], 'true': [0.22222222222221963, nan]}, {'': [0.2236464833867435, -1.0476752485899364e-16]}, {'': [0.22759543997728074, -5.5128315705525014e-17], 'true': [0.22759543997728074, nan]}, {'': [0.23054018730161785, 8.047254138222611e-17], 'true': [0.23054018730161785, nan]}, {'': [0.2364710070189197, 3.5713467925005034e-17], 'true': [0.2364710070189197, nan]}, {'': [0.23268698060941712, 5.096105686803997e-18], 'true': [0.23268698060941712, nan], 'true,true': [0.23268698060941712, nan]}, {'': [0.2326869806094183, 3.193283615978711e-17], 'true': [0.2326869806094183, nan]}, {'': [0.22074099722991733, -7.12218544099157e-17], 'true': [0.22074099722991733, nan], 'true,true': [0.22074099722991733, nan]}, {'': [0.22696975573905923, 5.391498394345808e-17], 'true': [0.22696975573905923, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1418510649004877;  // std dev = 5,58e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.14185106490048777;  // std dev = 1,43e-07, 313,000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839108;  // std dev = 7,74e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.12544463852839197;  // std dev = 0,000, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1134569912664683;  // std dev = 0,115, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.11231637819360692;  // std dev = 0,000, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1014922678818591;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.1015963294878366;  // std dev = 0,000, 265,000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09805779905987617;  // std dev = 0,329, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.09269127618926042;  // std dev = 1,59e-07, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08783572477421056;  // std dev = 0,254, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 294,000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07962069311254465;  // std dev = 0,170, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.07877675473109143;  // std dev = 5,16e-08, 338,000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07414790915118917;  // std dev = 0,161, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.07324622576333695;  // std dev = 1,02e-07, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0677417562379114;  // std dev = 3,16e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.0684269778442029;  // std dev = 0,000, 280,000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06358692417865953;  // std dev = 0,000, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202597;  // std dev = 1,14e-07, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.0727
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.875 seconds
Total inference time: 1.49 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063732
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.976 seconds
Refined model CLL: -0.063732


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.0727
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.267 seconds
Total inference time: 1.49 seconds
AUC ROC: 1.0
Total revision time: 9.267
Best scored revision CLL: -0.063732


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:40:25
{'parameter_1.0': {'F1': 0.309835, 'Inference time': 1.573, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.995, 'CLL': -0.270251}, 'F1': 1.0, 'Inference time': 1.49, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 9.267, 'CLL': -0.0727}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.14185106490048757;  // std dev = 2,25e-07, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.12544463852839224;  // std dev = 0,000, 381,000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360636;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.11231637819360636;  // std dev = 0,000, 370,000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.10159632948783612;  // std dev = 1,71e-07, 402,000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0926912761892606;  // std dev = 1,86e-07, 364,000 (wgt'ed) examples reached here.  /* #neg=364 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926094;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.08518475138839678;  // std dev = 1,17e-07, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07877675473109144;  // std dev = 9,42e-08, 403,000 (wgt'ed) examples reached here.  /* #neg=403 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.07333507464740523;  // std dev = 0,033, 377,000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.0684213144135509;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.06418684320919939;  // std dev = 0,000, 400,000 (wgt'ed) examples reached here.  /* #neg=400 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066299
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.503 seconds
Total inference time: 1.547 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 02:40:30
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.547, 'Precision': [1.0, 0.5], 'Learning time': 3.503, 'AUC PR': 1.0, 'CLL': -0.066299, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048743;  // std dev = 2,70e-07, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.193993
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.19 seconds
Total inference time: 0.892 seconds
AUC ROC: 0.985041


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 02:40:33
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.892, 'Precision': [nan, 0.5], 'Learning time': 1.19, 'AUC PR': 0.626761, 'CLL': -0.193993, 'AUC ROC': 0.985041}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5709148925463217;  // std dev = 0,452, 94,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.47157507322948305;  // std dev = 0,459, 96,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3715345408082615;  // std dev = 0,462, 97,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=67 */
%   else return -0.1123163781936062;  // std dev = 7,88e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2653135070237967;  // std dev = 0,470, 100,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 1,49e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.25055905825178987;  // std dev = 0,449, 93,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892609;  // std dev = 6,05e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1443389940886588;  // std dev = 0,468, 99,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.06394291575191456;  // std dev = 4,965, 106,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0787767547310916;  // std dev = 5,77e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1290178493336912;  // std dev = 0,452, 94,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.13808891910152016;  // std dev = 4,070, 89,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420264;  // std dev = 5,48e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0735654381067481;  // std dev = 0,449, 93,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.362656
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.324 seconds
Total inference time: 1.192 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.878291
   AUC PR    = 0.100299
   CLL	      = -0.314866
   Precision = 0.100299 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.182313


Total scoring time: 1.451 seconds
Parameter learned model CLL: -0.314866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.69e-08, 103, 0], 'true,true': [0.452, 27, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 96, 0], 'true,true': [0.459, 29, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.462, 30, 67], 'false': [7.88e-08, 99, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.49e-08, 105, 0], 'true,true': [0.47, 33, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.05e-08, 107, 0], 'true,true': [0.449, 26, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.58e-08, 98, 0], 'true,true': [0.468, 32, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [5.77e-08, 99, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.965, 39, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 95, 0], 'true,true': [0.452, 27, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [5.48e-08, 114, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.07, 22, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 121, 0], 'true,true': [0.449, 26, 67], 'true,false': [0.0, 0, 0]}]]
[{'': [0.204730647351742, 7.329627735389383e-17], 'true': [0.204730647351742, nan]}, {'': [0.2108289930555536, -1.3877787807814457e-17], 'true': [0.2108289930555536, nan]}, {'': [0.2136252524178975, 6.280049432223107e-17]}, {'': [0.22110000000000057, 2.1147105230955365e-18], 'true': [0.22110000000000057, nan]}, {'': [0.20141056769568702, 3.4240523189373984e-17], 'true': [0.20141056769568702, nan]}, {'': [0.218753188450158, 3.172065784643304e-17], 'true': [0.218753188450158, nan]}, {'': [0.2325560697757215, 3.364312195833808e-17], 'true': [0.2325560697757215, nan], 'true,true': [0.2325560697757215, nan]}, {'': [0.20473064735174284, -8.18059070776431e-18], 'true': [0.20473064735174284, nan]}, {'': [0.18608761520010111, 2.6294755846385285e-17], 'true': [0.18608761520010111, nan], 'true,true': [0.18608761520010111, nan]}, {'': [0.20141056769568733, -1.880956364034356e-17], 'true': [0.20141056769568733, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004877;  // std dev = 2,36e-08, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.1254446385283913;  // std dev = 0,000, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.11231637819360622;  // std dev = 7,88e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.10159632948783615;  // std dev = 5,77e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.092691276189261;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.09269127618926098;  // std dev = 4,59e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839679;  // std dev = 2,24e-08, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.08518475138839682;  // std dev = 5,87e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109179;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.07877675473109158;  // std dev = 5,87e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.07324622576333707;  // std dev = 4,47e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07339189613979746;  // std dev = 0,112, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06842697784420267;  // std dev = 4,77e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.0662371787191256;  // std dev = 0,076, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06419184008202626;  // std dev = 0,000, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063894
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.726 seconds
Total inference time: 1.111 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064624
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.34 seconds
Refined model CLL: -0.064624


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063894
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.841 seconds
Total inference time: 1.111 seconds
AUC ROC: 1.0
Total revision time: 5.841
Best scored revision CLL: -0.064624


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:40:42
{'parameter_0.2': {'F1': 0.140406, 'Inference time': 1.192, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 1.324, 'CLL': -0.362656}, 'F1': 1.0, 'Inference time': 1.111, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.841, 'CLL': -0.063894}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.1418510649004878;  // std dev = 0,000, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.12544463852839113;  // std dev = 7,45e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360626;  // std dev = 7,60e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10159632948783637;  // std dev = 0,000, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926101;  // std dev = 3,49e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 5,87e-08, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2501669926583443;  // std dev = 0,338, 68,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return -0.08518475138839689;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21058858823980484;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.07898754182436499;  // std dev = 0,028, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1777056638663227;  // std dev = 2,11e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.07344553286083957;  // std dev = 0,026, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1532058148136281;  // std dev = 6,83e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06898010810859563;  // std dev = 0,042, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13436756923804596;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06452922897996852;  // std dev = 0,033, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063831
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.171 seconds
Total inference time: 1.12 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 02:40:45
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.12, 'Precision': [1.0, 0.5], 'Learning time': 2.171, 'AUC PR': 1.0, 'CLL': -0.063831, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.14185106490048763;  // std dev = 7,88e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.817 seconds
Total inference time: 0.778 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 02:40:47
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.778, 'Precision': [nan, 0.5], 'Learning time': 0.817, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5453284222789965;  // std dev = 0,464, 195,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048835;  // std dev = 0,000, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.43497023105063937;  // std dev = 0,475, 204,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.35427146278571553;  // std dev = 0,474, 203,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=134 */
%   else return -0.11231637819360667;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.22617364850886898;  // std dev = 0,487, 219,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783653;  // std dev = 0,000, 210,000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24320382142290872;  // std dev = 0,465, 196,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926058;  // std dev = 8,94e-08, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16237944140348012;  // std dev = 0,473, 202,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,88e-08, 207,000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.16008452147299004;  // std dev = 6,324, 191,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109147;  // std dev = 7,45e-08, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1062934910656587;  // std dev = 0,464, 195,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333664;  // std dev = 1,20e-07, 201,000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.04396601522209668;  // std dev = 6,844, 206,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 8,16e-08, 223,000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.01810960463351415;  // std dev = 0,481, 211,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.330524
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.77 seconds
Total inference time: 1.155 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.872823
   AUC PR    = 0.096403
   CLL	      = -0.298248
   Precision = 0.096403 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.175853


Total scoring time: 1.917 seconds
Parameter learned model CLL: -0.298248


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 190, 0], 'true,true': [0.464, 61, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 192, 0], 'true,true': [0.475, 70, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.474, 69, 134], 'false': [0.0, 212, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 210, 0], 'true,true': [0.487, 85, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.94e-08, 192, 0], 'true,true': [0.465, 62, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.88e-08, 207, 0], 'true,true': [0.473, 68, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [7.45e-08, 194, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.324, 57, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.2e-07, 201, 0], 'true,true': [0.464, 61, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [8.16e-08, 223, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.844, 72, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 209, 0], 'true,true': [0.481, 77, 134], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21496383957922874, -2.220446049250313e-16], 'true': [0.21496383957922874, nan]}, {'': [0.2253940792003055, -2.7755575615628914e-17], 'true': [0.2253940792003055, nan]}, {'': [0.22436846319978546, -5.655853144316835e-17]}, {'': [0.2374846229227889, -8.670313144691699e-17], 'true': [0.2374846229227889, nan]}, {'': [0.2162640566430661, 4.163336342344337e-17], 'true': [0.2162640566430661, nan]}, {'': [0.22331144005489792, 3.003501902367573e-17], 'true': [0.22331144005489792, nan]}, {'': [0.20936926071105533, 2.8613995480029805e-17], 'true': [0.20936926071105533, nan], 'true,true': [0.20936926071105533, nan]}, {'': [0.2149638395792239, 7.180546925436336e-17], 'true': [0.2149638395792239, nan]}, {'': [0.2273541332830614, 2.98714715145782e-17], 'true': [0.2273541332830614, nan], 'true,true': [0.2273541332830614, nan]}, {'': [0.23175580063340914, -1.0624143776317287e-18], 'true': [0.23175580063340914, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048768;  // std dev = 5,96e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.14185106490048838;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.12544463852839166;  // std dev = 0,000, 201,000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360633;  // std dev = 3,16e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.11231637819360657;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783624;  // std dev = 3,33e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.10159632948783653;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926103;  // std dev = 0,000, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.09269127618926058;  // std dev = 8,82e-08, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839679;  // std dev = 1,05e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 187,000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109169;  // std dev = 2,89e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.07877675473109144;  // std dev = 6,14e-08, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.07324622576333666;  // std dev = 1,16e-07, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.0684269778442027;  // std dev = 2,36e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.06842697784420262;  // std dev = 8,49e-08, 213,000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.06419184008202626;  // std dev = 0,000, 199,000 (wgt'ed) examples reached here.  /* #neg=199 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.392 seconds
Total inference time: 1.284 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064052
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.099 seconds
Refined model CLL: -0.064052


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.178 seconds
Total inference time: 1.284 seconds
AUC ROC: 1.0
Total revision time: 8.178
Best scored revision CLL: -0.064052


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:40:58
{'F1': 1.0, 'Inference time': 1.284, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.140406, 'Inference time': 1.155, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 1.77, 'CLL': -0.330524}, 'Recall': 1.0, 'Learning time': 8.178, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.14185106490048832;  // std dev = 0,000, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.1254446385283917;  // std dev = 0,000, 217,000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.11231637819360683;  // std dev = 0,000, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.10159632948783649;  // std dev = 0,000, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.09269127618926057;  // std dev = 6,66e-08, 247,000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839683;  // std dev = 1,29e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.08518475138839678;  // std dev = 6,99e-08, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109176;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.07877675473109146;  // std dev = 6,99e-08, 228,000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.07324622576333682;  // std dev = 1,15e-07, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420276;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.06842697784420275;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202619;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.06419184008202625;  // std dev = 2,11e-08, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.725 seconds
Total inference time: 1.108 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 02:41:02
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.108, 'Precision': [1.0, 0.5], 'Learning time': 2.725, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1418510649004877;  // std dev = 2,58e-08, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048838;  // std dev = 0,000, 270,000 (wgt'ed) examples reached here.  /* #neg=270 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.056 seconds
Total inference time: 0.801 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 02:41:04
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.801, 'Precision': [nan, 0.5], 'Learning time': 1.056, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5744609918370972;  // std dev = 0,451, 282,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048813;  // std dev = 0,000, 262,000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.42047274020794906;  // std dev = 0,478, 312,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839202;  // std dev = 0,000, 304,000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3282811353785251;  // std dev = 0,481, 317,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=202 */
%   else return -0.11231637819360686;  // std dev = 0,000, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.26442434125421194;  // std dev = 0,478, 312,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878366;  // std dev = 0,000, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.23996640558775337;  // std dev = 0,464, 294,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926043;  // std dev = 1,43e-07, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1920609723958334;  // std dev = 0,459, 289,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,13e-07, 338,000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.11196978590253567;  // std dev = 8,206, 303,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109141;  // std dev = 2,98e-08, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08450918852319042;  // std dev = 0,471, 303,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333698;  // std dev = 9,77e-08, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.08451428034053345;  // std dev = 7,951, 294,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0684269778442031;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04625978833307913;  // std dev = 0,471, 302,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202598;  // std dev = 1,04e-07, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.339381
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.17 seconds
Total inference time: 1.218 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.87262
   AUC PR    = 0.096697
   CLL	      = -0.306225
   Precision = 0.096697 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.176342


Total scoring time: 1.8 seconds
Parameter learned model CLL: -0.306225


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 262, 0], 'true,true': [0.451, 80, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 304, 0], 'true,true': [0.478, 110, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.481, 115, 202], 'false': [0.0, 296, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 272, 0], 'true,true': [0.478, 110, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.43e-07, 287, 0], 'true,true': [0.464, 92, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.13e-07, 338, 0], 'true,true': [0.459, 87, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.98e-08, 324, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.206, 101, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.77e-08, 299, 0], 'true,true': [0.471, 101, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 324, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.951, 92, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.04e-07, 293, 0], 'true,true': [0.471, 100, 202], 'true,false': [0.0, 0, 0]}]]
[{'': [0.20320909410995916, -8.474984920802722e-17], 'true': [0.20320909410995916, nan]}, {'': [0.22826265614726787, -8.472754661613037e-17], 'true': [0.22826265614726787, nan]}, {'': [0.23116958075013425, -9.151838446234399e-17]}, {'': [0.2282626561472692, -6.204187490552346e-17], 'true': [0.2282626561472692, nan]}, {'': [0.21500300800592737, 7.117806150906926e-17], 'true': [0.21500300800592737, nan]}, {'': [0.21041414734018848, 3.81023286557746e-17], 'true': [0.21041414734018848, nan]}, {'': [0.22222222222222154, 2.741291418827547e-18], 'true': [0.22222222222222154, nan], 'true,true': [0.22222222222222154, nan]}, {'': [0.22222222222222215, 3.193283615978711e-17], 'true': [0.22222222222222215, nan]}, {'': [0.21500300800592476, -7.607083687246443e-17], 'true': [0.21500300800592476, nan], 'true,true': [0.21500300800592476, nan]}, {'': [0.22148151396868532, 3.7133739390192947e-17], 'true': [0.22148151396868532, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8,16e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   else return -0.14185106490048793;  // std dev = 0,000, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.13098327957341485;  // std dev = 0,264, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.12544463852839202;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11540346496553772;  // std dev = 0,245, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.1123163781936069;  // std dev = 0,000, 262,000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10744984798567174;  // std dev = 0,289, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.10159632948783663;  // std dev = 0,000, 304,000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09699015434286708;  // std dev = 0,270, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.09269127618926043;  // std dev = 1,38e-07, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08673922236870367;  // std dev = 0,197, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08177570475584685;  // std dev = 0,212, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.07877675473109141;  // std dev = 2,58e-08, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07352899871448496;  // std dev = 0,143, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.0732462257633371;  // std dev = 7,15e-08, 345,000 (wgt'ed) examples reached here.  /* #neg=345 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.0687529368889663;  // std dev = 0,135, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.06842697784420305;  // std dev = 0,000, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.0652799197571705;  // std dev = 0,156, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.0641918400820259;  // std dev = 1,24e-07, 311,000 (wgt'ed) examples reached here.  /* #neg=311 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063621
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.884 seconds
Total inference time: 1.203 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064527
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.112 seconds
Refined model CLL: -0.064527


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063621
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.966 seconds
Total inference time: 1.203 seconds
AUC ROC: 1.0
Total revision time: 8.966
Best scored revision CLL: -0.064527


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:41:16
{'F1': 1.0, 'Inference time': 1.203, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.140406, 'Inference time': 1.218, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 2.17, 'CLL': -0.339381}, 'Recall': 1.0, 'Learning time': 8.966, 'CLL': -0.063621}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 2,79e-08, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.14185106490048768;  // std dev = 1,86e-07, 384,000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.12544463852839216;  // std dev = 0,000, 340,000 (wgt'ed) examples reached here.  /* #neg=340 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.11231637819360685;  // std dev = 0,000, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.10159632948783635;  // std dev = 5,16e-08, 395,000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926093;  // std dev = 1,18e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.09269127618926067;  // std dev = 1,79e-07, 386,000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.0851847513883968;  // std dev = 2,04e-08, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.08518475138839678;  // std dev = 1,07e-07, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.07877675473109147;  // std dev = 0,000, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333704;  // std dev = 1,18e-08, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.07324622576333707;  // std dev = 8,02e-08, 344,000 (wgt'ed) examples reached here.  /* #neg=344 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.06842697784420317;  // std dev = 0,000, 358,000 (wgt'ed) examples reached here.  /* #neg=358 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.06419184008202587;  // std dev = 1,38e-07, 386,000 (wgt'ed) examples reached here.  /* #neg=386 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.112 seconds
Total inference time: 1.145 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 02:41:21
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.145, 'Precision': [1.0, 0.5], 'Learning time': 3.112, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1418510649004877;  // std dev = 1,63e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.209 seconds
Total inference time: 0.773 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 02:41:23
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.773, 'Precision': [nan, 0.5], 'Learning time': 1.209, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5032328679532251;  // std dev = 0,478, 417,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004874;  // std dev = 2,78e-07, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.42729516716722116;  // std dev = 0,479, 419,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839222;  // std dev = 0,000, 377,000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.38564847122351464;  // std dev = 0,466, 395,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=269 */
%   else return -0.11231637819360621;  // std dev = 0,000, 402,000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.271562951085494;  // std dev = 0,476, 412,000 (wgt'ed) examples reached here.  /* #neg=143 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783584;  // std dev = 2,42e-07, 414,000 (wgt'ed) examples reached here.  /* #neg=414 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21870837794266634;  // std dev = 0,472, 404,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926043;  // std dev = 1,99e-07, 330,000 (wgt'ed) examples reached here.  /* #neg=330 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.18990475625322223;  // std dev = 0,462, 389,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,33e-07, 412,000 (wgt'ed) examples reached here.  /* #neg=412 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.1303618891255284;  // std dev = 9,288, 396,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109148;  // std dev = 2,21e-07, 414,000 (wgt'ed) examples reached here.  /* #neg=414 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07513781565751623;  // std dev = 0,475, 410,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333768;  // std dev = 0,000, 367,000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.0888469268771095;  // std dev = 9,162, 391,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420333;  // std dev = 0,000, 393,000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04392639322261784;  // std dev = 0,472, 405,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202566;  // std dev = 1,79e-07, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.337275
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.577 seconds
Total inference time: 1.222 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.870646
   AUC PR    = 0.095255
   CLL	      = -0.308001
   Precision = 0.095255 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173941


Total scoring time: 2.235 seconds
Parameter learned model CLL: -0.308001


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.78e-07, 382, 0], 'true,true': [0.478, 148, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 377, 0], 'true,true': [0.479, 150, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.466, 126, 269], 'false': [0.0, 402, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.42e-07, 414, 0], 'true,true': [0.476, 143, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.99e-07, 330, 0], 'true,true': [0.472, 135, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.33e-07, 412, 0], 'true,true': [0.462, 120, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.21e-07, 414, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.288, 127, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 367, 0], 'true,true': [0.475, 141, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 393, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.162, 122, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.79e-07, 376, 0], 'true,true': [0.472, 136, 269], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2289506524277015, 2.0228147254950495e-16], 'true': [0.2289506524277015, nan]}, {'': [0.22983464436863113, -1.2486327916208656e-16], 'true': [0.22983464436863113, nan]}, {'': [0.21723441756129314, -1.9884591485823698e-17]}, {'': [0.22661773022905135, 1.4159366111161416e-16], 'true': [0.22661773022905135, nan]}, {'': [0.22249656896382702, 1.1976951417168356e-16], 'true': [0.22249656896382702, nan]}, {'': [0.21332134997786337, 4.311545726699637e-17], 'true': [0.21332134997786337, nan]}, {'': [0.21785404550556295, 1.1799471759301181e-16], 'true': [0.21785404550556295, nan], 'true,true': [0.21785404550556295, nan]}, {'': [0.22563355145746777, -5.989759097432724e-17], 'true': [0.22563355145746777, nan]}, {'': [0.2146636926760031, -1.1073980296515557e-16], 'true': [0.2146636926760031, nan], 'true,true': [0.2146636926760031, nan]}, {'': [0.2230391708581009, 8.562890349502537e-17], 'true': [0.2230391708581009, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048785;  // std dev = 0,000, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.1418510649004873;  // std dev = 3,01e-07, 407,000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839113;  // std dev = 7,60e-08, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.12544463852839227;  // std dev = 0,000, 414,000 (wgt'ed) examples reached here.  /* #neg=414 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1123163781936062;  // std dev = 9,42e-08, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.11231637819360618;  // std dev = 0,000, 407,000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783641;  // std dev = 0,000, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.10159632948783627;  // std dev = 1,17e-07, 354,000 (wgt'ed) examples reached here.  /* #neg=354 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926082;  // std dev = 7,60e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.09269127618926094;  // std dev = 1,37e-07, 408,000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0851847513883968;  // std dev = 6,99e-08, 150,000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.08518475138839678;  // std dev = 1,23e-07, 394,000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0787767547310916;  // std dev = 6,50e-08, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.07877675473109155;  // std dev = 9,19e-08, 424,000 (wgt'ed) examples reached here.  /* #neg=424 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333714;  // std dev = 0,000, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.07324622576333713;  // std dev = 6,83e-08, 357,000 (wgt'ed) examples reached here.  /* #neg=357 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420265;  // std dev = 5,67e-08, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.06842697784420342;  // std dev = 0,000, 425,000 (wgt'ed) examples reached here.  /* #neg=425 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.06419184008202562;  // std dev = 1,88e-07, 388,000 (wgt'ed) examples reached here.  /* #neg=388 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.958 seconds
Total inference time: 1.274 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064058
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.046 seconds
Refined model CLL: -0.064058


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.815999999999999 seconds
Total inference time: 1.274 seconds
AUC ROC: 1.0
Total revision time: 9.815999999999999
Best scored revision CLL: -0.064058


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:41:36
{'F1': 1.0, 'Inference time': 1.274, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.140406, 'Inference time': 1.222, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 2.577, 'CLL': -0.337275}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 9.815999999999999, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1418510649004874;  // std dev = 2,23e-07, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.12544463852839227;  // std dev = 0,000, 489,000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.11231637819360597;  // std dev = 0,000, 477,000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783626;  // std dev = 2,58e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.10159632948783569;  // std dev = 3,01e-07, 531,000 (wgt'ed) examples reached here.  /* #neg=531 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.09269127618926137;  // std dev = 0,000, 502,000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0851847513883968;  // std dev = 1,97e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.08518475138839678;  // std dev = 1,37e-07, 519,000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.07877675473109201;  // std dev = 0,000, 518,000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333704;  // std dev = 1,18e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.07324622576333724;  // std dev = 0,000, 513,000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420271;  // std dev = 7,45e-09, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.06842697784420354;  // std dev = 0,000, 511,000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.06419184008202562;  // std dev = 2,10e-07, 517,000 (wgt'ed) examples reached here.  /* #neg=517 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.466 seconds
Total inference time: 1.176 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 02:41:41
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.176, 'Precision': [1.0, 0.5], 'Learning time': 3.466, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 3,94e-08, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.14185106490048782;  // std dev = 0,000, 527,000 (wgt'ed) examples reached here.  /* #neg=527 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.335 seconds
Total inference time: 0.82 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 02:41:43
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.82, 'Precision': [nan, 0.5], 'Learning time': 1.335, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5176401288372771;  // std dev = 0,474, 511,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048782;  // std dev = 0,000, 510,000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4296842243795184;  // std dev = 0,478, 521,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839227;  // std dev = 0,000, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.36713602420601055;  // std dev = 0,472, 506,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   else return -0.11231637819360585;  // std dev = 0,000, 491,000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2785463136792847;  // std dev = 0,474, 511,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783544;  // std dev = 3,37e-07, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20848442504868456;  // std dev = 0,475, 513,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892614;  // std dev = 0,000, 489,000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1464602344670757;  // std dev = 0,478, 521,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,38e-07, 465,000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.1357341763541355;  // std dev = 10,503, 501,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109201;  // std dev = 0,000, 491,000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.06420205333296926;  // std dev = 0,482, 531,000 (wgt'ed) examples reached here.  /* #neg=194 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333698;  // std dev = 1,37e-07, 487,000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.07209789591141197;  // std dev = 10,732, 512,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420353;  // std dev = 0,000, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.037204636200743026;  // std dev = 0,480, 526,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202537;  // std dev = 2,45e-07, 504,000 (wgt'ed) examples reached here.  /* #neg=504 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.32426
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.936 seconds
Total inference time: 1.095 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.870352
   AUC PR    = 0.095252
   CLL	      = -0.297176
   Precision = 0.095252 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173935


Total scoring time: 2.902 seconds
Parameter learned model CLL: -0.297176


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 510, 0], 'true,true': [0.474, 174, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 482, 0], 'true,true': [0.478, 184, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.472, 169, 337], 'false': [0.0, 491, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.37e-07, 488, 0], 'true,true': [0.474, 174, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 489, 0], 'true,true': [0.475, 176, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.38e-07, 465, 0], 'true,true': [0.478, 184, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 491, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.503, 164, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.37e-07, 487, 0], 'true,true': [0.482, 194, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 488, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.732, 175, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.45e-07, 504, 0], 'true,true': [0.48, 189, 337], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22456255912010403, -6.617799989922502e-17], 'true': [0.22456255912010403, nan]}, {'': [0.22844006616539592, -1.216177919091458e-16], 'true': [0.22844006616539592, nan]}, {'': [0.2224413754315712, -1.0853504110388495e-17]}, {'': [0.22456255912009493, 2.3296483139675417e-16], 'true': [0.22456255912009493, nan]}, {'': [0.2253760891290347, -2.179578944049387e-17], 'true': [0.2253760891290347, nan]}, {'': [0.2284400661653917, 4.1066314029145573e-17], 'true': [0.2284400661653917, nan]}, {'': [0.2201903578073399, -3.3464971007031196e-17], 'true': [0.2201903578073399, nan], 'true,true': [0.2201903578073399, nan]}, {'': [0.231868946414572, 3.8299274771463306e-17], 'true': [0.231868946414572, nan]}, {'': [0.22497177124023515, -1.2103251006159493e-16], 'true': [0.22497177124023515, nan], 'true,true': [0.22497177124023515, nan]}, {'': [0.23020789660108062, 1.189524669241239e-16], 'true': [0.23020789660108062, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048827;  // std dev = 0,000, 187,000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.14185106490048816;  // std dev = 0,000, 546,000 (wgt'ed) examples reached here.  /* #neg=546 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839147;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.12544463852839227;  // std dev = 0,000, 479,000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360639;  // std dev = 6,32e-08, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.11231637819360575;  // std dev = 0,000, 521,000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783648;  // std dev = 0,000, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.10159632948783555;  // std dev = 3,11e-07, 465,000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926076;  // std dev = 7,15e-08, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.09269127618926137;  // std dev = 0,000, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6,83e-08, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.08518475138839678;  // std dev = 1,40e-07, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0787767547310915;  // std dev = 8,16e-08, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.07877675473109198;  // std dev = 0,000, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333686;  // std dev = 6,66e-08, 160,000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.07324622576333693;  // std dev = 1,49e-07, 496,000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6,83e-08, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.0684269778442035;  // std dev = 0,000, 472,000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 165,000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.06419184008202537;  // std dev = 2,44e-07, 497,000 (wgt'ed) examples reached here.  /* #neg=497 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.422 seconds
Total inference time: 1.314 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064062
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 3.183 seconds
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.443 seconds
Total inference time: 1.314 seconds
AUC ROC: 1.0
Total revision time: 12.443
Best scored revision CLL: -0.064062


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:41:59
{'parameter_1.0': {'F1': 0.140406, 'Inference time': 1.095, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 2.936, 'CLL': -0.32426}, 'F1': 1.0, 'Inference time': 1.314, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 12.443, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048766;  // std dev = 5,77e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.1418510649004883;  // std dev = 0,000, 584,000 (wgt'ed) examples reached here.  /* #neg=584 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.12544463852839235;  // std dev = 0,000, 655,000 (wgt'ed) examples reached here.  /* #neg=655 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360633;  // std dev = 2,79e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.11231637819360606;  // std dev = 0,000, 631,000 (wgt'ed) examples reached here.  /* #neg=631 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783621;  // std dev = 3,49e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.10159632948783544;  // std dev = 3,75e-07, 626,000 (wgt'ed) examples reached here.  /* #neg=626 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926183;  // std dev = 0,000, 597,000 (wgt'ed) examples reached here.  /* #neg=597 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( actor(A) )
%   | | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.08518475138839678;  // std dev = 1,46e-07, 584,000 (wgt'ed) examples reached here.  /* #neg=584 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109177;  // std dev = 1,05e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.07877675473109261;  // std dev = 0,000, 650,000 (wgt'ed) examples reached here.  /* #neg=650 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07324622576333677;  // std dev = 1,97e-07, 619,000 (wgt'ed) examples reached here.  /* #neg=619 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420271;  // std dev = 1,05e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.06842697784420362;  // std dev = 0,000, 586,000 (wgt'ed) examples reached here.  /* #neg=586 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.06419184008202536;  // std dev = 2,49e-07, 643,000 (wgt'ed) examples reached here.  /* #neg=643 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.065 seconds
Total inference time: 1.159 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 02:42:05
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.159, 'Precision': [1.0, 0.5], 'Learning time': 5.065, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048768;  // std dev = 4,59e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.14185106490048888;  // std dev = 0,000, 672,000 (wgt'ed) examples reached here.  /* #neg=672 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.412 seconds
Total inference time: 0.75 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 02:42:08
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.75, 'Precision': [nan, 0.5], 'Learning time': 1.412, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.49022440679762647;  // std dev = 0,482, 106,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.40215450115977097;  // std dev = 0,487, 109,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283914;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3002324162889469;  // std dev = 0,492, 114,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=67 */
%   else return -0.11231637819360618;  // std dev = 8,82e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.31071123047754223;  // std dev = 0,473, 101,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783626;  // std dev = 4,71e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2241155273889655;  // std dev = 0,477, 103,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926101;  // std dev = 3,33e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2160491908411005;  // std dev = 0,459, 96,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0851847513883968;  // std dev = 5,37e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.14786307056733888;  // std dev = 4,604, 98,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109161;  // std dev = 5,16e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.05384153710266131;  // std dev = 0,484, 107,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.023639770134600707;  // std dev = 5,118, 110,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 4,47e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06568611117054918;  // std dev = 0,475, 102,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.303511
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 1.356 seconds
Total inference time: 1.181 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.868475
   AUC PR    = 0.094767
   CLL	      = -0.297155
   Precision = 0.094767 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173127


Total scoring time: 1.356 seconds
Parameter learned model CLL: -0.297155


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.16e-08, 111, 0], 'true,true': [0.482, 39, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 88, 0], 'true,true': [0.487, 42, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.492, 47, 67], 'false': [8.82e-08, 111, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.71e-08, 95, 0], 'true,true': [0.473, 34, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [3.33e-08, 92, 0], 'true,true': [0.477, 36, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.37e-08, 93, 0], 'true,true': [0.459, 29, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [5.16e-08, 90, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.604, 31, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 95, 0], 'true,true': [0.484, 40, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [4.47e-08, 93, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [5.118, 43, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 90, 0], 'true,true': [0.475, 35, 67], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2325560697757202, 6.00120553851436e-17], 'true': [0.2325560697757202, nan]}, {'': [0.2368487501052108, -1.766263902812749e-17], 'true': [0.2368487501052108, nan]}, {'': [0.24230532471529762, 7.001406461600086e-17]}, {'': [0.2233114400548962, 2.337311630789803e-17], 'true': [0.2233114400548962, nan]}, {'': [0.2273541332830612, 1.206764157201257e-17], 'true': [0.2273541332830612, nan]}, {'': [0.21082899305555594, 3.1038493161563513e-17], 'true': [0.21082899305555594, nan]}, {'': [0.21626405664306522, 2.960594732333751e-17], 'true': [0.21626405664306522, nan], 'true,true': [0.21626405664306522, nan]}, {'': [0.23408157917722128, -8.18059070776431e-18], 'true': [0.23408157917722128, nan]}, {'': [0.2380991735537186, 2.1488187573390126e-17], 'true': [0.2380991735537186, nan], 'true,true': [0.2380991735537186, nan]}, {'': [0.225394079200307, -1.295260195396016e-17], 'true': [0.225394079200307, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.14185106490048774;  // std dev = 1,49e-08, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.1418510649004877;  // std dev = 5,58e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.12544463852839108;  // std dev = 7,60e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.11231637819360626;  // std dev = 6,32e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.10159632948783627;  // std dev = 4,21e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.092691276189261;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.09269127618926107;  // std dev = 1,83e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08757403680186093;  // std dev = 0,064, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.08518475138839682;  // std dev = 5,77e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07959364595470776;  // std dev = 0,035, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.07877675473109162;  // std dev = 4,94e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07302888415733597;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.07324622576333707;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07225489832279314;  // std dev = 0,094, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.06842697784420264;  // std dev = 5,27e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06378356356088781;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.06419184008202626;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063728
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.78 seconds
Total inference time: 1.123 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06464
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.361 seconds
Refined model CLL: -0.06464


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063728
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.853 seconds
Total inference time: 1.123 seconds
AUC ROC: 1.0
Total revision time: 5.853
Best scored revision CLL: -0.06464


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:42:17
{'parameter_0.2': {'F1': 0.137825, 'Inference time': 1.181, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 1.356, 'CLL': -0.303511}, 'F1': 1.0, 'Inference time': 1.123, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.853, 'CLL': -0.063728}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 7,30e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.12544463852839138;  // std dev = 0,000, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.11356508539795;  // std dev = 0,143, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.10360011021170239;  // std dev = 0,187, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.09415759811804107;  // std dev = 0,175, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.0848177415918789;  // std dev = 6,23e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07846151869635008;  // std dev = 4,83e-08, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07297269045661307;  // std dev = 3,33e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.06984386703313812;  // std dev = 0,137, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06419184008202619;  // std dev = 6,97e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.06451556138207332;  // std dev = 0,092, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063547
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.406 seconds
Total inference time: 1.128 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 02:42:20
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.128, 'Precision': [1.0, 0.5], 'Learning time': 2.406, 'AUC PR': 1.0, 'CLL': -0.063547, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.14185106490048777;  // std dev = 3,65e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.817 seconds
Total inference time: 0.768 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 02:42:22
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.768, 'Precision': [nan, 0.5], 'Learning time': 0.817, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5150116801975484;  // std dev = 0,475, 204,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004884;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4812143690373674;  // std dev = 0,459, 192,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839163;  // std dev = 0,000, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.34443972304745635;  // std dev = 0,476, 205,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=134 */
%   else return -0.11231637819360668;  // std dev = 0,000, 214,000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3071567427041595;  // std dev = 0,461, 193,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878365;  // std dev = 0,000, 184,000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.19806964379316988;  // std dev = 0,474, 203,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926055;  // std dev = 9,42e-08, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1551956401524883;  // std dev = 0,471, 201,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 8,02e-08, 211,000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.10355530563092602;  // std dev = 6,812, 205,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109147;  // std dev = 7,45e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08128557700816706;  // std dev = 0,475, 204,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333666;  // std dev = 1,17e-07, 198,000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.10996092861251104;  // std dev = 6,284, 190,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 8,30e-08, 220,000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.025850105935902562;  // std dev = 0,478, 207,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 199,000 (wgt'ed) examples reached here.  /* #neg=199 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.317126
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 1.727 seconds
Total inference time: 1.275 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.869092
   AUC PR    = 0.09517
   CLL	      = -0.308933
   Precision = 0.09517 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.1738


Total scoring time: 2.159 seconds
Parameter learned model CLL: -0.308933


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 204, 0], 'true,true': [0.475, 70, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 196, 0], 'true,true': [0.459, 58, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.476, 71, 134], 'false': [0.0, 214, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 184, 0], 'true,true': [0.461, 59, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.42e-08, 204, 0], 'true,true': [0.474, 69, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.02e-08, 211, 0], 'true,true': [0.471, 67, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [7.45e-08, 193, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.812, 71, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.17e-07, 198, 0], 'true,true': [0.475, 70, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [8.3e-08, 220, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.284, 56, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 199, 0], 'true,true': [0.478, 73, 134], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22539407920031201, -2.394598680564063e-16], 'true': [0.22539407920031201, nan]}, {'': [0.21082899305555347, -4.7580986769649563e-17], 'true': [0.21082899305555347, nan]}, {'': [0.2263890541344466, -6.018031348435427e-17]}, {'': [0.21224730865258304, -8.930054763289303e-17], 'true': [0.21224730865258304, nan]}, {'': [0.2243684631997864, 4.353815782843751e-17], 'true': [0.2243684631997864, nan]}, {'': [0.22222222222222252, 3.051797887595217e-17], 'true': [0.22222222222222252, nan]}, {'': [0.2263890541344443, 2.8762254523967783e-17], 'true': [0.2263890541344443, nan], 'true,true': [0.2263890541344443, nan]}, {'': [0.22539407920030732, 6.95291187138987e-17], 'true': [0.22539407920030732, nan]}, {'': [0.20786703601107992, 3.128810342125441e-17], 'true': [0.20786703601107992, nan], 'true,true': [0.20786703601107992, nan]}, {'': [0.22829004177460457, -1.6737030521987284e-18], 'true': [0.22829004177460457, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048768;  // std dev = 6,32e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.14185106490048843;  // std dev = 0,000, 205,000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.1254446385283917;  // std dev = 0,000, 205,000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360629;  // std dev = 4,34e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.1123163781936065;  // std dev = 0,000, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1015963294878362;  // std dev = 4,71e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.10159632948783652;  // std dev = 0,000, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.09269127618926053;  // std dev = 1,00e-07, 223,000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.08518475138839678;  // std dev = 6,83e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109173;  // std dev = 2,58e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.07877675473109147;  // std dev = 7,45e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.07324622576333667;  // std dev = 1,13e-07, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420268;  // std dev = 2,36e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.06842697784420262;  // std dev = 7,88e-08, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.06419184008202626;  // std dev = 0,000, 211,000 (wgt'ed) examples reached here.  /* #neg=211 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.389 seconds
Total inference time: 1.168 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064077
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.031 seconds
Refined model CLL: -0.064077


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.306000000000001 seconds
Total inference time: 1.168 seconds
AUC ROC: 1.0
Total revision time: 8.306000000000001
Best scored revision CLL: -0.064077


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:42:34
{'F1': 1.0, 'Inference time': 1.168, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.137825, 'Inference time': 1.275, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 1.727, 'CLL': -0.317126}, 'Recall': 1.0, 'Learning time': 8.306000000000001, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.14185106490048843;  // std dev = 0,000, 219,000 (wgt'ed) examples reached here.  /* #neg=219 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.12544463852839183;  // std dev = 0,000, 258,000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.11231637819360667;  // std dev = 0,000, 217,000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.10159632948783649;  // std dev = 0,000, 246,000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.09269127618926057;  // std dev = 6,32e-08, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839682;  // std dev = 1,75e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 250,000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.07877675473109144;  // std dev = 6,14e-08, 253,000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.0732462257633367;  // std dev = 1,21e-07, 242,000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.06842697784420261;  // std dev = 6,32e-08, 236,000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202622;  // std dev = 3,73e-09, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.06419184008202626;  // std dev = 0,000, 266,000 (wgt'ed) examples reached here.  /* #neg=266 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.627 seconds
Total inference time: 1.184 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 02:42:38
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.184, 'Precision': [1.0, 0.5], 'Learning time': 2.627, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.14185106490048835;  // std dev = 0,000, 266,000 (wgt'ed) examples reached here.  /* #neg=266 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.007 seconds
Total inference time: 0.811 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 02:42:40
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.811, 'Precision': [nan, 0.5], 'Learning time': 1.007, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5139930909436643;  // std dev = 0,475, 308,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 1,33e-07, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.40692734039815126;  // std dev = 0,485, 324,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.125444638528392;  // std dev = 0,000, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.33201844570659317;  // std dev = 0,484, 323,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=202 */
%   else return -0.11231637819360679;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.27269398699977926;  // std dev = 0,480, 316,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878365;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2505971471593961;  // std dev = 0,466, 296,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926046;  // std dev = 1,58e-07, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1533781148511079;  // std dev = 0,478, 312,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.09110004070717655;  // std dev = 8,721, 324,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 2,98e-08, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0966587582614462;  // std dev = 0,476, 310,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333698;  // std dev = 9,66e-08, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.04864677463296276;  // std dev = 8,676, 322,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420296;  // std dev = 0,000, 291,000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09425036500835705;  // std dev = 0,465, 295,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202601;  // std dev = 1,02e-07, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.307476
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.028 seconds
Total inference time: 1.247 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.869366
   AUC PR    = 0.09578
   CLL	      = -0.299394
   Precision = 0.09578 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174816


Total scoring time: 2.061 seconds
Parameter learned model CLL: -0.299394


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.33e-07, 310, 0], 'true,true': [0.475, 106, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 293, 0], 'true,true': [0.485, 122, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.484, 121, 202], 'false': [0.0, 307, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 326, 0], 'true,true': [0.48, 114, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.58e-07, 282, 0], 'true,true': [0.466, 94, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.05e-07, 302, 0], 'true,true': [0.478, 110, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.98e-08, 306, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.721, 122, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.66e-08, 300, 0], 'true,true': [0.476, 108, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 291, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.676, 120, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.02e-07, 288, 0], 'true,true': [0.465, 93, 202], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22571259908922714, 5.730183352904034e-17], 'true': [0.22571259908922714, nan]}, {'': [0.2347584209724113, -8.184579294164976e-17], 'true': [0.2347584209724113, nan]}, {'': [0.23427810100739233, -5.930833095717449e-17]}, {'': [0.23061208139720907, -2.0433552600463003e-17], 'true': [0.23061208139720907, nan]}, {'': [0.21671840759678615, 8.818792819717556e-17], 'true': [0.21671840759678615, nan]}, {'': [0.22826265614727206, 3.676235180878002e-17], 'true': [0.22826265614727206, nan]}, {'': [0.2347584209724138, 2.9025438552291675e-18], 'true': [0.2347584209724138, nan], 'true,true': [0.2347584209724138, nan]}, {'': [0.2270135275754409, 3.1086244689504386e-17], 'true': [0.2270135275754409, nan]}, {'': [0.23378727672543542, -4.883455228591754e-17], 'true': [0.23378727672543542, nan], 'true,true': [0.23378727672543542, nan]}, {'': [0.21586900316001092, 3.623644594262664e-17], 'true': [0.21586900316001092, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.14185106490048766;  // std dev = 7,30e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.14185106490048804;  // std dev = 0,000, 271,000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else return -0.12544463852839205;  // std dev = 0,000, 323,000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1123163781936062;  // std dev = 9,06e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.11231637819360683;  // std dev = 0,000, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783628;  // std dev = 3,33e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.10159632948783645;  // std dev = 0,000, 331,000 (wgt'ed) examples reached here.  /* #neg=331 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926105;  // std dev = 1,49e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.09269127618926043;  // std dev = 1,49e-07, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08518475138839679;  // std dev = 4,08e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109164;  // std dev = 5,48e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.07877675473109141;  // std dev = 4,21e-08, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.07324622576333696;  // std dev = 1,00e-07, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420267;  // std dev = 4,08e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.06842697784420305;  // std dev = 0,000, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.06419184008202586;  // std dev = 1,36e-07, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.699 seconds
Total inference time: 1.197 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064085
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.757 seconds
Refined model CLL: -0.064085


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.545 seconds
Total inference time: 1.197 seconds
AUC ROC: 1.0
Total revision time: 8.545
Best scored revision CLL: -0.064085


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:42:51
{'F1': 1.0, 'Inference time': 1.197, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.137825, 'Inference time': 1.247, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 2.028, 'CLL': -0.307476}, 'Recall': 1.0, 'Learning time': 8.545, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 2,79e-08, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.14185106490048774;  // std dev = 1,46e-07, 365,000 (wgt'ed) examples reached here.  /* #neg=365 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.12544463852839205;  // std dev = 0,000, 352,000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.11231637819360678;  // std dev = 0,000, 352,000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.10159632948783656;  // std dev = 0,000, 363,000 (wgt'ed) examples reached here.  /* #neg=363 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.092691276189261;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.09269127618926053;  // std dev = 1,81e-07, 380,000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.0851847513883968;  // std dev = 2,17e-08, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 348,000 (wgt'ed) examples reached here.  /* #neg=348 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.07877675473109148;  // std dev = 3,65e-08, 355,000 (wgt'ed) examples reached here.  /* #neg=355 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333704;  // std dev = 9,13e-09, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.07324622576333716;  // std dev = 4,71e-08, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.0684269778442031;  // std dev = 0,000, 344,000 (wgt'ed) examples reached here.  /* #neg=344 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.06419184008202597;  // std dev = 1,22e-07, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.37 seconds
Total inference time: 1.195 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 02:42:56
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.195, 'Precision': [1.0, 0.5], 'Learning time': 3.37, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.14185106490048768;  // std dev = 1,76e-07, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.135 seconds
Total inference time: 0.819 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 02:42:58
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.819, 'Precision': [nan, 0.5], 'Learning time': 1.135, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4971038044581779;  // std dev = 0,480, 421,000 (wgt'ed) examples reached here.  /* #neg=152 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048735;  // std dev = 3,00e-07, 396,000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4538158010223518;  // std dev = 0,471, 403,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839227;  // std dev = 0,000, 415,000 (wgt'ed) examples reached here.  /* #neg=415 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.34700881404893447;  // std dev = 0,478, 416,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=269 */
%   else return -0.11231637819360608;  // std dev = 0,000, 428,000 (wgt'ed) examples reached here.  /* #neg=428 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2871435675231301;  // std dev = 0,472, 405,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783605;  // std dev = 1,88e-07, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2260261127026554;  // std dev = 0,469, 400,000 (wgt'ed) examples reached here.  /* #neg=131 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926074;  // std dev = 1,74e-07, 381,000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14386011892313194;  // std dev = 0,478, 416,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,30e-07, 388,000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.07689841838603238;  // std dev = 10,169, 437,000 (wgt'ed) examples reached here.  /* #neg=168 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 2,16e-07, 379,000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11479411973771261;  // std dev = 0,469, 400,000 (wgt'ed) examples reached here.  /* #neg=131 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0732462257633377;  // std dev = 0,000, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.07675641511377071;  // std dev = 9,527, 406,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420336;  // std dev = 0,000, 404,000 (wgt'ed) examples reached here.  /* #neg=404 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.05989926283700498;  // std dev = 0,472, 405,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202566;  // std dev = 1,81e-07, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.311063
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.175 seconds
Total inference time: 1.239 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.868424
   AUC PR    = 0.095053
   CLL	      = -0.304409
   Precision = 0.095053 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173604


Total scoring time: 2.911 seconds
Parameter learned model CLL: -0.304409


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3e-07, 396, 0], 'true,true': [0.48, 152, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 415, 0], 'true,true': [0.471, 134, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.478, 147, 269], 'false': [0.0, 428, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.88e-07, 383, 0], 'true,true': [0.472, 136, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.74e-07, 381, 0], 'true,true': [0.469, 131, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.3e-07, 388, 0], 'true,true': [0.478, 147, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.16e-07, 379, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.169, 168, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 390, 0], 'true,true': [0.469, 131, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 404, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.527, 137, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.81e-07, 376, 0], 'true,true': [0.472, 136, 269], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23069154428151833, 2.2653035451947636e-16], 'true': [0.23069154428151833, nan]}, {'': [0.22194582812528074, -1.284113377879699e-16], 'true': [0.22194582812528074, nan]}, {'': [0.22849828957100768, -1.4526282565188963e-17]}, {'': [0.22303917085810523, 9.276014827155354e-17], 'true': [0.22303917085810523, nan]}, {'': [0.2202437499999995, 7.926001645617915e-17], 'true': [0.2202437499999995, nan]}, {'': [0.22849828957100649, 4.349327312964531e-17], 'true': [0.22849828957100649, nan]}, {'': [0.23664573831354785, 1.230326306972469e-16], 'true': [0.23664573831354785, nan], 'true,true': [0.23664573831354785, nan]}, {'': [0.22024375000000088, -6.832141690000964e-17], 'true': [0.22024375000000088, nan]}, {'': [0.2235737338930809, -1.1596884069104358e-16], 'true': [0.2235737338930809, nan], 'true,true': [0.2235737338930809, nan]}, {'': [0.2230391708581018, 8.680999181909469e-17], 'true': [0.2230391708581018, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.141851064900488;  // std dev = 0,000, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.14185106490048738;  // std dev = 2,86e-07, 387,000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839108;  // std dev = 7,45e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.12544463852839227;  // std dev = 0,000, 418,000 (wgt'ed) examples reached here.  /* #neg=418 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360622;  // std dev = 8,43e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.11231637819360644;  // std dev = 0,000, 357,000 (wgt'ed) examples reached here.  /* #neg=357 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.10159632948783602;  // std dev = 1,92e-07, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926085;  // std dev = 7,45e-08, 147,000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.09269127618926093;  // std dev = 1,38e-07, 406,000 (wgt'ed) examples reached here.  /* #neg=406 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08518475138839682;  // std dev = 6,99e-08, 160,000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.08518475138839678;  // std dev = 1,21e-07, 361,000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109162;  // std dev = 5,96e-08, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.0787767547310916;  // std dev = 8,43e-08, 429,000 (wgt'ed) examples reached here.  /* #neg=429 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333721;  // std dev = 0,000, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.07324622576333721;  // std dev = 2,98e-08, 398,000 (wgt'ed) examples reached here.  /* #neg=398 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420265;  // std dev = 5,48e-08, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.06842697784420329;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.06419184008202553;  // std dev = 2,13e-07, 428,000 (wgt'ed) examples reached here.  /* #neg=428 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.198 seconds
Total inference time: 1.172 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064083
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.745 seconds
Refined model CLL: -0.064083


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.029 seconds
Total inference time: 1.172 seconds
AUC ROC: 1.0
Total revision time: 11.029
Best scored revision CLL: -0.064083


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:43:12
{'F1': 1.0, 'Inference time': 1.172, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.137825, 'Inference time': 1.239, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 2.175, 'CLL': -0.311063}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 11.029, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 3,94e-08, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.14185106490048754;  // std dev = 1,63e-07, 495,000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.12544463852839227;  // std dev = 0,000, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.11231637819360595;  // std dev = 0,000, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.10159632948783591;  // std dev = 2,38e-07, 477,000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926133;  // std dev = 0,000, 473,000 (wgt'ed) examples reached here.  /* #neg=473 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( actor(A) )
%   | | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.09269127618926098;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.09269127618926103;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0851847513883968;  // std dev = 1,29e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.08518475138839678;  // std dev = 1,26e-07, 464,000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.07877675473109183;  // std dev = 0,000, 473,000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333704;  // std dev = 1,18e-08, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.07324622576333721;  // std dev = 0,000, 489,000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0684269778442027;  // std dev = 1,49e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.06842697784420347;  // std dev = 0,000, 472,000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.0641918400820257;  // std dev = 1,86e-07, 460,000 (wgt'ed) examples reached here.  /* #neg=460 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.848 seconds
Total inference time: 1.165 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 02:43:18
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.165, 'Precision': [1.0, 0.5], 'Learning time': 3.848, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 4,47e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.14185106490048752;  // std dev = 1,74e-07, 493,000 (wgt'ed) examples reached here.  /* #neg=493 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.368 seconds
Total inference time: 0.779 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 02:43:20
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.779, 'Precision': [nan, 0.5], 'Learning time': 1.368, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,false,true;haswordvenue(I, G).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, B).;true;false
5;true,true,true;samebib(E, F), title(F, A).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
6;true,true,false;haswordvenue(F, D).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;haswordtitle(B, D).;false;true
6;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(F, D).;false;false
8;true,false,true;haswordvenue(I, G).;false;false
8;true,true;haswordtitle(B, D).;false;true
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5334996365023136;  // std dev = 0,468, 499,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048752;  // std dev = 1,63e-07, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4409273930182643;  // std dev = 0,473, 510,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839233;  // std dev = 0,000, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3707687462388933;  // std dev = 0,468, 499,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=337 */
%   else return -0.11231637819360586;  // std dev = 0,000, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.272565186015987;  // std dev = 0,473, 510,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783544;  // std dev = 3,37e-07, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.19980301826721;  // std dev = 0,476, 515,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926137;  // std dev = 0,000, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14120298760040165;  // std dev = 0,478, 522,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,48e-07, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.12508570418444792;  // std dev = 10,630, 507,000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109197;  // std dev = 1,50e-07, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07883512261549973;  // std dev = 0,477, 519,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333706;  // std dev = 1,10e-07, 471,000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.048566658523882034;  // std dev = 11,041, 528,000 (wgt'ed) examples reached here.  /* #neg=191 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0684269778442035;  // std dev = 0,000, 474,000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0491905156202389;  // std dev = 0,477, 518,000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202539;  // std dev = 2,45e-07, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.307504
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.795 seconds
Total inference time: 1.255 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.868927
   AUC PR    = 0.095576
   CLL	      = -0.300182
   Precision = 0.095576 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174476


Total scoring time: 2.576 seconds
Parameter learned model CLL: -0.300182


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.63e-07, 481, 0], 'true,true': [0.468, 162, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 481, 0], 'true,true': [0.473, 173, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)'}, {'true': [0.468, 162, 337], 'false': [0.0, 484, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.37e-07, 488, 0], 'true,true': [0.473, 173, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 481, 0], 'true,true': [0.476, 178, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.48e-07, 482, 0], 'true,true': [0.478, 185, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [1.5e-07, 483, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.63, 170, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.1e-07, 471, 0], 'true,true': [0.477, 182, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 474, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [11.041, 191, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.45e-07, 492, 0], 'true,true': [0.477, 181, 337], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21925213151754677, 5.5395743432440246e-17], 'true': [0.21925213151754677, nan]}, {'': [0.22414840445983034, -1.3664283380001927e-16], 'true': [0.22414840445983034, nan]}, {'': [0.21925213151754383, -1.101047627727428e-17]}, {'': [0.2241484044598232, 2.3296483139675417e-16], 'true': [0.2241484044598232, nan]}, {'': [0.22617023282119195, -1.6618723029732074e-17], 'true': [0.22617023282119195, nan]}, {'': [0.22880242509651658, 4.514599851172836e-17], 'true': [0.22880242509651658, nan]}, {'': [0.22287579410929645, 4.689140725124885e-17], 'true': [0.22287579410929645, nan], 'true,true': [0.22287579410929645, nan]}, {'': [0.2277018573587109, 2.5457343239812507e-17], 'true': [0.2277018573587109, nan]}, {'': [0.23088484274564025, -1.2179661873524923e-16], 'true': [0.23088484274564025, nan], 'true,true': [0.23088484274564025, nan]}, {'': [0.22732591941086217, 1.2185374660520012e-16], 'true': [0.22732591941086217, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048827;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.14185106490048782;  // std dev = 0,000, 510,000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839147;  // std dev = 0,000, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.1254446385283923;  // std dev = 0,000, 500,000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360653;  // std dev = 0,000, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.11231637819360572;  // std dev = 0,000, 534,000 (wgt'ed) examples reached here.  /* #neg=534 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783649;  // std dev = 0,000, 178,000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.10159632948783542;  // std dev = 3,42e-07, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926068;  // std dev = 8,02e-08, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
%   else return -0.09269127618926139;  // std dev = 0,000, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6,66e-08, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.08518475138839678;  // std dev = 1,41e-07, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109153;  // std dev = 7,88e-08, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.07877675473109216;  // std dev = 0,000, 517,000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333688;  // std dev = 6,75e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.07324622576333703;  // std dev = 1,19e-07, 476,000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6,32e-08, 165,000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.0684269778442035;  // std dev = 0,000, 472,000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.0641918400820254;  // std dev = 2,43e-07, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.692 seconds
Total inference time: 1.15 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064087
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.439 seconds
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.502 seconds
Total inference time: 1.15 seconds
AUC ROC: 1.0
Total revision time: 11.502
Best scored revision CLL: -0.064087


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:43:35
{'parameter_1.0': {'F1': 0.137825, 'Inference time': 1.255, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 2.795, 'CLL': -0.307504}, 'F1': 1.0, 'Inference time': 1.15, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 11.502, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048766;  // std dev = 5,96e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.14185106490048846;  // std dev = 0,000, 606,000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.12544463852839233;  // std dev = 0,000, 614,000 (wgt'ed) examples reached here.  /* #neg=614 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360629;  // std dev = 3,94e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.11231637819360595;  // std dev = 0,000, 570,000 (wgt'ed) examples reached here.  /* #neg=570 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783623;  // std dev = 3,33e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.1015963294878354;  // std dev = 3,89e-07, 651,000 (wgt'ed) examples reached here.  /* #neg=651 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.0926912761892619;  // std dev = 0,000, 651,000 (wgt'ed) examples reached here.  /* #neg=651 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.08518475138839678;  // std dev = 1,49e-07, 606,000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.07877675473109264;  // std dev = 0,000, 658,000 (wgt'ed) examples reached here.  /* #neg=658 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.07324622576333667;  // std dev = 2,25e-07, 662,000 (wgt'ed) examples reached here.  /* #neg=662 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0684269778442027;  // std dev = 1,67e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.06842697784420368;  // std dev = 0,000, 649,000 (wgt'ed) examples reached here.  /* #neg=649 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.06419184008202544;  // std dev = 2,46e-07, 606,000 (wgt'ed) examples reached here.  /* #neg=606 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.095 seconds
Total inference time: 1.164 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 02:43:40
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.164, 'Precision': [1.0, 0.5], 'Learning time': 4.095, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048768;  // std dev = 5,37e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.14185106490048877;  // std dev = 0,000, 657,000 (wgt'ed) examples reached here.  /* #neg=657 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.379 seconds
Total inference time: 0.755 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 02:43:42
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.755, 'Precision': [nan, 0.5], 'Learning time': 1.379, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


