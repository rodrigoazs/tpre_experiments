Starting experiment #3 for 54_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 698
Source train neg examples: 27996

WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.5982100971790191;  // std dev = 0,439, 327,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=242 */
%   | else if ( haswordtitle(B, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.08302753548872319;  // std dev = 3,757, 255,000 (wgt'ed) examples reached here.  /* #neg=240 #pos=15 */
%   | | | else return 0.3343394112899885;  // std dev = 2,289, 21,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | | else if ( haswordtitle(A, J), haswordauthor(K, J) )
%   | | | then return -0.07758371271539831;  // std dev = 4,837, 389,000 (wgt'ed) examples reached here.  /* #neg=364 #pos=25 */
%   | | | else return 0.2925034208763128;  // std dev = 14,985, 914,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=397 */
%   else return -0.14185106490048785;  // std dev = 0,000, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then if ( author(F, D), title(F, B) )
%   | | | then return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4355097108751811;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( author(G, D), title(G, B) )
%   | | | then return -0.0047420598513419855;  // std dev = 1,106, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.4768076459784294;  // std dev = 8,372, 339,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=240 */
%   | else if ( haswordtitle(A, H), haswordauthor(I, H) )
%   | | then if ( haswordvenue(J, H) )
%   | | | then return -0.09308948061630047;  // std dev = 3,798, 375,000 (wgt'ed) examples reached here.  /* #neg=360 #pos=15 */
%   | | | else return 0.20068751172862304;  // std dev = 2,582, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | else if ( haswordtitle(B, K), haswordauthor(L, K) )
%   | | | then return -0.042660928233563905;  // std dev = 4,666, 271,000 (wgt'ed) examples reached here.  /* #neg=246 #pos=25 */
%   | | | else return 0.26029168338125175;  // std dev = 14,889, 899,000 (wgt'ed) examples reached here.  /* #neg=502 #pos=397 */
%   else return -0.12544463852839116;  // std dev = 7,30e-08, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.592047120143211;  // std dev = 0,206, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12492531866317329;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.39836203109487417;  // std dev = 0,447, 334,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.07994977271125399;  // std dev = 3,791, 353,000 (wgt'ed) examples reached here.  /* #neg=338 #pos=15 */
%   | | | else return 0.08662416114017482;  // std dev = 2,749, 41,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.041860357402937046;  // std dev = 4,679, 284,000 (wgt'ed) examples reached here.  /* #neg=259 #pos=25 */
%   | | | else return 0.20646931990556475;  // std dev = 15,048, 924,000 (wgt'ed) examples reached here.  /* #neg=527 #pos=397 */
%   else return -0.11231637819360615;  // std dev = 1,04e-07, 142,000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.2874707093125287;  // std dev = 0,446, 358,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.07561930388200432;  // std dev = 3,800, 386,000 (wgt'ed) examples reached here.  /* #neg=371 #pos=15 */
%   | | | else return 0.0872214285208573;  // std dev = 2,726, 39,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.036787566855175216;  // std dev = 4,681, 282,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=25 */
%   | | | else return 0.17334639677700148;  // std dev = 14,985, 914,000 (wgt'ed) examples reached here.  /* #neg=517 #pos=397 */
%   else return -0.10159632948783641;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.20483476167036452;  // std dev = 0,447, 367,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.06930363408963533;  // std dev = 3,802, 399,000 (wgt'ed) examples reached here.  /* #neg=384 #pos=15 */
%   | | | else return 0.12113286741259834;  // std dev = 2,640, 33,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.02144216860810271;  // std dev = 4,656, 248,000 (wgt'ed) examples reached here.  /* #neg=223 #pos=25 */
%   | | | else return 0.13432132681870815;  // std dev = 15,041, 923,000 (wgt'ed) examples reached here.  /* #neg=526 #pos=397 */
%   else return -0.09269127618926082;  // std dev = 7,45e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.12358498300656827;  // std dev = 0,456, 387,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.05679534608229873;  // std dev = 3,789, 345,000 (wgt'ed) examples reached here.  /* #neg=330 #pos=15 */
%   | | | else return 0.11209852927428494;  // std dev = 2,621, 32,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.019942275881494588;  // std dev = 4,659, 250,000 (wgt'ed) examples reached here.  /* #neg=225 #pos=25 */
%   | | | else return 0.09826833261686864;  // std dev = 15,138, 939,000 (wgt'ed) examples reached here.  /* #neg=542 #pos=397 */
%   else return -0.0851847513883968;  // std dev = 6,23e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.3080662508667149;  // std dev = 0,204, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.18913692377416644;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.1869939494405363;  // std dev = 0,428, 319,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.05742201228069216;  // std dev = 3,802, 391,000 (wgt'ed) examples reached here.  /* #neg=376 #pos=15 */
%   | | | else return 0.13798759357574722;  // std dev = 2,535, 28,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.01668808196397053;  // std dev = 4,659, 246,000 (wgt'ed) examples reached here.  /* #neg=221 #pos=25 */
%   | | | else return 0.08369611730673371;  // std dev = 15,041, 923,000 (wgt'ed) examples reached here.  /* #neg=526 #pos=397 */
%   else return -0.07877675473109151;  // std dev = 8,16e-08, 148,000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(B, D) )
%   | | then if ( author(F, E), title(F, B) )
%   | | | then return 0.013695735754686062;  // std dev = 0,946, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.09099507458837408;  // std dev = 8,407, 342,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=242 */
%   | | else if ( author(G, E), title(G, B) )
%   | | | then return -0.013389111461238624;  // std dev = 2,157, 63,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=5 */
%   | | | else return -0.05642191597649118;  // std dev = 4,176, 400,000 (wgt'ed) examples reached here.  /* #neg=380 #pos=20 */
%   | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | then if ( haswordvenue(J, H) )
%   | | | then return -0.05998762036558051;  // std dev = 3,769, 284,000 (wgt'ed) examples reached here.  /* #neg=269 #pos=15 */
%   | | | else return 0.364535621237244;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | else return 0.0774719080154364;  // std dev = 0,497, 896,000 (wgt'ed) examples reached here.  /* #neg=499 #pos=397 */
%   else return -0.07324622576333725;  // std dev = 0,000, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.041730779672031516;  // std dev = 0,457, 374,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=251 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.04746963417752302;  // std dev = 3,796, 383,000 (wgt'ed) examples reached here.  /* #neg=368 #pos=15 */
%   | | | else return 0.06048942690917869;  // std dev = 2,657, 34,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | else return 0.03801182030241758;  // std dev = 0,458, 1.167,000 (wgt'ed) examples reached here.  /* #neg=745 #pos=422 */
%   else return -0.06842697784420264;  // std dev = 5,96e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.05882905651819306;  // std dev = 0,441, 364,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.04761861139178986;  // std dev = 3,804, 423,000 (wgt'ed) examples reached here.  /* #neg=408 #pos=15 */
%   | | | else return 0.1260940044244915;  // std dev = 2,508, 27,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.02135438450372104;  // std dev = 4,566, 261,000 (wgt'ed) examples reached here.  /* #neg=236 #pos=25 */
%   | | | else return 0.03455602035276587;  // std dev = 15,078, 929,000 (wgt'ed) examples reached here.  /* #neg=532 #pos=397 */
%   else return -0.06419184008202626;  // std dev = 0,000, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4954038370602975;  // std dev = 0,481, 102,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.44317315006358926;  // std dev = 4,725, 99,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=65 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283914;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.35295787675119067;  // std dev = 0,477, 100,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360621;  // std dev = 6,99e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3086571239944544;  // std dev = 0,465, 95,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783633;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.21305178280094902;  // std dev = 0,473, 98,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926098;  // std dev = 4,21e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14668910572577526;  // std dev = 0,477, 100,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14431231576463519;  // std dev = 0,465, 95,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109161;  // std dev = 5,58e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.08778534621603193;  // std dev = 4,678, 98,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=65 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return -0.011185828772867298;  // std dev = 0,493, 111,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420267;  // std dev = 3,94e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1281454017687878;  // std dev = 0,448, 90,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.326019
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.387 seconds
Total inference time: 1.375 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.870252
   AUC PR    = 0.102848
   CLL	      = -0.305311
   Precision = 0.102848 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.186514


Total scoring time: 1.252 seconds
Parameter learned model CLL: -0.305311


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.69e-08, 95, 0], 'true,true': [0.481, 37, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 88, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.725, 34, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.99e-08, 86, 0], 'true,true': [0.477, 35, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 111, 0], 'true,true': [0.465, 30, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.21e-08, 96, 0], 'true,true': [0.473, 33, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.58e-08, 98, 0], 'true,true': [0.477, 35, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.58e-08, 95, 0], 'true,true': [0.465, 30, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [4.678, 33, 65], 'false': [0.0, 102, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.94e-08, 84, 0], 'true,true': [0.493, 46, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 92, 0], 'true,true': [0.448, 25, 65], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23116109188773482, 7.946859544685331e-17], 'true': [0.23116109188773482, nan]}, {'': [0.22548719518416568, -1.766263902812749e-17], 'true': [0.22548719518416568, nan], 'true,true': [0.22548719518416568, nan]}, {'': [0.22749999999999898, 5.680210823663592e-17], 'true': [0.22749999999999898, nan]}, {'': [0.2160664819944603, -8.001607384685813e-18], 'true': [0.2160664819944603, nan]}, {'': [0.22334443981674257, 1.850371707708594e-17], 'true': [0.22334443981674257, nan]}, {'': [0.22750000000000045, 3.172065784643304e-17], 'true': [0.22750000000000045, nan]}, {'': [0.21606648199445988, 3.272236283105724e-17], 'true': [0.21606648199445988, nan]}, {'': [0.2233444398167434, -4.353815782843751e-18], 'true': [0.2233444398167434, nan], 'true,true': [0.2233444398167434, nan], 'true,true,true': [0.2233444398167434, nan]}, {'': [0.24267510753997215, 1.850371707708594e-17], 'true': [0.24267510753997215, nan]}, {'': [0.20061728395061718, -1.3274405729213829e-17], 'true': [0.20061728395061718, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 3,80e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.14185106490048763;  // std dev = 8,94e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109542;  // std dev = 1,19e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.13164791649881757;  // std dev = 0,152, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.12544463852839144;  // std dev = 0,000, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.11556530344486375;  // std dev = 0,141, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.1123163781936062;  // std dev = 7,88e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.11508163836662348;  // std dev = 0,251, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.10159632948783626;  // std dev = 4,59e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09078017901548255;  // std dev = 1,97e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return 0.32071184716014983;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.09269127618926092;  // std dev = 5,77e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.09535108162031297;  // std dev = 0,258, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.08518475138839682;  // std dev = 5,37e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(B) )
%   | | then return -0.07654260263538058;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.2537359831302106;  // std dev = 5,27e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109161;  // std dev = 5,27e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(B) )
%   | | then return -0.07130461176463748;  // std dev = 9,13e-09, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.20874264474487048;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333707;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936707;  // std dev = 4,94e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(A) )
%   | | then return -0.06672473920239218;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.09413146256367048;  // std dev = 0,047, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06842697784420265;  // std dev = 4,21e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.062466825844366754;  // std dev = 0,003, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.06419184008202626;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063124
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.843 seconds
Total inference time: 1.709 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065493
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.461 seconds
Refined model CLL: -0.065493


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063124
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.9430000000000005 seconds
Total inference time: 1.709 seconds
AUC ROC: 1.0
Total revision time: 5.9430000000000005
Best scored revision CLL: -0.065493


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 09:02:42
{'parameter_0.2': {'F1': 0.106262, 'Inference time': 1.375, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 1.387, 'CLL': -0.326019}, 'F1': 1.0, 'Inference time': 1.709, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.9430000000000005, 'CLL': -0.063124}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.14185106490048788;  // std dev = 0,000, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109542;  // std dev = 1,19e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.12544463852839113;  // std dev = 7,74e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.11231637819360621;  // std dev = 7,60e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.10159632948783634;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926082;  // std dev = 7,60e-08, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( actor(A) )
%   | | then return 0.32071184716014983;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839683;  // std dev = 5,67e-08, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.0787767547310917;  // std dev = 3,80e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.0732462257633371;  // std dev = 0,000, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936707;  // std dev = 4,94e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.06842697784420265;  // std dev = 4,94e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06419184008202626;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.102 seconds
Total inference time: 1.449 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 09:02:46
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.449, 'Precision': [1.0, 0.5], 'Learning time': 2.102, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.14185106490048766;  // std dev = 7,30e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.765 seconds
Total inference time: 0.887 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 09:02:48
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.887, 'Precision': [nan, 0.5], 'Learning time': 0.765, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5763809792984045;  // std dev = 0,450, 181,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048846;  // std dev = 0,000, 211,000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.4497831360288471;  // std dev = 6,479, 192,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=130 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283917;  // std dev = 0,000, 205,000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3614334212145472;  // std dev = 0,468, 192,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360674;  // std dev = 0,000, 224,000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.25822946093664273;  // std dev = 0,475, 198,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878365;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.20173239223106057;  // std dev = 0,473, 196,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926051;  // std dev = 6,14e-08, 207,000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.13487856235279838;  // std dev = 0,478, 201,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,30e-08, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1351448686184799;  // std dev = 0,466, 191,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109144;  // std dev = 7,60e-08, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.1239676483634067;  // std dev = 6,217, 185,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=130 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333673;  // std dev = 9,94e-08, 174,000 (wgt'ed) examples reached here.  /* #neg=174 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09407428829572881;  // std dev = 0,457, 185,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420261;  // std dev = 6,83e-08, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.03930905368583077;  // std dev = 0,470, 194,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.337291
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.71 seconds
Total inference time: 1.363 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.870396
   AUC PR    = 0.10293
   CLL	      = -0.314848
   Precision = 0.10293 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.186648


Total scoring time: 2.302 seconds
Parameter learned model CLL: -0.314848


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 211, 0], 'true,true': [0.45, 51, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 205, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.479, 62, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 224, 0], 'true,true': [0.468, 62, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 188, 0], 'true,true': [0.475, 68, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [6.14e-08, 207, 0], 'true,true': [0.473, 66, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.3e-08, 189, 0], 'true,true': [0.478, 71, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.6e-08, 204, 0], 'true,true': [0.466, 61, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [6.217, 55, 130], 'false': [9.94e-08, 174, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [6.83e-08, 209, 0], 'true,true': [0.457, 55, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 193, 0], 'true,true': [0.47, 64, 130], 'true,false': [0.0, 0, 0]}]]
[{'': [0.20237477488477595, -2.3572507821425126e-16], 'true': [0.20237477488477595, nan]}, {'': [0.2186414930555569, -5.415722071342227e-17], 'true': [0.2186414930555569, nan], 'true,true': [0.2186414930555569, nan]}, {'': [0.21864149305555566, -7.137148015447435e-17], 'true': [0.21864149305555566, nan]}, {'': [0.22548719518416482, -9.448706592554524e-17], 'true': [0.22548719518416482, nan]}, {'': [0.22334443981674224, 1.8235547264374553e-17], 'true': [0.22334443981674224, nan]}, {'': [0.2284596915917907, 2.819614030794048e-17], 'true': [0.2284596915917907, nan]}, {'': [0.21737342726350664, 2.829980258848438e-17], 'true': [0.21737342726350664, nan]}, {'': [0.20891161431701985, 5.67872696503672e-17], 'true': [0.20891161431701985, nan], 'true,true': [0.20891161431701985, nan], 'true,true,true': [0.20891161431701985, nan]}, {'': [0.20891161431701935, 2.2310701930266303e-17], 'true': [0.20891161431701935, nan]}, {'': [0.22106493782548614, -3.4514705428761343e-18], 'true': [0.22106493782548614, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.14185106490048768;  // std dev = 5,96e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.1418510649004883;  // std dev = 0,000, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109556;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.1254446385283917;  // std dev = 0,000, 208,000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11231637819360635;  // std dev = 2,79e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.11231637819360658;  // std dev = 0,000, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830914;  // std dev = 3,86e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.10159632948783623;  // std dev = 3,65e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.10159632948783653;  // std dev = 0,000, 208,000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601497;  // std dev = 2,53e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.09269127618926104;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.09269127618926061;  // std dev = 8,43e-08, 178,000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694897;  // std dev = 5,96e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.08518475138839679;  // std dev = 1,05e-08, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 187,000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325353;  // std dev = 2,11e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07877675473109176;  // std dev = 7,45e-09, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.07877675473109146;  // std dev = 6,99e-08, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.07324622576333666;  // std dev = 1,17e-07, 198,000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.0684269778442027;  // std dev = 2,24e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.06842697784420262;  // std dev = 7,60e-08, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.06419184008202626;  // std dev = 0,000, 218,000 (wgt'ed) examples reached here.  /* #neg=218 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.068 seconds
Total inference time: 1.555 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064211
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.897 seconds
Refined model CLL: -0.064211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.977 seconds
Total inference time: 1.555 seconds
AUC ROC: 1.0
Total revision time: 7.977
Best scored revision CLL: -0.064211


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 09:02:59
{'F1': 1.0, 'Inference time': 1.555, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.106262, 'Inference time': 1.363, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 1.71, 'CLL': -0.337291}, 'Recall': 1.0, 'Learning time': 7.977, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.14185106490048838;  // std dev = 0,000, 261,000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109556;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.12544463852839177;  // std dev = 0,000, 238,000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.11231637819360653;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830914;  // std dev = 3,86e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.10159632948783648;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601497;  // std dev = 2,53e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.09269127618926065;  // std dev = 8,30e-08, 229,000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694897;  // std dev = 5,96e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.08518475138839678;  // std dev = 7,15e-08, 229,000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325353;  // std dev = 2,11e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.07877675473109146;  // std dev = 7,15e-08, 232,000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.07324622576333671;  // std dev = 1,15e-07, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.06842697784420261;  // std dev = 6,32e-08, 224,000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06419184008202626;  // std dev = 0,000, 236,000 (wgt'ed) examples reached here.  /* #neg=236 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.823 seconds
Total inference time: 1.314 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 09:03:04
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.314, 'Precision': [1.0, 0.5], 'Learning time': 2.823, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.1418510649004877;  // std dev = 2,79e-08, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.14185106490048846;  // std dev = 0,000, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.989 seconds
Total inference time: 0.88 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 09:03:06
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.88, 'Precision': [nan, 0.5], 'Learning time': 0.989, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5081489350995085;  // std dev = 0,477, 300,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048788;  // std dev = 6,66e-08, 294,000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.45920082074859814;  // std dev = 7,964, 289,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=195 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839197;  // std dev = 0,000, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3579319673746845;  // std dev = 0,473, 295,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360654;  // std dev = 0,000, 338,000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.22587489951349982;  // std dev = 0,488, 320,000 (wgt'ed) examples reached here.  /* #neg=125 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783663;  // std dev = 0,000, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2097323277282549;  // std dev = 0,478, 301,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926049;  // std dev = 1,32e-07, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15122388459631364;  // std dev = 0,480, 304,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12856676883171694;  // std dev = 0,475, 297,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109144;  // std dev = 4,71e-08, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.07946314213456103;  // std dev = 8,386, 305,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=195 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333684;  // std dev = 1,13e-07, 264,000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04765060624679127;  // std dev = 0,484, 311,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420308;  // std dev = 0,000, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07688255204715004;  // std dev = 0,471, 292,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820261;  // std dev = 8,16e-08, 273,000 (wgt'ed) examples reached here.  /* #neg=273 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.315318
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.156 seconds
Total inference time: 1.482 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.872026
   AUC PR    = 0.104111
   CLL	      = -0.292998
   Precision = 0.104111 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.188588


Total scoring time: 2.275 seconds
Parameter learned model CLL: -0.292998


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.66e-08, 294, 0], 'true,true': [0.477, 105, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 284, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.964, 94, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 338, 0], 'true,true': [0.473, 100, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 285, 0], 'true,true': [0.488, 125, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.32e-07, 257, 0], 'true,true': [0.478, 106, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [9.88e-08, 281, 0], 'true,true': [0.48, 109, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.71e-08, 272, 0], 'true,true': [0.475, 102, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [8.386, 110, 195], 'false': [1.13e-07, 264, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 316, 0], 'true,true': [0.484, 116, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.16e-08, 273, 0], 'true,true': [0.471, 97, 195], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22750000000000478, 1.5105075164968118e-17], 'true': [0.22750000000000478, nan]}, {'': [0.2194657631014887, -7.81847200440251e-17], 'true': [0.2194657631014887, nan], 'true,true': [0.2194657631014887, nan]}, {'': [0.2240735420856081, -4.4671695665390914e-17], 'true': [0.2240735420856081, nan]}, {'': [0.2380371093750039, -5.4537271385095406e-17], 'true': [0.2380371093750039, nan]}, {'': [0.22814317722762428, 6.739096958814179e-17], 'true': [0.22814317722762428, nan]}, {'': [0.22999264196675873, 3.476855023737145e-17], 'true': [0.22999264196675873, nan]}, {'': [0.22548719518416496, 8.163404592832034e-18], 'true': [0.22548719518416496, nan]}, {'': [0.2305831765654395, 4.878252683959021e-17], 'true': [0.2305831765654395, nan], 'true,true': [0.2305831765654395, nan], 'true,true,true': [0.2305831765654395, nan]}, {'': [0.23386854974617663, -6.183520643481884e-17], 'true': [0.23386854974617663, nan]}, {'': [0.22184040157628063, 2.4400506035717726e-17], 'true': [0.22184040157628063, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.14185106490048766;  // std dev = 8,16e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.1418510649004879;  // std dev = 0,000, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.125444638528392;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.11231637819360625;  // std dev = 6,50e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.11231637819360696;  // std dev = 0,000, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415830997;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.10159632948783626;  // std dev = 4,71e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.10159632948783663;  // std dev = 0,000, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.320711847160149;  // std dev = 4,00e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.09269127618926042;  // std dev = 1,59e-07, 304,000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.0851847513883968;  // std dev = 1,49e-08, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.08518475138839678;  // std dev = 9,66e-08, 273,000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07877675473109161;  // std dev = 5,48e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.07877675473109143;  // std dev = 5,37e-08, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07324622576333707;  // std dev = 0,000, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return -0.0732462257633369;  // std dev = 1,06e-07, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06842697784420267;  // std dev = 4,01e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.06842697784420289;  // std dev = 0,000, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.064191840082026;  // std dev = 1,06e-07, 291,000 (wgt'ed) examples reached here.  /* #neg=291 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.534 seconds
Total inference time: 1.688 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064211
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.008 seconds
Refined model CLL: -0.064211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.972999999999999 seconds
Total inference time: 1.688 seconds
AUC ROC: 1.0
Total revision time: 8.972999999999999
Best scored revision CLL: -0.064211


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 09:03:18
{'F1': 1.0, 'Inference time': 1.688, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.106262, 'Inference time': 1.482, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 2.156, 'CLL': -0.315318}, 'Recall': 1.0, 'Learning time': 8.972999999999999, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1418510649004877;  // std dev = 2,11e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.14185106490048785;  // std dev = 8,43e-08, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.1254446385283921;  // std dev = 0,000, 374,000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.1123163781936068;  // std dev = 0,000, 333,000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830997;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.10159632948783656;  // std dev = 0,000, 363,000 (wgt'ed) examples reached here.  /* #neg=363 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.320711847160149;  // std dev = 4,00e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.09269127618926049;  // std dev = 1,35e-07, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.0851847513883968;  // std dev = 2,17e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.07877675473109143;  // std dev = 2,98e-08, 336,000 (wgt'ed) examples reached here.  /* #neg=336 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.07324622576333714;  // std dev = 5,96e-08, 379,000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06842697784420271;  // std dev = 7,45e-09, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.06842697784420303;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.06419184008202608;  // std dev = 8,43e-08, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.136 seconds
Total inference time: 1.375 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 09:03:23
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.375, 'Precision': [1.0, 0.5], 'Learning time': 3.136, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048754;  // std dev = 2,29e-07, 352,000 (wgt'ed) examples reached here.  /* #neg=352 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( actor(A) )
%   | | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.14185106490048768;  // std dev = 5,05e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.428 seconds
Total inference time: 0.827 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 09:03:26
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.827, 'Precision': [nan, 0.5], 'Learning time': 1.428, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.516376783200774;  // std dev = 0,474, 395,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004874;  // std dev = 2,81e-07, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.43469496956597137;  // std dev = 9,517, 399,000 (wgt'ed) examples reached here.  /* #neg=139 #pos=260 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283922;  // std dev = 0,000, 355,000 (wgt'ed) examples reached here.  /* #neg=355 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.38275696771823037;  // std dev = 0,466, 381,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360621;  // std dev = 0,000, 401,000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2548712388643546;  // std dev = 0,480, 406,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783617;  // std dev = 1,50e-07, 366,000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2350440389325035;  // std dev = 0,466, 381,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926083;  // std dev = 1,53e-07, 393,000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11164147644535728;  // std dev = 0,486, 421,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,23e-07, 396,000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15041576119794497;  // std dev = 0,465, 380,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 8,16e-08, 356,000 (wgt'ed) examples reached here.  /* #neg=356 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.09229740947457638;  // std dev = 9,357, 392,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=260 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333718;  // std dev = 4,21e-08, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09624073481699091;  // std dev = 0,463, 377,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420328;  // std dev = 0,000, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.05542431143301223;  // std dev = 0,470, 387,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202572;  // std dev = 1,68e-07, 360,000 (wgt'ed) examples reached here.  /* #neg=360 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.329538
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.43 seconds
Total inference time: 1.385 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.87194
   AUC PR    = 0.104042
   CLL	      = -0.305318
   Precision = 0.104042 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.188474


Total scoring time: 2.273 seconds
Parameter learned model CLL: -0.305318


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [2.81e-07, 383, 0], 'true,true': [0.474, 135, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 355, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.517, 139, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 401, 0], 'true,true': [0.466, 121, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.5e-07, 366, 0], 'true,true': [0.48, 146, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.53e-07, 393, 0], 'true,true': [0.466, 121, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.23e-07, 396, 0], 'true,true': [0.486, 161, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.16e-08, 356, 0], 'true,true': [0.465, 120, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [9.357, 132, 260], 'false': [4.21e-08, 382, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 371, 0], 'true,true': [0.463, 117, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.68e-07, 360, 0], 'true,true': [0.47, 127, 260], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2249639480852463, 2.0639132990420664e-16], 'true': [0.2249639480852463, nan]}, {'': [0.2270086243176934, -1.2009172998762255e-16], 'true': [0.2270086243176934, nan], 'true,true': [0.2270086243176934, nan]}, {'': [0.2167248778941934, -1.993417899576341e-17], 'true': [0.2167248778941934, nan]}, {'': [0.23028949986653402, 6.188128333976282e-17], 'true': [0.23028949986653402, nan]}, {'': [0.21672487789420056, 5.988989344033924e-17], 'true': [0.21672487789420056, nan]}, {'': [0.23617560271043264, 3.812887155278315e-17], 'true': [0.23617560271043264, nan]}, {'': [0.21606648199446118, 1.8711624010536346e-17], 'true': [0.21606648199446118, nan]}, {'': [0.22334443981674165, 4.650148794241494e-18], 'true': [0.22334443981674165, nan], 'true,true': [0.22334443981674165, nan], 'true,true,true': [0.22334443981674165, nan]}, {'': [0.21403091557669532, -9.875299140870664e-17], 'true': [0.21403091557669532, nan]}, {'': [0.22047286154010648, 7.833240229299716e-17], 'true': [0.22047286154010648, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048766;  // std dev = 8,16e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.1418510649004874;  // std dev = 2,83e-07, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.12544463852839133;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.12544463852839224;  // std dev = 0,000, 402,000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,95e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11231637819360621;  // std dev = 9,31e-08, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.11231637819360629;  // std dev = 0,000, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.417513584158311;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.10159632948783638;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.10159632948783602;  // std dev = 1,92e-07, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601502;  // std dev = 1,33e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.09269127618926083;  // std dev = 7,60e-08, 142,000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.0926912761892608;  // std dev = 1,59e-07, 389,000 (wgt'ed) examples reached here.  /* #neg=389 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08518475138839683;  // std dev = 5,58e-08, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.08518475138839678;  // std dev = 1,26e-07, 413,000 (wgt'ed) examples reached here.  /* #neg=413 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07877675473109161;  // std dev = 6,23e-08, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
%   else return -0.07877675473109143;  // std dev = 7,88e-08, 354,000 (wgt'ed) examples reached here.  /* #neg=354 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07324622576333721;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.0732462257633377;  // std dev = 0,000, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06842697784420267;  // std dev = 5,37e-08, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.06842697784420318;  // std dev = 0,000, 347,000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080112;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.06419184008202558;  // std dev = 1,97e-07, 402,000 (wgt'ed) examples reached here.  /* #neg=402 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.941 seconds
Total inference time: 1.486 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064211
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.389 seconds
Refined model CLL: -0.064211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.033 seconds
Total inference time: 1.486 seconds
AUC ROC: 1.0
Total revision time: 10.033
Best scored revision CLL: -0.064211


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 09:03:39
{'F1': 1.0, 'Inference time': 1.486, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.106262, 'Inference time': 1.385, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 2.43, 'CLL': -0.329538}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.033, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048768;  // std dev = 4,47e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.1418510649004872;  // std dev = 2,95e-07, 474,000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.12544463852839227;  // std dev = 0,000, 475,000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,95e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.11231637819360628;  // std dev = 0,000, 450,000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158311;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.10159632948783621;  // std dev = 3,65e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.1015963294878358;  // std dev = 2,72e-07, 519,000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601502;  // std dev = 1,33e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.09269127618926147;  // std dev = 0,000, 528,000 (wgt'ed) examples reached here.  /* #neg=528 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.08518475138839678;  // std dev = 1,25e-07, 458,000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.07877675473109191;  // std dev = 0,000, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.0732462257633372;  // std dev = 0,000, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.0684269778442027;  // std dev = 1,39e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.06842697784420344;  // std dev = 0,000, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080112;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.06419184008202565;  // std dev = 2,01e-07, 495,000 (wgt'ed) examples reached here.  /* #neg=495 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.425 seconds
Total inference time: 1.3 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 09:03:44
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.3, 'Precision': [1.0, 0.5], 'Learning time': 3.425, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.1418510649004875;  // std dev = 2,67e-07, 436,000 (wgt'ed) examples reached here.  /* #neg=436 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.285 seconds
Total inference time: 0.854 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 09:03:47
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.854, 'Precision': [nan, 0.5], 'Learning time': 1.285, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4887098635327768;  // std dev = 0,483, 517,000 (wgt'ed) examples reached here.  /* #neg=191 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 503,000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.45576174919824264;  // std dev = 10,403, 488,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=326 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839227;  // std dev = 0,000, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3372031432958354;  // std dev = 0,481, 513,000 (wgt'ed) examples reached here.  /* #neg=187 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360593;  // std dev = 0,000, 464,000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.26472084397504975;  // std dev = 0,481, 511,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783538;  // std dev = 3,51e-07, 501,000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.23522841528945235;  // std dev = 0,469, 485,000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926139;  // std dev = 0,000, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16719549292395625;  // std dev = 0,473, 492,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,37e-07, 457,000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14344818782314558;  // std dev = 0,466, 479,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109207;  // std dev = 0,000, 500,000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.10661545506203143;  // std dev = 10,227, 480,000 (wgt'ed) examples reached here.  /* #neg=154 #pos=326 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333698;  // std dev = 1,38e-07, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06149973272813333;  // std dev = 0,474, 494,000 (wgt'ed) examples reached here.  /* #neg=168 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420358;  // std dev = 0,000, 519,000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0522011195541639;  // std dev = 0,472, 490,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820254;  // std dev = 2,43e-07, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.326626
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.586 seconds
Total inference time: 1.535 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.871431
   AUC PR    = 0.103954
   CLL	      = -0.303745
   Precision = 0.103954 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18833


Total scoring time: 2.482 seconds
Parameter learned model CLL: -0.303745


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 503, 0], 'true,true': [0.483, 191, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 481, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.403, 162, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 464, 0], 'true,true': [0.481, 187, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.51e-07, 501, 0], 'true,true': [0.481, 185, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 485, 0], 'true,true': [0.469, 159, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.37e-07, 457, 0], 'true,true': [0.473, 166, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 500, 0], 'true,true': [0.466, 153, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [10.227, 154, 326], 'false': [1.38e-07, 488, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 519, 0], 'true,true': [0.474, 168, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.43e-07, 483, 0], 'true,true': [0.472, 164, 326], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23295384396664548, -3.88467698477192e-17], 'true': [0.23295384396664548, nan]}, {'': [0.22176498253157023, -1.2187063555136854e-16], 'true': [0.22176498253157023, nan], 'true,true': [0.22176498253157023, nan]}, {'': [0.23164582454620974, -1.3399243400648442e-17], 'true': [0.23164582454620974, nan]}, {'': [0.23096572087269962, 2.464207591583182e-16], 'true': [0.23096572087269962, nan]}, {'': [0.22035923052396633, -1.8312957107219077e-17], 'true': [0.22035923052396633, nan]}, {'': [0.22356071121686674, 4.0813450358211444e-17], 'true': [0.22356071121686674, nan]}, {'': [0.21738921988659513, -3.9968028886505634e-17], 'true': [0.21738921988659513, nan]}, {'': [0.2178993055555575, 3.913081152367355e-17], 'true': [0.2178993055555575, nan], 'true,true': [0.2178993055555575, nan], 'true,true,true': [0.2178993055555575, nan]}, {'': [0.22442590437476245, -1.1893718722381253e-16], 'true': [0.22442590437476245, nan]}, {'': [0.22267388588088372, 1.2274515427532788e-16], 'true': [0.22267388588088372, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048816;  // std dev = 0,000, 162,000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.14185106490048766;  // std dev = 0,000, 494,000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839147;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.1254446385283923;  // std dev = 0,000, 454,000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360649;  // std dev = 2,11e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.11231637819360601;  // std dev = 0,000, 441,000 (wgt'ed) examples reached here.  /* #neg=441 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783645;  // std dev = 0,000, 157,000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.1015963294878356;  // std dev = 2,98e-07, 455,000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926074;  // std dev = 7,45e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.09269127618926151;  // std dev = 0,000, 513,000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5,77e-08, 158,000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.08518475138839678;  // std dev = 1,43e-07, 489,000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,46e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109157;  // std dev = 7,30e-08, 157,000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.07877675473109189;  // std dev = 0,000, 470,000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2,76e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333688;  // std dev = 6,50e-08, 161,000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.07324622576333706;  // std dev = 1,10e-07, 472,000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 5,77e-08, 150,000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.06842697784420351;  // std dev = 0,000, 478,000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else return -0.0641918400820254;  // std dev = 2,43e-07, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.858 seconds
Total inference time: 1.412 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064216
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.329 seconds
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.255 seconds
Total inference time: 1.412 seconds
AUC ROC: 1.0
Total revision time: 11.255
Best scored revision CLL: -0.064216


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 09:04:01
{'parameter_1.0': {'F1': 0.106262, 'Inference time': 1.535, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 2.586, 'CLL': -0.326626}, 'F1': 1.0, 'Inference time': 1.412, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 11.255, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048768;  // std dev = 4,71e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.14185106490048874;  // std dev = 0,000, 644,000 (wgt'ed) examples reached here.  /* #neg=644 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.1254446385283923;  // std dev = 0,000, 613,000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360636;  // std dev = 1,05e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.112316378193606;  // std dev = 0,000, 547,000 (wgt'ed) examples reached here.  /* #neg=547 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783619;  // std dev = 4,21e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.10159632948783558;  // std dev = 3,35e-07, 600,000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.09269127618926186;  // std dev = 0,000, 641,000 (wgt'ed) examples reached here.  /* #neg=641 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.08518475138839675;  // std dev = 1,46e-07, 568,000 (wgt'ed) examples reached here.  /* #neg=568 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,46e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109177;  // std dev = 1,05e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.07877675473109239;  // std dev = 0,000, 600,000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2,76e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.07324622576333682;  // std dev = 1,50e-07, 615,000 (wgt'ed) examples reached here.  /* #neg=615 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420267;  // std dev = 2,89e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.06842697784420226;  // std dev = 2,08e-07, 612,000 (wgt'ed) examples reached here.  /* #neg=612 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06419184008202554;  // std dev = 2,37e-07, 585,000 (wgt'ed) examples reached here.  /* #neg=585 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.114 seconds
Total inference time: 1.404 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 09:04:07
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.404, 'Precision': [1.0, 0.5], 'Learning time': 4.114, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048766;  // std dev = 5,58e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.1418510649004886;  // std dev = 0,000, 627,000 (wgt'ed) examples reached here.  /* #neg=627 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.449 seconds
Total inference time: 0.895 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 09:04:10
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.895, 'Precision': [nan, 0.5], 'Learning time': 1.449, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5692600462106242;  // std dev = 0,453, 90,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,56e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.4204127037127098;  // std dev = 4,757, 99,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=64 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839147;  // std dev = 0,000, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3321792349250153;  // std dev = 0,480, 100,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360622;  // std dev = 6,66e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2981615240849542;  // std dev = 0,466, 94,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783623;  // std dev = 5,05e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19793676683656447;  // std dev = 0,476, 98,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926093;  // std dev = 5,48e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.17636361537930073;  // std dev = 0,466, 94,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,48e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1324248678158032;  // std dev = 0,466, 94,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0787767547310916;  // std dev = 5,58e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.11468651818412262;  // std dev = 4,413, 92,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=64 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.018852387083525764;  // std dev = 0,483, 102,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 4,41e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.014370936646239648;  // std dev = 0,483, 102,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.301803
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.459 seconds
Total inference time: 1.512 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.867253
   AUC PR    = 0.100313
   CLL	      = -0.305512
   Precision = 0.100313 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.182336


Total scoring time: 1.286 seconds
Parameter learned model CLL: -0.305512


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.56e-08, 93, 0], 'true,true': [0.453, 26, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 80, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.757, 35, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.66e-08, 82, 0], 'true,true': [0.48, 36, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.05e-08, 91, 0], 'true,true': [0.466, 30, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.48e-08, 103, 0], 'true,true': [0.476, 34, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.48e-08, 99, 0], 'true,true': [0.466, 30, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.58e-08, 97, 0], 'true,true': [0.466, 30, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [4.413, 28, 64], 'false': [0.0, 86, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.41e-08, 92, 0], 'true,true': [0.483, 38, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 93, 0], 'true,true': [0.483, 38, 64], 'true,false': [0.0, 0, 0]}]]
[{'': [0.20543209876543136, 7.879002110243047e-17], 'true': [0.20543209876543136, nan]}, {'': [0.22854810733598652, -2.2204460492503132e-17], 'true': [0.22854810733598652, nan], 'true,true': [0.22854810733598652, nan]}, {'': [0.23040000000000116, 5.415722071342227e-17], 'true': [0.23040000000000116, nan]}, {'': [0.2172928927116334, 2.8060581941075384e-17], 'true': [0.2172928927116334, nan]}, {'': [0.2265722615576835, 2.910293365522255e-17], 'true': [0.2265722615576835, nan]}, {'': [0.21729289271163407, 3.027880976250427e-17], 'true': [0.21729289271163407, nan]}, {'': [0.21729289271163454, 3.204767493763338e-17], 'true': [0.21729289271163454, nan]}, {'': [0.21172022684310032, -7.10026352957949e-18], 'true': [0.21172022684310032, nan], 'true,true': [0.21172022684310032, nan], 'true,true,true': [0.21172022684310032, nan]}, {'': [0.23375624759707797, 2.1118372751022e-17], 'true': [0.23375624759707797, nan]}, {'': [0.23375624759707817, -1.4325458382260084e-17], 'true': [0.23375624759707817, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.14185106490048777;  // std dev = 1,49e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.14185106490048763;  // std dev = 8,94e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109542;  // std dev = 8,43e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.1254446385283914;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.11231637819360622;  // std dev = 6,23e-08, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783634;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0.41751358415831036;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.10159632948783628;  // std dev = 2,98e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.09628037194838313;  // std dev = 0,074, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.09269127618926107;  // std dev = 1,49e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0849054753124547;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.08518475138839678;  // std dev = 3,49e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08076181823561386;  // std dev = 0,088, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109158;  // std dev = 5,58e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07288761381452499;  // std dev = 1,18e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0.17709649774527728;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.07324622576333707;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1527438580936707;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08184508880451295;  // std dev = 0,212, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06842697784420265;  // std dev = 4,89e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06309804936861124;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.13400703000801095;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.06419184008202626;  // std dev = 0,000, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063324
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.752 seconds
Total inference time: 1.555 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065337
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.144 seconds
Refined model CLL: -0.065337


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063324
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.641 seconds
Total inference time: 1.555 seconds
AUC ROC: 1.0
Total revision time: 5.641
Best scored revision CLL: -0.065337


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 09:04:20
{'parameter_0.2': {'F1': 0.113837, 'Inference time': 1.512, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 1.459, 'CLL': -0.301803}, 'F1': 1.0, 'Inference time': 1.555, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.641, 'CLL': -0.063324}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.14185106490048768;  // std dev = 6,32e-08, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109542;  // std dev = 8,43e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.12544463852839133;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.11231637819360621;  // std dev = 8,94e-08, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.10159632948783631;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926085;  // std dev = 7,45e-08, 145,000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.08518475138839682;  // std dev = 5,58e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07877675473109165;  // std dev = 5,27e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07324622576333722;  // std dev = 0,000, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936707;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420267;  // std dev = 4,59e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06419184008202626;  // std dev = 0,000, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.12 seconds
Total inference time: 1.41 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 09:04:23
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.41, 'Precision': [1.0, 0.5], 'Learning time': 2.12, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.795 seconds
Total inference time: 0.904 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 09:04:25
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.904, 'Precision': [nan, 0.5], 'Learning time': 0.795, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5443191478654668;  // std dev = 0,464, 188,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048843;  // std dev = 0,000, 207,000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.453674364708324;  // std dev = 6,471, 191,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=129 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839158;  // std dev = 0,000, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.28762574677892305;  // std dev = 0,490, 216,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360661;  // std dev = 0,000, 201,000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.24305773991050855;  // std dev = 0,486, 209,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878365;  // std dev = 0,000, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.22558093614878097;  // std dev = 0,474, 196,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892606;  // std dev = 8,56e-08, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15004738403795126;  // std dev = 0,480, 202,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 6,83e-08, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16011749887970025;  // std dev = 0,464, 188,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109148;  // std dev = 7,88e-08, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.06974477427557757;  // std dev = 6,857, 203,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=129 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333668;  // std dev = 1,08e-07, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08217538415932842;  // std dev = 0,472, 194,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 7,81e-08, 187,000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0589306355346585;  // std dev = 0,473, 195,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.301899
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.754 seconds
Total inference time: 1.564 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.86474
   AUC PR    = 0.099307
   CLL	      = -0.310017
   Precision = 0.099307 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.180672


Total scoring time: 1.77 seconds
Parameter learned model CLL: -0.310017


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 207, 0], 'true,true': [0.464, 59, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 189, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.471, 62, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 201, 0], 'true,true': [0.49, 87, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 185, 0], 'true,true': [0.486, 80, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.56e-08, 182, 0], 'true,true': [0.474, 67, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [6.83e-08, 173, 0], 'true,true': [0.48, 73, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.88e-08, 180, 0], 'true,true': [0.464, 59, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [6.857, 74, 129], 'false': [1.08e-07, 185, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.81e-08, 187, 0], 'true,true': [0.472, 65, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 179, 0], 'true,true': [0.473, 66, 129], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21534065187868245, -2.4028015218940584e-16], 'true': [0.21534065187868245, nan]}, {'': [0.21923741125517598, -4.4643888820905763e-17], 'true': [0.21923741125517598, nan], 'true,true': [0.21923741125517598, nan]}, {'': [0.24054783950617528, -4.418798107960822e-17], 'true': [0.24054783950617528, nan]}, {'': [0.23625832741924413, -9.121832418541827e-17], 'true': [0.23625832741924413, nan]}, {'': [0.22498438150770353, 4.0260834958934247e-17], 'true': [0.22498438150770353, nan]}, {'': [0.23078619743162265, 2.6953391349281256e-17], 'true': [0.23078619743162265, nan]}, {'': [0.21534065187867837, 3.454027187722709e-17], 'true': [0.21534065187867837, nan]}, {'': [0.23164842631463953, 6.301265815440077e-17], 'true': [0.23164842631463953, nan], 'true,true': [0.23164842631463953, nan], 'true,true,true': [0.23164842631463953, nan]}, {'': [0.2227920076522481, 3.2653618371328135e-17], 'true': [0.2227920076522481, nan]}, {'': [0.22390532544378658, -4.341654286243629e-18], 'true': [0.22390532544378658, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.14185106490048768;  // std dev = 5,37e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.1418510649004884;  // std dev = 0,000, 201,000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109555;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.12544463852839155;  // std dev = 0,000, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.11231637819360629;  // std dev = 4,71e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.11231637819360654;  // std dev = 0,000, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583092;  // std dev = 3,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.10159632948783624;  // std dev = 2,98e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.10159632948783652;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601498;  // std dev = 2,49e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.0926912761892606;  // std dev = 8,69e-08, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839679;  // std dev = 1,67e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0.2551722425694898;  // std dev = 4,21e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253534;  // std dev = 2,09e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07957994173503055;  // std dev = 0,040, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.0787767547310915;  // std dev = 8,23e-08, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07357883714061447;  // std dev = 0,027, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.0732462257633367;  // std dev = 1,06e-07, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06951416472445147;  // std dev = 0,042, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.06842697784420262;  // std dev = 8,49e-08, 213,000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06540464297430461;  // std dev = 0,051, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.06419184008202626;  // std dev = 0,000, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063396
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.528 seconds
Total inference time: 1.532 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064411
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.86 seconds
Refined model CLL: -0.064411


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063396
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.912 seconds
Total inference time: 1.532 seconds
AUC ROC: 1.0
Total revision time: 7.912
Best scored revision CLL: -0.064411


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 09:04:37
{'F1': 1.0, 'Inference time': 1.532, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.113837, 'Inference time': 1.564, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 1.754, 'CLL': -0.301899}, 'Recall': 1.0, 'Learning time': 7.912, 'CLL': -0.063396}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.14185106490048838;  // std dev = 0,000, 243,000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109555;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.12544463852839166;  // std dev = 0,000, 213,000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.11231637819360676;  // std dev = 0,000, 246,000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583092;  // std dev = 3,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.10159632948783649;  // std dev = 0,000, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601498;  // std dev = 2,49e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.09269127618926057;  // std dev = 5,96e-08, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694898;  // std dev = 4,21e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.08518475138839682;  // std dev = 1,58e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.08518475138839678;  // std dev = 7,30e-08, 229,000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253534;  // std dev = 2,09e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.07877675473109146;  // std dev = 7,30e-08, 228,000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.07324622576333671;  // std dev = 1,14e-07, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.06842697784420265;  // std dev = 4,21e-08, 243,000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.06419184008202626;  // std dev = 0,000, 219,000 (wgt'ed) examples reached here.  /* #neg=219 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.751 seconds
Total inference time: 1.489 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 09:04:41
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.489, 'Precision': [1.0, 0.5], 'Learning time': 2.751, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.14185106490048846;  // std dev = 0,000, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.931 seconds
Total inference time: 0.916 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 09:04:43
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.916, 'Precision': [nan, 0.5], 'Learning time': 0.931, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46821182818126944;  // std dev = 0,488, 318,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 1,15e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.46474737665510674;  // std dev = 7,957, 288,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=194 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839194;  // std dev = 0,000, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.33605140028082064;  // std dev = 0,482, 307,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360697;  // std dev = 0,000, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2699778694407725;  // std dev = 0,480, 303,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 291,000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.22474887646244748;  // std dev = 0,474, 294,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926043;  // std dev = 1,48e-07, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15789410038348042;  // std dev = 0,477, 299,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 279,000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09746128534019957;  // std dev = 0,483, 309,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 2,58e-08, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.11211153601240262;  // std dev = 8,042, 291,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=194 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333692;  // std dev = 1,03e-07, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08006367488446418;  // std dev = 0,473, 293,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420287;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0629916917414268;  // std dev = 0,472, 292,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202622;  // std dev = 4,47e-08, 254,000 (wgt'ed) examples reached here.  /* #neg=254 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.301744
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.993 seconds
Total inference time: 1.537 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.864652
   AUC PR    = 0.099487
   CLL	      = -0.31003
   Precision = 0.099487 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18097


Total scoring time: 2.093 seconds
Parameter learned model CLL: -0.31003


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.15e-07, 305, 0], 'true,true': [0.488, 124, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 272, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.957, 94, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 278, 0], 'true,true': [0.482, 113, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 291, 0], 'true,true': [0.48, 109, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.48e-07, 292, 0], 'true,true': [0.474, 100, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [9.88e-08, 279, 0], 'true,true': [0.477, 105, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [2.58e-08, 307, 0], 'true,true': [0.483, 115, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [8.042, 97, 194], 'false': [1.03e-07, 285, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 274, 0], 'true,true': [0.473, 99, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.47e-08, 254, 0], 'true,true': [0.472, 98, 194], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23788615956647743, 4.3680905886891404e-17], 'true': [0.23788615956647743, nan]}, {'': [0.21985918209876576, -7.18379604169219e-17], 'true': [0.21985918209876576, nan], 'true,true': [0.21985918209876576, nan]}, {'': [0.23259663232500982, -1.0223636485756838e-16], 'true': [0.23259663232500982, nan]}, {'': [0.23032600289731683, -5.493887132165723e-17], 'true': [0.23032600289731683, nan]}, {'': [0.2244435189041573, 7.452181946114065e-17], 'true': [0.2244435189041573, nan]}, {'': [0.22784980033780367, 3.501778715663576e-17], 'true': [0.22784980033780367, nan]}, {'': [0.23365905258637842, 2.1698169862380908e-18], 'true': [0.23365905258637842, nan]}, {'': [0.22222222222222346, 3.739698609263685e-17], 'true': [0.22222222222222346, nan], 'true,true': [0.22222222222222346, nan], 'true,true,true': [0.22222222222222346, nan]}, {'': [0.22371838926487234, -3.241527079197537e-17], 'true': [0.22371838926487234, nan]}, {'': [0.22297804466128834, 7.867722221753078e-18], 'true': [0.22297804466128834, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.14185106490048768;  // std dev = 7,30e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.14185106490048793;  // std dev = 0,000, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.12544463852839197;  // std dev = 0,000, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11231637819360625;  // std dev = 7,15e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.11231637819360668;  // std dev = 0,000, 318,000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583099;  // std dev = 3,04e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.10159632948783626;  // std dev = 4,47e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.10159632948783658;  // std dev = 0,000, 244,000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.320711847160149;  // std dev = 3,95e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.092691276189261;  // std dev = 3,80e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.09269127618926046;  // std dev = 1,62e-07, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.08518475138839679;  // std dev = 3,49e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.08518475138839678;  // std dev = 1,07e-07, 311,000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07877675473109164;  // std dev = 5,05e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.07877675473109143;  // std dev = 4,21e-08, 286,000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.07324622576333693;  // std dev = 1,02e-07, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06842697784420267;  // std dev = 4,34e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.06842697784420294;  // std dev = 0,000, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.06419184008202605;  // std dev = 9,42e-08, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.85 seconds
Total inference time: 1.587 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064221
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.071 seconds
Refined model CLL: -0.064221


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.007 seconds
Total inference time: 1.587 seconds
AUC ROC: 1.0
Total revision time: 9.007
Best scored revision CLL: -0.064221


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 09:04:56
{'F1': 1.0, 'Inference time': 1.587, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.113837, 'Inference time': 1.537, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 1.993, 'CLL': -0.301744}, 'Recall': 1.0, 'Learning time': 9.007, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1418510649004877;  // std dev = 2,58e-08, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048782;  // std dev = 1,07e-07, 363,000 (wgt'ed) examples reached here.  /* #neg=363 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.12544463852839202;  // std dev = 0,000, 342,000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.11231637819360672;  // std dev = 0,000, 359,000 (wgt'ed) examples reached here.  /* #neg=359 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583099;  // std dev = 3,04e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.10159632948783658;  // std dev = 0,000, 356,000 (wgt'ed) examples reached here.  /* #neg=356 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.320711847160149;  // std dev = 3,95e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.09269127618926053;  // std dev = 1,58e-07, 339,000 (wgt'ed) examples reached here.  /* #neg=339 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.08518475138839682;  // std dev = 1,58e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.08518475138839678;  // std dev = 1,10e-07, 388,000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07877675473109143;  // std dev = 0,000, 332,000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.07324622576333707;  // std dev = 7,88e-08, 345,000 (wgt'ed) examples reached here.  /* #neg=345 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.06842697784420314;  // std dev = 0,000, 352,000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.064191840082026;  // std dev = 1,05e-07, 353,000 (wgt'ed) examples reached here.  /* #neg=353 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.211 seconds
Total inference time: 1.439 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 09:05:01
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.439, 'Precision': [1.0, 0.5], 'Learning time': 3.211, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.14185106490048782;  // std dev = 9,88e-08, 351,000 (wgt'ed) examples reached here.  /* #neg=351 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.191 seconds
Total inference time: 0.908 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 09:05:03
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.908, 'Precision': [nan, 0.5], 'Learning time': 1.191, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5171820139799153;  // std dev = 0,474, 393,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048738;  // std dev = 2,89e-07, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.44873884681342935;  // std dev = 9,304, 389,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=259 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839224;  // std dev = 0,000, 386,000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.37879569824906306;  // std dev = 0,466, 380,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360615;  // std dev = 0,000, 412,000 (wgt'ed) examples reached here.  /* #neg=412 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2451465163165737;  // std dev = 0,482, 409,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783615;  // std dev = 1,59e-07, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.232131792096864;  // std dev = 0,467, 381,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926082;  // std dev = 1,56e-07, 392,000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1760804521718448;  // std dev = 0,466, 380,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,23e-07, 374,000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09652772530992389;  // std dev = 0,478, 401,000 (wgt'ed) examples reached here.  /* #neg=142 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 1,07e-07, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.06012917451819473;  // std dev = 9,746, 409,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=259 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333771;  // std dev = 0,000, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06959574860388752;  // std dev = 0,475, 394,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420326;  // std dev = 0,000, 370,000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04460437765266063;  // std dev = 0,477, 399,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202568;  // std dev = 1,76e-07, 370,000 (wgt'ed) examples reached here.  /* #neg=370 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.300927
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.636 seconds
Total inference time: 1.477 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.867052
   AUC PR    = 0.101211
   CLL	      = -0.305074
   Precision = 0.101211 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.183818


Total scoring time: 2.858 seconds
Parameter learned model CLL: -0.305074


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [2.89e-07, 390, 0], 'true,true': [0.474, 134, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 386, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.304, 130, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 412, 0], 'true,true': [0.466, 121, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.59e-07, 369, 0], 'true,true': [0.482, 150, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.56e-07, 392, 0], 'true,true': [0.467, 122, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.23e-07, 374, 0], 'true,true': [0.466, 121, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.07e-07, 383, 0], 'true,true': [0.478, 142, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [9.746, 150, 259], 'false': [0.0, 397, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 370, 0], 'true,true': [0.475, 135, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.76e-07, 370, 0], 'true,true': [0.477, 140, 259], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22470847982182174, 2.1407377295336352e-16], 'true': [0.22470847982182174, nan]}, {'': [0.22250712062436676, -1.2425293954354083e-16], 'true': [0.22250712062436676, nan], 'true,true': [0.22250712062436676, nan]}, {'': [0.21702908587257616, -1.7246182906798547e-17], 'true': [0.21702908587257616, nan]}, {'': [0.23224394880470298, 6.859914623700155e-17], 'true': [0.23224394880470298, nan]}, {'': [0.21767554646220452, 6.230843505549347e-17], 'true': [0.21767554646220452, nan]}, {'': [0.21702908587257616, 4.0371746350005693e-17], 'true': [0.21702908587257616, nan]}, {'': [0.22871748310022935, 3.0147048188254906e-17], 'true': [0.22871748310022935, nan]}, {'': [0.23224394880470703, -6.935398239472011e-17], 'true': [0.23224394880470703, nan], 'true,true': [0.23224394880470703, nan], 'true,true,true': [0.23224394880470703, nan]}, {'': [0.22523770259476006, -1.0442097637014986e-16], 'true': [0.22523770259476006, nan]}, {'': [0.2277623884272091, 8.401687753920104e-17], 'true': [0.2277623884272091, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.14185106490048807;  // std dev = 0,000, 156,000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.14185106490048738;  // std dev = 2,89e-07, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.12544463852839113;  // std dev = 7,60e-08, 136,000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.12544463852839222;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 4,13e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.11231637819360621;  // std dev = 8,94e-08, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.11231637819360638;  // std dev = 0,000, 368,000 (wgt'ed) examples reached here.  /* #neg=368 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.417513584158311;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.101596329487836;  // std dev = 1,97e-07, 387,000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601502;  // std dev = 1,46e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0926912761892609;  // std dev = 6,32e-08, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.09269127618926061;  // std dev = 1,85e-07, 365,000 (wgt'ed) examples reached here.  /* #neg=365 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.08518475138839679;  // std dev = 5,58e-08, 145,000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.08518475138839678;  // std dev = 1,23e-07, 387,000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0787767547310916;  // std dev = 6,58e-08, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.07877675473109143;  // std dev = 1,03e-07, 380,000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07324622576333718;  // std dev = 0,000, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.0732462257633377;  // std dev = 0,000, 389,000 (wgt'ed) examples reached here.  /* #neg=389 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06842697784420265;  // std dev = 5,67e-08, 148,000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.06842697784420326;  // std dev = 0,000, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.0641918400820257;  // std dev = 1,71e-07, 363,000 (wgt'ed) examples reached here.  /* #neg=363 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.084 seconds
Total inference time: 1.421 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064223
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.927 seconds
Refined model CLL: -0.064223


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.504999999999999 seconds
Total inference time: 1.421 seconds
AUC ROC: 1.0
Total revision time: 10.504999999999999
Best scored revision CLL: -0.064223


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 09:05:17
{'F1': 1.0, 'Inference time': 1.421, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.113837, 'Inference time': 1.477, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 2.636, 'CLL': -0.300927}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.504999999999999, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.14185106490048746;  // std dev = 1,93e-07, 487,000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.12544463852839127;  // std dev = 3,49e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.12544463852839227;  // std dev = 0,000, 469,000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 4,13e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.1123163781936063;  // std dev = 3,33e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.11231637819360593;  // std dev = 0,000, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158311;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.10159632948783627;  // std dev = 2,79e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.10159632948783608;  // std dev = 1,93e-07, 462,000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601502;  // std dev = 1,46e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.09269127618926142;  // std dev = 0,000, 511,000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.08518475138839678;  // std dev = 1,26e-07, 471,000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.07877675473109179;  // std dev = 0,000, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.07324622576333722;  // std dev = 0,000, 508,000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06842697784420271;  // std dev = 9,13e-09, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.06842697784420347;  // std dev = 0,000, 486,000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.06419184008202576;  // std dev = 1,71e-07, 446,000 (wgt'ed) examples reached here.  /* #neg=446 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.943 seconds
Total inference time: 1.359 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 09:05:23
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.359, 'Precision': [1.0, 0.5], 'Learning time': 3.943, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.14185106490048768;  // std dev = 4,94e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.14185106490048763;  // std dev = 9,42e-08, 508,000 (wgt'ed) examples reached here.  /* #neg=508 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.215 seconds
Total inference time: 0.92 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 09:05:25
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.92, 'Precision': [nan, 0.5], 'Learning time': 1.215, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5248156017661747;  // std dev = 0,471, 486,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048752;  // std dev = 1,63e-07, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.42833552640163636;  // std dev = 10,699, 501,000 (wgt'ed) examples reached here.  /* #neg=177 #pos=324 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839233;  // std dev = 0,000, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.36248239105401603;  // std dev = 0,473, 489,000 (wgt'ed) examples reached here.  /* #neg=165 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.112316378193606;  // std dev = 0,000, 444,000 (wgt'ed) examples reached here.  /* #neg=444 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.27731500949813237;  // std dev = 0,474, 492,000 (wgt'ed) examples reached here.  /* #neg=168 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878355;  // std dev = 3,24e-07, 477,000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19699705967468106;  // std dev = 0,478, 502,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926142;  // std dev = 0,000, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1789227675300531;  // std dev = 0,468, 479,000 (wgt'ed) examples reached here.  /* #neg=155 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,44e-07, 504,000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1058829494645903;  // std dev = 0,478, 500,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109186;  // std dev = 0,000, 466,000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.03174103039881543;  // std dev = 11,384, 540,000 (wgt'ed) examples reached here.  /* #neg=216 #pos=324 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333711;  // std dev = 9,19e-08, 463,000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07326974719314841;  // std dev = 0,477, 499,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420355;  // std dev = 0,000, 503,000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07560576864249054;  // std dev = 0,470, 484,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820254;  // std dev = 2,43e-07, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.298855
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.745 seconds
Total inference time: 1.789 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.86826
   AUC PR    = 0.102112
   CLL	      = -0.301008
   Precision = 0.102112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185302


Total scoring time: 2.599 seconds
Parameter learned model CLL: -0.301008


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.63e-07, 481, 0], 'true,true': [0.471, 162, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 483, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.699, 177, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 444, 0], 'true,true': [0.473, 165, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.24e-07, 477, 0], 'true,true': [0.474, 168, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 492, 0], 'true,true': [0.478, 178, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.44e-07, 504, 0], 'true,true': [0.468, 155, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 466, 0], 'true,true': [0.478, 176, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [11.384, 216, 324], 'false': [9.19e-08, 463, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 503, 0], 'true,true': [0.477, 175, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.43e-07, 481, 0], 'true,true': [0.47, 160, 324], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22222222222222496, 5.5395743432440246e-17], 'true': [0.22222222222222496, nan]}, {'': [0.2284771773817648, -1.3791590368014366e-16], 'true': [0.2284771773817648, nan], 'true,true': [0.2284771773817648, nan]}, {'': [0.22356882080620993, -1.800361661554308e-17], 'true': [0.22356882080620993, nan]}, {'': [0.22486615110053781, 2.1971709334300793e-16], 'true': [0.22486615110053781, nan]}, {'': [0.22885351026174208, -2.3468128975816318e-17], 'true': [0.22885351026174208, nan]}, {'': [0.21887979916405345, 4.1413081077287586e-17], 'true': [0.21887979916405345, nan]}, {'': [0.2280960000000027, -1.4294717055259525e-17], 'true': [0.2280960000000027, nan]}, {'': [0.24000000000000357, 1.8223963255186154e-17], 'true': [0.24000000000000357, nan], 'true,true': [0.24000000000000357, nan], 'true,true,true': [0.24000000000000357, nan]}, {'': [0.22770992887578562, -1.2007183407476843e-16], 'true': [0.22770992887578562, nan]}, {'': [0.22129635953828386, 1.2233226674663886e-16], 'true': [0.22129635953828386, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048824;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.14185106490048766;  // std dev = 0,000, 494,000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839147;  // std dev = 0,000, 177,000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.1254446385283923;  // std dev = 0,000, 456,000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360639;  // std dev = 6,32e-08, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.11231637819360585;  // std dev = 0,000, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783648;  // std dev = 0,000, 169,000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.10159632948783544;  // std dev = 3,38e-07, 489,000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926074;  // std dev = 7,45e-08, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.09269127618926151;  // std dev = 0,000, 513,000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6,83e-08, 184,000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.08518475138839678;  // std dev = 1,33e-07, 440,000 (wgt'ed) examples reached here.  /* #neg=440 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109154;  // std dev = 8,16e-08, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.07877675473109184;  // std dev = 0,000, 464,000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2,73e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333686;  // std dev = 6,99e-08, 174,000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.07324622576333703;  // std dev = 1,19e-07, 477,000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6,41e-08, 169,000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.06842697784420357;  // std dev = 0,000, 514,000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 149,000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.06419184008202543;  // std dev = 2,38e-07, 473,000 (wgt'ed) examples reached here.  /* #neg=473 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.486 seconds
Total inference time: 1.675 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064225
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.013 seconds
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.843 seconds
Total inference time: 1.675 seconds
AUC ROC: 1.0
Total revision time: 10.843
Best scored revision CLL: -0.064225


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 09:05:40
{'parameter_1.0': {'F1': 0.113837, 'Inference time': 1.789, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 2.745, 'CLL': -0.298855}, 'F1': 1.0, 'Inference time': 1.675, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.843, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048768;  // std dev = 4,94e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.14185106490048852;  // std dev = 0,000, 607,000 (wgt'ed) examples reached here.  /* #neg=607 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839147;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.12544463852839233;  // std dev = 0,000, 612,000 (wgt'ed) examples reached here.  /* #neg=612 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360626;  // std dev = 4,94e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.11231637819360579;  // std dev = 0,000, 596,000 (wgt'ed) examples reached here.  /* #neg=596 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783628;  // std dev = 2,69e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.1015963294878357;  // std dev = 3,00e-07, 564,000 (wgt'ed) examples reached here.  /* #neg=564 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.09269127618926176;  // std dev = 0,000, 609,000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.08518475138839678;  // std dev = 1,46e-07, 594,000 (wgt'ed) examples reached here.  /* #neg=594 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109175;  // std dev = 1,97e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07877675473109227;  // std dev = 0,000, 563,000 (wgt'ed) examples reached here.  /* #neg=563 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2,73e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 1,29e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.07324622576333711;  // std dev = 6,99e-08, 552,000 (wgt'ed) examples reached here.  /* #neg=552 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420268;  // std dev = 2,58e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.06842697784420362;  // std dev = 0,000, 600,000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.06419184008202541;  // std dev = 2,48e-07, 650,000 (wgt'ed) examples reached here.  /* #neg=650 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.955 seconds
Total inference time: 1.231 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 09:05:46
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.231, 'Precision': [1.0, 0.5], 'Learning time': 3.955, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048766;  // std dev = 5,96e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.14185106490048854;  // std dev = 0,000, 613,000 (wgt'ed) examples reached here.  /* #neg=613 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.453 seconds
Total inference time: 0.921 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 09:05:48
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.921, 'Precision': [nan, 0.5], 'Learning time': 1.453, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4930695700201471;  // std dev = 0,481, 63,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 6,66e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.4023836678106094;  // std dev = 3,922, 65,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4136373526848245;  // std dev = 0,457, 57,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360632;  // std dev = 2,79e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.33460635685121776;  // std dev = 0,452, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783616;  // std dev = 5,67e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.17391703811571688;  // std dev = 0,481, 63,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926105;  // std dev = 0,000, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15133432239351285;  // std dev = 0,475, 61,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.19860384410678175;  // std dev = 0,438, 54,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 2,24e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.14987338084321417;  // std dev = 3,220, 54,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=40 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0877401412901925;  // std dev = 0,452, 56,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420268;  // std dev = 1,83e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.019829426787611754;  // std dev = 0,471, 60,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.291143
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.144 seconds
Total inference time: 1.529 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.862254
   AUC PR    = 0.063593
   CLL	      = -0.337167
   Precision = 0.063593 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.119581


Total scoring time: 1.456 seconds
Parameter learned model CLL: -0.337167


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.66e-08, 65, 0], 'true,true': [0.481, 23, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 64, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.922, 25, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [2.79e-08, 49, 0], 'true,true': [0.457, 17, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.67e-08, 81, 0], 'true,true': [0.452, 16, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 46, 0], 'true,true': [0.481, 23, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.83e-08, 59, 0], 'true,true': [0.475, 21, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [2.24e-08, 59, 0], 'true,true': [0.438, 14, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [3.22, 14, 40], 'false': [7.45e-09, 52, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.83e-08, 57, 0], 'true,true': [0.452, 16, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 53, 0], 'true,true': [0.471, 20, 40], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2317964222726136, 6.832141690000964e-17], 'true': [0.2317964222726136, nan]}, {'': [0.2366863905325454, -3.8163916471489756e-17], 'true': [0.2366863905325454, nan], 'true,true': [0.2366863905325454, nan]}, {'': [0.20929516774392054, 1.586032892321652e-17], 'true': [0.20929516774392054, nan]}, {'': [0.2040816326530619, 3.974872557299943e-17], 'true': [0.2040816326530619, nan]}, {'': [0.2317964222726128, -3.620292471603771e-18], 'true': [0.2317964222726128, nan]}, {'': [0.2257457672668637, 5.645201820127915e-18], 'true': [0.2257457672668637, nan]}, {'': [0.1920438957475996, 8.467802730191872e-18], 'true': [0.1920438957475996, nan]}, {'': [0.1920438957475993, 1.0675221390626506e-18], 'true': [0.1920438957475993, nan], 'true,true': [0.1920438957475993, nan], 'true,true,true': [0.1920438957475993, nan]}, {'': [0.20408163265306115, 5.843279076974508e-18], 'true': [0.20408163265306115, nan]}, {'': [0.22222222222222213, -3.142140635731575e-18], 'true': [0.22222222222222213, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.719473412210955;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.12544463852839158;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 1,05e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.5553664367462842;  // std dev = 1,40e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.11231637819360632;  // std dev = 2,98e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.4175135841583102;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.10159632948783628;  // std dev = 2,47e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926093;  // std dev = 1,18e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.09269127618926107;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839682;  // std dev = 1,67e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.08518475138839679;  // std dev = 1,83e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253542;  // std dev = 5,96e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.07877675473109172;  // std dev = 2,69e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.17709649774527753;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.07324622576333704;  // std dev = 1,29e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.1527438580936709;  // std dev = 3,94e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.06842697784420268;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1340070300080111;  // std dev = 1,83e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.06419184008202625;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.742 seconds
Total inference time: 1.44 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 0.999766
   AUC PR    = 0.97561
   CLL	      = -0.06448
   Precision = 0.97561 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.987654


Total scoring time: 1.23 seconds
Refined model CLL: -0.06448


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 5.571999999999999 seconds
Total inference time: 1.44 seconds
AUC ROC: 0.985041
Total revision time: 5.571999999999999
Best scored revision CLL: -0.06448


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 09:05:58
{'parameter_0.2': {'F1': 0.309835, 'Inference time': 1.529, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.144, 'CLL': -0.291143}, 'F1': 0.770563, 'Inference time': 1.44, 'Precision': [0.626761, 0.5], 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'Learning time': 5.571999999999999, 'CLL': -0.124249}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else if ( female(A) )
%   | then return 0.8025933795439567;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return 0.8581489350995121;  // std dev = 8,43e-08, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839144;  // std dev = 0,000, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else if ( female(A) )
%   | then return 0.6749928282743806;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return 0.6778067455442877;  // std dev = 0,200, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360622;  // std dev = 6,50e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else if ( female(A) )
%   | then return 0.5799123989010087;  // std dev = 5,96e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.48563021390583233;  // std dev = 0,271, 25,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1015963294878362;  // std dev = 5,27e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else if ( female(A) )
%   | then return 0.38042314962764384;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return 0.40316241759392324;  // std dev = 0,200, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926107;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.34743332297536517;  // std dev = 0,009, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.6532882486333275;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839679;  // std dev = 1,67e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else if ( female(A) )
%   | then return 0.27183051210568093;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.2424745626113797;  // std dev = 0,153, 24,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.22572495270448067;  // std dev = 0,023, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.5532805990596105;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A) )
%   | then return -0.07877675473109168;  // std dev = 3,73e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return -0.14656301820659445;  // std dev = 0,166, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.188724626529177;  // std dev = 0,020, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.4159683568001123;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07864671799072806;  // std dev = 0,441, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06748680918409453;  // std dev = 0,012, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.16151058934977278;  // std dev = 0,018, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.32199427031613004;  // std dev = 0,008, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.14081555250755534;  // std dev = 0,016, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.06364311760559807;  // std dev = 0,004, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( actor(B) )
%   | then return -0.0635819642284428;  // std dev = 0,008, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return -0.2580871409641887;  // std dev = 0,008, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.156984
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.985 seconds
Total inference time: 1.5 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 09:06:01
{'F1': 0.770563, 'Recall': 1.0, 'Inference time': 1.5, 'Precision': [0.626761, 0.5], 'Learning time': 1.985, 'AUC PR': 1.0, 'CLL': -0.156984, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048763;  // std dev = 8,69e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.193993
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.745 seconds
Total inference time: 0.881 seconds
AUC ROC: 0.985041


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 09:06:03
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.881, 'Precision': [nan, 0.5], 'Learning time': 0.745, 'AUC PR': 0.626761, 'CLL': -0.193993, 'AUC ROC': 0.985041}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.47178529873587466;  // std dev = 0,487, 132,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 7,60e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.4544795983358213;  // std dev = 5,217, 122,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=81 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283913;  // std dev = 0,000, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3433175760080561;  // std dev = 0,481, 127,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360618;  // std dev = 9,06e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2623929882269284;  // std dev = 0,482, 128,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.194514844710073;  // std dev = 0,483, 129,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926078;  // std dev = 7,88e-08, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.21664501456529964;  // std dev = 0,459, 116,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,96e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12821156526612656;  // std dev = 0,472, 122,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109154;  // std dev = 7,38e-08, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.055653389527087156;  // std dev = 5,525, 130,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=81 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333721;  // std dev = 2,11e-08, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07750726623717921;  // std dev = 0,474, 123,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420264;  // std dev = 5,48e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.028136814694108333;  // std dev = 0,483, 129,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.268766
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.545 seconds
Total inference time: 1.557 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.86217
   AUC PR    = 0.064286
   CLL	      = -0.30594
   Precision = 0.064286 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.120805


Total scoring time: 1.677 seconds
Parameter learned model CLL: -0.30594


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.6e-08, 113, 0], 'true,true': [0.487, 51, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 121, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [5.217, 41, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.06e-08, 117, 0], 'true,true': [0.481, 46, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 108, 0], 'true,true': [0.482, 47, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.88e-08, 132, 0], 'true,true': [0.483, 48, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.96e-08, 109, 0], 'true,true': [0.459, 35, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.38e-08, 130, 0], 'true,true': [0.472, 41, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [5.525, 49, 81], 'false': [2.11e-08, 130, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.48e-08, 117, 0], 'true,true': [0.474, 42, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 121, 0], 'true,true': [0.483, 48, 81], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23708677685950538, 5.1089909097794814e-17], 'true': [0.23708677685950538, nan]}, {'': [0.22312550389680363, -3.670158759091427e-18], 'true': [0.22312550389680363, nan], 'true,true': [0.22312550389680363, nan]}, {'': [0.23101246202492393, 7.021923403612101e-17], 'true': [0.23101246202492393, nan]}, {'': [0.23236083984374972, -2.05596856412066e-18], 'true': [0.23236083984374972, nan]}, {'': [0.23363980530016276, 4.710037074167331e-17], 'true': [0.23363980530016276, nan]}, {'': [0.2106866825208098, 3.2593703475233955e-17], 'true': [0.2106866825208098, nan]}, {'': [0.22312550389680186, 4.18468678512559e-17], 'true': [0.22312550389680186, nan]}, {'': [0.23485207100591718, 3.416070845000482e-18], 'true': [0.23485207100591718, nan], 'true,true': [0.23485207100591718, nan], 'true,true,true': [0.23485207100591718, nan]}, {'': [0.22486615110053498, 2.5620531337503614e-17], 'true': [0.22486615110053498, nan]}, {'': [0.23363980530016254, -1.880956364034356e-17], 'true': [0.23363980530016254, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839122;  // std dev = 5,37e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0.7194734122109537;  // std dev = 2,53e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.1254446385283913;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1123163781936064;  // std dev = 0,000, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return 0.5553664367462836;  // std dev = 3,42e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.11231637819360618;  // std dev = 1,00e-07, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783616;  // std dev = 5,27e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0.4175135841583104;  // std dev = 8,43e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.10159632948783641;  // std dev = 0,000, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601501;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.09269127618926083;  // std dev = 7,45e-08, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839683;  // std dev = 3,65e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.0851847513883968;  // std dev = 7,45e-08, 149,000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.07877675473109154;  // std dev = 7,52e-08, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,05e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0.17709649774527716;  // std dev = 3,65e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.07324622576333718;  // std dev = 0,000, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367116;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.06842697784420271;  // std dev = 9,13e-09, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.06842697784420265;  // std dev = 5,16e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202623;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.1340070300080109;  // std dev = 5,58e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.06419184008202626;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.902 seconds
Total inference time: 1.428 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 0.999766
   AUC PR    = 0.975904
   CLL	      = -0.064494
   Precision = 0.975904 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.987805


Total scoring time: 1.872 seconds
Refined model CLL: -0.064494


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 6.9959999999999996 seconds
Total inference time: 1.428 seconds
AUC ROC: 0.985041
Total revision time: 6.9959999999999996
Best scored revision CLL: -0.064494


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 09:06:14
{'F1': 0.770563, 'Inference time': 1.428, 'Precision': [0.626761, 0.5], 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'parameter_0.4': {'F1': 0.309835, 'Inference time': 1.557, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.545, 'CLL': -0.268766}, 'Recall': 1.0, 'Learning time': 6.9959999999999996, 'CLL': -0.124249}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.14185106490048807;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109537;  // std dev = 2,53e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.12544463852839138;  // std dev = 2,11e-08, 163,000 (wgt'ed) examples reached here.  /* #neg=163 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462836;  // std dev = 3,42e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.11231637819360628;  // std dev = 8,82e-08, 154,000 (wgt'ed) examples reached here.  /* #neg=154 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583104;  // std dev = 8,43e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.1015963294878365;  // std dev = 0,000, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601501;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0926912761892607;  // std dev = 7,88e-08, 164,000 (wgt'ed) examples reached here.  /* #neg=164 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839678;  // std dev = 6,50e-08, 149,000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109155;  // std dev = 7,67e-08, 156,000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333678;  // std dev = 8,94e-08, 158,000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527716;  // std dev = 3,65e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367116;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06842697784420264;  // std dev = 6,41e-08, 150,000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080109;  // std dev = 5,58e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06419184008202626;  // std dev = 0,000, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066789
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.268 seconds
Total inference time: 1.466 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 09:06:18
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.466, 'Precision': [1.0, 0.5], 'Learning time': 2.268, 'AUC PR': 1.0, 'CLL': -0.066789, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048813;  // std dev = 0,000, 156,000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.193993
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.887 seconds
Total inference time: 0.898 seconds
AUC ROC: 0.985041


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 09:06:20
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.898, 'Precision': [nan, 0.5], 'Learning time': 0.887, 'AUC PR': 0.626761, 'CLL': -0.193993, 'AUC ROC': 0.985041}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.500254198257404;  // std dev = 0,479, 190,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048818;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #neg=163 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.4347283689964366;  // std dev = 6,544, 188,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283914;  // std dev = 0,000, 164,000 (wgt'ed) examples reached here.  /* #neg=164 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3391245394610061;  // std dev = 0,481, 192,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360649;  // std dev = 2,98e-08, 177,000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2672681416846396;  // std dev = 0,480, 191,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878365;  // std dev = 0,000, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1623374109708238;  // std dev = 0,490, 204,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926061;  // std dev = 8,56e-08, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.156177606711463;  // std dev = 0,482, 193,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,74e-08, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1409458857245195;  // std dev = 0,475, 186,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109148;  // std dev = 8,56e-08, 162,000 (wgt'ed) examples reached here.  /* #neg=162 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.15110847518104847;  // std dev = 6,038, 174,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=122 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333681;  // std dev = 8,23e-08, 151,000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.025976260302508665;  // std dev = 0,487, 199,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 7,45e-08, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06608791093921566;  // std dev = 0,474, 185,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 174,000 (wgt'ed) examples reached here.  /* #neg=174 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.270025
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.698 seconds
Total inference time: 1.77 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.86251
   AUC PR    = 0.064687
   CLL	      = -0.307156
   Precision = 0.064687 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121514


Total scoring time: 1.83 seconds
Parameter learned model CLL: -0.307156


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 163, 0], 'true,true': [0.479, 68, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 164, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.544, 66, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [2.98e-08, 177, 0], 'true,true': [0.481, 70, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 173, 0], 'true,true': [0.48, 69, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.56e-08, 186, 0], 'true,true': [0.49, 82, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.74e-08, 186, 0], 'true,true': [0.482, 71, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.56e-08, 162, 0], 'true,true': [0.475, 64, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [6.038, 52, 122], 'false': [8.23e-08, 151, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.45e-08, 176, 0], 'true,true': [0.487, 77, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 174, 0], 'true,true': [0.474, 63, 122], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22980609418282943, -1.5801947344358056e-16], 'true': [0.22980609418282943, nan]}, {'': [0.22781801720235959, 0.0], 'true': [0.22781801720235959, nan], 'true,true': [0.22781801720235959, nan]}, {'': [0.23166232638888684, 5.017957173447035e-18], 'true': [0.23166232638888684, nan]}, {'': [0.23075025355664508, -7.957667922168752e-17], 'true': [0.23075025355664508, nan]}, {'': [0.24038831218761925, 3.9395010551215234e-17], 'true': [0.24038831218761925, nan]}, {'': [0.23254315552095356, 3.223228136008519e-17], 'true': [0.23254315552095356, nan]}, {'': [0.22569083130997844, 4.5231308410654523e-17], 'true': [0.22569083130997844, nan]}, {'': [0.20953890870656688, 4.485006920671162e-17], 'true': [0.20953890870656688, nan], 'true,true': [0.20953890870656688, nan], 'true,true,true': [0.20953890870656688, nan]}, {'': [0.23721623191333555, 3.154042683594195e-17], 'true': [0.23721623191333555, nan]}, {'': [0.22457268078889667, -5.742532885992189e-18], 'true': [0.22457268078889667, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 6,99e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.14185106490048835;  // std dev = 0,000, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839144;  // std dev = 0,000, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0.7194734122109553;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.12544463852839144;  // std dev = 0,000, 166,000 (wgt'ed) examples reached here.  /* #neg=166 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,69e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.11609270984201657;  // std dev = 0,330, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.11231637819360647;  // std dev = 3,65e-08, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10125216485313622;  // std dev = 4,94e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0.4175135841583093;  // std dev = 3,53e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.10159632948783653;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09240303553366247;  // std dev = 1,49e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0.3207118471601499;  // std dev = 2,19e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.0926912761892606;  // std dev = 8,69e-08, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08494006982471473;  // std dev = 5,05e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0.2551722425694898;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.08518475138839678;  // std dev = 5,96e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325354;  // std dev = 1,93e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.07856661048343952;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.07877675473109148;  // std dev = 8,30e-08, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07306389569671079;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0.1770964977452781;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.07324622576333673;  // std dev = 9,83e-08, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06826735721531288;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0.1527438580936714;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.06842697784420262;  // std dev = 7,81e-08, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080111;  // std dev = 5,16e-08, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else if ( actor(A) )
%   | | then return -0.06405098800505504;  // std dev = 1,39e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.15198829552490395;  // std dev = 0,233, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06419184008202626;  // std dev = 0,000, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.101693
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 2.511 seconds
Total inference time: 1.613 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064785
   Precision = 0.945736 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.972112


Total scoring time: 1.849 seconds
Refined model CLL: -0.064785


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.101693
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 7.888 seconds
Total inference time: 1.613 seconds
AUC ROC: 1.0
Total revision time: 7.888
Best scored revision CLL: -0.064785


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 09:06:32
{'F1': 0.770563, 'Inference time': 1.613, 'Precision': [0.626761, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.309835, 'Inference time': 1.77, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.698, 'CLL': -0.270025}, 'Recall': 1.0, 'Learning time': 7.888, 'CLL': -0.101693}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.1418510649004884;  // std dev = 0,000, 207,000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.7022301866856622;  // std dev = 0,119, 49,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | else return 0.6972387266651817;  // std dev = 0,135, 76,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=74 */
%   else return -0.1254446385283919;  // std dev = 0,000, 262,000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360689;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #neg=259 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5603661349039565;  // std dev = 0,007, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.22392343611098775;  // std dev = 0,001, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.42123218886300007;  // std dev = 0,007, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.18724977762898432;  // std dev = 0,000717, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.10155243973219386;  // std dev = 0,010, 222,000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.30322894081840585;  // std dev = 0,095, 50,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | else return 0.31721034869425263;  // std dev = 0,056, 75,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   else return -0.09261342732742939;  // std dev = 0,013, 220,000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2590994079045126;  // std dev = 0,009, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.20761030544800063;  // std dev = 0,001, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.08551280101157949;  // std dev = 0,069, 217,000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07876178384077671;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2125281508140371;  // std dev = 0,008, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.17520526412382653;  // std dev = 0,002, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17912592392946822;  // std dev = 0,007, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.15128024498895995;  // std dev = 0,002, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.07317474916296728;  // std dev = 0,013, 221,000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1542817070802033;  // std dev = 0,006, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.1326685525420227;  // std dev = 0,002, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06836130861419709;  // std dev = 0,012, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1352065062078821;  // std dev = 0,006, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.1184560732399993;  // std dev = 0,000838, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06413892991856092;  // std dev = 0,011, 230,000 (wgt'ed) examples reached here.  /* #neg=230 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.075515
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.668 seconds
Total inference time: 1.444 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 09:06:36
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.444, 'Precision': [1.0, 0.5], 'Learning time': 2.668, 'AUC PR': 1.0, 'CLL': -0.075515, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.14185106490048843;  // std dev = 0,000, 239,000 (wgt'ed) examples reached here.  /* #neg=239 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.025 seconds
Total inference time: 0.937 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 09:06:38
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.937, 'Precision': [nan, 0.5], 'Learning time': 1.025, 'AUC PR': 1.0, 'CLL': -0.188432, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.48507201202258565;  // std dev = 0,484, 260,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048802;  // std dev = 0,000, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.4351620150132674;  // std dev = 7,587, 252,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=163 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839183;  // std dev = 0,000, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3434924725947604;  // std dev = 0,481, 256,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360664;  // std dev = 0,000, 205,000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.23915406915532744;  // std dev = 0,488, 268,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783655;  // std dev = 0,000, 221,000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.22056358410779828;  // std dev = 0,478, 252,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926047;  // std dev = 1,41e-07, 267,000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.18443574223535278;  // std dev = 0,472, 245,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 8,94e-08, 245,000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11478843581781371;  // std dev = 0,479, 254,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109146;  // std dev = 6,50e-08, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.08128053590247958;  // std dev = 7,695, 256,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=163 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333663;  // std dev = 1,30e-07, 222,000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.03968677443101651;  // std dev = 0,487, 265,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 7,74e-08, 232,000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08295939442260666;  // std dev = 0,471, 244,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 1,49e-08, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.268099
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 2.088 seconds
Total inference time: 1.454 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.860182
   AUC PR    = 0.063796
   CLL	      = -0.308396
   Precision = 0.063796 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.119941


Total scoring time: 1.973 seconds
Parameter learned model CLL: -0.308396


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 276, 0], 'true,true': [0.484, 97, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 237, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.587, 89, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 205, 0], 'true,true': [0.481, 93, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 221, 0], 'true,true': [0.488, 105, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.41e-07, 267, 0], 'true,true': [0.478, 89, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.94e-08, 245, 0], 'true,true': [0.472, 82, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.5e-08, 226, 0], 'true,true': [0.479, 91, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [7.695, 93, 163], 'false': [1.3e-07, 222, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.74e-08, 232, 0], 'true,true': [0.487, 102, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.49e-08, 226, 0], 'true,true': [0.471, 81, 163], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2338905325443838, -3.8616453030440226e-17], 'true': [0.2338905325443838, nan]}, {'': [0.2284423028470691, -5.808761816604195e-17], 'true': [0.2284423028470691, nan], 'true,true': [0.2284423028470691, nan]}, {'': [0.23130798339843678, -4.982464305634849e-17], 'true': [0.23130798339843678, nan]}, {'': [0.2382908220093562, -8.03781375294231e-17], 'true': [0.2382908220093562, nan]}, {'': [0.2284423028470645, 7.484649604214538e-17], 'true': [0.2284423028470645, nan]}, {'': [0.22267388588088488, 3.2626962356331134e-17], 'true': [0.22267388588088488, nan]}, {'': [0.22991195982391804, 1.8667466785732722e-17], 'true': [0.22991195982391804, nan]}, {'': [0.23130798339843678, 7.601527015451522e-17], 'true': [0.23130798339843678, nan], 'true,true': [0.23130798339843678, nan], 'true,true,true': [0.23130798339843678, nan]}, {'': [0.23675329298682832, 2.584139798696485e-17], 'true': [0.23675329298682832, nan]}, {'': [0.22176498253157856, 9.824982518806695e-19], 'true': [0.22176498253157856, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8,69e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.14185106490048846;  // std dev = 0,000, 229,000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109564;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.1271871323403089;  // std dev = 0,154, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.12544463852839177;  // std dev = 0,000, 228,000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11214276642969535;  // std dev = 6,99e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0.5553664367462833;  // std dev = 5,53e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.11231637819360667;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830914;  // std dev = 4,38e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.10451928692203397;  // std dev = 0,271, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else return -0.10159632948783658;  // std dev = 0,000, 238,000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601493;  // std dev = 3,63e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.09494562086615468;  // std dev = 0,257, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.09269127618926049;  // std dev = 6,99e-08, 225,000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694906;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.08692203524116708;  // std dev = 0,243, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.08518475138839678;  // std dev = 8,69e-08, 232,000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253515;  // std dev = 2,65e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.08052910989928558;  // std dev = 0,231, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.07877675473109143;  // std dev = 6,66e-08, 236,000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07692080088992855;  // std dev = 0,309, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.07324622576333674;  // std dev = 1,22e-07, 242,000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.06998547265060678;  // std dev = 0,209, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.06842697784420261;  // std dev = 6,66e-08, 223,000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06326884511909657;  // std dev = 3,16e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0.1340070300080108;  // std dev = 9,42e-08, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.06419184008202626;  // std dev = 1,05e-08, 228,000 (wgt'ed) examples reached here.  /* #neg=228 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07327
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.997 seconds
Total inference time: 1.403 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063669
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.45 seconds
Refined model CLL: -0.063669


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07327
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.508 seconds
Total inference time: 1.403 seconds
AUC ROC: 1.0
Total revision time: 9.508
Best scored revision CLL: -0.063669


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 09:06:51
{'F1': 1.0, 'Inference time': 1.403, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.309835, 'Inference time': 1.454, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 2.088, 'CLL': -0.268099}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 9.508, 'CLL': -0.07327}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.1418510649004879;  // std dev = 0,000, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109564;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.12544463852839205;  // std dev = 0,000, 334,000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 5,53e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.11231637819360685;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830914;  // std dev = 4,38e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.10159632948783658;  // std dev = 0,000, 325,000 (wgt'ed) examples reached here.  /* #neg=325 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601493;  // std dev = 3,63e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.09269127618926047;  // std dev = 1,25e-07, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839678;  // std dev = 1,13e-07, 339,000 (wgt'ed) examples reached here.  /* #neg=339 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694906;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.08518475138839685;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253515;  // std dev = 2,65e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.07877675473109141;  // std dev = 4,47e-08, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.07324622576333702;  // std dev = 9,19e-08, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.06842697784420301;  // std dev = 0,000, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 9,42e-08, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.06434264315412952;  // std dev = 0,046, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066782
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.008 seconds
Total inference time: 1.521 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 09:06:56
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.521, 'Precision': [1.0, 0.5], 'Learning time': 3.008, 'AUC PR': 1.0, 'CLL': -0.066782, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.14185106490048793;  // std dev = 0,000, 309,000 (wgt'ed) examples reached here.  /* #neg=309 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.166 seconds
Total inference time: 0.908 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 09:06:58
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.908, 'Precision': [nan, 0.5], 'Learning time': 1.166, 'AUC PR': 1.0, 'CLL': -0.188432, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.527001394115902;  // std dev = 0,471, 305,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048804;  // std dev = 0,000, 271,000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.456752316387321;  // std dev = 8,136, 302,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=204 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.125444638528392;  // std dev = 0,000, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.35150346723893106;  // std dev = 0,474, 310,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360675;  // std dev = 0,000, 309,000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2964129480420252;  // std dev = 0,466, 299,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 291,000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2021775570208033;  // std dev = 0,474, 309,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926042;  // std dev = 1,56e-07, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11923119477615939;  // std dev = 0,483, 325,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,07e-07, 318,000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1373015262907926;  // std dev = 0,468, 302,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 5,16e-08, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.09896337203292908;  // std dev = 8,192, 304,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=204 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333699;  // std dev = 9,54e-08, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.05772143711688867;  // std dev = 0,476, 312,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420293;  // std dev = 0,000, 286,000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.035628384344230594;  // std dev = 0,478, 316,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820259;  // std dev = 1,28e-07, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.274371
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 2.265 seconds
Total inference time: 1.442 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.861638
   AUC PR    = 0.064496
   CLL	      = -0.314835
   Precision = 0.064496 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121176


Total scoring time: 3.226 seconds
Parameter learned model CLL: -0.314835


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 271, 0], 'true,true': [0.471, 101, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 293, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.136, 98, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 309, 0], 'true,true': [0.474, 106, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 291, 0], 'true,true': [0.466, 95, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.56e-07, 300, 0], 'true,true': [0.474, 105, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.07e-07, 318, 0], 'true,true': [0.483, 121, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.16e-08, 281, 0], 'true,true': [0.468, 98, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [8.192, 100, 204], 'false': [9.54e-08, 303, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 286, 0], 'true,true': [0.476, 108, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.28e-07, 312, 0], 'true,true': [0.478, 112, 204], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22148884708412184, -5.243857828487824e-17], 'true': [0.22148884708412184, nan]}, {'': [0.2192009122406908, -8.184579294164976e-17], 'true': [0.2192009122406908, nan], 'true,true': [0.2192009122406908, nan]}, {'': [0.22501560874089438, -6.467318590049455e-17], 'true': [0.22501560874089438, nan]}, {'': [0.21677609870135764, -5.493887132165723e-17], 'true': [0.21677609870135764, nan]}, {'': [0.22433782637383126, 8.141635513917814e-17], 'true': [0.22433782637383126, nan]}, {'': [0.2336946745562129, 3.6309180679564866e-17], 'true': [0.2336946745562129, nan]}, {'': [0.21920091224069013, 9.482331882919487e-18], 'true': [0.21920091224069013, nan]}, {'': [0.2207409972299169, 3.004563961031777e-17], 'true': [0.2207409972299169, nan], 'true,true': [0.2207409972299169, nan], 'true,true,true': [0.2207409972299169, nan]}, {'': [0.22633136094674633, -4.5030024775006347e-17], 'true': [0.22633136094674633, nan]}, {'': [0.22880948565934867, 5.2664425527090757e-17], 'true': [0.22880948565934867, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 6,32e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.14185106490048788;  // std dev = 7,88e-08, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1281184652397819;  // std dev = 0,217, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.12544463852839208;  // std dev = 0,000, 335,000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11205007011533585;  // std dev = 6,66e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.1123163781936069;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10137679506707666;  // std dev = 0,000, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783663;  // std dev = 0,000, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09250743149750561;  // std dev = 0,000, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return -0.09269127618926044;  // std dev = 1,30e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08502870196706461;  // std dev = 0,000, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.07864274138778166;  // std dev = 0,000, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else return -0.12354444561664192;  // std dev = 0,149, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.07877675473109141;  // std dev = 3,33e-08, 317,000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07299299415852693;  // std dev = 0,007, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07324622576333699;  // std dev = 9,42e-08, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06817171070003074;  // std dev = 0,007, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.06842697784420299;  // std dev = 0,000, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06391620295369398;  // std dev = 0,007, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202589;  // std dev = 1,31e-07, 315,000 (wgt'ed) examples reached here.  /* #neg=315 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097259
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.107 seconds
Total inference time: 1.457 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064931
   Precision = 0.93578 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966825


Total scoring time: 2.042 seconds
Refined model CLL: -0.064931


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097259
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 10.639999999999999 seconds
Total inference time: 1.457 seconds
AUC ROC: 1.0
Total revision time: 10.639999999999999
Best scored revision CLL: -0.064931


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 09:07:13
{'parameter_1.0': {'F1': 0.309835, 'Inference time': 1.442, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 2.265, 'CLL': -0.274371}, 'F1': 0.770563, 'Inference time': 1.457, 'Precision': [0.626761, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.639999999999999, 'CLL': -0.097259}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.14185106490048757;  // std dev = 2,23e-07, 372,000 (wgt'ed) examples reached here.  /* #neg=372 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.12544463852839224;  // std dev = 0,000, 384,000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360636;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.11231637819360654;  // std dev = 0,000, 370,000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.10159632948783628;  // std dev = 1,15e-07, 386,000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926093;  // std dev = 1,05e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.09269127618926072;  // std dev = 1,71e-07, 379,000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839682;  // std dev = 1,67e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.08518475138839678;  // std dev = 1,25e-07, 414,000 (wgt'ed) examples reached here.  /* #neg=414 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.07877675473109144;  // std dev = 1,01e-07, 405,000 (wgt'ed) examples reached here.  /* #neg=405 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.0732462257633372;  // std dev = 2,98e-08, 395,000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.06842697784420335;  // std dev = 0,000, 404,000 (wgt'ed) examples reached here.  /* #neg=404 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.0641918400820257;  // std dev = 1,76e-07, 399,000 (wgt'ed) examples reached here.  /* #neg=399 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.088 seconds
Total inference time: 1.351 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 09:07:17
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.351, 'Precision': [1.0, 0.5], 'Learning time': 3.088, 'AUC PR': 1.0, 'CLL': -0.065435, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048735;  // std dev = 2,97e-07, 394,000 (wgt'ed) examples reached here.  /* #neg=394 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.193993
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.171 seconds
Total inference time: 0.864 seconds
AUC ROC: 0.985041


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 09:07:20
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.864, 'Precision': [nan, 0.5], 'Learning time': 1.171, 'AUC PR': 0.626761, 'CLL': -0.193993, 'AUC ROC': 0.985041}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5418224044872683;  // std dev = 0,465, 98,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 7,88e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.4229430007080065;  // std dev = 4,882, 104,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283914;  // std dev = 0,000, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.36082695500901546;  // std dev = 0,473, 101,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360621;  // std dev = 7,15e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.32919241109307845;  // std dev = 0,452, 94,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783626;  // std dev = 4,59e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.18047091438529217;  // std dev = 0,479, 104,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 1,49e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.10586589049689984;  // std dev = 0,487, 109,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 4,08e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13477804121609252;  // std dev = 0,470, 100,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109158;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.07569009405488734;  // std dev = 4,882, 104,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=67 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06348241024643449;  // std dev = 0,477, 103,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 4,83e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06106288401875257;  // std dev = 0,473, 101,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.327404
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.493 seconds
Total inference time: 1.304 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.868368
   AUC PR    = 0.093445
   CLL	      = -0.303358
   Precision = 0.093445 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.170918


Total scoring time: 1.399 seconds
Parameter learned model CLL: -0.303358


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.88e-08, 112, 0], 'true,true': [0.465, 31, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 93, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.882, 37, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.15e-08, 87, 0], 'true,true': [0.473, 34, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.59e-08, 96, 0], 'true,true': [0.452, 27, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.49e-08, 87, 0], 'true,true': [0.479, 37, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.08e-08, 97, 0], 'true,true': [0.487, 42, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.58e-08, 98, 0], 'true,true': [0.47, 33, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [4.882, 37, 67], 'false': [0.0, 107, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.83e-08, 100, 0], 'true,true': [0.477, 36, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 99, 0], 'true,true': [0.473, 34, 67], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2162640566430646, 5.551115123125783e-17], 'true': [0.2162640566430646, nan]}, {'': [0.22919748520710126, -1.4325458382260084e-17], 'true': [0.22919748520710126, nan], 'true,true': [0.22919748520710126, nan]}, {'': [0.2233114400548958, 5.870144727903127e-17], 'true': [0.2233114400548958, nan]}, {'': [0.20473064735174307, 2.1973164029039556e-17], 'true': [0.20473064735174307, nan]}, {'': [0.22919748520710165, 2.5522368382187506e-18], 'true': [0.22919748520710165, nan]}, {'': [0.2368487501052097, 1.7168397288017885e-17], 'true': [0.2368487501052097, nan]}, {'': [0.22109999999999977, 3.172065784643304e-17], 'true': [0.22109999999999977, nan]}, {'': [0.22919748520710076, -3.112774835397635e-18], 'true': [0.22919748520710076, nan], 'true,true': [0.22919748520710076, nan], 'true,true,true': [0.22919748520710076, nan]}, {'': [0.22735413328306167, 2.3314683517128286e-17], 'true': [0.22735413328306167, nan]}, {'': [0.22331144005489661, -1.4017967482640866e-17], 'true': [0.22331144005489661, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004877;  // std dev = 2,98e-08, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.14185106490048763;  // std dev = 8,43e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.12544463852839133;  // std dev = 0,000, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.1123163781936062;  // std dev = 8,16e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783628;  // std dev = 2,47e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.10159632948783633;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926105;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.09269127618926097;  // std dev = 4,47e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08771203610911642;  // std dev = 0,105, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.0851847513883968;  // std dev = 5,37e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07859354234458137;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.0787767547310916;  // std dev = 5,58e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07714140440702051;  // std dev = 0,136, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.0732462257633371;  // std dev = 0,000, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07137249632538446;  // std dev = 0,129, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420265;  // std dev = 4,53e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06364230306894245;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.06419184008202626;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064054
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.944 seconds
Total inference time: 1.245 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065615
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.269 seconds
Refined model CLL: -0.065615


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064054
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.105 seconds
Total inference time: 1.245 seconds
AUC ROC: 1.0
Total revision time: 6.105
Best scored revision CLL: -0.065615


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 09:07:29
{'parameter_0.2': {'F1': 0.140406, 'Inference time': 1.304, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 1.493, 'CLL': -0.327404}, 'F1': 1.0, 'Inference time': 1.245, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 6.105, 'CLL': -0.064054}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.12544463852839136;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360625;  // std dev = 6,66e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.10159632948783637;  // std dev = 0,000, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.0926912761892609;  // std dev = 6,32e-08, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839682;  // std dev = 6,05e-08, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.07877675473109164;  // std dev = 5,37e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.07324622576333724;  // std dev = 0,000, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.06842697784420268;  // std dev = 3,57e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06419184008202626;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.07 seconds
Total inference time: 1.151 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 09:07:32
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.151, 'Precision': [1.0, 0.5], 'Learning time': 2.07, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.777 seconds
Total inference time: 0.784 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 09:07:34
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.784, 'Precision': [nan, 0.5], 'Learning time': 0.777, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4962441731947472;  // std dev = 0,481, 210,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048835;  // std dev = 0,000, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.44656492610902154;  // std dev = 6,749, 203,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839155;  // std dev = 0,000, 184,000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.37544025324124175;  // std dev = 0,469, 199,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936067;  // std dev = 0,000, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2881611793706876;  // std dev = 0,470, 200,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783655;  // std dev = 0,000, 217,000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.20834530497106152;  // std dev = 0,474, 203,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926061;  // std dev = 8,43e-08, 178,000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.17998457709914845;  // std dev = 0,465, 196,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 6,83e-08, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13514164508512092;  // std dev = 0,465, 196,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109147;  // std dev = 7,45e-08, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.05034479197777789;  // std dev = 7,022, 212,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=134 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333668;  // std dev = 1,08e-07, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0179443306353405;  // std dev = 0,487, 219,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420261;  // std dev = 6,23e-08, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08542528172198754;  // std dev = 0,465, 196,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.328649
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.756 seconds
Total inference time: 1.064 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.870494
   AUC PR    = 0.094834
   CLL	      = -0.300731
   Precision = 0.094834 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173239


Total scoring time: 1.672 seconds
Parameter learned model CLL: -0.300731


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 189, 0], 'true,true': [0.481, 76, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 184, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.749, 69, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 216, 0], 'true,true': [0.469, 65, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 217, 0], 'true,true': [0.47, 66, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.43e-08, 178, 0], 'true,true': [0.474, 69, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [6.83e-08, 168, 0], 'true,true': [0.465, 62, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.45e-08, 197, 0], 'true,true': [0.465, 62, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [7.022, 78, 134], 'false': [1.08e-07, 185, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [6.23e-08, 191, 0], 'true,true': [0.487, 85, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 195, 0], 'true,true': [0.465, 62, 134], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23092970521542389, -2.2086976574553378e-16], 'true': [0.23092970521542389, nan]}, {'': [0.22436846319978956, -1.9308226515220113e-17], 'true': [0.22436846319978956, nan], 'true,true': [0.22436846319978956, nan]}, {'': [0.21994394080957383, -6.167905692361981e-17], 'true': [0.21994394080957383, nan]}, {'': [0.22109999999999846, -8.185976218434334e-17], 'true': [0.22109999999999846, nan]}, {'': [0.22436846319978668, 3.991813122247754e-17], 'true': [0.22436846319978668, nan]}, {'': [0.2162640566430658, 2.7755575615628914e-17], 'true': [0.2162640566430658, nan]}, {'': [0.2162640566430652, 2.817824935596844e-17], 'true': [0.2162640566430652, nan]}, {'': [0.2325560697757204, 6.301265815440077e-17], 'true': [0.2325560697757204, nan], 'true,true': [0.2325560697757204, nan], 'true,true,true': [0.2325560697757204, nan]}, {'': [0.23748462292279154, 2.0344400974806533e-17], 'true': [0.23748462292279154, nan]}, {'': [0.21626405664306564, -2.846725704167068e-18], 'true': [0.21626405664306564, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 6,66e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   else return -0.14185106490048852;  // std dev = 0,000, 225,000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1328294932550894;  // std dev = 0,262, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.1254446385283917;  // std dev = 0,000, 207,000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11396439950487283;  // std dev = 0,142, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.11231637819360656;  // std dev = 0,000, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10462196650358734;  // std dev = 0,185, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.10159632948783652;  // std dev = 0,000, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10275241838374584;  // std dev = 0,289, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.0926912761892605;  // std dev = 6,66e-08, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08690873952429237;  // std dev = 0,160, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08259813959411014;  // std dev = 0,210, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.07877675473109146;  // std dev = 8,16e-08, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07461142362100108;  // std dev = 0,141, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.07324622576333666;  // std dev = 1,15e-07, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07375222889876601;  // std dev = 0,206, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.06842697784420261;  // std dev = 5,67e-08, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06474445193025499;  // std dev = 0,126, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.06419184008202626;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063454
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.397 seconds
Total inference time: 1.365 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064303
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.853 seconds
Refined model CLL: -0.064303


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063454
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.677999999999999 seconds
Total inference time: 1.365 seconds
AUC ROC: 1.0
Total revision time: 7.677999999999999
Best scored revision CLL: -0.064303


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 09:07:45
{'F1': 1.0, 'Inference time': 1.365, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.140406, 'Inference time': 1.064, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 1.756, 'CLL': -0.328649}, 'Recall': 1.0, 'Learning time': 7.677999999999999, 'CLL': -0.063454}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.14185106490048835;  // std dev = 0,000, 261,000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.12544463852839174;  // std dev = 0,000, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.11231637819360664;  // std dev = 0,000, 218,000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783662;  // std dev = 0,000, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583106;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( actor(A) )
%   | | | then return 0.4175135841583106;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | | else return -0.10159632948783621;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926093;  // std dev = 1,05e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.09269127618926053;  // std dev = 7,30e-08, 265,000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694895;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.08518475138839678;  // std dev = 7,88e-08, 258,000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.07877675473109144;  // std dev = 5,96e-08, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.07324622576333682;  // std dev = 1,15e-07, 263,000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.06842697784420261;  // std dev = 6,66e-08, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801084;  // std dev = 8,43e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202622;  // std dev = 3,73e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.06419184008202626;  // std dev = 0,000, 243,000 (wgt'ed) examples reached here.  /* #neg=243 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.972 seconds
Total inference time: 1.177 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 09:07:49
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.177, 'Precision': [1.0, 0.5], 'Learning time': 2.972, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.14185106490048835;  // std dev = 0,000, 242,000 (wgt'ed) examples reached here.  /* #neg=242 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.048 seconds
Total inference time: 0.796 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 09:07:52
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.796, 'Precision': [nan, 0.5], 'Learning time': 1.048, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5428946978113729;  // std dev = 0,465, 295,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048807;  // std dev = 0,000, 270,000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.40977739921482936;  // std dev = 8,631, 320,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839202;  // std dev = 0,000, 309,000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.35161921213108116;  // std dev = 0,476, 310,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360696;  // std dev = 0,000, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2925466744414214;  // std dev = 0,470, 301,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19805242225139372;  // std dev = 0,478, 312,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926044;  // std dev = 1,25e-07, 269,000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14871329319419116;  // std dev = 0,478, 312,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1397459283617292;  // std dev = 0,468, 299,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109141;  // std dev = 5,96e-08, 338,000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.0812456655278269;  // std dev = 8,389, 310,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=202 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333698;  // std dev = 9,77e-08, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.057283529463367004;  // std dev = 0,478, 312,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420301;  // std dev = 0,000, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04558493685143014;  // std dev = 0,477, 311,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202605;  // std dev = 8,94e-08, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.325961
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.369 seconds
Total inference time: 1.128 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.868503
   AUC PR    = 0.093953
   CLL	      = -0.301867
   Precision = 0.093953 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.171769


Total scoring time: 2.551 seconds
Parameter learned model CLL: -0.301867


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 270, 0], 'true,true': [0.465, 93, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 309, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.631, 118, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 281, 0], 'true,true': [0.476, 108, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 303, 0], 'true,true': [0.47, 99, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.25e-07, 269, 0], 'true,true': [0.478, 110, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.01e-07, 293, 0], 'true,true': [0.478, 110, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.96e-08, 338, 0], 'true,true': [0.468, 97, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [8.389, 108, 202], 'false': [9.77e-08, 298, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 302, 0], 'true,true': [0.478, 110, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.94e-08, 282, 0], 'true,true': [0.477, 109, 202], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21586900316001625, -5.592234494408195e-17], 'true': [0.21586900316001625, nan]}, {'': [0.2327734375000027, -8.623091453399274e-17], 'true': [0.2327734375000027, nan], 'true,true': [0.2327734375000027, nan]}, {'': [0.2270135275754451, -1.1378798259503384e-16], 'true': [0.2270135275754451, nan]}, {'': [0.22072604055142567, -5.422871539423207e-17], 'true': [0.22072604055142567, nan]}, {'': [0.22826265614727134, 5.778112395818659e-17], 'true': [0.22826265614727134, nan]}, {'': [0.22826265614727148, 3.486024514181379e-17], 'true': [0.22826265614727148, nan]}, {'': [0.21916980794398347, 1.0510987215386097e-17], 'true': [0.21916980794398347, nan]}, {'': [0.22701352757544208, 3.203999332810855e-17], 'true': [0.22701352757544208, nan], 'true,true': [0.22701352757544208, nan], 'true,true,true': [0.22701352757544208, nan]}, {'': [0.22826265614727093, -5.881976289404803e-17], 'true': [0.22826265614727093, nan]}, {'': [0.22764446190589488, 2.834611977766357e-17], 'true': [0.22764446190589488, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.14185106490048766;  // std dev = 7,88e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.14185106490048774;  // std dev = 1,49e-07, 315,000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1254446385283914;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.125444638528392;  // std dev = 0,000, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360621;  // std dev = 8,30e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.1123163781936068;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783626;  // std dev = 4,71e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.10159632948783649;  // std dev = 0,000, 328,000 (wgt'ed) examples reached here.  /* #neg=328 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926096;  // std dev = 5,05e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.09269127618926044;  // std dev = 1,76e-07, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08518475138839683;  // std dev = 4,94e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.08518475138839678;  // std dev = 1,10e-07, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109162;  // std dev = 5,05e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.07877675473109143;  // std dev = 0,000, 323,000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333707;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.07324622576333698;  // std dev = 9,77e-08, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420268;  // std dev = 3,33e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.06842697784420292;  // std dev = 0,000, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.06419184008202598;  // std dev = 1,11e-07, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.963 seconds
Total inference time: 1.227 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06406
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.957 seconds
Refined model CLL: -0.06406


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.84 seconds
Total inference time: 1.227 seconds
AUC ROC: 1.0
Total revision time: 9.84
Best scored revision CLL: -0.06406


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 09:08:04
{'F1': 1.0, 'Inference time': 1.227, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.140406, 'Inference time': 1.128, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 2.369, 'CLL': -0.325961}, 'Recall': 1.0, 'Learning time': 9.84, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 2,79e-08, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.14185106490048774;  // std dev = 1,49e-07, 359,000 (wgt'ed) examples reached here.  /* #neg=359 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.1254446385283921;  // std dev = 0,000, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360643;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.11231637819360653;  // std dev = 0,000, 381,000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.10159632948783658;  // std dev = 0,000, 345,000 (wgt'ed) examples reached here.  /* #neg=345 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926096;  // std dev = 7,45e-09, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.0926912761892605;  // std dev = 1,79e-07, 360,000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08518475138839682;  // std dev = 1,83e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.08518475138839678;  // std dev = 1,12e-07, 391,000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109176;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.07877675473109147;  // std dev = 0,000, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.07324622576333714;  // std dev = 5,96e-08, 374,000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420318;  // std dev = 0,000, 363,000 (wgt'ed) examples reached here.  /* #neg=363 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.06419184008202594;  // std dev = 1,26e-07, 354,000 (wgt'ed) examples reached here.  /* #neg=354 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.473 seconds
Total inference time: 1.195 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 09:08:09
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.195, 'Precision': [1.0, 0.5], 'Learning time': 3.473, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 3,33e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.14185106490048766;  // std dev = 1,95e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.196 seconds
Total inference time: 0.802 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 09:08:12
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.802, 'Precision': [nan, 0.5], 'Learning time': 1.196, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5158506465909507;  // std dev = 0,474, 409,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004873;  // std dev = 3,01e-07, 408,000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.44085697183620015;  // std dev = 9,596, 409,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839224;  // std dev = 0,000, 389,000 (wgt'ed) examples reached here.  /* #neg=389 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.36665197271906375;  // std dev = 0,471, 403,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360618;  // std dev = 0,000, 407,000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.25288804918693875;  // std dev = 0,481, 423,000 (wgt'ed) examples reached here.  /* #neg=154 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783609;  // std dev = 1,76e-07, 377,000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.24368541315873;  // std dev = 0,463, 391,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892608;  // std dev = 1,65e-07, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16417113047479073;  // std dev = 0,471, 402,000 (wgt'ed) examples reached here.  /* #neg=133 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,21e-07, 373,000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.10073813217747093;  // std dev = 0,478, 416,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 9,19e-08, 367,000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.09182859607650048;  // std dev = 9,527, 406,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=269 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333771;  // std dev = 0,000, 418,000 (wgt'ed) examples reached here.  /* #neg=418 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04893485609126427;  // std dev = 0,479, 419,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420333;  // std dev = 0,000, 391,000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08140061002395886;  // std dev = 0,464, 392,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202564;  // std dev = 1,85e-07, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.332583
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.59 seconds
Total inference time: 1.244 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.869887
   AUC PR    = 0.094752
   CLL	      = -0.305265
   Precision = 0.094752 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173102


Total scoring time: 2.881 seconds
Parameter learned model CLL: -0.305265


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [3.01e-07, 408, 0], 'true,true': [0.474, 140, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 389, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.596, 140, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 407, 0], 'true,true': [0.471, 134, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.76e-07, 377, 0], 'true,true': [0.481, 154, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.65e-07, 390, 0], 'true,true': [0.463, 122, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.21e-07, 373, 0], 'true,true': [0.471, 133, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.19e-08, 367, 0], 'true,true': [0.478, 147, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [9.527, 137, 269], 'false': [0.0, 418, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 391, 0], 'true,true': [0.479, 150, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.85e-07, 383, 0], 'true,true': [0.464, 123, 269], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22513017019267326, 2.220446049250313e-16], 'true': [0.22513017019267326, nan]}, {'': [0.22513017019267553, -1.2786116067662472e-16], 'true': [0.22513017019267553, nan], 'true,true': [0.22513017019267553, nan]}, {'': [0.22194582812529073, -1.7458052475678137e-17], 'true': [0.22194582812529073, nan]}, {'': [0.23152200034650472, 8.245688246552887e-17], 'true': [0.23152200034650472, nan]}, {'': [0.21466369267600394, 6.946010718167646e-17], 'true': [0.21466369267600394, nan]}, {'': [0.22138684686022808, 3.928939390094388e-17], 'true': [0.22138684686022808, nan]}, {'': [0.22849828957100493, 2.2990994515398338e-17], 'true': [0.22849828957100493, nan]}, {'': [0.22357373389308344, -7.011934892369409e-17], 'true': [0.22357373389308344, nan], 'true,true': [0.22357373389308344, nan], 'true,true,true': [0.22357373389308344, nan]}, {'': [0.2298346443686254, -1.0960257992463182e-16], 'true': [0.2298346443686254, nan]}, {'': [0.21532043940024914, 8.928164271137029e-17], 'true': [0.21532043940024914, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.14185106490048735;  // std dev = 3,01e-07, 398,000 (wgt'ed) examples reached here.  /* #neg=398 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839116;  // std dev = 7,88e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.12544463852839222;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360621;  // std dev = 9,42e-08, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.11231637819360626;  // std dev = 0,000, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783645;  // std dev = 0,000, 154,000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.10159632948783608;  // std dev = 1,79e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926078;  // std dev = 8,02e-08, 155,000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.09269127618926086;  // std dev = 1,50e-07, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08518475138839682;  // std dev = 6,23e-08, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.08518475138839678;  // std dev = 1,25e-07, 392,000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109158;  // std dev = 6,83e-08, 140,000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.07877675473109143;  // std dev = 1,13e-07, 392,000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333714;  // std dev = 0,000, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.07324622576333768;  // std dev = 0,000, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420265;  // std dev = 5,67e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.06842697784420336;  // std dev = 0,000, 407,000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.06419184008202566;  // std dev = 1,81e-07, 377,000 (wgt'ed) examples reached here.  /* #neg=377 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.218 seconds
Total inference time: 1.333 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064058
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.344 seconds
Refined model CLL: -0.064058


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.033 seconds
Total inference time: 1.333 seconds
AUC ROC: 1.0
Total revision time: 11.033
Best scored revision CLL: -0.064058


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 09:08:26
{'F1': 1.0, 'Inference time': 1.333, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.140406, 'Inference time': 1.244, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 2.59, 'CLL': -0.332583}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 11.033, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 3,94e-08, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.14185106490048718;  // std dev = 2,89e-07, 466,000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839147;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.1254446385283923;  // std dev = 0,000, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360636;  // std dev = 0,000, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.11231637819360606;  // std dev = 0,000, 517,000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.1015963294878356;  // std dev = 3,26e-07, 557,000 (wgt'ed) examples reached here.  /* #neg=557 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.092691276189261;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.09269127618926139;  // std dev = 0,000, 503,000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839679;  // std dev = 1,43e-07, 508,000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109186;  // std dev = 1,71e-07, 477,000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333693;  // std dev = 1,50e-07, 496,000 (wgt'ed) examples reached here.  /* #neg=496 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17433536476540273;  // std dev = 0,431, 272,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=269 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15310152778441408;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.06868320230545703;  // std dev = 0,046, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1342861953035091;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06427451452307782;  // std dev = 0,029, 507,000 (wgt'ed) examples reached here.  /* #neg=507 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063869
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.22 seconds
Total inference time: 1.107 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 09:08:31
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.107, 'Precision': [1.0, 0.5], 'Learning time': 4.22, 'AUC PR': 1.0, 'CLL': -0.063869, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1418510649004877;  // std dev = 3,33e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.14185106490048735;  // std dev = 2,38e-07, 474,000 (wgt'ed) examples reached here.  /* #neg=474 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.242 seconds
Total inference time: 0.8 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 09:08:34
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.8, 'Precision': [nan, 0.5], 'Learning time': 1.242, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5099864592774577;  // std dev = 0,476, 517,000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.141851064900488;  // std dev = 0,000, 527,000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.4541296003607346;  // std dev = 10,546, 503,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283923;  // std dev = 0,000, 505,000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.34817676933764863;  // std dev = 0,477, 518,000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360575;  // std dev = 0,000, 524,000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2790573456199654;  // std dev = 0,474, 511,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783538;  // std dev = 3,51e-07, 501,000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2153598634042476;  // std dev = 0,473, 508,000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926143;  // std dev = 0,000, 493,000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.13178114341060135;  // std dev = 0,482, 532,000 (wgt'ed) examples reached here.  /* #neg=195 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,44e-07, 507,000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08605858794020166;  // std dev = 0,485, 543,000 (wgt'ed) examples reached here.  /* #neg=206 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109204;  // std dev = 0,000, 495,000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.0872270282873653;  // std dev = 10,967, 524,000 (wgt'ed) examples reached here.  /* #neg=187 #pos=337 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333663;  // std dev = 2,26e-07, 564,000 (wgt'ed) examples reached here.  /* #neg=564 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0670405666995151;  // std dev = 0,479, 523,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420357;  // std dev = 0,000, 509,000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06590335978180799;  // std dev = 0,474, 511,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202534;  // std dev = 2,46e-07, 519,000 (wgt'ed) examples reached here.  /* #neg=519 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.322204
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 3.136 seconds
Total inference time: 1.288 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.870352
   AUC PR    = 0.095252
   CLL	      = -0.295382
   Precision = 0.095252 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173935


Total scoring time: 2.39 seconds
Parameter learned model CLL: -0.295382


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 527, 0], 'true,true': [0.476, 180, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 505, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.546, 166, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 524, 0], 'true,true': [0.477, 181, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.51e-07, 501, 0], 'true,true': [0.474, 174, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 493, 0], 'true,true': [0.473, 171, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.44e-07, 507, 0], 'true,true': [0.482, 195, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 495, 0], 'true,true': [0.485, 206, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [10.967, 187, 337], 'false': [2.26e-07, 564, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 509, 0], 'true,true': [0.479, 186, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.46e-07, 519, 0], 'true,true': [0.474, 174, 337], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22694536625151315, -1.3145714750779842e-16], 'true': [0.22694536625151315, nan]}, {'': [0.22110675904809685, -1.2487260950239386e-16], 'true': [0.22110675904809685, nan], 'true,true': [0.22110675904809685, nan]}, {'': [0.22732591941086974, -5.084990952481633e-18], 'true': [0.22732591941086974, nan]}, {'': [0.22456255912009734, 2.464207591583182e-16], 'true': [0.22456255912009734, nan]}, {'': [0.22330507161014118, -2.5222105224750006e-17], 'true': [0.22330507161014118, nan]}, {'': [0.23218878964328088, 4.1168033260262216e-17], 'true': [0.23218878964328088, nan]}, {'': [0.23544933169181614, -3.588599675556062e-17], 'true': [0.23544933169181614, nan]}, {'': [0.2295138686556717, 9.055010484531418e-17], 'true': [0.2295138686556717, nan], 'true,true': [0.2295138686556717, nan], 'true,true,true': [0.2295138686556717, nan]}, {'': [0.22916034497256102, -1.1952892288695202e-16], 'true': [0.22916034497256102, nan]}, {'': [0.22456255912010306, 1.1637019757150003e-16], 'true': [0.22456255912010306, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048824;  // std dev = 0,000, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.14185106490048757;  // std dev = 1,19e-07, 486,000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.12544463852839233;  // std dev = 0,000, 489,000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360649;  // std dev = 2,11e-08, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.11231637819360576;  // std dev = 0,000, 517,000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783648;  // std dev = 0,000, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.1015963294878353;  // std dev = 3,76e-07, 524,000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926068;  // std dev = 7,88e-08, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.09269127618926135;  // std dev = 0,000, 476,000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 7,60e-08, 210,000 (wgt'ed) examples reached here.  /* #neg=210 */
%   else return -0.08518475138839678;  // std dev = 1,53e-07, 526,000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109157;  // std dev = 7,07e-08, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.07877675473109197;  // std dev = 1,49e-07, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333682;  // std dev = 8,23e-08, 178,000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.07324622576333692;  // std dev = 1,52e-07, 497,000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420264;  // std dev = 6,50e-08, 163,000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.0684269778442035;  // std dev = 0,000, 472,000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 187,000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.06419184008202544;  // std dev = 2,34e-07, 465,000 (wgt'ed) examples reached here.  /* #neg=465 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.586 seconds
Total inference time: 1.253 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064062
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.366 seconds
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.478 seconds
Total inference time: 1.253 seconds
AUC ROC: 1.0
Total revision time: 11.478
Best scored revision CLL: -0.064062


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 09:08:50
{'parameter_1.0': {'F1': 0.140406, 'Inference time': 1.288, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 3.136, 'CLL': -0.322204}, 'F1': 1.0, 'Inference time': 1.253, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 11.478, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048768;  // std dev = 5,37e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.14185106490048863;  // std dev = 0,000, 625,000 (wgt'ed) examples reached here.  /* #neg=625 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.12544463852839233;  // std dev = 0,000, 620,000 (wgt'ed) examples reached here.  /* #neg=620 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360568;  // std dev = 0,000, 574,000 (wgt'ed) examples reached here.  /* #neg=574 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462833;  // std dev = 5,46e-07, 159,000 (wgt'ed) examples reached here.  /* #pos=159 */
%   | | else if ( actor(A) )
%   | | | then return 0.5553664367462833;  // std dev = 5,90e-07, 178,000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | | else return -0.11231637819360621;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.11231637819360625;  // std dev = 4,34e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783627;  // std dev = 2,79e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.10159632948783537;  // std dev = 3,85e-07, 616,000 (wgt'ed) examples reached here.  /* #neg=616 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.09269127618926182;  // std dev = 0,000, 618,000 (wgt'ed) examples reached here.  /* #neg=618 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 3,95e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.08518475138839678;  // std dev = 1,52e-07, 627,000 (wgt'ed) examples reached here.  /* #neg=627 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253465;  // std dev = 2,53e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0787767547310917;  // std dev = 2,79e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.07877675473109234;  // std dev = 0,000, 577,000 (wgt'ed) examples reached here.  /* #neg=577 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2,80e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.07324622576333671;  // std dev = 2,13e-07, 635,000 (wgt'ed) examples reached here.  /* #neg=635 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0684269778442027;  // std dev = 1,39e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.06842697784420368;  // std dev = 0,000, 630,000 (wgt'ed) examples reached here.  /* #neg=630 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.06419184008202534;  // std dev = 2,50e-07, 668,000 (wgt'ed) examples reached here.  /* #neg=668 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.422 seconds
Total inference time: 1.159 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 09:08:56
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.159, 'Precision': [1.0, 0.5], 'Learning time': 4.422, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048766;  // std dev = 5,96e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.14185106490048857;  // std dev = 0,000, 618,000 (wgt'ed) examples reached here.  /* #neg=618 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.543 seconds
Total inference time: 0.74 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 09:08:58
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.74, 'Precision': [nan, 0.5], 'Learning time': 1.543, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4407576307516872;  // std dev = 0,493, 115,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048774;  // std dev = 4,21e-08, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.4524992803740221;  // std dev = 4,795, 102,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839108;  // std dev = 7,74e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.35656400515561554;  // std dev = 0,479, 104,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360624;  // std dev = 6,99e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.40429208133289574;  // std dev = 0,421, 87,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783619;  // std dev = 5,48e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19326994732733035;  // std dev = 0,475, 102,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926104;  // std dev = 2,98e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16492415631626262;  // std dev = 0,468, 99,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,87e-08, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08521693479427986;  // std dev = 0,481, 105,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109164;  // std dev = 4,83e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.08302560952567055;  // std dev = 4,795, 102,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=67 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 4,21e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.0321625603780343;  // std dev = 0,484, 107,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 4,94e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.01294086277791339;  // std dev = 0,487, 109,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 2,24e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.302156
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 1.588 seconds
Total inference time: 1.172 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.869503
   AUC PR    = 0.095442
   CLL	      = -0.294141
   Precision = 0.095442 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174252


Total scoring time: 1.593 seconds
Parameter learned model CLL: -0.294141


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.21e-08, 120, 0], 'true,true': [0.493, 48, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [7.74e-08, 102, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.795, 35, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.99e-08, 94, 0], 'true,true': [0.479, 37, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.48e-08, 86, 0], 'true,true': [0.421, 20, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.98e-08, 92, 0], 'true,true': [0.475, 35, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.87e-08, 106, 0], 'true,true': [0.468, 32, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.83e-08, 85, 0], 'true,true': [0.481, 38, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [4.795, 35, 67], 'false': [4.21e-08, 91, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.94e-08, 101, 0], 'true,true': [0.484, 40, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.24e-08, 90, 0], 'true,true': [0.487, 42, 67], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2431758034026459, 1.4802973661668754e-17], 'true': [0.2431758034026459, nan]}, {'': [0.22539407920030968, 5.877651306839064e-17], 'true': [0.22539407920030968, nan], 'true,true': [0.22539407920030968, nan]}, {'': [0.22919748520710198, 5.196788625904988e-17], 'true': [0.22919748520710198, nan]}, {'': [0.17703791782269676, 3.4855839145208403e-17], 'true': [0.17703791782269676, nan]}, {'': [0.22539407920030782, 9.654113257610057e-18], 'true': [0.22539407920030782, nan]}, {'': [0.21875318845015804, 3.2468786569226275e-17], 'true': [0.21875318845015804, nan]}, {'': [0.2309297052154189, 2.7429039431915633e-17], 'true': [0.2309297052154189, nan]}, {'': [0.22539407920030752, 1.9520404828574182e-17], 'true': [0.22539407920030752, nan], 'true,true': [0.22539407920030752, nan], 'true,true,true': [0.22539407920030752, nan]}, {'': [0.23408157917722097, 2.41830757839143e-17], 'true': [0.23408157917722097, nan]}, {'': [0.23684875010521012, 5.551115123125783e-18], 'true': [0.23684875010521012, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004877;  // std dev = 2,58e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.14185106490048763;  // std dev = 8,56e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.12544463852839136;  // std dev = 0,000, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360638;  // std dev = 1,29e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.11231637819360621;  // std dev = 7,45e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.1015963294878362;  // std dev = 5,37e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926103;  // std dev = 0,000, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.09269127618926093;  // std dev = 5,77e-08, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.090281893603787;  // std dev = 0,071, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.0851847513883968;  // std dev = 6,32e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07948540411836064;  // std dev = 0,035, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.07877675473109158;  // std dev = 5,96e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07392847890945221;  // std dev = 0,033, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.07324622576333707;  // std dev = 3,73e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06985926671511854;  // std dev = 0,043, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.06842697784420267;  // std dev = 4,77e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.0647375990988856;  // std dev = 0,029, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.06419184008202626;  // std dev = 0,000, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063626
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.975 seconds
Total inference time: 1.227 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064237
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.347 seconds
Refined model CLL: -0.064237


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063626
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.503 seconds
Total inference time: 1.227 seconds
AUC ROC: 1.0
Total revision time: 6.503
Best scored revision CLL: -0.064237


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 09:09:08
{'parameter_0.2': {'F1': 0.137825, 'Inference time': 1.172, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 1.588, 'CLL': -0.302156}, 'F1': 1.0, 'Inference time': 1.227, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 6.503, 'CLL': -0.063626}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.1418510649004877;  // std dev = 5,58e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.12544463852839108;  // std dev = 8,02e-08, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.11231637819360622;  // std dev = 8,43e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.10159632948783666;  // std dev = 0,000, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.09269127618926094;  // std dev = 5,37e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.08518475138839679;  // std dev = 4,34e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.07877675473109162;  // std dev = 5,67e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07324622576333704;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.07324622576333711;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.06842697784420267;  // std dev = 5,16e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06419184008202626;  // std dev = 0,000, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.082 seconds
Total inference time: 1.084 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 09:09:11
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.084, 'Precision': [1.0, 0.5], 'Learning time': 2.082, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.14185106490048766;  // std dev = 7,88e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.821 seconds
Total inference time: 0.773 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 09:09:13
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.773, 'Precision': [nan, 0.5], 'Learning time': 0.821, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4962441731947472;  // std dev = 0,481, 210,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004885;  // std dev = 0,000, 227,000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.4632340807092107;  // std dev = 6,581, 198,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839174;  // std dev = 0,000, 217,000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3428058596116824;  // std dev = 0,479, 208,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360651;  // std dev = 0,000, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.29528924026701486;  // std dev = 0,469, 199,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878365;  // std dev = 0,000, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1915828849058459;  // std dev = 0,480, 209,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926057;  // std dev = 8,94e-08, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1863843831516268;  // std dev = 0,465, 196,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08239541429455344;  // std dev = 0,484, 214,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109147;  // std dev = 7,15e-08, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.10923797791757102;  // std dev = 6,616, 199,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=134 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333666;  // std dev = 1,17e-07, 198,000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07589072215334144;  // std dev = 0,471, 201,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 8,16e-08, 199,000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04149638364017226;  // std dev = 0,477, 206,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #neg=202 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.311259
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 1.829 seconds
Total inference time: 1.191 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.867859
   AUC PR    = 0.094366
   CLL	      = -0.30557
   Precision = 0.094366 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.172458


Total scoring time: 2.076 seconds
Parameter learned model CLL: -0.30557


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 227, 0], 'true,true': [0.481, 76, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 217, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.581, 64, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 186, 0], 'true,true': [0.479, 74, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 183, 0], 'true,true': [0.469, 65, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.94e-08, 194, 0], 'true,true': [0.48, 75, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.45e-08, 186, 0], 'true,true': [0.465, 62, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.15e-08, 204, 0], 'true,true': [0.484, 80, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [6.616, 65, 134], 'false': [1.17e-07, 198, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.16e-08, 199, 0], 'true,true': [0.471, 67, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 202, 0], 'true,true': [0.477, 72, 134], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23092970521542389, -2.2302277499078035e-16], 'true': [0.23092970521542389, nan]}, {'': [0.21875318845016115, -6.139482163825751e-17], 'true': [0.21875318845016115, nan], 'true,true': [0.21875318845016115, nan]}, {'': [0.22919748520710176, -2.3875763970433474e-17], 'true': [0.22919748520710176, nan]}, {'': [0.21994394080957394, -8.85751702706409e-17], 'true': [0.21994394080957394, nan]}, {'': [0.23007715024839048, 4.1204153491242925e-17], 'true': [0.23007715024839048, nan]}, {'': [0.2162640566430658, 2.984470496304184e-17], 'true': [0.2162640566430658, nan]}, {'': [0.23408157917722, 2.503444075135157e-17], 'true': [0.23408157917722, nan]}, {'': [0.21994394080957505, 6.95291187138987e-17], 'true': [0.21994394080957505, nan], 'true,true': [0.21994394080957505, nan], 'true,true,true': [0.21994394080957505, nan]}, {'': [0.2222222222222217, 3.3474061043974566e-17], 'true': [0.2222222222222217, nan]}, {'': [0.22735413328306142, -1.648846076175975e-18], 'true': [0.22735413328306142, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048768;  // std dev = 6,50e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.1418510649004884;  // std dev = 0,000, 203,000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.12544463852839166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360629;  // std dev = 4,34e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.11231637819360674;  // std dev = 0,000, 223,000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783623;  // std dev = 3,49e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.1015963294878365;  // std dev = 0,000, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926103;  // std dev = 0,000, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.09269127618926051;  // std dev = 6,66e-08, 214,000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839679;  // std dev = 1,97e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.08518475138839678;  // std dev = 7,88e-08, 207,000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109168;  // std dev = 3,94e-08, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.07877675473109146;  // std dev = 7,88e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.07324622576333664;  // std dev = 1,29e-07, 223,000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420268;  // std dev = 2,98e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.06842697784420261;  // std dev = 6,41e-08, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.06419184008202626;  // std dev = 0,000, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063738
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.42 seconds
Total inference time: 1.296 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064203
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.218 seconds
Refined model CLL: -0.064203


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063738
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.543 seconds
Total inference time: 1.296 seconds
AUC ROC: 1.0
Total revision time: 8.543
Best scored revision CLL: -0.064203


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 09:09:25
{'F1': 1.0, 'Inference time': 1.296, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.137825, 'Inference time': 1.191, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 1.829, 'CLL': -0.311259}, 'Recall': 1.0, 'Learning time': 8.543, 'CLL': -0.063738}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1418510649004877;  // std dev = 2,11e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.14185106490048835;  // std dev = 0,000, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.12544463852839183;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.11231637819360682;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.10159632948783653;  // std dev = 0,000, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.09269127618926057;  // std dev = 5,96e-08, 230,000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839682;  // std dev = 1,75e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.08518475138839678;  // std dev = 7,30e-08, 228,000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.07877675473109143;  // std dev = 6,99e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0732462257633368;  // std dev = 1,17e-07, 253,000 (wgt'ed) examples reached here.  /* #neg=253 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.16984018691894145;  // std dev = 0,493, 138,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1536852883778404;  // std dev = 1,49e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.0685589089380853;  // std dev = 0,024, 261,000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1347415617115998;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.0643836067582266;  // std dev = 0,028, 244,000 (wgt'ed) examples reached here.  /* #neg=244 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063738
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.579 seconds
Total inference time: 1.184 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 09:09:29
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.184, 'Precision': [1.0, 0.5], 'Learning time': 2.579, 'AUC PR': 1.0, 'CLL': -0.063738, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.14185106490048838;  // std dev = 0,000, 266,000 (wgt'ed) examples reached here.  /* #neg=266 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.044 seconds
Total inference time: 0.796 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 09:09:31
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.796, 'Precision': [nan, 0.5], 'Learning time': 1.044, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5292452806144586;  // std dev = 0,470, 301,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 1,33e-07, 309,000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.4410026350049464;  // std dev = 8,286, 306,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839202;  // std dev = 0,000, 313,000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.34582019170557354;  // std dev = 0,477, 311,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936069;  // std dev = 0,000, 294,000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3324568218493575;  // std dev = 0,452, 283,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19151820902213265;  // std dev = 0,476, 309,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926044;  // std dev = 1,25e-07, 270,000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.13330265479906844;  // std dev = 0,479, 314,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09399571864748264;  // std dev = 0,481, 317,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 2,11e-08, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.0789272782384704;  // std dev = 8,464, 313,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=202 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333698;  // std dev = 9,66e-08, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.06380520617196259;  // std dev = 0,477, 311,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420308;  // std dev = 0,000, 319,000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.05473853426300208;  // std dev = 0,475, 308,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202593;  // std dev = 1,24e-07, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.308181
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.187 seconds
Total inference time: 1.187 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.870667
   AUC PR    = 0.096651
   CLL	      = -0.297802
   Precision = 0.096651 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.176265


Total scoring time: 1.961 seconds
Parameter learned model CLL: -0.297802


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.33e-07, 309, 0], 'true,true': [0.47, 99, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 313, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.286, 104, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 294, 0], 'true,true': [0.477, 109, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 302, 0], 'true,true': [0.452, 81, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.25e-07, 270, 0], 'true,true': [0.476, 107, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.05e-07, 307, 0], 'true,true': [0.479, 112, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [2.11e-08, 324, 0], 'true,true': [0.481, 115, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [8.464, 111, 202], 'false': [9.66e-08, 302, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 319, 0], 'true,true': [0.477, 109, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.24e-07, 307, 0], 'true,true': [0.475, 106, 202], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22072604055143352, 5.748727635599516e-17], 'true': [0.22072604055143352, nan]}, {'': [0.2243581528471899, -8.796655274985266e-17], 'true': [0.2243581528471899, nan], 'true,true': [0.2243581528471899, nan]}, {'': [0.22764446190589482, -8.609892844031826e-17], 'true': [0.22764446190589482, nan]}, {'': [0.20429771878784825, -5.2937786604643225e-17], 'true': [0.20429771878784825, nan]}, {'': [0.22636964422241396, 5.756711979537848e-17], 'true': [0.22636964422241396, nan]}, {'': [0.22946164144590026, 3.6163616437301514e-17], 'true': [0.22946164144590026, nan]}, {'': [0.23116958075013125, 1.3706457094137734e-18], 'true': [0.23116958075013125, nan]}, {'': [0.22886831548755251, 3.088037551937521e-17], 'true': [0.22886831548755251, nan], 'true,true': [0.22886831548755251, nan], 'true,true,true': [0.22886831548755251, nan]}, {'': [0.22764446190589363, -7.169465300087218e-17], 'true': [0.22764446190589363, nan]}, {'': [0.22571259908922298, 4.990579068347609e-17], 'true': [0.22571259908922298, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.14185106490048763;  // std dev = 8,43e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.14185106490048785;  // std dev = 9,88e-08, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1254446385283913;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.12544463852839202;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360629;  // std dev = 6,50e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.11231637819360686;  // std dev = 0,000, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783627;  // std dev = 3,65e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.10159632948783663;  // std dev = 0,000, 304,000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926103;  // std dev = 3,16e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.09269127618926043;  // std dev = 1,48e-07, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08518475138839682;  // std dev = 5,37e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109164;  // std dev = 5,27e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.07877675473109141;  // std dev = 4,47e-08, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333707;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.07324622576333689;  // std dev = 1,07e-07, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420268;  // std dev = 3,41e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.06842697784420296;  // std dev = 0,000, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.06419184008202597;  // std dev = 1,13e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.714 seconds
Total inference time: 1.13 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064085
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.691 seconds
Refined model CLL: -0.064085


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.553 seconds
Total inference time: 1.13 seconds
AUC ROC: 1.0
Total revision time: 8.553
Best scored revision CLL: -0.064085


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 09:09:43
{'F1': 1.0, 'Inference time': 1.13, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.137825, 'Inference time': 1.187, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 2.187, 'CLL': -0.308181}, 'Recall': 1.0, 'Learning time': 8.553, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 2,98e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.14185106490048777;  // std dev = 1,33e-07, 360,000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839127;  // std dev = 3,65e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.12544463852839208;  // std dev = 0,000, 350,000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.11231637819360664;  // std dev = 0,000, 366,000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783628;  // std dev = 2,47e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.10159632948783646;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926104;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.09269127618926086;  // std dev = 1,50e-07, 409,000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.0851847513883968;  // std dev = 2,17e-08, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 373,000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.07877675473109146;  // std dev = 4,21e-08, 345,000 (wgt'ed) examples reached here.  /* #neg=345 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333714;  // std dev = 6,32e-08, 377,000 (wgt'ed) examples reached here.  /* #neg=377 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.06842697784420322;  // std dev = 0,000, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.06419184008202596;  // std dev = 1,18e-07, 363,000 (wgt'ed) examples reached here.  /* #neg=363 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.332 seconds
Total inference time: 1.129 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 09:09:47
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.129, 'Precision': [1.0, 0.5], 'Learning time': 3.332, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.14185106490048768;  // std dev = 4,71e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.1418510649004877;  // std dev = 1,69e-07, 373,000 (wgt'ed) examples reached here.  /* #neg=373 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.21 seconds
Total inference time: 0.828 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 09:09:50
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.828, 'Precision': [nan, 0.5], 'Learning time': 1.21, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5158506465909507;  // std dev = 0,474, 409,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004874;  // std dev = 2,76e-07, 380,000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.41461065940579045;  // std dev = 9,957, 426,000 (wgt'ed) examples reached here.  /* #neg=157 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839224;  // std dev = 0,000, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3721434972765047;  // std dev = 0,471, 403,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360638;  // std dev = 0,000, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2533023968467213;  // std dev = 0,482, 426,000 (wgt'ed) examples reached here.  /* #neg=157 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783594;  // std dev = 2,15e-07, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2383038715926874;  // std dev = 0,467, 397,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892608;  // std dev = 1,59e-07, 389,000 (wgt'ed) examples reached here.  /* #neg=389 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16894102455630197;  // std dev = 0,471, 403,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,23e-07, 396,000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13012515508368647;  // std dev = 0,470, 401,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 9,88e-08, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.08329929263335521;  // std dev = 9,618, 410,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=269 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333768;  // std dev = 0,000, 372,000 (wgt'ed) examples reached here.  /* #neg=372 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11298960306853086;  // std dev = 0,456, 381,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420337;  // std dev = 0,000, 412,000 (wgt'ed) examples reached here.  /* #neg=412 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07869707634941821;  // std dev = 0,459, 385,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202561;  // std dev = 1,94e-07, 396,000 (wgt'ed) examples reached here.  /* #neg=396 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.324598
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.446 seconds
Total inference time: 1.101 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.87089
   AUC PR    = 0.096693
   CLL	      = -0.31265
   Precision = 0.096693 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.176336


Total scoring time: 2.596 seconds
Parameter learned model CLL: -0.31265


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [2.76e-07, 380, 0], 'true,true': [0.474, 140, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 397, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.957, 157, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 369, 0], 'true,true': [0.471, 134, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.15e-07, 397, 0], 'true,true': [0.482, 157, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.59e-07, 389, 0], 'true,true': [0.467, 128, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.23e-07, 396, 0], 'true,true': [0.471, 134, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.88e-08, 375, 0], 'true,true': [0.47, 132, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [9.618, 141, 269], 'false': [0.0, 372, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 412, 0], 'true,true': [0.456, 112, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.94e-07, 396, 0], 'true,true': [0.459, 116, 269], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22513017019267326, 2.0100880024792309e-16], 'true': [0.22513017019267326, nan]}, {'': [0.23271947805771, -1.2752183859674342e-16], 'true': [0.23271947805771, nan], 'true,true': [0.23271947805771, nan]}, {'': [0.22194582812528205, -2.647686345989533e-17], 'true': [0.22194582812528205, nan]}, {'': [0.23271947805770246, 1.1633571240404662e-16], 'true': [0.23271947805770246, nan]}, {'': [0.21846468158544383, 6.507219784435365e-17], 'true': [0.21846468158544383, nan]}, {'': [0.22194582812528998, 3.812887155278315e-17], 'true': [0.22194582812528998, nan]}, {'': [0.22081952226665452, 2.6053233644537006e-17], 'true': [0.22081952226665452, nan]}, {'': [0.22563355145746686, -6.744903321647457e-17], 'true': [0.22563355145746686, nan], 'true,true': [0.22563355145746686, nan], 'true,true,true': [0.22563355145746686, nan]}, {'': [0.20754885954216248, -1.2557376929012692e-16], 'true': [0.20754885954216248, nan]}, {'': [0.2105177938944179, 9.476146018265224e-17], 'true': [0.2105177938944179, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048788;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.1418510649004873;  // std dev = 3,01e-07, 408,000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1254446385283911;  // std dev = 7,88e-08, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.1254446385283923;  // std dev = 0,000, 434,000 (wgt'ed) examples reached here.  /* #neg=434 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360621;  // std dev = 8,69e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.11231637819360618;  // std dev = 0,000, 407,000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783641;  // std dev = 0,000, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.10159632948783609;  // std dev = 1,75e-07, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926092;  // std dev = 5,96e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.09269127618926075;  // std dev = 1,67e-07, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08518475138839682;  // std dev = 6,14e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.08518475138839678;  // std dev = 1,26e-07, 408,000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0787767547310916;  // std dev = 6,83e-08, 142,000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.07877675473109154;  // std dev = 9,88e-08, 422,000 (wgt'ed) examples reached here.  /* #neg=422 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333714;  // std dev = 0,000, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.0732462257633377;  // std dev = 0,000, 394,000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420267;  // std dev = 4,94e-08, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.06842697784420335;  // std dev = 0,000, 402,000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.0641918400820255;  // std dev = 2,18e-07, 437,000 (wgt'ed) examples reached here.  /* #neg=437 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.226 seconds
Total inference time: 1.229 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064083
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.733 seconds
Refined model CLL: -0.064083


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.001000000000001 seconds
Total inference time: 1.229 seconds
AUC ROC: 1.0
Total revision time: 11.001000000000001
Best scored revision CLL: -0.064083


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 09:10:04
{'F1': 1.0, 'Inference time': 1.229, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.137825, 'Inference time': 1.101, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 2.446, 'CLL': -0.324598}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 11.001000000000001, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 5,05e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.14185106490048785;  // std dev = 0,000, 526,000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.12544463852839224;  // std dev = 0,000, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360632;  // std dev = 2,98e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.11231637819360604;  // std dev = 0,000, 454,000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783621;  // std dev = 4,21e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.10159632948783585;  // std dev = 2,55e-07, 487,000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.09269127618926128;  // std dev = 0,000, 476,000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.08518475138839678;  // std dev = 1,37e-07, 518,000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.07877675473109187;  // std dev = 0,000, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.07324622576333721;  // std dev = 0,000, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0684269778442027;  // std dev = 1,39e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.06842697784420353;  // std dev = 0,000, 521,000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.06419184008202555;  // std dev = 2,23e-07, 517,000 (wgt'ed) examples reached here.  /* #neg=517 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.755 seconds
Total inference time: 1.117 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 09:10:09
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.117, 'Precision': [1.0, 0.5], 'Learning time': 3.755, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 3,94e-08, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.1418510649004874;  // std dev = 2,19e-07, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.396 seconds
Total inference time: 0.788 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 09:10:11
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.788, 'Precision': [nan, 0.5], 'Learning time': 1.396, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;true;true
0;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
0;true,false,true;haswordvenue(I, G).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;true;true
1;true,true,false;author(G, D), title(G, B).;false;false
1;true,false,true;haswordvenue(J, H).;false;false
1;true,true;author(E, D), title(E, A).;true;true
1;true,true,true;author(F, D), title(F, B).;false;false
1;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
1;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;false;true
4;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
4;true,false,true;haswordvenue(G, E).;false;false
4;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;true;true
6;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
6;true,false,true;haswordvenue(I, G).;false;false
6;true,true;author(E, D), title(E, B).;true;false
6;true,true,true;samebib(E, F), title(F, A).;false;false
6;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,true,false;author(G, E), title(G, B).;false;false
7;true,false,true;haswordvenue(J, H).;false;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,true;author(F, E), title(F, B).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;false
8;true,true,false;haswordvenue(F, D).;false;false
8;true,true;haswordauthor(E, C).;false;true
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false
9;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5074745613037469;  // std dev = 0,477, 519,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048754;  // std dev = 1,52e-07, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then if ( genre(F, E) )
%   | | then return 0.43140735256540264;  // std dev = 10,910, 521,000 (wgt'ed) examples reached here.  /* #neg=184 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839235;  // std dev = 0,000, 502,000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3850804364544227;  // std dev = 0,466, 494,000 (wgt'ed) examples reached here.  /* #neg=157 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360578;  // std dev = 0,000, 514,000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.292162489328551;  // std dev = 0,468, 499,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783538;  // std dev = 3,51e-07, 501,000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2239081196040104;  // std dev = 0,467, 497,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926157;  // std dev = 0,000, 524,000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11989963865984178;  // std dev = 0,483, 535,000 (wgt'ed) examples reached here.  /* #neg=198 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,44e-07, 507,000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16957554283613765;  // std dev = 0,454, 475,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109204;  // std dev = 0,000, 495,000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.043592215846600044;  // std dev = 11,238, 539,000 (wgt'ed) examples reached here.  /* #neg=202 #pos=337 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.073246225763337;  // std dev = 1,28e-07, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.04847648972210793;  // std dev = 0,480, 526,000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0684269778442035;  // std dev = 0,000, 464,000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.045465112503404556;  // std dev = 0,477, 519,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202533;  // std dev = 2,46e-07, 527,000 (wgt'ed) examples reached here.  /* #neg=527 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.308527
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.93 seconds
Total inference time: 1.228 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.868927
   AUC PR    = 0.095576
   CLL	      = -0.301146
   Precision = 0.095576 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174476


Total scoring time: 2.879 seconds
Parameter learned model CLL: -0.301146


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.52e-07, 482, 0], 'true,true': [0.477, 182, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)', 'true,true': 'genre(F, E)'}, {'false': [0.0, 502, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.91, 184, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 514, 0], 'true,true': [0.466, 157, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.51e-07, 501, 0], 'true,true': [0.468, 162, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 524, 0], 'true,true': [0.467, 160, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.44e-07, 507, 0], 'true,true': [0.483, 198, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 495, 0], 'true,true': [0.454, 138, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [11.238, 202, 337], 'false': [1.28e-07, 481, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 464, 0], 'true,true': [0.48, 189, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.46e-07, 527, 0], 'true,true': [0.477, 182, 337], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2277018573587145, 4.791003923693622e-17], 'true': [0.2277018573587145, nan]}, {'': [0.22844006616538734, -1.3977309792093604e-16], 'true': [0.22844006616538734, nan], 'true,true': [0.22844006616538734, nan]}, {'': [0.21680817584290282, -6.911894316732492e-18], 'true': [0.21680817584290282, nan]}, {'': [0.21925213151754924, 2.464207591583182e-16], 'true': [0.21925213151754924, nan]}, {'': [0.21829164119525876, -4.745991555649524e-17], 'true': [0.21829164119525876, nan]}, {'': [0.23312429033103105, 4.1168033260262216e-17], 'true': [0.23312429033103105, nan]}, {'': [0.20612077562327027, -3.588599675556062e-17], 'true': [0.20612077562327027, nan]}, {'': [0.2343169684807645, 3.416070845000482e-17], 'true': [0.2343169684807645, nan], 'true,true': [0.2343169684807645, nan], 'true,true,true': [0.2343169684807645, nan]}, {'': [0.23020789660107713, -1.2346445704883206e-16], 'true': [0.23020789660107713, nan]}, {'': [0.227701857358713, 1.1460366705808067e-16], 'true': [0.227701857358713, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048818;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.14185106490048754;  // std dev = 1,46e-07, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.12544463852839235;  // std dev = 0,000, 517,000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360626;  // std dev = 8,69e-08, 160,000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.1123163781936059;  // std dev = 0,000, 474,000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783648;  // std dev = 0,000, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.1015963294878356;  // std dev = 2,98e-07, 455,000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926078;  // std dev = 6,83e-08, 158,000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.09269127618926143;  // std dev = 0,000, 494,000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 6,14e-08, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.08518475138839678;  // std dev = 1,40e-07, 476,000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109147;  // std dev = 7,74e-08, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else return -0.07877675473109202;  // std dev = 0,000, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333684;  // std dev = 8,23e-08, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.07324622576333696;  // std dev = 1,41e-07, 489,000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6,58e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.0684269778442035;  // std dev = 0,000, 475,000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.0641918400820253;  // std dev = 2,48e-07, 551,000 (wgt'ed) examples reached here.  /* #neg=551 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.38 seconds
Total inference time: 1.208 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064087
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.262 seconds
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.451 seconds
Total inference time: 1.208 seconds
AUC ROC: 1.0
Total revision time: 11.451
Best scored revision CLL: -0.064087


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 09:10:26
{'parameter_1.0': {'F1': 0.137825, 'Inference time': 1.228, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 2.93, 'CLL': -0.308527}, 'F1': 1.0, 'Inference time': 1.208, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 11.451, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048768;  // std dev = 4,71e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.14185106490048846;  // std dev = 0,000, 608,000 (wgt'ed) examples reached here.  /* #neg=608 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.1254446385283923;  // std dev = 0,000, 596,000 (wgt'ed) examples reached here.  /* #neg=596 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360633;  // std dev = 2,79e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.11231637819360615;  // std dev = 0,000, 640,000 (wgt'ed) examples reached here.  /* #neg=640 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783621;  // std dev = 3,65e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.10159632948783548;  // std dev = 3,58e-07, 602,000 (wgt'ed) examples reached here.  /* #neg=602 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.09269127618926187;  // std dev = 0,000, 623,000 (wgt'ed) examples reached here.  /* #neg=623 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0851847513883968;  // std dev = 1,97e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.08518475138839678;  // std dev = 1,49e-07, 606,000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109177;  // std dev = 1,29e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07877675473109264;  // std dev = 0,000, 659,000 (wgt'ed) examples reached here.  /* #neg=659 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07324622576333685;  // std dev = 1,37e-07, 594,000 (wgt'ed) examples reached here.  /* #neg=594 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420268;  // std dev = 2,47e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.06842697784420243;  // std dev = 1,97e-07, 666,000 (wgt'ed) examples reached here.  /* #neg=666 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.0641918400820255;  // std dev = 2,38e-07, 623,000 (wgt'ed) examples reached here.  /* #neg=623 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.621 seconds
Total inference time: 1.077 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 09:10:32
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.077, 'Precision': [1.0, 0.5], 'Learning time': 4.621, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048766;  // std dev = 5,96e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.14185106490048846;  // std dev = 0,000, 603,000 (wgt'ed) examples reached here.  /* #neg=603 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.419 seconds
Total inference time: 0.768 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 09:10:34
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.768, 'Precision': [nan, 0.5], 'Learning time': 1.419, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


