Starting experiment #4 for 54_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 698
Source train neg examples: 27996

WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5439412848262842;  // std dev = 0,464, 366,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.10258404919368162;  // std dev = 3,796, 382,000 (wgt'ed) examples reached here.  /* #neg=367 #pos=15 */
%   | | | else return 0.2029765213064089;  // std dev = 2,560, 29,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.038970406464273966;  // std dev = 4,736, 243,000 (wgt'ed) examples reached here.  /* #neg=218 #pos=25 */
%   | | | else return 0.2878026147531872;  // std dev = 15,048, 924,000 (wgt'ed) examples reached here.  /* #neg=527 #pos=397 */
%   else return -0.14185106490048782;  // std dev = 0,000, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.4641392412026025;  // std dev = 0,464, 366,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.09375859813482336;  // std dev = 3,803, 416,000 (wgt'ed) examples reached here.  /* #neg=401 #pos=15 */
%   | | | else return 0.1346322670348601;  // std dev = 2,640, 33,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.04883388368142328;  // std dev = 4,774, 283,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=25 */
%   | | | else return 0.26746789504586505;  // std dev = 14,802, 886,000 (wgt'ed) examples reached here.  /* #neg=489 #pos=397 */
%   else return -0.12544463852839105;  // std dev = 8,16e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.6882433301976948;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.31175666980230543;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.3937826887982829;  // std dev = 0,456, 343,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.08141951677585617;  // std dev = 3,798, 393,000 (wgt'ed) examples reached here.  /* #neg=378 #pos=15 */
%   | | | else return 0.0750560266932305;  // std dev = 2,714, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.04025414972526748;  // std dev = 4,766, 274,000 (wgt'ed) examples reached here.  /* #neg=249 #pos=25 */
%   | | | else return 0.21026595887500696;  // std dev = 14,992, 915,000 (wgt'ed) examples reached here.  /* #neg=518 #pos=397 */
%   else return -0.11231637819360621;  // std dev = 8,82e-08, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(A, D) )
%   | | then return 0.27055969955095693;  // std dev = 0,462, 376,000 (wgt'ed) examples reached here.  /* #neg=125 #pos=251 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.07341739794760344;  // std dev = 3,784, 264,000 (wgt'ed) examples reached here.  /* #neg=249 #pos=15 */
%   | | | else return 0.5397010294315947;  // std dev = 1,826, 15,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.06890420256346355;  // std dev = 3,790, 354,000 (wgt'ed) examples reached here.  /* #neg=339 #pos=15 */
%   | | | else return 0.3001664798174194;  // std dev = 2,236, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | else return 0.1702422025637753;  // std dev = 0,495, 918,000 (wgt'ed) examples reached here.  /* #neg=521 #pos=397 */
%   else return -0.10159632948783644;  // std dev = 0,000, 140,000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.45837566979836086;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.3029865179533692;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.25208917790420093;  // std dev = 0,449, 336,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.06434509263055321;  // std dev = 3,797, 367,000 (wgt'ed) examples reached here.  /* #neg=352 #pos=15 */
%   | | | else return 0.03903101473330975;  // std dev = 2,654, 35,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.02018016869269955;  // std dev = 4,600, 239,000 (wgt'ed) examples reached here.  /* #neg=214 #pos=25 */
%   | | | else return 0.13980559199278184;  // std dev = 14,960, 910,000 (wgt'ed) examples reached here.  /* #neg=513 #pos=397 */
%   else return -0.09269127618926079;  // std dev = 7,88e-08, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then if ( samebib(E, F), title(F, B) )
%   | | | then return 0.37532534977770765;  // std dev = 0,150, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.5310878698308864;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.16788316210017362;  // std dev = 0,452, 350,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.06146623406174563;  // std dev = 3,805, 393,000 (wgt'ed) examples reached here.  /* #neg=378 #pos=15 */
%   | | | else return 0.06717766382674983;  // std dev = 2,572, 32,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.021271539405384936;  // std dev = 4,609, 248,000 (wgt'ed) examples reached here.  /* #neg=223 #pos=25 */
%   | | | else return 0.09412949772185909;  // std dev = 15,167, 944,000 (wgt'ed) examples reached here.  /* #neg=547 #pos=397 */
%   else return -0.0851847513883968;  // std dev = 6,50e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.09366718385577791;  // std dev = 0,461, 380,000 (wgt'ed) examples reached here.  /* #neg=129 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.05687014189818939;  // std dev = 3,804, 405,000 (wgt'ed) examples reached here.  /* #neg=390 #pos=15 */
%   | | | else return -0.013690693028032839;  // std dev = 2,691, 42,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.029656964182038094;  // std dev = 4,638, 279,000 (wgt'ed) examples reached here.  /* #neg=254 #pos=25 */
%   | | | else return 0.08548784192946844;  // std dev = 15,004, 917,000 (wgt'ed) examples reached here.  /* #neg=520 #pos=397 */
%   else return -0.07877675473109154;  // std dev = 7,15e-08, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.259918527606293;  // std dev = 0,051, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.2943078810854745;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.1012779597567417;  // std dev = 0,458, 348,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.04969740488961569;  // std dev = 3,800, 378,000 (wgt'ed) examples reached here.  /* #neg=363 #pos=15 */
%   | | | else return 0.03990889529350825;  // std dev = 2,602, 34,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | else return 0.03305298398196704;  // std dev = 0,461, 1.203,000 (wgt'ed) examples reached here.  /* #neg=781 #pos=422 */
%   else return -0.07324622576333722;  // std dev = 1,05e-08, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(B, D) )
%   | | then if ( author(F, E), title(F, B) )
%   | | | then return -0.08698510902771665;  // std dev = 1,104, 27,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return 0.09193866684406367;  // std dev = 8,328, 341,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=242 */
%   | | else if ( haswordvenue(G, D) )
%   | | | then return -0.048633193739125925;  // std dev = 3,805, 410,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=15 */
%   | | | else return 0.08342884086919447;  // std dev = 2,499, 29,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | then if ( haswordvenue(J, H) )
%   | | | then return -0.05388995385194285;  // std dev = 3,753, 245,000 (wgt'ed) examples reached here.  /* #neg=230 #pos=15 */
%   | | | else return 0.5206275339837134;  // std dev = 1,690, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0.04665928756610853;  // std dev = 0,494, 942,000 (wgt'ed) examples reached here.  /* #neg=545 #pos=397 */
%   else return -0.06842697784420264;  // std dev = 5,96e-08, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(B, D) )
%   | | then return 0.056349394622913086;  // std dev = 0,446, 366,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=251 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.04391921875438158;  // std dev = 3,803, 399,000 (wgt'ed) examples reached here.  /* #neg=384 #pos=15 */
%   | | | else return 0.10061827591408226;  // std dev = 2,440, 26,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | else if ( haswordtitle(B, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.043948390996609125;  // std dev = 3,743, 228,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=15 */
%   | | | else return 0.188327461560604;  // std dev = 2,289, 21,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | | else return 0.030799274261728644;  // std dev = 0,493, 953,000 (wgt'ed) examples reached here.  /* #neg=556 #pos=397 */
%   else return -0.06419184008202626;  // std dev = 0,000, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5282520278830183;  // std dev = 0,470, 97,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3885184605851974;  // std dev = 0,488, 107,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839133;  // std dev = 0,000, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2827122468791826;  // std dev = 0,494, 113,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936062;  // std dev = 8,43e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.3158777320917696;  // std dev = 4,631, 97,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=65 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783623;  // std dev = 5,05e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2548938245432903;  // std dev = 0,465, 95,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.092691276189261;  // std dev = 4,21e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15100023517156175;  // std dev = 0,479, 101,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 4,94e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11972345460494563;  // std dev = 0,477, 100,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0787767547310916;  // std dev = 5,77e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.05325290376489677;  // std dev = 0,487, 106,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.05803635436479571;  // std dev = 4,897, 103,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=65 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 4,53e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.05639708593687974;  // std dev = 4,813, 101,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=65 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.309453
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.281 seconds
Total inference time: 1.336 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.862471
   AUC PR    = 0.097598
   CLL	      = -0.303876
   Precision = 0.097598 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.177839


Total scoring time: 0.966 seconds
Parameter learned model CLL: -0.303876


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.69e-08, 104, 0], 'true,true': [0.47, 32, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 107, 0], 'true,true': [0.488, 42, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.43e-08, 105, 0], 'true,true': [0.494, 48, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [5.05e-08, 91, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.631, 32, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.21e-08, 97, 0], 'true,true': [0.465, 30, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.94e-08, 84, 0], 'true,true': [0.479, 36, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.77e-08, 100, 0], 'true,true': [0.477, 35, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 91, 0], 'true,true': [0.487, 41, 65], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [4.897, 38, 65], 'false': [4.53e-08, 95, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 91, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.813, 36, 65], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22106493782548553, 7.259150545626024e-17], 'true': [0.22106493782548553, nan]}, {'': [0.23844877281858723, -6.22554967079527e-18], 'true': [0.23844877281858723, nan]}, {'': [0.24434176521262405, 6.767073673905717e-17], 'true': [0.24434176521262405, nan]}, {'': [0.22106493782548603, 2.8060581941075384e-17], 'true': [0.22106493782548603, nan], 'true,true': [0.22106493782548603, nan]}, {'': [0.2160664819944598, 1.8312957107219077e-17], 'true': [0.2160664819944598, nan]}, {'': [0.2293892755612189, 2.9077269692563625e-17], 'true': [0.2293892755612189, nan]}, {'': [0.22750000000000006, 3.3306690738754695e-17], 'true': [0.22750000000000006, nan]}, {'': [0.2371840512637947, -7.93016446160826e-18], 'true': [0.2371840512637947, nan]}, {'': [0.23282118955603748, 2.162013258480568e-17], 'true': [0.23282118955603748, nan], 'true,true': [0.23282118955603748, nan], 'true,true,true': [0.23282118955603748, nan]}, {'': [0.22938927556121966, -1.342027831964475e-17], 'true': [0.22938927556121966, nan], 'true,true': [0.22938927556121966, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 2,36e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109542;  // std dev = 1,19e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.1298755513644101;  // std dev = 0,153, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839138;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.111875368224076;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.5553664367462837;  // std dev = 1,69e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.11231637819360621;  // std dev = 7,30e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10123273149231246;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.41751358415831036;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.10159632948783619;  // std dev = 5,48e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(B) )
%   | | then return -0.09238675550596874;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.4753084522581797;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.0926912761892609;  // std dev = 6,41e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(A) )
%   | | then return -0.08492624680014686;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.16359835432698683;  // std dev = 0,124, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839682;  // std dev = 5,87e-08, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.08487697096277917;  // std dev = 0,242, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.07877675473109161;  // std dev = 5,58e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07202382306622256;  // std dev = 0,010, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0.17709649774527728;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.07324622576333707;  // std dev = 4,83e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936707;  // std dev = 4,94e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07395145960233841;  // std dev = 0,274, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.06842697784420267;  // std dev = 4,28e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.06257758380368571;  // std dev = 0,011, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202626;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063486
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.599 seconds
Total inference time: 1.465 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067596
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.347 seconds
Refined model CLL: -0.067596


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063486
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.193 seconds
Total inference time: 1.465 seconds
AUC ROC: 1.0
Total revision time: 5.193
Best scored revision CLL: -0.067596


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 11:52:27
{'parameter_0.2': {'F1': 0.106262, 'Inference time': 1.336, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 1.281, 'CLL': -0.309453}, 'F1': 1.0, 'Inference time': 1.465, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.193, 'CLL': -0.063486}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.14185106490048766;  // std dev = 7,88e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109542;  // std dev = 1,19e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.12544463852839138;  // std dev = 0,000, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.11231637819360624;  // std dev = 7,45e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1015963294878363;  // std dev = 2,11e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.09269127618926103;  // std dev = 2,58e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839679;  // std dev = 4,83e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.07877675473109161;  // std dev = 5,77e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333707;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936707;  // std dev = 4,94e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.06856703260032677;  // std dev = 0,018, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0643359705208381;  // std dev = 0,017, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06342
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.115 seconds
Total inference time: 1.489 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 11:52:31
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.489, 'Precision': [1.0, 0.5], 'Learning time': 2.115, 'AUC PR': 1.0, 'CLL': -0.06342, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.1418510649004877;  // std dev = 5,96e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.792 seconds
Total inference time: 0.895 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 11:52:33
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.895, 'Precision': [nan, 0.5], 'Learning time': 0.792, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4985430237694599;  // std dev = 0,480, 203,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048827;  // std dev = 0,000, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4739107754686607;  // std dev = 0,463, 189,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839163;  // std dev = 0,000, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3491021686899141;  // std dev = 0,476, 199,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360661;  // std dev = 0,000, 201,000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.2944637216806511;  // std dev = 6,479, 192,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=130 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783653;  // std dev = 0,000, 208,000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.18312067753764139;  // std dev = 0,481, 204,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926058;  // std dev = 8,94e-08, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12823423187168223;  // std dev = 0,483, 207,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,15e-08, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15603002171960612;  // std dev = 0,463, 189,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109147;  // std dev = 7,74e-08, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11744997415408913;  // std dev = 0,463, 189,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333668;  // std dev = 1,11e-07, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.07121012439284552;  // std dev = 6,549, 194,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=130 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 8,16e-08, 201,000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.03739400047211704;  // std dev = 6,714, 199,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=130 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 184,000 (wgt'ed) examples reached here.  /* #neg=184 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.326099
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.764 seconds
Total inference time: 1.374 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.868451
   AUC PR    = 0.101563
   CLL	      = -0.308588
   Precision = 0.101563 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.184397


Total scoring time: 1.628 seconds
Parameter learned model CLL: -0.308588


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 175, 0], 'true,true': [0.48, 73, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 197, 0], 'true,true': [0.463, 59, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 201, 0], 'true,true': [0.476, 69, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 208, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.479, 62, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.94e-08, 191, 0], 'true,true': [0.481, 74, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.15e-08, 179, 0], 'true,true': [0.483, 77, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.74e-08, 183, 0], 'true,true': [0.463, 59, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.11e-07, 188, 0], 'true,true': [0.463, 59, 130], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [6.549, 64, 130], 'false': [8.16e-08, 201, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 184, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.714, 69, 130], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23028949986653827, -1.9032394707859825e-16], 'true': [0.23028949986653827, nan]}, {'': [0.21471963270905597, -3.1559639278684655e-17], 'true': [0.21471963270905597, nan]}, {'': [0.22650943158001133, -4.418798107960822e-17], 'true': [0.22650943158001133, nan]}, {'': [0.21864149305555705, -8.753681540313734e-17], 'true': [0.21864149305555705, nan], 'true,true': [0.21864149305555705, nan]}, {'': [0.23116109188773662, 4.185133914817344e-17], 'true': [0.23116109188773662, nan]}, {'': [0.2336110527666915, 2.8530871023886705e-17], 'true': [0.2336110527666915, nan]}, {'': [0.21471963270905167, 3.276067941516855e-17], 'true': [0.21471963270905167, nan]}, {'': [0.21471963270905078, 6.495985782381235e-17], 'true': [0.21471963270905078, nan]}, {'': [0.22106493782548672, 3.314098580970616e-17], 'true': [0.22106493782548672, nan], 'true,true': [0.22106493782548672, nan], 'true,true,true': [0.22106493782548672, nan]}, {'': [0.22650943158001058, -3.620292471603771e-18], 'true': [0.22650943158001058, nan], 'true,true': [0.22650943158001058, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.14185106490048768;  // std dev = 5,77e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.14185106490048838;  // std dev = 0,000, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109556;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.12544463852839172;  // std dev = 0,000, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11231637819360636;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.11231637819360657;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830914;  // std dev = 3,86e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.10159632948783648;  // std dev = 0,000, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601497;  // std dev = 2,53e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.09269127618926104;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.0926912761892606;  // std dev = 8,82e-08, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694897;  // std dev = 5,96e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.0851847513883968;  // std dev = 1,05e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.08518475138839678;  // std dev = 7,15e-08, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325353;  // std dev = 2,11e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07877675473109168;  // std dev = 3,25e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.07877675473109147;  // std dev = 7,88e-08, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.07324622576333664;  // std dev = 1,23e-07, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06842697784420268;  // std dev = 1,83e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.06842697784420262;  // std dev = 7,96e-08, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.06419184008202626;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.049 seconds
Total inference time: 1.335 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064211
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.422 seconds
Refined model CLL: -0.064211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.8629999999999995 seconds
Total inference time: 1.335 seconds
AUC ROC: 1.0
Total revision time: 6.8629999999999995
Best scored revision CLL: -0.064211


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 11:52:43
{'F1': 1.0, 'Inference time': 1.335, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.106262, 'Inference time': 1.374, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 1.764, 'CLL': -0.326099}, 'Recall': 1.0, 'Learning time': 6.8629999999999995, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.14185106490048843;  // std dev = 0,000, 239,000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109556;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.12544463852839183;  // std dev = 0,000, 253,000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11231637819360638;  // std dev = 1,29e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.11231637819360676;  // std dev = 0,000, 239,000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830914;  // std dev = 3,86e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.1015963294878365;  // std dev = 0,000, 241,000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601497;  // std dev = 2,53e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.09269127618926057;  // std dev = 5,96e-08, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694897;  // std dev = 5,96e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.08518475138839682;  // std dev = 1,05e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 242,000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325353;  // std dev = 2,11e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.07877675473109144;  // std dev = 7,15e-08, 231,000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.07324622576333671;  // std dev = 1,19e-07, 241,000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06842697784420276;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.06842697784420264;  // std dev = 4,94e-08, 245,000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.06419184008202623;  // std dev = 0,000, 248,000 (wgt'ed) examples reached here.  /* #neg=248 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.543 seconds
Total inference time: 1.274 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 11:52:47
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.274, 'Precision': [1.0, 0.5], 'Learning time': 2.543, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.14185106490048846;  // std dev = 0,000, 227,000 (wgt'ed) examples reached here.  /* #neg=227 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.005 seconds
Total inference time: 0.894 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 11:52:50
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.894, 'Precision': [nan, 0.5], 'Learning time': 1.005, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4954038370602928;  // std dev = 0,481, 306,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048796;  // std dev = 0,000, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.43444802505939967;  // std dev = 0,478, 301,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839188;  // std dev = 0,000, 258,000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.36579347062718165;  // std dev = 0,473, 295,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360683;  // std dev = 0,000, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.2935852399022555;  // std dev = 8,021, 291,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=195 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21351510265485774;  // std dev = 0,473, 295,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926043;  // std dev = 1,40e-07, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12431358160523197;  // std dev = 0,484, 312,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 9,54e-08, 262,000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16222802923887236;  // std dev = 0,461, 281,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109144;  // std dev = 4,71e-08, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08254077627341698;  // std dev = 0,476, 298,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333699;  // std dev = 9,54e-08, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.08991755301926148;  // std dev = 7,877, 286,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=195 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420301;  // std dev = 0,000, 304,000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.06601430585183322;  // std dev = 7,906, 287,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=195 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202602;  // std dev = 9,88e-08, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.329197
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.922 seconds
Total inference time: 1.236 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.869585
   AUC PR    = 0.102362
   CLL	      = -0.309276
   Precision = 0.102362 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185714


Total scoring time: 1.858 seconds
Parameter learned model CLL: -0.309276


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 282, 0], 'true,true': [0.481, 111, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 258, 0], 'true,true': [0.478, 106, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 299, 0], 'true,true': [0.473, 100, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 293, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.021, 96, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.4e-07, 283, 0], 'true,true': [0.473, 100, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.54e-08, 262, 0], 'true,true': [0.484, 117, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.71e-08, 274, 0], 'true,true': [0.461, 86, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.54e-08, 303, 0], 'true,true': [0.476, 103, 195], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [7.877, 91, 195], 'false': [0.0, 304, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [9.88e-08, 285, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.906, 92, 195], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23116109188774023, -1.8897413185109047e-17], 'true': [0.23116109188774023, nan]}, {'': [0.22814317722762362, -6.885104028683141e-17], 'true': [0.22814317722762362, nan]}, {'': [0.22407354208560692, -8.614439522175128e-17], 'true': [0.22407354208560692, nan]}, {'': [0.22106493782548647, -5.607952479335261e-17], 'true': [0.22106493782548647, nan], 'true,true': [0.22106493782548647, nan]}, {'': [0.2240735420856072, 6.904567220283659e-17], 'true': [0.2240735420856072, nan]}, {'': [0.2343750000000012, 3.474743817529116e-17], 'true': [0.2343750000000012, nan]}, {'': [0.21238332847861713, 8.103817697993843e-18], 'true': [0.21238332847861713, nan]}, {'': [0.22617224449349044, 3.004563961031777e-17], 'true': [0.22617224449349044, nan]}, {'': [0.21694214876032947, -5.989361053898871e-17], 'true': [0.21694214876032947, nan], 'true,true': [0.21694214876032947, nan], 'true,true,true': [0.21694214876032947, nan]}, {'': [0.21780038606757515, 3.4280570584917116e-17], 'true': [0.21780038606757515, nan], 'true,true': [0.21780038606757515, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.14185106490048766;  // std dev = 8,16e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.14185106490048788;  // std dev = 6,66e-08, 294,000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1254446385283914;  // std dev = 0,000, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.12544463852839188;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.11231637819360621;  // std dev = 8,30e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.11231637819360676;  // std dev = 0,000, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830997;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.10159632948783621;  // std dev = 4,71e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.10159632948783662;  // std dev = 0,000, 291,000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.320711847160149;  // std dev = 4,00e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.09269127618926104;  // std dev = 1,83e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.09269127618926046;  // std dev = 1,53e-07, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08518475138839683;  // std dev = 5,05e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.08518475138839678;  // std dev = 1,10e-07, 317,000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07877675473109164;  // std dev = 4,71e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.07877675473109143;  // std dev = 4,21e-08, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.07324622576333695;  // std dev = 1,02e-07, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06842697784420268;  // std dev = 2,98e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.06842697784420289;  // std dev = 0,000, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.06419184008202598;  // std dev = 1,11e-07, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.671 seconds
Total inference time: 1.603 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064211
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.722 seconds
Refined model CLL: -0.064211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.173 seconds
Total inference time: 1.603 seconds
AUC ROC: 1.0
Total revision time: 8.173
Best scored revision CLL: -0.064211


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 11:53:01
{'F1': 1.0, 'Inference time': 1.603, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.106262, 'Inference time': 1.236, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 1.922, 'CLL': -0.329197}, 'Recall': 1.0, 'Learning time': 8.173, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.14185106490048782;  // std dev = 9,88e-08, 350,000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.12544463852839213;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.11231637819360676;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #neg=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830997;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.10159632948783658;  // std dev = 0,000, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.320711847160149;  // std dev = 4,00e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.09269127618926053;  // std dev = 1,49e-07, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.0851847513883968;  // std dev = 2,04e-08, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 338,000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.07877675473109146;  // std dev = 2,98e-08, 364,000 (wgt'ed) examples reached here.  /* #neg=364 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07324622576333704;  // std dev = 9,13e-09, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.07324622576333713;  // std dev = 6,32e-08, 360,000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.0684269778442031;  // std dev = 0,000, 338,000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06419184008202608;  // std dev = 8,16e-08, 348,000 (wgt'ed) examples reached here.  /* #neg=348 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.426 seconds
Total inference time: 1.326 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 11:53:06
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.326, 'Precision': [1.0, 0.5], 'Learning time': 3.426, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1418510649004877;  // std dev = 2,79e-08, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.1418510649004877;  // std dev = 1,63e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.133 seconds
Total inference time: 0.869 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 11:53:09
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.869, 'Precision': [nan, 0.5], 'Learning time': 1.133, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5017132915351517;  // std dev = 0,479, 404,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048738;  // std dev = 2,84e-07, 386,000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.46617476992796336;  // std dev = 0,466, 382,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283922;  // std dev = 0,000, 357,000 (wgt'ed) examples reached here.  /* #neg=357 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3435674720039924;  // std dev = 0,478, 402,000 (wgt'ed) examples reached here.  /* #neg=142 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360617;  // std dev = 0,000, 411,000 (wgt'ed) examples reached here.  /* #neg=411 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.26652965511578486;  // std dev = 9,583, 402,000 (wgt'ed) examples reached here.  /* #neg=142 #pos=260 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783621;  // std dev = 1,40e-07, 361,000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.25420156808095723;  // std dev = 0,459, 372,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926078;  // std dev = 1,65e-07, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1725822777023718;  // std dev = 0,466, 382,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,25e-07, 398,000 (wgt'ed) examples reached here.  /* #neg=398 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14791060153586508;  // std dev = 0,459, 372,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 1,07e-07, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0776944043610918;  // std dev = 0,472, 391,000 (wgt'ed) examples reached here.  /* #neg=131 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333771;  // std dev = 0,000, 415,000 (wgt'ed) examples reached here.  /* #neg=415 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.057302323867565494;  // std dev = 9,357, 392,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=260 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420332;  // std dev = 0,000, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.038668957551828316;  // std dev = 9,427, 395,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=260 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202561;  // std dev = 1,93e-07, 395,000 (wgt'ed) examples reached here.  /* #neg=395 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.328957
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.796 seconds
Total inference time: 1.332 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.87051
   AUC PR    = 0.103011
   CLL	      = -0.307397
   Precision = 0.103011 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.186782


Total scoring time: 2.401 seconds
Parameter learned model CLL: -0.307397


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.84e-07, 386, 0], 'true,true': [0.479, 144, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 357, 0], 'true,true': [0.466, 122, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 411, 0], 'true,true': [0.478, 142, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [1.4e-07, 361, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.583, 142, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.65e-07, 385, 0], 'true,true': [0.459, 112, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.25e-07, 398, 0], 'true,true': [0.466, 122, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.07e-07, 383, 0], 'true,true': [0.459, 112, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 415, 0], 'true,true': [0.472, 131, 260], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [9.357, 132, 260], 'false': [0.0, 390, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [1.93e-07, 395, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.427, 135, 260], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22938927556122296, 2.0938921293448549e-16], 'true': [0.22938927556122296, nan]}, {'': [0.2173734272635133, -1.2190684191962504e-16], 'true': [0.2173734272635133, nan]}, {'': [0.22845969159178867, -1.9449162475185225e-17], 'true': [0.22845969159178867, nan]}, {'': [0.2284596915917914, 5.4127216713027023e-17], 'true': [0.2284596915917914, nan], 'true,true': [0.2284596915917914, nan]}, {'': [0.2104289513238506, 7.03621864957242e-17], 'true': [0.2104289513238506, nan]}, {'': [0.21737342726350659, 3.9053071217970333e-17], 'true': [0.21737342726350659, nan]}, {'': [0.21042895132385167, 3.0147048188254906e-17], 'true': [0.21042895132385167, nan]}, {'': [0.22278765837481448, -7.062623578338345e-17], 'true': [0.22278765837481448, nan]}, {'': [0.2233444398167435, -1.1500771844834956e-16], 'true': [0.2233444398167435, nan], 'true,true': [0.2233444398167435, nan], 'true,true,true': [0.2233444398167435, nan]}, {'': [0.2249639480852424, 9.443922437317787e-17], 'true': [0.2249639480852424, nan], 'true,true': [0.2249639480852424, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 148,000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.14185106490048746;  // std dev = 2,58e-07, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.12544463852839113;  // std dev = 7,30e-08, 140,000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.12544463852839222;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,95e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.1123163781936062;  // std dev = 8,94e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.11231637819360633;  // std dev = 0,000, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.417513584158311;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.10159632948783638;  // std dev = 0,000, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.10159632948783602;  // std dev = 1,92e-07, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601502;  // std dev = 1,33e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.09269127618926083;  // std dev = 7,60e-08, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.09269127618926061;  // std dev = 1,85e-07, 365,000 (wgt'ed) examples reached here.  /* #neg=365 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08518475138839682;  // std dev = 6,83e-08, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.08518475138839678;  // std dev = 1,23e-07, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07877675473109158;  // std dev = 6,83e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.07877675473109143;  // std dev = 1,15e-07, 393,000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07324622576333717;  // std dev = 0,000, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.07324622576333768;  // std dev = 0,000, 363,000 (wgt'ed) examples reached here.  /* #neg=363 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06842697784420267;  // std dev = 5,16e-08, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.0684269778442033;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080112;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.0641918400820257;  // std dev = 1,71e-07, 364,000 (wgt'ed) examples reached here.  /* #neg=364 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.955 seconds
Total inference time: 1.386 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064211
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.842 seconds
Refined model CLL: -0.064211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.994 seconds
Total inference time: 1.386 seconds
AUC ROC: 1.0
Total revision time: 9.994
Best scored revision CLL: -0.064211


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 11:53:22
{'F1': 1.0, 'Inference time': 1.386, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.106262, 'Inference time': 1.332, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 2.796, 'CLL': -0.328957}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 9.994, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048766;  // std dev = 5,37e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.14185106490048774;  // std dev = 0,000, 519,000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.12544463852839222;  // std dev = 0,000, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,95e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11231637819360635;  // std dev = 1,49e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.11231637819360629;  // std dev = 0,000, 460,000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158311;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.10159632948783583;  // std dev = 2,65e-07, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601502;  // std dev = 1,33e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.09269127618926125;  // std dev = 0,000, 474,000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.0851847513883968;  // std dev = 1,97e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.08518475138839678;  // std dev = 1,28e-07, 478,000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07877675473109177;  // std dev = 1,05e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.07877675473109176;  // std dev = 0,000, 469,000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.07324622576333725;  // std dev = 0,000, 452,000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06842697784420271;  // std dev = 1,05e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.06842697784420339;  // std dev = 0,000, 446,000 (wgt'ed) examples reached here.  /* #neg=446 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202541;  // std dev = 2,39e-07, 478,000 (wgt'ed) examples reached here.  /* #neg=478 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13100401682482885;  // std dev = 0,393, 264,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=260 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063438
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.966 seconds
Total inference time: 1.294 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 11:53:27
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.294, 'Precision': [1.0, 0.5], 'Learning time': 3.966, 'AUC PR': 1.0, 'CLL': -0.063438, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048768;  // std dev = 4,47e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.14185106490048718;  // std dev = 2,92e-07, 468,000 (wgt'ed) examples reached here.  /* #neg=468 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.386 seconds
Total inference time: 0.889 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 11:53:30
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.889, 'Precision': [nan, 0.5], 'Learning time': 1.386, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5234550575484876;  // std dev = 0,472, 490,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048735;  // std dev = 2,42e-07, 465,000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.45680931543881464;  // std dev = 0,468, 483,000 (wgt'ed) examples reached here.  /* #neg=157 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839233;  // std dev = 0,000, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.37476476932735425;  // std dev = 0,466, 479,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360576;  // std dev = 0,000, 522,000 (wgt'ed) examples reached here.  /* #neg=522 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.26537846081285626;  // std dev = 10,591, 497,000 (wgt'ed) examples reached here.  /* #neg=171 #pos=326 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783538;  // std dev = 3,54e-07, 503,000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22112635842144812;  // std dev = 0,468, 482,000 (wgt'ed) examples reached here.  /* #neg=156 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926142;  // std dev = 0,000, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.18176237571562479;  // std dev = 0,462, 471,000 (wgt'ed) examples reached here.  /* #neg=145 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,48e-07, 487,000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12075526755655053;  // std dev = 0,468, 482,000 (wgt'ed) examples reached here.  /* #neg=156 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109202;  // std dev = 1,38e-07, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.10258934383579482;  // std dev = 0,463, 474,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333743;  // std dev = 0,000, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.05411082693673101;  // std dev = 10,467, 491,000 (wgt'ed) examples reached here.  /* #neg=165 #pos=326 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420348;  // std dev = 0,000, 457,000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.06658177399950557;  // std dev = 10,066, 473,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=326 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202547;  // std dev = 2,26e-07, 451,000 (wgt'ed) examples reached here.  /* #neg=451 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.335977
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.688 seconds
Total inference time: 1.405 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.871431
   AUC PR    = 0.103954
   CLL	      = -0.311798
   Precision = 0.103954 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18833


Total scoring time: 2.7 seconds
Parameter learned model CLL: -0.311798


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.42e-07, 465, 0], 'true,true': [0.472, 164, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 488, 0], 'true,true': [0.468, 157, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 522, 0], 'true,true': [0.466, 153, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [3.54e-07, 503, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.591, 171, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 492, 0], 'true,true': [0.468, 156, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.48e-07, 487, 0], 'true,true': [0.462, 145, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.38e-07, 492, 0], 'true,true': [0.468, 156, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 480, 0], 'true,true': [0.463, 148, 326], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [10.467, 165, 326], 'false': [0.0, 457, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.26e-07, 451, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.066, 147, 326], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22267388588088574, 1.2606403376388874e-16], 'true': [0.22267388588088574, nan]}, {'': [0.21939311326294372, -1.3650283089653564e-16], 'true': [0.21939311326294372, nan]}, {'': [0.21738921988659682, 0.0], 'true': [0.21738921988659682, nan]}, {'': [0.22568408438558563, 2.4897247947856396e-16], 'true': [0.22568408438558563, nan], 'true,true': [0.22568408438558563, nan]}, {'': [0.2189011897178058, -2.166288828536891e-17], 'true': [0.2189011897178058, nan]}, {'': [0.21308053966579657, 4.468248723337386e-17], 'true': [0.21308053966579657, nan]}, {'': [0.21890118971781067, 3.8812674844619295e-17], 'true': [0.21890118971781067, nan]}, {'': [0.21474478805034575, -2.6830389761774617e-17], 'true': [0.21474478805034575, nan]}, {'': [0.2231200301973183, -1.2438384871073963e-16], 'true': [0.2231200301973183, nan], 'true,true': [0.2231200301973183, nan], 'true,true,true': [0.2231200301973183, nan]}, {'': [0.21419663968461927, 1.1373016349818677e-16], 'true': [0.21419663968461927, nan], 'true,true': [0.21419663968461927, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048818;  // std dev = 0,000, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.14185106490048718;  // std dev = 2,92e-07, 452,000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283913;  // std dev = 5,16e-08, 155,000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.12544463852839233;  // std dev = 0,000, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360636;  // std dev = 6,99e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.11231637819360588;  // std dev = 0,000, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783645;  // std dev = 0,000, 155,000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.10159632948783537;  // std dev = 3,55e-07, 505,000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926075;  // std dev = 7,45e-08, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.09269127618926129;  // std dev = 0,000, 467,000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5,77e-08, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.08518475138839678;  // std dev = 1,49e-07, 494,000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,46e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109155;  // std dev = 7,74e-08, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.07877675473109177;  // std dev = 1,85e-07, 453,000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2,76e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333692;  // std dev = 5,96e-08, 158,000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.07324622576333768;  // std dev = 0,000, 442,000 (wgt'ed) examples reached here.  /* #neg=442 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6,32e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.06842697784420351;  // std dev = 0,000, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 160,000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06419184008202539;  // std dev = 2,45e-07, 489,000 (wgt'ed) examples reached here.  /* #neg=489 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.313 seconds
Total inference time: 1.476 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064216
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.259 seconds
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.96 seconds
Total inference time: 1.476 seconds
AUC ROC: 1.0
Total revision time: 10.96
Best scored revision CLL: -0.064216


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 11:53:44
{'parameter_1.0': {'F1': 0.106262, 'Inference time': 1.405, 'Precision': [0.056112, 0.5], 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'Learning time': 2.688, 'CLL': -0.335977}, 'F1': 1.0, 'Inference time': 1.476, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.96, 'CLL': -0.063421}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048766;  // std dev = 6,32e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.14185106490048827;  // std dev = 0,000, 590,000 (wgt'ed) examples reached here.  /* #neg=590 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.12544463852839227;  // std dev = 0,000, 608,000 (wgt'ed) examples reached here.  /* #neg=608 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360625;  // std dev = 5,67e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.11231637819360595;  // std dev = 0,000, 565,000 (wgt'ed) examples reached here.  /* #neg=565 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783623;  // std dev = 3,80e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.10159632948783559;  // std dev = 3,28e-07, 572,000 (wgt'ed) examples reached here.  /* #neg=572 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.09269127618926172;  // std dev = 0,000, 603,000 (wgt'ed) examples reached here.  /* #neg=603 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.08518475138839678;  // std dev = 1,46e-07, 581,000 (wgt'ed) examples reached here.  /* #neg=581 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,46e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109175;  // std dev = 2,11e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.07877675473109244;  // std dev = 0,000, 613,000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2,76e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.07324622576333711;  // std dev = 6,66e-08, 558,000 (wgt'ed) examples reached here.  /* #neg=558 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420268;  // std dev = 2,11e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.06842697784420367;  // std dev = 0,000, 627,000 (wgt'ed) examples reached here.  /* #neg=627 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.06419184008202553;  // std dev = 2,38e-07, 592,000 (wgt'ed) examples reached here.  /* #neg=592 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.153 seconds
Total inference time: 1.303 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 11:53:50
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.303, 'Precision': [1.0, 0.5], 'Learning time': 4.153, 'AUC PR': 1.0, 'CLL': -0.063421, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048766;  // std dev = 6,66e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.14185106490048824;  // std dev = 0,000, 576,000 (wgt'ed) examples reached here.  /* #neg=576 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.441 seconds
Total inference time: 0.891 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 11:53:53
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.891, 'Precision': [nan, 0.5], 'Learning time': 1.441, 'AUC PR': 1.0, 'CLL': -0.152968, 'AUC ROC': 1.0}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.511210159589309;  // std dev = 0,476, 98,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,30e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5368834631488479;  // std dev = 0,431, 85,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839136;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.31959394726985196;  // std dev = 0,480, 100,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936062;  // std dev = 7,74e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.25289036642402307;  // std dev = 4,757, 99,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=64 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783626;  // std dev = 4,21e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.17839893491921074;  // std dev = 0,482, 101,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926087;  // std dev = 6,83e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11564039752449268;  // std dev = 0,487, 104,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0851847513883968;  // std dev = 5,37e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15222807505127184;  // std dev = 0,466, 94,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109161;  // std dev = 5,27e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07368172181255085;  // std dev = 0,480, 100,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 4,15e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.01945503708452921;  // std dev = 5,036, 106,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=64 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420267;  // std dev = 4,83e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.0846481088761633;  // std dev = 4,570, 95,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=64 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.297224
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.344 seconds
Total inference time: 1.424 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.865865
   AUC PR    = 0.099379
   CLL	      = -0.303467
   Precision = 0.099379 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.180791


Total scoring time: 1.265 seconds
Parameter learned model CLL: -0.303467


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.3e-08, 91, 0], 'true,true': [0.476, 34, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 101, 0], 'true,true': [0.431, 21, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.74e-08, 96, 0], 'true,true': [0.48, 36, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [4.21e-08, 97, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.757, 35, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.83e-08, 114, 0], 'true,true': [0.482, 37, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.37e-08, 92, 0], 'true,true': [0.487, 40, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.27e-08, 91, 0], 'true,true': [0.466, 30, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.15e-08, 90, 0], 'true,true': [0.48, 36, 64], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [5.036, 42, 64], 'false': [4.83e-08, 98, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 81, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.57, 31, 64], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22657226155768362, 7.564156871072495e-17], 'true': [0.22657226155768362, nan]}, {'': [0.1860207612456727, -1.0992307174506501e-17], 'true': [0.1860207612456727, nan]}, {'': [0.23040000000000022, 6.245004513516506e-17], 'true': [0.23040000000000022, nan]}, {'': [0.22854810733598652, 1.8312957107219077e-17], 'true': [0.22854810733598652, nan], 'true,true': [0.22854810733598652, nan]}, {'': [0.23213410449955904, 4.0902953538821554e-17], 'true': [0.23213410449955904, nan]}, {'': [0.2366863905325449, 3.137586808723268e-17], 'true': [0.2366863905325449, nan]}, {'': [0.21729289271163446, 3.050063254464716e-17], 'true': [0.21729289271163446, nan]}, {'': [0.23040000000000013, 1.912050764632214e-17], 'true': [0.23040000000000013, nan]}, {'': [0.23923104307582765, 2.3790493384824782e-17], 'true': [0.23923104307582765, nan], 'true,true': [0.23923104307582765, nan], 'true,true,true': [0.23923104307582765, nan]}, {'': [0.21983379501385028, -1.0965165675310187e-17], 'true': [0.21983379501385028, nan], 'true,true': [0.21983379501385028, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.14185106490048774;  // std dev = 2,11e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109542;  // std dev = 8,43e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.12544463852839136;  // std dev = 1,83e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.1254446385283915;  // std dev = 0,000, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.11231637819360621;  // std dev = 7,15e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.10159632948783617;  // std dev = 5,77e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.092691276189261;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.092691276189261;  // std dev = 4,21e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08518475138839682;  // std dev = 2,11e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.08518475138839682;  // std dev = 5,16e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07877675473109176;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.07877675473109158;  // std dev = 5,87e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.07324622576333707;  // std dev = 0,000, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936707;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.06842697784420264;  // std dev = 5,48e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801095;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.06419184008202626;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.757 seconds
Total inference time: 1.769 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064203
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.409 seconds
Refined model CLL: -0.064203


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.7749999999999995 seconds
Total inference time: 1.769 seconds
AUC ROC: 1.0
Total revision time: 5.7749999999999995
Best scored revision CLL: -0.064203


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 11:54:02
{'parameter_0.2': {'F1': 0.113837, 'Inference time': 1.424, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 1.344, 'CLL': -0.297224}, 'F1': 1.0, 'Inference time': 1.769, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.7749999999999995, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.14185106490048763;  // std dev = 8,94e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109542;  // std dev = 8,43e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.1254446385283914;  // std dev = 0,000, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360621;  // std dev = 8,30e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783631;  // std dev = 2,11e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.09269127618926096;  // std dev = 4,94e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.08518475138839683;  // std dev = 5,67e-08, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.07877675473109164;  // std dev = 4,94e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.07324622576333704;  // std dev = 0,000, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.14284068633525845;  // std dev = 0,374, 67,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   else return -0.06842697784420265;  // std dev = 4,83e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13516045578745015;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07811295875813885;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06419184008202626;  // std dev = 0,000, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064049
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.354 seconds
Total inference time: 1.305 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 11:54:06
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.305, 'Precision': [1.0, 0.5], 'Learning time': 2.354, 'AUC PR': 1.0, 'CLL': -0.064049, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.14185106490048763;  // std dev = 8,43e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.794 seconds
Total inference time: 0.901 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 11:54:08
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.901, 'Precision': [nan, 0.5], 'Learning time': 0.794, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4999399798756286;  // std dev = 0,479, 201,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048827;  // std dev = 0,000, 177,000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.41819802533438266;  // std dev = 0,482, 204,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283917;  // std dev = 0,000, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3687463850534339;  // std dev = 0,473, 195,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360661;  // std dev = 0,000, 201,000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.277051713152697;  // std dev = 6,705, 198,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=129 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783652;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20698463769917885;  // std dev = 0,478, 199,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892606;  // std dev = 8,69e-08, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15878445399802715;  // std dev = 0,476, 198,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07042282334107283;  // std dev = 0,489, 214,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109147;  // std dev = 7,60e-08, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11167277773909373;  // std dev = 0,473, 195,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333664;  // std dev = 1,22e-07, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.07091645194300852;  // std dev = 6,736, 199,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=129 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 8,16e-08, 200,000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.06363496269089144;  // std dev = 6,641, 196,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=129 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 177,000 (wgt'ed) examples reached here.  /* #neg=177 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.297485
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.651 seconds
Total inference time: 1.54 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.866821
   AUC PR    = 0.100703
   CLL	      = -0.302132
   Precision = 0.100703 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.182979


Total scoring time: 2.275 seconds
Parameter learned model CLL: -0.302132


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 177, 0], 'true,true': [0.479, 72, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 206, 0], 'true,true': [0.482, 75, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 201, 0], 'true,true': [0.473, 66, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 195, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.705, 69, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.69e-08, 180, 0], 'true,true': [0.478, 70, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.45e-08, 194, 0], 'true,true': [0.476, 69, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.6e-08, 189, 0], 'true,true': [0.489, 85, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.22e-07, 204, 0], 'true,true': [0.473, 66, 129], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [6.736, 70, 129], 'false': [8.16e-08, 200, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 177, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.641, 67, 129], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22989529962130073, -1.9068237259098733e-16], 'true': [0.22989529962130073, nan]}, {'': [0.2324826989619364, -3.8803911540296735e-17], 'true': [0.2324826989619364, nan]}, {'': [0.22390532544379013, -4.418798107960822e-17], 'true': [0.22390532544379013, nan]}, {'': [0.22704315886134047, -9.337260309667983e-17], 'true': [0.22704315886134047, nan], 'true,true': [0.22704315886134047, nan]}, {'': [0.22802454483472467, 4.194175870806147e-17], 'true': [0.22802454483472467, nan]}, {'': [0.22704315886134038, 2.8613995480029805e-17], 'true': [0.22704315886134038, nan]}, {'': [0.23943139138789352, 3.054581866693552e-17], 'true': [0.23943139138789352, nan]}, {'': [0.22390532544378797, 7.292641436263283e-17], 'true': [0.22390532544378797, nan]}, {'': [0.22802454483472584, 3.3306690738754695e-17], 'true': [0.22802454483472584, nan], 'true,true': [0.22802454483472584, nan], 'true,true,true': [0.22802454483472584, nan]}, {'': [0.22498438150770547, -5.017957173447035e-18], 'true': [0.22498438150770547, nan], 'true,true': [0.22498438150770547, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.14185106490048766;  // std dev = 6,83e-08, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.14185106490048838;  // std dev = 0,000, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109555;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.12544463852839163;  // std dev = 0,000, 198,000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.11231637819360628;  // std dev = 5,05e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.11231637819360639;  // std dev = 0,000, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783621;  // std dev = 4,21e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.4175135841583092;  // std dev = 3,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return -0.1015963294878365;  // std dev = 0,000, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926107;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0.3207118471601498;  // std dev = 2,49e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   else return -0.09269127618926055;  // std dev = 9,42e-08, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694898;  // std dev = 4,21e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.08850181258434128;  // std dev = 0,148, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253534;  // std dev = 2,09e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.08771855034001343;  // std dev = 0,232, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.07877675473109147;  // std dev = 7,88e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07568567459189562;  // std dev = 0,129, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07324622576333668;  // std dev = 1,11e-07, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07316353186260274;  // std dev = 0,170, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.06842697784420262;  // std dev = 7,88e-08, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06797166843100799;  // std dev = 0,180, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.06419184008202626;  // std dev = 0,000, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063162
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.114 seconds
Total inference time: 1.691 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064836
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.641 seconds
Refined model CLL: -0.064836


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063162
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.681 seconds
Total inference time: 1.691 seconds
AUC ROC: 1.0
Total revision time: 7.681
Best scored revision CLL: -0.064836


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 11:54:20
{'F1': 1.0, 'Inference time': 1.691, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.113837, 'Inference time': 1.54, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 1.651, 'CLL': -0.297485}, 'Recall': 1.0, 'Learning time': 7.681, 'CLL': -0.063162}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.14185106490048838;  // std dev = 0,000, 246,000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109555;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.12544463852839174;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.11231637819360671;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583092;  // std dev = 3,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.10159632948783653;  // std dev = 0,000, 213,000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601498;  // std dev = 2,49e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09269127618926093;  // std dev = 1,18e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.0926912761892606;  // std dev = 5,16e-08, 213,000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694898;  // std dev = 4,21e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.08518475138839683;  // std dev = 1,49e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.08518475138839678;  // std dev = 6,99e-08, 217,000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253534;  // std dev = 2,09e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.07877675473109144;  // std dev = 6,50e-08, 250,000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.07324622576333673;  // std dev = 1,16e-07, 244,000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06842697784420276;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.06842697784420283;  // std dev = 0,000, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06419184008202623;  // std dev = 0,000, 221,000 (wgt'ed) examples reached here.  /* #neg=221 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.062 seconds
Total inference time: 1.343 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 11:54:24
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.343, 'Precision': [1.0, 0.5], 'Learning time': 3.062, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.14185106490048843;  // std dev = 0,000, 222,000 (wgt'ed) examples reached here.  /* #neg=222 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.98 seconds
Total inference time: 0.878 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 11:54:27
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.878, 'Precision': [nan, 0.5], 'Learning time': 0.98, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4963068298363506;  // std dev = 0,481, 304,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048796;  // std dev = 0,000, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4508394430281205;  // std dev = 0,472, 292,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839186;  // std dev = 0,000, 249,000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3189998289245315;  // std dev = 0,486, 314,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360692;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.24625453898017502;  // std dev = 8,633, 315,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=194 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783663;  // std dev = 0,000, 304,000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2450194261210038;  // std dev = 0,469, 288,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926046;  // std dev = 1,17e-07, 263,000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14463030334904145;  // std dev = 0,482, 306,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16490098475009193;  // std dev = 0,462, 281,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109141;  // std dev = 3,94e-08, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09803924712261934;  // std dev = 0,472, 292,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333692;  // std dev = 1,05e-07, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.043738949101522616;  // std dev = 8,427, 306,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=194 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420299;  // std dev = 0,000, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.08472915751586271;  // std dev = 7,811, 283,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=194 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202591;  // std dev = 1,26e-07, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.304703
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.117 seconds
Total inference time: 1.576 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.867042
   AUC PR    = 0.101094
   CLL	      = -0.308728
   Precision = 0.101094 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.183625


Total scoring time: 2.352 seconds
Parameter learned model CLL: -0.308728


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 283, 0], 'true,true': [0.481, 110, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 249, 0], 'true,true': [0.472, 98, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 292, 0], 'true,true': [0.486, 120, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 304, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.633, 121, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.17e-07, 263, 0], 'true,true': [0.469, 94, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.05e-07, 307, 0], 'true,true': [0.482, 112, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.94e-08, 301, 0], 'true,true': [0.462, 87, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.05e-07, 283, 0], 'true,true': [0.472, 98, 194], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [8.427, 112, 194], 'false': [0.0, 298, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [1.26e-07, 310, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.811, 89, 194], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2309123961218884, -1.5692198227917407e-17], 'true': [0.2309123961218884, nan]}, {'': [0.22297804466129123, -6.420566889398495e-17], 'true': [0.22297804466129123, nan]}, {'': [0.23611505537750224, -8.820950058665627e-17], 'true': [0.23611505537750224, nan]}, {'': [0.2365734441924938, -5.258951169277057e-17], 'true': [0.2365734441924938, nan], 'true,true': [0.2365734441924938, nan]}, {'': [0.2198591820987661, 5.234511598993133e-17], 'true': [0.2198591820987661, nan]}, {'': [0.232047503097099, 3.6163616437301514e-17], 'true': [0.232047503097099, nan]}, {'': [0.2137510923113941, 5.163828021512356e-18], 'true': [0.2137510923113941, nan]}, {'': [0.22297804466128793, 3.923049556979352e-17], 'true': [0.22297804466128793, nan]}, {'': [0.23204750309709987, -5.513859316930308e-17], 'true': [0.23204750309709987, nan], 'true,true': [0.23204750309709987, nan], 'true,true,true': [0.23204750309709987, nan]}, {'': [0.21558516150782206, 5.1571650176136306e-17], 'true': [0.21558516150782206, nan], 'true,true': [0.21558516150782206, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.14185106490048766;  // std dev = 8,16e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.1418510649004879;  // std dev = 5,96e-08, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1254446385283914;  // std dev = 0,000, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.12544463852839197;  // std dev = 0,000, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11231637819360621;  // std dev = 8,30e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.11231637819360674;  // std dev = 0,000, 311,000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583099;  // std dev = 3,04e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.10159632948783663;  // std dev = 0,000, 314,000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.320711847160149;  // std dev = 3,95e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.09269127618926042;  // std dev = 1,55e-07, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.08518475138839679;  // std dev = 3,65e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 294,000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07877675473109164;  // std dev = 5,05e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.07877675473109143;  // std dev = 3,65e-08, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.07324622576333688;  // std dev = 1,10e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06842697784420268;  // std dev = 3,49e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.06842697784420287;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.06419184008202612;  // std dev = 7,60e-08, 270,000 (wgt'ed) examples reached here.  /* #neg=270 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.601 seconds
Total inference time: 1.205 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064221
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.26 seconds
Refined model CLL: -0.064221


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.329999999999998 seconds
Total inference time: 1.205 seconds
AUC ROC: 1.0
Total revision time: 9.329999999999998
Best scored revision CLL: -0.064221


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 11:54:39
{'F1': 1.0, 'Inference time': 1.205, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.113837, 'Inference time': 1.576, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 2.117, 'CLL': -0.304703}, 'Recall': 1.0, 'Learning time': 9.329999999999998, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.14185106490048768;  // std dev = 4,47e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.14185106490048788;  // std dev = 7,30e-08, 344,000 (wgt'ed) examples reached here.  /* #neg=344 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1254446385283914;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.12544463852839208;  // std dev = 0,000, 363,000 (wgt'ed) examples reached here.  /* #neg=363 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.11231637819360676;  // std dev = 0,000, 327,000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583099;  // std dev = 3,04e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.10159632948783656;  // std dev = 0,000, 331,000 (wgt'ed) examples reached here.  /* #neg=331 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.320711847160149;  // std dev = 3,95e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.092691276189261;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.0926912761892605;  // std dev = 1,37e-07, 339,000 (wgt'ed) examples reached here.  /* #neg=339 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.08518475138839678;  // std dev = 1,07e-07, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.07877675473109146;  // std dev = 2,98e-08, 352,000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.07324622576333709;  // std dev = 7,30e-08, 361,000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.06842697784420317;  // std dev = 0,000, 361,000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.06419184008202602;  // std dev = 1,01e-07, 341,000 (wgt'ed) examples reached here.  /* #neg=341 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.994 seconds
Total inference time: 1.344 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 11:54:44
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.344, 'Precision': [1.0, 0.5], 'Learning time': 2.994, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1418510649004877;  // std dev = 3,16e-08, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.14185106490048782;  // std dev = 1,15e-07, 364,000 (wgt'ed) examples reached here.  /* #neg=364 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.156 seconds
Total inference time: 0.87 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 11:54:46
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.87, 'Precision': [nan, 0.5], 'Learning time': 1.156, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5222514992020723;  // std dev = 0,472, 390,000 (wgt'ed) examples reached here.  /* #neg=131 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048732;  // std dev = 3,01e-07, 406,000 (wgt'ed) examples reached here.  /* #neg=406 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4168701992974282;  // std dev = 0,481, 408,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839224;  // std dev = 0,000, 396,000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.35034412403071385;  // std dev = 0,478, 400,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360615;  // std dev = 0,000, 414,000 (wgt'ed) examples reached here.  /* #neg=414 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.2676115905306325;  // std dev = 9,620, 403,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=259 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783583;  // std dev = 2,44e-07, 415,000 (wgt'ed) examples reached here.  /* #neg=415 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2194668275728424;  // std dev = 0,474, 393,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926089;  // std dev = 1,50e-07, 401,000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1549864780256323;  // std dev = 0,477, 399,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,25e-07, 361,000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12452505132192151;  // std dev = 0,475, 394,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109141;  // std dev = 2,26e-07, 403,000 (wgt'ed) examples reached here.  /* #neg=403 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09202973582136915;  // std dev = 0,475, 395,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333771;  // std dev = 0,000, 396,000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.08483121375546741;  // std dev = 9,231, 386,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=259 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420336;  // std dev = 0,000, 404,000 (wgt'ed) examples reached here.  /* #neg=404 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.052463140254686264;  // std dev = 9,397, 393,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=259 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202566;  // std dev = 1,81e-07, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.303455
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.283 seconds
Total inference time: 1.729 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.868902
   AUC PR    = 0.102493
   CLL	      = -0.304269
   Precision = 0.102493 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18593


Total scoring time: 2.231 seconds
Parameter learned model CLL: -0.304269


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [3.01e-07, 406, 0], 'true,true': [0.472, 131, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 396, 0], 'true,true': [0.481, 149, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 414, 0], 'true,true': [0.478, 141, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [2.44e-07, 415, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.62, 144, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.5e-07, 401, 0], 'true,true': [0.474, 134, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.25e-07, 361, 0], 'true,true': [0.477, 140, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.26e-07, 403, 0], 'true,true': [0.475, 135, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 396, 0], 'true,true': [0.475, 136, 259], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [9.231, 127, 259], 'false': [0.0, 404, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [1.81e-07, 376, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.397, 134, 259], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22307034845496743, 2.2313842071283937e-16], 'true': [0.22307034845496743, nan]}, {'': [0.23182790272971385, -1.2560098864446215e-16], 'true': [0.23182790272971385, nan]}, {'': [0.228243749999999, -1.716286801352899e-17], 'true': [0.228243749999999, nan]}, {'': [0.22964244592356753, 1.4339266052989972e-16], 'true': [0.22964244592356753, nan], 'true,true': [0.22964244592356753, nan]}, {'': [0.22470847982181782, 5.648017382132965e-17], 'true': [0.22470847982181782, nan]}, {'': [0.22776238842720845, 4.305574056718059e-17], 'true': [0.22776238842720845, nan]}, {'': [0.22523770259475742, 1.267252087661469e-16], 'true': [0.22523770259475742, nan]}, {'': [0.22575869251722513, -6.280049432223107e-17], 'true': [0.22575869251722513, nan]}, {'': [0.22076431582055997, -1.1596884069104358e-16], 'true': [0.22076431582055997, nan], 'true,true': [0.22076431582055997, nan], 'true,true,true': [0.22076431582055997, nan]}, {'': [0.22470847982181932, 8.680999181909469e-17], 'true': [0.22470847982181932, nan], 'true,true': [0.22470847982181932, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.14185106490048788;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else return -0.1418510649004874;  // std dev = 2,81e-07, 384,000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.12544463852839113;  // std dev = 7,60e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.12544463852839222;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 4,13e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.1123163781936062;  // std dev = 9,77e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.1123163781936062;  // std dev = 0,000, 405,000 (wgt'ed) examples reached here.  /* #neg=405 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.417513584158311;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.10159632948783638;  // std dev = 0,000, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.10159632948783594;  // std dev = 2,17e-07, 398,000 (wgt'ed) examples reached here.  /* #neg=398 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601502;  // std dev = 1,46e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0926912761892609;  // std dev = 6,83e-08, 142,000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.09269127618926061;  // std dev = 1,90e-07, 366,000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.08518475138839683;  // std dev = 5,77e-08, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.08518475138839678;  // std dev = 1,26e-07, 370,000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0787767547310916;  // std dev = 6,83e-08, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.07877675473109143;  // std dev = 2,12e-07, 368,000 (wgt'ed) examples reached here.  /* #neg=368 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07324622576333718;  // std dev = 0,000, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.07324622576333771;  // std dev = 0,000, 408,000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06842697784420267;  // std dev = 5,48e-08, 142,000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.06842697784420328;  // std dev = 0,000, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.06419184008202566;  // std dev = 1,79e-07, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.081 seconds
Total inference time: 1.636 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064223
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.31 seconds
Refined model CLL: -0.064223


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.905 seconds
Total inference time: 1.636 seconds
AUC ROC: 1.0
Total revision time: 9.905
Best scored revision CLL: -0.064223


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 11:55:00
{'F1': 1.0, 'Inference time': 1.636, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.113837, 'Inference time': 1.729, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 2.283, 'CLL': -0.303455}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 9.905, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.14185106490048768;  // std dev = 5,37e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.14185106490048738;  // std dev = 2,38e-07, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.1254446385283923;  // std dev = 0,000, 500,000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 4,13e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.11231637819360622;  // std dev = 0,000, 463,000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158311;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.10159632948783631;  // std dev = 7,45e-09, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.10159632948783598;  // std dev = 2,21e-07, 471,000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601502;  // std dev = 1,46e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.09269127618926104;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.09269127618926114;  // std dev = 7,88e-08, 452,000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.08518475138839678;  // std dev = 1,21e-07, 447,000 (wgt'ed) examples reached here.  /* #neg=447 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.0787767547310917;  // std dev = 4,21e-08, 458,000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.07324622576333721;  // std dev = 0,000, 475,000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06842697784420271;  // std dev = 7,45e-09, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.06842697784420347;  // std dev = 0,000, 473,000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.06419184008202566;  // std dev = 1,98e-07, 473,000 (wgt'ed) examples reached here.  /* #neg=473 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.789 seconds
Total inference time: 1.389 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 11:55:05
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.389, 'Precision': [1.0, 0.5], 'Learning time': 3.789, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.14185106490048768;  // std dev = 5,16e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.1418510649004872;  // std dev = 2,95e-07, 463,000 (wgt'ed) examples reached here.  /* #neg=463 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.376 seconds
Total inference time: 0.866 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 11:55:08
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.866, 'Precision': [nan, 0.5], 'Learning time': 1.376, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.51802673550684;  // std dev = 0,474, 491,000 (wgt'ed) examples reached here.  /* #neg=167 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048766;  // std dev = 0,000, 494,000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.41932772216755215;  // std dev = 0,481, 509,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839235;  // std dev = 0,000, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3754122575723724;  // std dev = 0,469, 482,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360595;  // std dev = 0,000, 462,000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.2766552600551643;  // std dev = 10,539, 493,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=324 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783563;  // std dev = 2,92e-07, 449,000 (wgt'ed) examples reached here.  /* #neg=449 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.18774494752725765;  // std dev = 0,481, 510,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926139;  // std dev = 0,000, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1878132844632898;  // std dev = 0,466, 475,000 (wgt'ed) examples reached here.  /* #neg=151 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,43e-07, 493,000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12278267273386502;  // std dev = 0,472, 488,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109191;  // std dev = 0,000, 475,000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.06384575672262514;  // std dev = 0,481, 510,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333689;  // std dev = 1,59e-07, 503,000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.052045639729599226;  // std dev = 10,814, 507,000 (wgt'ed) examples reached here.  /* #neg=183 #pos=324 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0684269778442035;  // std dev = 0,000, 466,000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.06301136530178773;  // std dev = 10,456, 489,000 (wgt'ed) examples reached here.  /* #neg=165 #pos=324 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202543;  // std dev = 2,36e-07, 468,000 (wgt'ed) examples reached here.  /* #neg=468 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.30058
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.693 seconds
Total inference time: 1.367 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.86826
   AUC PR    = 0.102112
   CLL	      = -0.302653
   Precision = 0.102112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185302


Total scoring time: 2.442 seconds
Parameter learned model CLL: -0.302653


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 494, 0], 'true,true': [0.474, 167, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 499, 0], 'true,true': [0.481, 185, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 462, 0], 'true,true': [0.469, 158, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [2.92e-07, 449, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.539, 169, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 484, 0], 'true,true': [0.481, 186, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.43e-07, 493, 0], 'true,true': [0.466, 151, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 475, 0], 'true,true': [0.472, 164, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.59e-07, 503, 0], 'true,true': [0.481, 186, 324], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [10.814, 183, 324], 'false': [0.0, 466, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.36e-07, 468, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.456, 165, 324], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22443908893691605, -3.595864047368928e-18], 'true': [0.22443908893691605, nan]}, {'': [0.2313562167816164, -1.3883350047416786e-16], 'true': [0.2313562167816164, nan]}, {'': [0.22034744580843912, -1.3457248783335231e-17], 'true': [0.22034744580843912, nan]}, {'': [0.22528790490806536, 1.899000630093809e-16], 'true': [0.22528790490806536, nan], 'true,true': [0.22528790490806536, nan]}, {'': [0.23169550173010334, -1.8350793795457133e-17], 'true': [0.23169550173010334, nan]}, {'': [0.21683767313019547, 4.143631572637501e-17], 'true': [0.21683767313019547, nan]}, {'': [0.22312550389680164, -2.243819165558211e-17], 'true': [0.22312550389680164, nan]}, {'': [0.23169550173010692, 5.0324224575454413e-17], 'true': [0.23169550173010692, nan]}, {'': [0.23066419243023764, -1.2293456667523192e-16], 'true': [0.23066419243023764, nan], 'true,true': [0.23066419243023764, nan], 'true,true,true': [0.23066419243023764, nan]}, {'': [0.223568820806202, 1.1861357100696117e-16], 'true': [0.223568820806202, nan], 'true,true': [0.223568820806202, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048818;  // std dev = 0,000, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.14185106490048763;  // std dev = 5,96e-08, 491,000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.12544463852839233;  // std dev = 0,000, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360635;  // std dev = 7,30e-08, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.11231637819360597;  // std dev = 0,000, 451,000 (wgt'ed) examples reached here.  /* #neg=451 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783652;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else return -0.10159632948783551;  // std dev = 3,21e-07, 473,000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926078;  // std dev = 6,83e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.09269127618926135;  // std dev = 0,000, 476,000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6,50e-08, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.08518475138839678;  // std dev = 1,41e-07, 486,000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109154;  // std dev = 7,74e-08, 163,000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.07877675473109177;  // std dev = 0,000, 454,000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2,73e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333682;  // std dev = 8,09e-08, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.07324622576333707;  // std dev = 1,07e-07, 470,000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6,14e-08, 162,000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.06842697784420348;  // std dev = 0,000, 462,000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 165,000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.06419184008202532;  // std dev = 2,47e-07, 539,000 (wgt'ed) examples reached here.  /* #neg=539 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.375 seconds
Total inference time: 1.251 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064225
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.772 seconds
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.282 seconds
Total inference time: 1.251 seconds
AUC ROC: 1.0
Total revision time: 11.282
Best scored revision CLL: -0.064225


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 11:55:23
{'parameter_1.0': {'F1': 0.113837, 'Inference time': 1.367, 'Precision': [0.060354, 0.5], 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'Learning time': 2.693, 'CLL': -0.30058}, 'F1': 1.0, 'Inference time': 1.251, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 11.282, 'CLL': -0.063422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048766;  // std dev = 5,37e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.14185106490048816;  // std dev = 0,000, 575,000 (wgt'ed) examples reached here.  /* #neg=575 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.1254446385283923;  // std dev = 0,000, 597,000 (wgt'ed) examples reached here.  /* #neg=597 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1123163781936063;  // std dev = 3,65e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.11231637819360571;  // std dev = 0,000, 597,000 (wgt'ed) examples reached here.  /* #neg=597 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783624;  // std dev = 3,16e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.1015963294878355;  // std dev = 3,58e-07, 586,000 (wgt'ed) examples reached here.  /* #neg=586 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.09269127618926178;  // std dev = 0,000, 606,000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0851847513883968;  // std dev = 1,83e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.08518475138839678;  // std dev = 1,55e-07, 636,000 (wgt'ed) examples reached here.  /* #neg=636 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109172;  // std dev = 2,58e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.07877675473109225;  // std dev = 0,000, 563,000 (wgt'ed) examples reached here.  /* #neg=563 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2,73e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.07324622576333698;  // std dev = 1,37e-07, 602,000 (wgt'ed) examples reached here.  /* #neg=602 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420268;  // std dev = 1,49e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.06842697784420364;  // std dev = 0,000, 602,000 (wgt'ed) examples reached here.  /* #neg=602 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.0641918400820255;  // std dev = 2,39e-07, 612,000 (wgt'ed) examples reached here.  /* #neg=612 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.019 seconds
Total inference time: 1.485 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 11:55:28
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.485, 'Precision': [1.0, 0.5], 'Learning time': 4.019, 'AUC PR': 1.0, 'CLL': -0.063422, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048766;  // std dev = 6,32e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.14185106490048857;  // std dev = 0,000, 616,000 (wgt'ed) examples reached here.  /* #neg=616 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.419 seconds
Total inference time: 0.896 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 11:55:31
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.896, 'Precision': [nan, 0.5], 'Learning time': 1.419, 'AUC PR': 1.0, 'CLL': -0.152985, 'AUC ROC': 1.0}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5361150367944275;  // std dev = 0,467, 59,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048768;  // std dev = 4,71e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.38575476361128186;  // std dev = 0,489, 66,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2619901582807935;  // std dev = 0,497, 72,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360628;  // std dev = 4,34e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.2554007590581803;  // std dev = 3,970, 66,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=40 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783617;  // std dev = 4,71e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26718548335309067;  // std dev = 0,467, 59,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926107;  // std dev = 0,000, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13875602144055874;  // std dev = 0,487, 65,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0851847513883968;  // std dev = 1,83e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1783565405326182;  // std dev = 0,463, 58,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109179;  // std dev = 0,000, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1460963113542519;  // std dev = 0,457, 57,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.005639295748207253;  // std dev = 4,015, 67,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=40 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0684269778442027;  // std dev = 1,05e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.08522843892222544;  // std dev = 3,589, 59,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=40 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.271869
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.148 seconds
Total inference time: 1.845 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.862254
   AUC PR    = 0.063593
   CLL	      = -0.31015
   Precision = 0.063593 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.119581


Total scoring time: 1.301 seconds
Parameter learned model CLL: -0.31015


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.71e-08, 45, 0], 'true,true': [0.467, 19, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 58, 0], 'true,true': [0.489, 26, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.34e-08, 59, 0], 'true,true': [0.497, 32, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [4.71e-08, 68, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.97, 26, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 66, 0], 'true,true': [0.467, 19, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.83e-08, 51, 0], 'true,true': [0.487, 25, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 51, 0], 'true,true': [0.463, 18, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 62, 0], 'true,true': [0.457, 17, 40], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [4.015, 27, 40], 'false': [1.05e-08, 47, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 44, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [3.589, 19, 40], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21832806664751578, 4.9343245538895844e-17], 'true': [0.21832806664751578, nan]}, {'': [0.23875114784205737, -4.0197730201945323e-17], 'true': [0.23875114784205737, nan]}, {'': [0.2469135802469129, 3.198947698072485e-17], 'true': [0.2469135802469129, nan]}, {'': [0.2387511478420568, 3.2653618371328135e-17], 'true': [0.2387511478420568, nan], 'true,true': [0.2387511478420568, nan]}, {'': [0.2183280666475154, -1.6821560979169039e-18], 'true': [0.2183280666475154, nan]}, {'': [0.2366863905325442, 6.530723674265627e-18], 'true': [0.2366863905325442, nan]}, {'': [0.2140309155766942, 0.0], 'true': [0.2140309155766942, nan]}, {'': [0.2092951677439211, -8.953411488912552e-19], 'true': [0.2092951677439211, nan]}, {'': [0.24058810425484511, 2.362176648138631e-18], 'true': [0.24058810425484511, nan], 'true,true': [0.24058810425484511, nan], 'true,true,true': [0.24058810425484511, nan]}, {'': [0.21832806664751517, -2.523234146875356e-18], 'true': [0.21832806664751517, nan], 'true,true': [0.21832806664751517, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.14185106490048777;  // std dev = 1,05e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.14185106490048766;  // std dev = 6,50e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.719473412210955;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.12544463852839158;  // std dev = 0,000, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462842;  // std dev = 1,40e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.11658311598468292;  // std dev = 0,113, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.11231637819360635;  // std dev = 1,49e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1012075465396774;  // std dev = 1,83e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.4175135841583102;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.10159632948783619;  // std dev = 4,21e-08, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09236565645707587;  // std dev = 1,49e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.09269127618926107;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08490833153106309;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.0851847513883968;  // std dev = 1,97e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0785393461688785;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.20975771563253542;  // std dev = 5,96e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.07877675473109176;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.07304023549864949;  // std dev = 6,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.07324622576333704;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936709;  // std dev = 3,94e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.06824664043097568;  // std dev = 3,73e-09, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.06842697784420271;  // std dev = 1,05e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1340070300080111;  // std dev = 1,83e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.06403270440830314;  // std dev = 9,86e-09, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.06419184008202625;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.088431
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.666 seconds
Total inference time: 1.671 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065347
   Precision = 0.888889 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.941176


Total scoring time: 1.161 seconds
Refined model CLL: -0.065347


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.088431
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 5.276 seconds
Total inference time: 1.671 seconds
AUC ROC: 1.0
Total revision time: 5.276
Best scored revision CLL: -0.065347


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 11:55:40
{'parameter_0.2': {'F1': 0.309835, 'Inference time': 1.845, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.148, 'CLL': -0.271869}, 'F1': 0.770563, 'Inference time': 1.671, 'Precision': [0.626761, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.276, 'CLL': -0.088431}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 6,66e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839144;  // std dev = 0,000, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210955;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360628;  // std dev = 4,59e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462842;  // std dev = 1,40e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783615;  // std dev = 5,77e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583102;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926107;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014944;  // std dev = 2,98e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(A) )
%   | then return -0.08518475138839679;  // std dev = 1,83e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else if ( movie(D, A), movie(D, B) )
%   | | then return -0.2500955028989253;  // std dev = 0,571, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253542;  // std dev = 5,96e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07849758600590047;  // std dev = 0,016, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527753;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07303320599702337;  // std dev = 0,015, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936709;  // std dev = 3,94e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06834950075889805;  // std dev = 0,010, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06369115298439748;  // std dev = 0,018, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080111;  // std dev = 1,83e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095366
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.917 seconds
Total inference time: 1.35 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 11:55:44
{'F1': 0.770563, 'Recall': 1.0, 'Inference time': 1.35, 'Precision': [0.626761, 0.5], 'Learning time': 1.917, 'AUC PR': 1.0, 'CLL': -0.095366, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 6,66e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995117;  // std dev = 2,46e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.193993
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.727 seconds
Total inference time: 0.899 seconds
AUC ROC: 0.985041


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 11:55:46
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.899, 'Precision': [nan, 0.5], 'Learning time': 0.727, 'AUC PR': 0.626761, 'CLL': -0.193993, 'AUC ROC': 0.985041}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.47178529873587466;  // std dev = 0,487, 132,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,43e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.45996665970961886;  // std dev = 0,470, 121,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839133;  // std dev = 0,000, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3576068276209457;  // std dev = 0,476, 124,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360618;  // std dev = 8,82e-08, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.24803370102624636;  // std dev = 5,525, 130,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=81 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783633;  // std dev = 0,000, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16527716785514496;  // std dev = 0,490, 135,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892608;  // std dev = 7,60e-08, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.17753920194752962;  // std dev = 0,476, 124,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0851847513883968;  // std dev = 6,75e-08, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11775380488268518;  // std dev = 0,481, 127,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109157;  // std dev = 6,32e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08846560428134906;  // std dev = 0,481, 127,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333709;  // std dev = 4,71e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.09281293688894962;  // std dev = 5,217, 122,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=81 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 5,87e-08, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.015332479107387576;  // std dev = 5,628, 133,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=81 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 3,07e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.264607
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.542 seconds
Total inference time: 1.593 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.861001
   AUC PR    = 0.06378
   CLL	      = -0.301967
   Precision = 0.06378 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.119911


Total scoring time: 2.058 seconds
Parameter learned model CLL: -0.301967


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.43e-08, 108, 0], 'true,true': [0.487, 51, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 110, 0], 'true,true': [0.47, 40, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.82e-08, 113, 0], 'true,true': [0.476, 43, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 110, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [5.525, 49, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.6e-08, 124, 0], 'true,true': [0.49, 54, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.75e-08, 129, 0], 'true,true': [0.476, 43, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [6.32e-08, 109, 0], 'true,true': [0.481, 46, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.71e-08, 111, 0], 'true,true': [0.481, 46, 81], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [5.217, 41, 81], 'false': [5.87e-08, 124, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [3.07e-08, 112, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [5.628, 52, 81], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23708677685950538, 6.579099405186112e-17], 'true': [0.23708677685950538, nan]}, {'': [0.22129635953828458, -8.074349270001138e-18], 'true': [0.22129635953828458, nan]}, {'': [0.2265218522372527, 6.877487763164686e-17], 'true': [0.2265218522372527, nan]}, {'': [0.23485207100591704, -6.0557619525008536e-18], 'true': [0.23485207100591704, nan], 'true,true': [0.23485207100591704, nan]}, {'': [0.23999999999999982, 4.6557739742345276e-17], 'true': [0.23999999999999982, nan]}, {'': [0.2265218522372525, 3.52861581470011e-17], 'true': [0.2265218522372525, nan]}, {'': [0.23101246202492376, 3.66679164096382e-17], 'true': [0.23101246202492376, nan]}, {'': [0.23101246202492365, 2.000401846171453e-17], 'true': [0.23101246202492365, nan]}, {'': [0.22312550389680133, 2.7755575615628914e-17], 'true': [0.22312550389680133, nan], 'true,true': [0.22312550389680133, nan], 'true,true,true': [0.22312550389680133, nan]}, {'': [0.23811408219797592, 8.425799740458777e-18], 'true': [0.23811408219797592, nan], 'true,true': [0.23811408219797592, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 5,77e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.1418510649004877;  // std dev = 5,58e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109537;  // std dev = 2,53e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.1287442544701076;  // std dev = 0,153, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.12544463852839105;  // std dev = 8,02e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462836;  // std dev = 3,42e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.11198782242275068;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.1123163781936062;  // std dev = 9,19e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10132546822340026;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0.4175135841583104;  // std dev = 8,43e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.10159632948783663;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09246444014724624;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0.3207118471601501;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.09269127618926083;  // std dev = 7,45e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( actor(A) )
%   | | then return -0.08499220405108417;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.1634133797618973;  // std dev = 0,430, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0851847513883968;  // std dev = 6,50e-08, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0781534137450461;  // std dev = 0,011, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0.20975771563253567;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.07877675473109157;  // std dev = 6,50e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527716;  // std dev = 3,65e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( actor(A) )
%   | | then return -0.07313379392825665;  // std dev = 0,000, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.16778040036193212;  // std dev = 0,446, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333714;  // std dev = 0,000, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367116;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.06701729457922792;  // std dev = 0,021, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06842697784420264;  // std dev = 5,77e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080109;  // std dev = 5,58e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( female(A) )
%   | | then return -0.06418370935116126;  // std dev = 8,33e-09, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( female(B) )
%   | | | then return -0.06418370935116126;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.0968109243632536;  // std dev = 0,483, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.06419184008202626;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.085156
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 2.147 seconds
Total inference time: 1.572 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064106
   Precision = 0.931034 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.964286


Total scoring time: 1.782 seconds
Refined model CLL: -0.064106


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.085156
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 7.529 seconds
Total inference time: 1.572 seconds
AUC ROC: 1.0
Total revision time: 7.529
Best scored revision CLL: -0.064106


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 11:55:57
{'F1': 0.770563, 'Inference time': 1.572, 'Precision': [0.626761, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.309835, 'Inference time': 1.593, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.542, 'CLL': -0.264607}, 'Recall': 1.0, 'Learning time': 7.529, 'CLL': -0.085156}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048813;  // std dev = 0,000, 158,000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109537;  // std dev = 2,53e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.1263960615299905;  // std dev = 0,155, 163,000 (wgt'ed) examples reached here.  /* #neg=163 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11222155496223477;  // std dev = 3,94e-08, 156,000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462836;  // std dev = 3,42e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583104;  // std dev = 8,43e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10151811833662362;  // std dev = 8,62e-06, 166,000 (wgt'ed) examples reached here.  /* #neg=166 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09262583476617262;  // std dev = 8,56e-08, 165,000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601501;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08512913005388185;  // std dev = 1,24e-05, 158,000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08062312171600217;  // std dev = 0,327, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527716;  // std dev = 3,65e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07307638067930755;  // std dev = 1,08e-05, 149,000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06827835711887074;  // std dev = 0,000, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return 0.15274385809367116;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080109;  // std dev = 5,58e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.07882908541119708;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06415302147116941;  // std dev = 0,015, 158,000 (wgt'ed) examples reached here.  /* #neg=158 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.080751
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.29 seconds
Total inference time: 1.273 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 11:56:01
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.273, 'Precision': [1.0, 0.5], 'Learning time': 2.29, 'AUC PR': 1.0, 'CLL': -0.080751, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004882;  // std dev = 0,000, 167,000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.193993
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.918 seconds
Total inference time: 0.916 seconds
AUC ROC: 0.985041


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 11:56:03
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.916, 'Precision': [nan, 0.5], 'Learning time': 0.918, 'AUC PR': 0.626761, 'CLL': -0.193993, 'AUC ROC': 0.985041}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5397131809095653;  // std dev = 0,466, 179,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048827;  // std dev = 0,000, 177,000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4494051484672099;  // std dev = 0,470, 182,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839152;  // std dev = 0,000, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.341233521350832;  // std dev = 0,477, 188,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360651;  // std dev = 0,000, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.2677068917748092;  // std dev = 6,512, 187,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878365;  // std dev = 0,000, 177,000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22434759325670162;  // std dev = 0,469, 181,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0926912761892606;  // std dev = 8,69e-08, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12003967604289494;  // std dev = 0,484, 195,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 6,99e-08, 165,000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15371412752720173;  // std dev = 0,463, 177,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109148;  // std dev = 8,43e-08, 169,000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07890285340235091;  // std dev = 0,476, 187,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333678;  // std dev = 8,30e-08, 156,000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.03295921851764395;  // std dev = 6,758, 195,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=122 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 7,30e-08, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.018675792572423047;  // std dev = 6,815, 197,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=122 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 167,000 (wgt'ed) examples reached here.  /* #neg=167 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.268111
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.71 seconds
Total inference time: 1.581 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.861185
   AUC PR    = 0.064109
   CLL	      = -0.3067
   Precision = 0.064109 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.120494


Total scoring time: 2.012 seconds
Parameter learned model CLL: -0.3067


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 177, 0], 'true,true': [0.466, 57, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 179, 0], 'true,true': [0.47, 60, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 182, 0], 'true,true': [0.477, 66, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 177, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.512, 65, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.69e-08, 183, 0], 'true,true': [0.469, 59, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.99e-08, 165, 0], 'true,true': [0.484, 73, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.43e-08, 169, 0], 'true,true': [0.463, 55, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.3e-08, 156, 0], 'true,true': [0.476, 65, 122], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [6.758, 73, 122], 'false': [7.3e-08, 168, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 167, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.815, 75, 122], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21703442464342967, -1.9068237259098733e-16], 'true': [0.21703442464342967, nan]}, {'': [0.22098780340538196, -1.4885671838549585e-17], 'true': [0.22098780340538196, nan]}, {'': [0.22781801720235384, -2.4400506035717728e-18], 'true': [0.22781801720235384, nan]}, {'': [0.226772284022991, -8.279629336187608e-17], 'true': [0.226772284022991, nan], 'true,true': [0.226772284022991, nan]}, {'': [0.2197124629895308, 4.125418889317522e-17], 'true': [0.2197124629895308, nan]}, {'': [0.2342143326758717, 2.960594732333751e-17], 'true': [0.2342143326758717, nan]}, {'': [0.2141785566088924, 4.204394886154439e-17], 'true': [0.2141785566088924, nan]}, {'': [0.2267722840229913, 4.412424841458955e-17], 'true': [0.2267722840229913, nan]}, {'': [0.23421433267587075, 3.172065784643304e-17], 'true': [0.23421433267587075, nan], 'true,true': [0.23421433267587075, nan], 'true,true,true': [0.23421433267587075, nan]}, {'': [0.23577005333814377, -7.312846269986062e-18], 'true': [0.23577005333814377, nan], 'true,true': [0.23577005333814377, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 6,66e-08, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.14185106490048838;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109553;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.12831652647766292;  // std dev = 0,154, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.12544463852839158;  // std dev = 0,000, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,69e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.11203036555592581;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.11231637819360646;  // std dev = 0,000, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10136054801078663;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0.4175135841583093;  // std dev = 3,53e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.10159632948783648;  // std dev = 0,000, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09249382332503767;  // std dev = 2,11e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0.3207118471601499;  // std dev = 2,19e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.0926912761892606;  // std dev = 8,82e-08, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2551722425694898;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.08501714944117206;  // std dev = 2,36e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.08518475138839678;  // std dev = 8,02e-08, 211,000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07863281890694475;  // std dev = 2,69e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0.2097577156325354;  // std dev = 1,93e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.07877675473109148;  // std dev = 7,88e-08, 177,000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07312134759086168;  // std dev = 7,45e-09, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0.1770964977452781;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.0732462257633367;  // std dev = 1,07e-07, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06831765854625578;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0.1527438580936714;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.06842697784420262;  // std dev = 7,60e-08, 177,000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06409537882272877;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0.1340070300080111;  // std dev = 5,16e-08, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.06419184008202626;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.104286
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 2.305 seconds
Total inference time: 1.424 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064987
   Precision = 0.945736 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.972112


Total scoring time: 2.398 seconds
Refined model CLL: -0.064987


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.104286
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 8.425 seconds
Total inference time: 1.424 seconds
AUC ROC: 1.0
Total revision time: 8.425
Best scored revision CLL: -0.064987


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 11:56:15
{'F1': 0.770563, 'Inference time': 1.424, 'Precision': [0.626761, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.309835, 'Inference time': 1.581, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 1.71, 'CLL': -0.268111}, 'Recall': 1.0, 'Learning time': 8.425, 'CLL': -0.104286}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.14185106490048852;  // std dev = 0,000, 228,000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109553;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.12544463852839186;  // std dev = 0,000, 247,000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,69e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.11231637819360672;  // std dev = 0,000, 224,000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583093;  // std dev = 3,53e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.10159632948783653;  // std dev = 0,000, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926049;  // std dev = 7,88e-08, 236,000 (wgt'ed) examples reached here.  /* #neg=236 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 2,19e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839678;  // std dev = 8,69e-08, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694898;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325354;  // std dev = 1,93e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.07907673233908609;  // std dev = 0,075, 250,000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452781;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07322586552508172;  // std dev = 2,11e-08, 240,000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936714;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06840915586221999;  // std dev = 5,96e-08, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080111;  // std dev = 5,16e-08, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.0644251821435038;  // std dev = 0,063, 253,000 (wgt'ed) examples reached here.  /* #neg=253 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067285
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.866 seconds
Total inference time: 1.54 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 11:56:20
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.54, 'Precision': [1.0, 0.5], 'Learning time': 2.866, 'AUC PR': 1.0, 'CLL': -0.067285, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.1418510649004885;  // std dev = 0,000, 219,000 (wgt'ed) examples reached here.  /* #neg=219 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.016 seconds
Total inference time: 0.977 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 11:56:22
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.977, 'Precision': [nan, 0.5], 'Learning time': 1.016, 'AUC PR': 1.0, 'CLL': -0.188432, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5180679634395897;  // std dev = 0,474, 247,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048832;  // std dev = 0,000, 241,000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.39098742754088595;  // std dev = 0,488, 268,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839186;  // std dev = 0,000, 247,000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3533538429403484;  // std dev = 0,479, 253,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360679;  // std dev = 0,000, 236,000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.2654930358938716;  // std dev = 7,721, 257,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=163 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783658;  // std dev = 0,000, 240,000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.18974522658812812;  // std dev = 0,485, 262,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926047;  // std dev = 8,43e-08, 240,000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15729524817436824;  // std dev = 0,481, 256,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 9,06e-08, 247,000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08497678158620048;  // std dev = 0,489, 270,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109144;  // std dev = 6,99e-08, 229,000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09682385575702898;  // std dev = 0,481, 256,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0732462257633367;  // std dev = 1,26e-07, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.11251297261191681;  // std dev = 7,263, 241,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=163 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420276;  // std dev = 0,000, 255,000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.060720724743503485;  // std dev = 7,532, 250,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=163 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202625;  // std dev = 2,58e-08, 244,000 (wgt'ed) examples reached here.  /* #neg=244 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.268472
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 2.156 seconds
Total inference time: 1.652 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.86141
   AUC PR    = 0.064325
   CLL	      = -0.30684
   Precision = 0.064325 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.120875


Total scoring time: 2.722 seconds
Parameter learned model CLL: -0.30684


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 241, 0], 'true,true': [0.474, 84, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 247, 0], 'true,true': [0.488, 105, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 236, 0], 'true,true': [0.479, 90, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 240, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.721, 94, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.43e-08, 240, 0], 'true,true': [0.485, 99, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.06e-08, 247, 0], 'true,true': [0.481, 93, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [6.99e-08, 229, 0], 'true,true': [0.489, 107, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.26e-07, 233, 0], 'true,true': [0.481, 93, 163], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [7.263, 78, 163], 'false': [0.0, 255, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.58e-08, 244, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.532, 87, 163], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22442590437476964, -1.6584244351247152e-16], 'true': [0.22442590437476964, nan]}, {'': [0.2382908220093545, -6.292762082895624e-17], 'true': [0.2382908220093545, nan]}, {'': [0.22918652064553763, -8.091455942183344e-17], 'true': [0.22918652064553763, nan]}, {'': [0.23197928810428617, -7.401486830834377e-17], 'true': [0.23197928810428617, nan], 'true,true': [0.23197928810428617, nan]}, {'': [0.23508245440242467, 2.960594732333751e-17], 'true': [0.23508245440242467, nan]}, {'': [0.23130798339843756, 3.3261742438162584e-17], 'true': [0.23130798339843756, nan]}, {'': [0.23924554183813518, 2.1331796106334886e-17], 'true': [0.23924554183813518, nan]}, {'': [0.2313079833984374, 6.766166072822842e-17], 'true': [0.2313079833984374, nan]}, {'': [0.2189011897178082, -1.3061447348531253e-17], 'true': [0.2189011897178082, nan], 'true,true': [0.2189011897178082, nan], 'true,true,true': [0.2189011897178082, nan]}, {'': [0.22689600000000043, 2.7300566179307128e-18], 'true': [0.22689600000000043, nan], 'true,true': [0.22689600000000043, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8,69e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.1418510649004884;  // std dev = 0,000, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839144;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0.7194734122109564;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.12544463852839188;  // std dev = 0,000, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1123163781936062;  // std dev = 8,02e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0.5553664367462833;  // std dev = 5,53e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.11231637819360671;  // std dev = 0,000, 219,000 (wgt'ed) examples reached here.  /* #neg=219 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415830914;  // std dev = 4,38e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.10665833039682417;  // std dev = 0,478, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.10159632948783656;  // std dev = 0,000, 223,000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09226644075150586;  // std dev = 0,000, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0.3207118471601493;  // std dev = 3,63e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.09269127618926047;  // std dev = 9,19e-08, 244,000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08482407934538652;  // std dev = 2,98e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0.2551722425694906;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.08518475138839678;  // std dev = 9,06e-08, 250,000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07846696393850293;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0.20975771563253515;  // std dev = 2,65e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.07877675473109144;  // std dev = 6,99e-08, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07297741655834919;  // std dev = 0,000, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0.17709649774527822;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.07324622576333685;  // std dev = 1,13e-07, 265,000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0681916324970879;  // std dev = 0,000, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0.15274385809367147;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.06842697784420261;  // std dev = 6,32e-08, 225,000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06398415410528989;  // std dev = 0,000, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0.1340070300080108;  // std dev = 9,42e-08, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.06419184008202625;  // std dev = 2,36e-08, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.111529
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 2.651 seconds
Total inference time: 1.502 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065544
   Precision = 0.936782 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967359


Total scoring time: 1.698 seconds
Refined model CLL: -0.065544


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.111529
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 9.227 seconds
Total inference time: 1.502 seconds
AUC ROC: 1.0
Total revision time: 9.227
Best scored revision CLL: -0.065544


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 11:56:35
{'F1': 0.770563, 'Inference time': 1.502, 'Precision': [0.626761, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.309835, 'Inference time': 1.652, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 2.156, 'CLL': -0.268472}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 9.227, 'CLL': -0.111529}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.141851064900488;  // std dev = 0,000, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109564;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.12544463852839205;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 5,53e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.11231637819360674;  // std dev = 0,000, 328,000 (wgt'ed) examples reached here.  /* #neg=328 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783662;  // std dev = 0,000, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830914;  // std dev = 4,38e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601493;  // std dev = 3,63e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.09269127618926044;  // std dev = 1,62e-07, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694906;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253515;  // std dev = 2,65e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07892651160170448;  // std dev = 0,047, 313,000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.0732360607344883;  // std dev = 0,000, 311,000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.06854800278791051;  // std dev = 0,041, 319,000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 9,42e-08, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06417618628456853;  // std dev = 5,58e-08, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066571
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.806 seconds
Total inference time: 1.612 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 11:56:40
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.612, 'Precision': [1.0, 0.5], 'Learning time': 2.806, 'AUC PR': 1.0, 'CLL': -0.066571, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048802;  // std dev = 0,000, 277,000 (wgt'ed) examples reached here.  /* #neg=277 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.193993
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.108 seconds
Total inference time: 0.873 seconds
AUC ROC: 0.985041


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 11:56:42
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.873, 'Precision': [nan, 0.5], 'Learning time': 1.108, 'AUC PR': 0.626761, 'CLL': -0.193993, 'AUC ROC': 0.985041}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5226440491060231;  // std dev = 0,472, 307,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004877;  // std dev = 1,55e-07, 318,000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.39645719598406176;  // std dev = 0,487, 332,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839205;  // std dev = 0,000, 314,000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3892826780583126;  // std dev = 0,466, 299,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360675;  // std dev = 0,000, 313,000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.26199649874853853;  // std dev = 8,552, 318,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 291,000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.19866342780668492;  // std dev = 0,480, 318,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926043;  // std dev = 1,83e-07, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13931736698589997;  // std dev = 0,482, 323,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 294,000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1310006890759198;  // std dev = 0,474, 310,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 2,58e-08, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07994203761452699;  // std dev = 0,480, 319,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333698;  // std dev = 9,66e-08, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.06235482550560121;  // std dev = 8,552, 318,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420299;  // std dev = 0,000, 298,000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.06592105931684633;  // std dev = 8,326, 309,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 5,37e-08, 258,000 (wgt'ed) examples reached here.  /* #neg=258 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.270422
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 2.531 seconds
Total inference time: 1.535 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.861638
   AUC PR    = 0.064496
   CLL	      = -0.309232
   Precision = 0.064496 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121176


Total scoring time: 2.685 seconds
Parameter learned model CLL: -0.309232


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.55e-07, 318, 0], 'true,true': [0.472, 103, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 314, 0], 'true,true': [0.487, 128, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 313, 0], 'true,true': [0.466, 95, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 291, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.552, 114, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.83e-07, 312, 0], 'true,true': [0.48, 114, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.03e-07, 294, 0], 'true,true': [0.482, 119, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.58e-08, 307, 0], 'true,true': [0.474, 106, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.66e-08, 301, 0], 'true,true': [0.48, 115, 204], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [8.552, 114, 204], 'false': [0.0, 298, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [5.37e-08, 258, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.326, 105, 204], 'true,false': [0.0, 0, 0]}]]
[{'': [0.22294135746798838, 7.54113752575578e-17], 'true': [0.22294135746798838, nan]}, {'': [0.236899404848313, -8.768640449268753e-17], 'true': [0.236899404848313, nan]}, {'': [0.21677609870135336, -4.965853784265876e-17], 'true': [0.21677609870135336, nan]}, {'': [0.22997508009967782, -5.493887132165723e-17], 'true': [0.22997508009967782, nan], 'true,true': [0.22997508009967782, nan]}, {'': [0.22997508009967893, 1.0675221390626505e-16], 'true': [0.22997508009967893, nan]}, {'': [0.2326869806094167, 3.6252180395923476e-17], 'true': [0.2326869806094167, nan]}, {'': [0.22501560874089332, 2.1698169862380908e-18], 'true': [0.22501560874089332, nan]}, {'': [0.23054018730161932, 3.0982968129074136e-17], 'true': [0.23054018730161932, nan]}, {'': [0.2299750800996801, -5.513859316930308e-17], 'true': [0.2299750800996801, nan], 'true,true': [0.2299750800996801, nan], 'true,true,true': [0.2299750800996801, nan]}, {'': [0.22433782637383434, 1.1188294046610105e-17], 'true': [0.22433782637383434, nan], 'true,true': [0.22433782637383434, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048763;  // std dev = 8,16e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.14185106490048816;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839133;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.12544463852839205;  // std dev = 0,000, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1123163781936062;  // std dev = 7,88e-08, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360696;  // std dev = 0,000, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783663;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09577391794573005;  // std dev = 0,344, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.09269127618926043;  // std dev = 1,52e-07, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08817605578092766;  // std dev = 0,328, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.08518475138839678;  // std dev = 1,07e-07, 314,000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07833708875243058;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109141;  // std dev = 3,65e-08, 310,000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07586020551153952;  // std dev = 0,370, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.073246225763337;  // std dev = 9,42e-08, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07118530500256551;  // std dev = 0,356, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.06842697784420305;  // std dev = 0,000, 311,000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06661265857451525;  // std dev = 0,343, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.06419184008202593;  // std dev = 1,18e-07, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.077702
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.765 seconds
Total inference time: 1.446 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063897
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.482 seconds
Refined model CLL: -0.063897


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.077702
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.463000000000001 seconds
Total inference time: 1.446 seconds
AUC ROC: 1.0
Total revision time: 10.463000000000001
Best scored revision CLL: -0.063897


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 11:56:56
{'parameter_1.0': {'F1': 0.309835, 'Inference time': 1.535, 'Precision': [0.183316, 0.5], 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'Learning time': 2.531, 'CLL': -0.270422}, 'F1': 1.0, 'Inference time': 1.446, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.463000000000001, 'CLL': -0.077702}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.14185106490048754;  // std dev = 2,29e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.12544463852839227;  // std dev = 0,000, 419,000 (wgt'ed) examples reached here.  /* #neg=419 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.11231637819360633;  // std dev = 0,000, 401,000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.10159632948783633;  // std dev = 9,42e-08, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926092;  // std dev = 1,41e-07, 404,000 (wgt'ed) examples reached here.  /* #neg=404 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.31869524655844467;  // std dev = 0,412, 205,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=204 */
%   | else return -0.09269127618926093;  // std dev = 1,05e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25555570560110225;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.08528073767982178;  // std dev = 0,038, 396,000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21002855188069486;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.0788605966000047;  // std dev = 0,035, 391,000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17729511779160206;  // std dev = 1,58e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.07323401974586202;  // std dev = 1,23e-07, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1528945146412648;  // std dev = 1,19e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.0684162935894791;  // std dev = 1,71e-07, 409,000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.134124634255375;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.0641824132720313;  // std dev = 0,000, 408,000 (wgt'ed) examples reached here.  /* #neg=408 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066296
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.149 seconds
Total inference time: 1.746 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 11:57:01
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.746, 'Precision': [1.0, 0.5], 'Learning time': 3.149, 'AUC PR': 1.0, 'CLL': -0.066296, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.1418510649004875;  // std dev = 2,51e-07, 391,000 (wgt'ed) examples reached here.  /* #neg=391 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.3 seconds
Total inference time: 0.919 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 11:57:04
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.919, 'Precision': [nan, 0.5], 'Learning time': 1.3, 'AUC PR': 1.0, 'CLL': -0.188432, 'AUC ROC': 1.0}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4728278341820821;  // std dev = 0,487, 109,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,43e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5266362294094542;  // std dev = 0,441, 91,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839133;  // std dev = 0,000, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2830094654306593;  // std dev = 0,491, 113,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360621;  // std dev = 7,45e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.28993552746387163;  // std dev = 4,749, 101,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783621;  // std dev = 5,05e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13423961091986394;  // std dev = 0,494, 116,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 5,05e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1553963715298756;  // std dev = 0,482, 106,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0851847513883968;  // std dev = 5,37e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12258895244161269;  // std dev = 0,481, 105,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0787767547310916;  // std dev = 5,58e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08014040846834299;  // std dev = 0,484, 107,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 4,83e-08, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.021909717513708828;  // std dev = 5,256, 114,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=67 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 5,11e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.09218217977275435;  // std dev = 4,749, 101,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 2,36e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.311541
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.363 seconds
Total inference time: 1.277 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.863305
   AUC PR    = 0.090296
   CLL	      = -0.297545
   Precision = 0.090296 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.165637


Total scoring time: 1.253 seconds
Parameter learned model CLL: -0.297545


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.43e-08, 108, 0], 'true,true': [0.487, 42, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 109, 0], 'true,true': [0.441, 24, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.45e-08, 93, 0], 'true,true': [0.491, 46, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [5.05e-08, 90, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.749, 34, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.05e-08, 102, 0], 'true,true': [0.494, 49, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.37e-08, 92, 0], 'true,true': [0.482, 39, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [5.58e-08, 96, 0], 'true,true': [0.481, 38, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [4.83e-08, 106, 0], 'true,true': [0.484, 40, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [5.256, 47, 67], 'false': [5.11e-08, 104, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.36e-08, 92, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.749, 34, 67], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23684875010520934, 6.579099405186112e-17], 'true': [0.23684875010520934, nan]}, {'': [0.1941794469267002, -8.148425868808489e-18], 'true': [0.1941794469267002, nan]}, {'': [0.241365807815803, 5.968940992608368e-17], 'true': [0.241365807815803, nan]}, {'': [0.2233114400548959, 2.837236618486511e-17], 'true': [0.2233114400548959, nan], 'true,true': [0.2233114400548959, nan]}, {'': [0.24398038049940596, 2.503444075135157e-17], 'true': [0.24398038049940596, nan]}, {'': [0.23255606977572094, 3.137586808723268e-17], 'true': [0.23255606977572094, nan]}, {'': [0.23092970521541942, 3.23815048849004e-17], 'true': [0.23092970521541942, nan]}, {'': [0.23408157917722144, 2.1994984450121027e-17], 'true': [0.23408157917722144, nan]}, {'': [0.24230532471529687, 2.5086770267972287e-17], 'true': [0.24230532471529687, nan], 'true,true': [0.24230532471529687, nan], 'true,true,true': [0.24230532471529687, nan]}, {'': [0.22331144005489675, 6.033820786006285e-18], 'true': [0.22331144005489675, nan], 'true,true': [0.22331144005489675, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004877;  // std dev = 2,58e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.12544463852839136;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.11231637819360621;  // std dev = 7,45e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.10159632948783638;  // std dev = 0,000, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10038219567309416;  // std dev = 0,111, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.09269127618926086;  // std dev = 7,07e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08458731997105094;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.0851847513883968;  // std dev = 6,50e-08, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07826350906760422;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.07877675473109161;  // std dev = 5,48e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07280080332354438;  // std dev = 1,18e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.07324622576333707;  // std dev = 0,000, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07802567266053899;  // std dev = 0,219, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.06842697784420265;  // std dev = 4,89e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.0740508633838724;  // std dev = 0,252, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.06419184008202626;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063753
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.883 seconds
Total inference time: 1.099 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065533
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.414 seconds
Refined model CLL: -0.065533


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063753
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.912999999999999 seconds
Total inference time: 1.099 seconds
AUC ROC: 1.0
Total revision time: 5.912999999999999
Best scored revision CLL: -0.065533


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 11:57:13
{'parameter_0.2': {'F1': 0.140406, 'Inference time': 1.277, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 1.363, 'CLL': -0.311541}, 'F1': 1.0, 'Inference time': 1.099, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.912999999999999, 'CLL': -0.063753}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.1418510649004879;  // std dev = 0,000, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.12544463852839113;  // std dev = 7,60e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.11231637819360622;  // std dev = 8,16e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.1015963294878364;  // std dev = 0,000, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.092691276189261;  // std dev = 4,21e-08, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839678;  // std dev = 5,87e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2501669926583443;  // std dev = 0,338, 68,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21058858823980484;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.0794389913469663;  // std dev = 0,048, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1777056638663227;  // std dev = 2,11e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07339160929238141;  // std dev = 0,026, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1532058148136281;  // std dev = 6,83e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0683755142591896;  // std dev = 4,08e-08, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13436756923804596;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.0643095259945255;  // std dev = 0,023, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063855
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.059 seconds
Total inference time: 1.203 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 11:57:16
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.203, 'Precision': [1.0, 0.5], 'Learning time': 2.059, 'AUC PR': 1.0, 'CLL': -0.063855, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.14185106490048777;  // std dev = 2,98e-08, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.775 seconds
Total inference time: 0.806 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 11:57:18
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.806, 'Precision': [nan, 0.5], 'Learning time': 0.775, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.534916611867186;  // std dev = 0,468, 198,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048838;  // std dev = 0,000, 198,000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4119754151080696;  // std dev = 0,482, 212,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839155;  // std dev = 0,000, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3454494732947191;  // std dev = 0,479, 208,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360643;  // std dev = 0,000, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.30793088132898494;  // std dev = 6,511, 196,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783655;  // std dev = 0,000, 205,000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1588574865288112;  // std dev = 0,488, 220,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926058;  // std dev = 8,94e-08, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2267936510594699;  // std dev = 0,451, 187,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,30e-08, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1105152982723971;  // std dev = 0,475, 204,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109148;  // std dev = 7,88e-08, 178,000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09309494045570758;  // std dev = 0,471, 201,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333668;  // std dev = 1,10e-07, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.04192478212517696;  // std dev = 6,964, 210,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=134 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 8,09e-08, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.06714493368116115;  // std dev = 6,616, 199,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.331166
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.034 seconds
Total inference time: 1.099 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.866039
   AUC PR    = 0.09197
   CLL	      = -0.31083
   Precision = 0.09197 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.168448


Total scoring time: 2.273 seconds
Parameter learned model CLL: -0.31083


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 198, 0], 'true,true': [0.468, 64, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 181, 0], 'true,true': [0.482, 78, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 175, 0], 'true,true': [0.479, 74, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 205, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.511, 62, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.94e-08, 190, 0], 'true,true': [0.488, 86, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.3e-08, 183, 0], 'true,true': [0.451, 53, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [7.88e-08, 178, 0], 'true,true': [0.475, 70, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.1e-07, 186, 0], 'true,true': [0.471, 67, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [6.964, 76, 134], 'false': [8.09e-08, 196, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 206, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.616, 65, 134], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21875318845016267, -2.377447285055891e-16], 'true': [0.21875318845016267, nan]}, {'': [0.2325560697757203, -1.7174720822930598e-17], 'true': [0.2325560697757203, nan]}, {'': [0.2291974852071016, -7.612957883143931e-18], 'true': [0.2291974852071016, nan]}, {'': [0.21626405664306594, -8.448526431293874e-17], 'true': [0.21626405664306594, nan], 'true,true': [0.21626405664306594, nan]}, {'': [0.23809917355371843, 4.207160935421646e-17], 'true': [0.23809917355371843, nan]}, {'': [0.2030941691212206, 2.912060392459427e-17], 'true': [0.2030941691212206, nan]}, {'': [0.22539407920030816, 3.4928364819667845e-17], 'true': [0.22539407920030816, nan]}, {'': [0.22222222222222268, 6.446456272017038e-17], 'true': [0.22222222222222268, nan]}, {'': [0.23092970521541975, 3.341997880249196e-17], 'true': [0.23092970521541975, nan], 'true,true': [0.23092970521541975, nan], 'true,true,true': [0.23092970521541975, nan]}, {'': [0.21994394080957586, -1.616829647512364e-18], 'true': [0.21994394080957586, nan], 'true,true': [0.21994394080957586, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048768;  // std dev = 7,45e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.14185106490048827;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.1254446385283917;  // std dev = 0,000, 205,000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360626;  // std dev = 5,77e-08, 83,000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.11231637819360663;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783627;  // std dev = 2,58e-08, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.10159632948783655;  // std dev = 0,000, 220,000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926104;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.09269127618926055;  // std dev = 9,42e-08, 208,000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839679;  // std dev = 1,05e-08, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.08518475138839678;  // std dev = 7,15e-08, 178,000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.0787767547310917;  // std dev = 2,69e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.07877675473109147;  // std dev = 7,60e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.07324622576333666;  // std dev = 1,15e-07, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420268;  // std dev = 2,58e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else return -0.06842697784420262;  // std dev = 8,43e-08, 208,000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.06419184008202626;  // std dev = 0,000, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.381 seconds
Total inference time: 1.206 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064052
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.602 seconds
Refined model CLL: -0.064052


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.290000000000001 seconds
Total inference time: 1.206 seconds
AUC ROC: 1.0
Total revision time: 8.290000000000001
Best scored revision CLL: -0.064052


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 11:57:29
{'F1': 1.0, 'Inference time': 1.206, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.140406, 'Inference time': 1.099, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 2.034, 'CLL': -0.331166}, 'Recall': 1.0, 'Learning time': 8.290000000000001, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.1418510649004883;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.12544463852839177;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.11231637819360671;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.10159632948783655;  // std dev = 0,000, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.09269127618926057;  // std dev = 6,66e-08, 261,000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 250,000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.07877675473109144;  // std dev = 6,66e-08, 250,000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.07324622576333667;  // std dev = 1,24e-07, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.06842697784420261;  // std dev = 6,14e-08, 218,000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.06419184008202626;  // std dev = 0,000, 242,000 (wgt'ed) examples reached here.  /* #neg=242 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.671 seconds
Total inference time: 1.189 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 11:57:33
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.189, 'Precision': [1.0, 0.5], 'Learning time': 2.671, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.14185106490048846;  // std dev = 0,000, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.055 seconds
Total inference time: 0.796 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 11:57:35
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.796, 'Precision': [nan, 0.5], 'Learning time': 1.055, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5644426413932149;  // std dev = 0,455, 286,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048804;  // std dev = 0,000, 271,000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4414564283068237;  // std dev = 0,471, 303,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839202;  // std dev = 0,000, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.308343102698504;  // std dev = 0,485, 326,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360688;  // std dev = 0,000, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.26654247443195533;  // std dev = 8,439, 312,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.16856718253725064;  // std dev = 0,487, 329,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926043;  // std dev = 1,49e-07, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.14390933659034244;  // std dev = 0,482, 320,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,07e-07, 315,000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.10795159283609342;  // std dev = 0,482, 320,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109141;  // std dev = 4,71e-08, 286,000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1209621884796348;  // std dev = 0,470, 301,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0732462257633369;  // std dev = 1,06e-07, 279,000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.07386747102261819;  // std dev = 8,364, 309,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=202 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.068426977844203;  // std dev = 0,000, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.04353340296072849;  // std dev = 8,513, 315,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820261;  // std dev = 8,02e-08, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.32136
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.217 seconds
Total inference time: 1.315 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.868098
   AUC PR    = 0.093692
   CLL	      = -0.298479
   Precision = 0.093692 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.171332


Total scoring time: 2.818 seconds
Parameter learned model CLL: -0.298479


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 271, 0], 'true,true': [0.455, 84, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 312, 0], 'true,true': [0.471, 101, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 295, 0], 'true,true': [0.485, 124, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 303, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.439, 110, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.49e-07, 293, 0], 'true,true': [0.487, 127, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.07e-07, 315, 0], 'true,true': [0.482, 118, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [4.71e-08, 286, 0], 'true,true': [0.482, 118, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.06e-07, 279, 0], 'true,true': [0.47, 99, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [8.364, 107, 202], 'false': [0.0, 299, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [8.02e-08, 275, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.513, 113, 202], 'true,false': [0.0, 0, 0]}]]
[{'': [0.20744290674361093, -5.243857828487824e-17], 'true': [0.20744290674361093, nan]}, {'': [0.2222222222222188, -8.82484968291791e-17], 'true': [0.2222222222222188, nan]}, {'': [0.2356882080620264, -9.182861627408074e-17], 'true': [0.2356882080620264, nan]}, {'': [0.2282626561472698, -5.422871539423207e-17], 'true': [0.2282626561472698, nan], 'true,true': [0.2282626561472698, nan]}, {'': [0.23700815772212278, 7.578314161263868e-17], 'true': [0.23700815772212278, nan]}, {'': [0.2327734375000004, 3.665498240032263e-17], 'true': [0.2327734375000004, nan]}, {'': [0.2327734374999999, 7.763797375001095e-18], 'true': [0.2327734374999999, nan]}, {'': [0.2207260405514288, 4.0588798749736907e-17], 'true': [0.2207260405514288, nan]}, {'': [0.22636964422241074, -5.71820554489211e-17], 'true': [0.22636964422241074, nan], 'true,true': [0.22636964422241074, nan], 'true,true,true': [0.22636964422241074, nan]}, {'': [0.2300428319475936, 2.34156128830033e-17], 'true': [0.2300428319475936, nan], 'true,true': [0.2300428319475936, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.14185106490048763;  // std dev = 7,88e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.14185106490048802;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839144;  // std dev = 0,000, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.12544463852839205;  // std dev = 0,000, 321,000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360624;  // std dev = 7,30e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.11231637819360667;  // std dev = 0,000, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783624;  // std dev = 4,71e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return -0.10159632948783663;  // std dev = 0,000, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.09269127618926044;  // std dev = 1,19e-07, 264,000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08518475138839679;  // std dev = 4,47e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109168;  // std dev = 3,80e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.07877675473109141;  // std dev = 4,47e-08, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.07324622576333688;  // std dev = 1,10e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420265;  // std dev = 4,71e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
%   else return -0.06842697784420287;  // std dev = 0,000, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.06419184008202589;  // std dev = 1,31e-07, 315,000 (wgt'ed) examples reached here.  /* #neg=315 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.751 seconds
Total inference time: 1.169 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06406
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.898 seconds
Refined model CLL: -0.06406


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.684 seconds
Total inference time: 1.169 seconds
AUC ROC: 1.0
Total revision time: 9.684
Best scored revision CLL: -0.06406


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 11:57:48
{'F1': 1.0, 'Inference time': 1.169, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.140406, 'Inference time': 1.315, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 2.217, 'CLL': -0.32136}, 'Recall': 1.0, 'Learning time': 9.684, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.14185106490048766;  // std dev = 1,98e-07, 386,000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.1254446385283922;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.1123163781936065;  // std dev = 0,000, 395,000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.10159632948783646;  // std dev = 0,000, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.09269127618926067;  // std dev = 1,79e-07, 386,000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08518475138839683;  // std dev = 1,18e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.08518475138839678;  // std dev = 1,07e-07, 366,000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.07877675473109147;  // std dev = 5,16e-08, 398,000 (wgt'ed) examples reached here.  /* #neg=398 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.07324622576333714;  // std dev = 5,96e-08, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420276;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.06842697784420324;  // std dev = 0,000, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.06419184008202591;  // std dev = 1,29e-07, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.54 seconds
Total inference time: 1.157 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 11:57:53
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.157, 'Precision': [1.0, 0.5], 'Learning time': 3.54, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.14185106490048766;  // std dev = 1,98e-07, 375,000 (wgt'ed) examples reached here.  /* #neg=375 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.27 seconds
Total inference time: 0.753 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 11:57:55
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.753, 'Precision': [nan, 0.5], 'Learning time': 1.27, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4971038044581779;  // std dev = 0,480, 421,000 (wgt'ed) examples reached here.  /* #neg=152 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048716;  // std dev = 2,95e-07, 449,000 (wgt'ed) examples reached here.  /* #neg=449 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4345147755806346;  // std dev = 0,478, 415,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839224;  // std dev = 0,000, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3270939787693698;  // std dev = 0,485, 432,000 (wgt'ed) examples reached here.  /* #neg=163 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936063;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.2787464738976589;  // std dev = 9,750, 416,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878359;  // std dev = 2,27e-07, 404,000 (wgt'ed) examples reached here.  /* #neg=404 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24627347316675932;  // std dev = 0,466, 395,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926089;  // std dev = 1,52e-07, 400,000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1415075421428675;  // std dev = 0,481, 422,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,30e-07, 394,000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14974350711111659;  // std dev = 0,466, 395,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109141;  // std dev = 2,27e-07, 407,000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09261771191987844;  // std dev = 0,473, 407,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333771;  // std dev = 0,000, 400,000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.07331829779079191;  // std dev = 9,504, 405,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=269 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420337;  // std dev = 0,000, 409,000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.05245553812035151;  // std dev = 9,550, 407,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202555;  // std dev = 2,05e-07, 413,000 (wgt'ed) examples reached here.  /* #neg=413 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.330287
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.465 seconds
Total inference time: 1.235 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.870241
   AUC PR    = 0.094986
   CLL	      = -0.302626
   Precision = 0.094986 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173492


Total scoring time: 2.51 seconds
Parameter learned model CLL: -0.302626


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.95e-07, 449, 0], 'true,true': [0.48, 152, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 383, 0], 'true,true': [0.478, 146, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 382, 0], 'true,true': [0.485, 163, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [2.27e-07, 404, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.75, 147, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.52e-07, 400, 0], 'true,true': [0.466, 126, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.3e-07, 394, 0], 'true,true': [0.481, 153, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.27e-07, 407, 0], 'true,true': [0.466, 126, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 400, 0], 'true,true': [0.473, 138, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [9.504, 136, 269], 'false': [0.0, 409, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.05e-07, 413, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.55, 138, 269], 'true,false': [0.0, 0, 0]}]]
[{'': [0.23069154428151833, 1.9385631432207634e-16], 'true': [0.23069154428151833, nan]}, {'': [0.2280389025983372, -1.2290719645980845e-16], 'true': [0.2280389025983372, nan]}, {'': [0.23494834533608044, -2.092566957408672e-17], 'true': [0.23494834533608044, nan]}, {'': [0.22849828957100488, 1.275107632242754e-16], 'true': [0.22849828957100488, nan], 'true,true': [0.22849828957100488, nan]}, {'': [0.21723441756128997, 5.773159728050814e-17], 'true': [0.21723441756128997, nan]}, {'': [0.23111003795961815, 4.283093902107203e-17], 'true': [0.23111003795961815, nan]}, {'': [0.21723441756128903, 1.265708804486665e-16], 'true': [0.21723441756128903, nan]}, {'': [0.22410035677849025, -6.328271240363392e-17], 'true': [0.22410035677849025, nan]}, {'': [0.22303917085810077, -1.1835140311407537e-16], 'true': [0.22303917085810077, nan], 'true,true': [0.22303917085810077, nan], 'true,true,true': [0.22303917085810077, nan]}, {'': [0.22410035677848877, 1.0161363276230246e-16], 'true': [0.22410035677848877, nan], 'true,true': [0.22410035677848877, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048793;  // std dev = 0,000, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.14185106490048735;  // std dev = 3,01e-07, 398,000 (wgt'ed) examples reached here.  /* #neg=398 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1254446385283911;  // std dev = 8,02e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.12544463852839222;  // std dev = 0,000, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1123163781936062;  // std dev = 9,06e-08, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.11231637819360617;  // std dev = 0,000, 411,000 (wgt'ed) examples reached here.  /* #neg=411 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783645;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.10159632948783592;  // std dev = 2,21e-07, 400,000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926082;  // std dev = 7,60e-08, 147,000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.09269127618926089;  // std dev = 1,52e-07, 400,000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08518475138839682;  // std dev = 6,41e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.08518475138839678;  // std dev = 1,32e-07, 392,000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109155;  // std dev = 7,96e-08, 160,000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.07877675473109144;  // std dev = 2,24e-07, 410,000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0732462257633371;  // std dev = 0,000, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.0732462257633377;  // std dev = 0,000, 441,000 (wgt'ed) examples reached here.  /* #neg=441 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420264;  // std dev = 6,41e-08, 155,000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.06842697784420333;  // std dev = 0,000, 393,000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.06419184008202561;  // std dev = 1,93e-07, 395,000 (wgt'ed) examples reached here.  /* #neg=395 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.936 seconds
Total inference time: 1.184 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064058
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.424 seconds
Refined model CLL: -0.064058


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.334999999999999 seconds
Total inference time: 1.184 seconds
AUC ROC: 1.0
Total revision time: 10.334999999999999
Best scored revision CLL: -0.064058


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 11:58:09
{'F1': 1.0, 'Inference time': 1.184, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.140406, 'Inference time': 1.235, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 2.465, 'CLL': -0.330287}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.334999999999999, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.1418510649004872;  // std dev = 2,95e-07, 450,000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839147;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.12544463852839227;  // std dev = 0,000, 461,000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.11231637819360613;  // std dev = 0,000, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.10159632948783578;  // std dev = 2,78e-07, 518,000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.092691276189261;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.09269127618926142;  // std dev = 0,000, 506,000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.08518475138839678;  // std dev = 1,35e-07, 510,000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.0787767547310921;  // std dev = 0,000, 520,000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333704;  // std dev = 1,18e-08, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.07324622576333724;  // std dev = 0,000, 513,000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06842697784420346;  // std dev = 0,000, 472,000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.06419184008202561;  // std dev = 2,15e-07, 521,000 (wgt'ed) examples reached here.  /* #neg=521 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.62 seconds
Total inference time: 1.189 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 11:58:14
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.189, 'Precision': [1.0, 0.5], 'Learning time': 3.62, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 4,47e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.14185106490048752;  // std dev = 1,63e-07, 500,000 (wgt'ed) examples reached here.  /* #neg=500 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.358 seconds
Total inference time: 0.738 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 11:58:16
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.738, 'Precision': [nan, 0.5], 'Learning time': 1.358, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5487227055913113;  // std dev = 0,462, 488,000 (wgt'ed) examples reached here.  /* #neg=151 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.141851064900488;  // std dev = 0,000, 526,000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4218803532618339;  // std dev = 0,479, 523,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283923;  // std dev = 0,000, 513,000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.35701171482872956;  // std dev = 0,473, 510,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360578;  // std dev = 0,000, 513,000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.28327488454664135;  // std dev = 10,588, 505,000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783545;  // std dev = 3,36e-07, 486,000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21578798323982312;  // std dev = 0,471, 504,000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926146;  // std dev = 0,000, 500,000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1352357470592256;  // std dev = 0,479, 525,000 (wgt'ed) examples reached here.  /* #neg=188 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,48e-07, 522,000 (wgt'ed) examples reached here.  /* #neg=522 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12826064681218047;  // std dev = 0,471, 504,000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109202;  // std dev = 0,000, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12568382815757978;  // std dev = 0,459, 483,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333692;  // std dev = 1,52e-07, 498,000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.0701630412623398;  // std dev = 10,503, 501,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=337 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420353;  // std dev = 0,000, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.03393216296404099;  // std dev = 10,812, 516,000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202536;  // std dev = 2,43e-07, 508,000 (wgt'ed) examples reached here.  /* #neg=508 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.334775
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.794 seconds
Total inference time: 1.221 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.870352
   AUC PR    = 0.095252
   CLL	      = -0.30636
   Precision = 0.095252 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173935


Total scoring time: 2.701 seconds
Parameter learned model CLL: -0.30636


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 526, 0], 'true,true': [0.462, 151, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 513, 0], 'true,true': [0.479, 186, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 513, 0], 'true,true': [0.473, 173, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [3.36e-07, 486, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.588, 168, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 500, 0], 'true,true': [0.471, 167, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.48e-07, 522, 0], 'true,true': [0.479, 188, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 492, 0], 'true,true': [0.471, 167, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.52e-07, 498, 0], 'true,true': [0.459, 146, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [10.503, 164, 337], 'false': [0.0, 483, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.43e-07, 508, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.812, 179, 337], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21368163800054016, -1.3170706603918206e-16], 'true': [0.21368163800054016, nan]}, {'': [0.22916034497256152, -1.3504467200118862e-16], 'true': [0.22916034497256152, nan]}, {'': [0.2241484044598198, -6.92536779493275e-18], 'true': [0.2241484044598198, nan]}, {'': [0.22200176453289305, 2.3209600679406563e-16], 'true': [0.22200176453289305, nan], 'true,true': [0.22200176453289305, nan]}, {'': [0.22155690980096074, -2.842170943040401e-17], 'true': [0.22155690980096074, nan]}, {'': [0.22986303854875062, 4.1686535024239595e-17], 'true': [0.22986303854875062, nan]}, {'': [0.22155690980095627, -3.5202193463724476e-17], 'true': [0.22155690980095627, nan]}, {'': [0.21090578638512825, 4.637076086787802e-17], 'true': [0.21090578638512825, nan]}, {'': [0.22019035780734061, -1.2688263138573217e-16], 'true': [0.22019035780734061, nan], 'true,true': [0.22019035780734061, nan], 'true,true,true': [0.22019035780734061, nan]}, {'': [0.22656015263505686, 1.1626745061035103e-16], 'true': [0.22656015263505686, nan], 'true,true': [0.22656015263505686, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004882;  // std dev = 0,000, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.1418510649004877;  // std dev = 0,000, 498,000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839147;  // std dev = 0,000, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.12544463852839227;  // std dev = 0,000, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360635;  // std dev = 7,60e-08, 163,000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.11231637819360582;  // std dev = 0,000, 497,000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783645;  // std dev = 0,000, 160,000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.10159632948783548;  // std dev = 3,29e-07, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926072;  // std dev = 7,45e-08, 164,000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.09269127618926142;  // std dev = 0,000, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6,66e-08, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.08518475138839678;  // std dev = 1,37e-07, 457,000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 8,30e-08, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.07877675473109201;  // std dev = 0,000, 489,000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0732462257633369;  // std dev = 6,50e-08, 161,000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.07324622576333682;  // std dev = 1,78e-07, 518,000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6,58e-08, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.0684269778442036;  // std dev = 0,000, 529,000 (wgt'ed) examples reached here.  /* #neg=529 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 166,000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.0641918400820254;  // std dev = 2,43e-07, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.61 seconds
Total inference time: 1.198 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064062
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.031 seconds
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.136000000000001 seconds
Total inference time: 1.198 seconds
AUC ROC: 1.0
Total revision time: 11.136000000000001
Best scored revision CLL: -0.064062


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 11:58:30
{'parameter_1.0': {'F1': 0.140406, 'Inference time': 1.221, 'Precision': [0.075503, 0.5], 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'Learning time': 2.794, 'CLL': -0.334775}, 'F1': 1.0, 'Inference time': 1.198, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 11.136000000000001, 'CLL': -0.063847}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048766;  // std dev = 6,14e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.14185106490048885;  // std dev = 0,000, 658,000 (wgt'ed) examples reached here.  /* #neg=658 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.12544463852839233;  // std dev = 0,000, 630,000 (wgt'ed) examples reached here.  /* #neg=630 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360635;  // std dev = 1,83e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.11231637819360589;  // std dev = 0,000, 621,000 (wgt'ed) examples reached here.  /* #neg=621 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783627;  // std dev = 1,97e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.10159632948783538;  // std dev = 3,82e-07, 611,000 (wgt'ed) examples reached here.  /* #neg=611 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.09269127618926186;  // std dev = 0,000, 630,000 (wgt'ed) examples reached here.  /* #neg=630 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.08518475138839678;  // std dev = 1,49e-07, 609,000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.07877675473109269;  // std dev = 0,000, 661,000 (wgt'ed) examples reached here.  /* #neg=661 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.07324622576333677;  // std dev = 1,65e-07, 624,000 (wgt'ed) examples reached here.  /* #neg=624 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0684269778442027;  // std dev = 1,39e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.06842697784420224;  // std dev = 2,08e-07, 600,000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.06419184008202546;  // std dev = 2,41e-07, 617,000 (wgt'ed) examples reached here.  /* #neg=617 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.058 seconds
Total inference time: 1.139 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 11:58:36
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.139, 'Precision': [1.0, 0.5], 'Learning time': 4.058, 'AUC PR': 1.0, 'CLL': -0.063847, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048766;  // std dev = 6,66e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.14185106490048813;  // std dev = 0,000, 550,000 (wgt'ed) examples reached here.  /* #neg=550 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.439 seconds
Total inference time: 0.808 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 11:58:38
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.808, 'Precision': [nan, 0.5], 'Learning time': 1.439, 'AUC PR': 1.0, 'CLL': -0.160469, 'AUC ROC': 1.0}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5086343719927171;  // std dev = 0,477, 103,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048763;  // std dev = 8,94e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.37729860017312605;  // std dev = 0,491, 113,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283914;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4117483476379431;  // std dev = 0,459, 96,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936062;  // std dev = 8,02e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.26109931282988275;  // std dev = 4,924, 105,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783635;  // std dev = 0,000, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3044585657152651;  // std dev = 0,436, 90,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926093;  // std dev = 5,48e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1609631439483818;  // std dev = 0,468, 99,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 5,48e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14944618786807926;  // std dev = 0,456, 95,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109157;  // std dev = 6,32e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return -0.004620998639465129;  // std dev = 0,492, 114,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333707;  // std dev = 0,000, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.12920613264499353;  // std dev = 4,328, 93,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=67 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420265;  // std dev = 4,53e-08, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.016051092068605746;  // std dev = 4,924, 105,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=67 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.315942
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 1.428 seconds
Total inference time: 1.298 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.873407
   AUC PR    = 0.098097
   CLL	      = -0.300084
   Precision = 0.098097 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.178667


Total scoring time: 1.317 seconds
Parameter learned model CLL: -0.300084


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [8.94e-08, 100, 0], 'true,true': [0.477, 36, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 89, 0], 'true,true': [0.491, 46, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [8.02e-08, 100, 0], 'true,true': [0.459, 29, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 118, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.924, 38, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.48e-08, 103, 0], 'true,true': [0.436, 23, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [5.48e-08, 97, 0], 'true,true': [0.468, 32, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [6.32e-08, 110, 0], 'true,true': [0.456, 28, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 102, 0], 'true,true': [0.492, 47, 67], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [4.328, 26, 67], 'false': [4.53e-08, 95, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 106, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [4.924, 38, 67], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2273541332830608, 7.993605777301127e-17], 'true': [0.2273541332830608, nan]}, {'': [0.24136580781580208, -1.7464182409833923e-17], 'true': [0.24136580781580208, nan]}, {'': [0.21082899305555716, 6.439293542825907e-17], 'true': [0.21082899305555716, nan]}, {'': [0.2309297052154194, -1.881733940042638e-17], 'true': [0.2309297052154194, nan], 'true,true': [0.2309297052154194, nan]}, {'': [0.1902469135802476, 2.910293365522255e-17], 'true': [0.1902469135802476, nan]}, {'': [0.2187531884501587, 3.0903115118432194e-17], 'true': [0.2187531884501587, nan]}, {'': [0.20786703601108072, 3.633457171500512e-17], 'true': [0.20786703601108072, nan]}, {'': [0.2423053247152971, -4.353815782843751e-18], 'true': [0.2423053247152971, nan]}, {'': [0.20141056769568758, 2.162013258480568e-17], 'true': [0.20141056769568758, nan], 'true,true': [0.20141056769568758, nan], 'true,true,true': [0.20141056769568758, nan]}, {'': [0.2309297052154195, -1.6234393284613138e-17], 'true': [0.2309297052154195, nan], 'true,true': [0.2309297052154195, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004877;  // std dev = 2,11e-08, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.12544463852839138;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360638;  // std dev = 1,29e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.11231637819360621;  // std dev = 7,15e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.1015963294878363;  // std dev = 1,49e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.0926912761892609;  // std dev = 6,05e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.08518475138839682;  // std dev = 5,16e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07877675473109161;  // std dev = 5,27e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07324622576333704;  // std dev = 9,13e-09, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.07324622576333707;  // std dev = 0,000, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06890770633143954;  // std dev = 0,018, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.06842697784420265;  // std dev = 4,83e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06496177125221281;  // std dev = 0,016, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.06419184008202626;  // std dev = 0,000, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063723
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.792 seconds
Total inference time: 1.267 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064221
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.346 seconds
Refined model CLL: -0.064221


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063723
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.883 seconds
Total inference time: 1.267 seconds
AUC ROC: 1.0
Total revision time: 5.883
Best scored revision CLL: -0.064221


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 11:58:47
{'parameter_0.2': {'F1': 0.137825, 'Inference time': 1.298, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 1.428, 'CLL': -0.315942}, 'F1': 1.0, 'Inference time': 1.267, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 5.883, 'CLL': -0.063723}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.14185106490048766;  // std dev = 8,16e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.12544463852839133;  // std dev = 0,000, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.11231637819360622;  // std dev = 8,43e-08, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.10159632948783631;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926087;  // std dev = 6,58e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( female(A) )
%   | | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.30192079609881267;  // std dev = 0,086, 44,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | else return -0.09269127618926096;  // std dev = 5,27e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25742132109300025;  // std dev = 0,014, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.08606792328213021;  // std dev = 0,062, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.21134581049808576;  // std dev = 0,012, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07871268592189927;  // std dev = 0,000, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17826081558903284;  // std dev = 0,011, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.07344625786940161;  // std dev = 0,032, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15362680105037937;  // std dev = 0,010, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06883175261695246;  // std dev = 0,042, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13469613470290234;  // std dev = 0,009, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.06485380134576747;  // std dev = 0,048, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063648
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.267 seconds
Total inference time: 1.168 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 11:58:51
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.168, 'Precision': [1.0, 0.5], 'Learning time': 2.267, 'AUC PR': 1.0, 'CLL': -0.063648, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.14185106490048793;  // std dev = 0,000, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.819 seconds
Total inference time: 0.788 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 11:58:53
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.788, 'Precision': [nan, 0.5], 'Learning time': 0.819, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5315157692703635;  // std dev = 0,469, 199,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048843;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4125586344924843;  // std dev = 0,482, 212,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1254446385283917;  // std dev = 0,000, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3619072144924757;  // std dev = 0,474, 203,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360664;  // std dev = 0,000, 205,000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.2944194366363083;  // std dev = 6,616, 199,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783653;  // std dev = 0,000, 205,000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20659747269557865;  // std dev = 0,475, 204,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926051;  // std dev = 6,14e-08, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13332146529188124;  // std dev = 0,481, 211,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 198,000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11546288512033508;  // std dev = 0,477, 206,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109146;  // std dev = 6,66e-08, 222,000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0806314205361032;  // std dev = 0,479, 208,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333667;  // std dev = 1,13e-07, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.051751838955650685;  // std dev = 6,993, 211,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=134 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420262;  // std dev = 8,49e-08, 210,000 (wgt'ed) examples reached here.  /* #neg=210 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.021670364344575536;  // std dev = 7,159, 217,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=134 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202626;  // std dev = 0,000, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.299752
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 1.91 seconds
Total inference time: 1.238 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.869708
   AUC PR    = 0.095578
   CLL	      = -0.291544
   Precision = 0.095578 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174479


Total scoring time: 1.865 seconds
Parameter learned model CLL: -0.291544


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 209, 0], 'true,true': [0.469, 65, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 206, 0], 'true,true': [0.482, 78, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 205, 0], 'true,true': [0.474, 69, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 205, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [6.616, 65, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [6.14e-08, 206, 0], 'true,true': [0.475, 70, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [7.45e-08, 198, 0], 'true,true': [0.481, 77, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [6.66e-08, 222, 0], 'true,true': [0.477, 72, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.13e-07, 192, 0], 'true,true': [0.479, 74, 134], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [6.993, 77, 134], 'false': [8.49e-08, 210, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [0.0, 189, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [7.159, 83, 134], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21994394080958, -2.3798082058950725e-16], 'true': [0.21994394080958, nan]}, {'': [0.23255606977572507, -5.605009444709528e-17], 'true': [0.23255606977572507, nan]}, {'': [0.22436846319978762, -4.982464305634849e-17], 'true': [0.22436846319978762, nan]}, {'': [0.219943940809575, -8.881784197001253e-17], 'true': [0.219943940809575, nan], 'true,true': [0.219943940809575, nan]}, {'': [0.22539407920030874, 1.832406933847346e-17], 'true': [0.22539407920030874, nan]}, {'': [0.23175580063341003, 2.803593496528173e-17], 'true': [0.23175580063341003, nan]}, {'': [0.2273541332830621, 2.000401846171453e-17], 'true': [0.2273541332830621, nan]}, {'': [0.22919748520709998, 6.707597440443654e-17], 'true': [0.22919748520709998, nan]}, {'': [0.23175580063340956, 3.4364046000302466e-17], 'true': [0.23175580063340956, nan], 'true,true': [0.23175580063340956, nan], 'true,true,true': [0.23175580063340956, nan]}, {'': [0.23619104249400064, -3.52451753849256e-18], 'true': [0.23619104249400064, nan], 'true,true': [0.23619104249400064, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048768;  // std dev = 6,50e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.14185106490048835;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.12544463852839158;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360632;  // std dev = 2,98e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.11231637819360646;  // std dev = 0,000, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1015963294878362;  // std dev = 4,21e-08, 73,000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.10159632948783655;  // std dev = 0,000, 207,000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.09269127618926062;  // std dev = 8,16e-08, 169,000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.0851847513883968;  // std dev = 2,11e-08, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109173;  // std dev = 2,58e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.07877675473109146;  // std dev = 6,32e-08, 227,000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.07324622576333663;  // std dev = 1,27e-07, 212,000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420268;  // std dev = 2,47e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.06842697784420262;  // std dev = 7,67e-08, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.06419184008202626;  // std dev = 0,000, 213,000 (wgt'ed) examples reached here.  /* #neg=213 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.743 seconds
Total inference time: 1.195 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064077
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.682 seconds
Refined model CLL: -0.064077


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.2 seconds
Total inference time: 1.195 seconds
AUC ROC: 1.0
Total revision time: 8.2
Best scored revision CLL: -0.064077


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 11:59:04
{'F1': 1.0, 'Inference time': 1.195, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.4': {'F1': 0.137825, 'Inference time': 1.238, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 1.91, 'CLL': -0.299752}, 'Recall': 1.0, 'Learning time': 8.2, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.14185106490048832;  // std dev = 0,000, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.12544463852839188;  // std dev = 0,000, 270,000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.11231637819360682;  // std dev = 0,000, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.1015963294878365;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926103;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.09269127618926061;  // std dev = 4,94e-08, 211,000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839682;  // std dev = 1,49e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.08518475138839678;  // std dev = 8,16e-08, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109176;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.07877675473109144;  // std dev = 6,32e-08, 245,000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.0732462257633367;  // std dev = 1,22e-07, 238,000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.06842697784420261;  // std dev = 5,96e-08, 222,000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.06419184008202623;  // std dev = 0,000, 248,000 (wgt'ed) examples reached here.  /* #neg=248 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.861 seconds
Total inference time: 1.097 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 11:59:08
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.097, 'Precision': [1.0, 0.5], 'Learning time': 2.861, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.14185106490048838;  // std dev = 0,000, 247,000 (wgt'ed) examples reached here.  /* #neg=247 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.034 seconds
Total inference time: 0.796 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 11:59:10
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.796, 'Precision': [nan, 0.5], 'Learning time': 1.034, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5161293911255671;  // std dev = 0,474, 307,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048768;  // std dev = 1,79e-07, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4586932036289061;  // std dev = 0,468, 299,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.125444638528392;  // std dev = 0,000, 255,000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.34070166512122857;  // std dev = 0,478, 313,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360689;  // std dev = 0,000, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.2662400946050499;  // std dev = 8,439, 312,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783662;  // std dev = 0,000, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20806508173688515;  // std dev = 0,476, 309,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926044;  // std dev = 1,78e-07, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1803949680214647;  // std dev = 0,467, 298,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09881620335164547;  // std dev = 0,480, 315,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 2,11e-08, 318,000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.10647597294922333;  // std dev = 0,469, 300,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333702;  // std dev = 9,31e-08, 311,000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.058821600037139474;  // std dev = 8,389, 310,000 (wgt'ed) examples reached here.  /* #neg=108 #pos=202 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420307;  // std dev = 0,000, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.014629352842873347;  // std dev = 8,744, 325,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202583;  // std dev = 1,44e-07, 329,000 (wgt'ed) examples reached here.  /* #neg=329 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.305731
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.149 seconds
Total inference time: 1.166 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.868475
   AUC PR    = 0.095193
   CLL	      = -0.29928
   Precision = 0.095193 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173838


Total scoring time: 1.908 seconds
Parameter learned model CLL: -0.29928


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.79e-07, 326, 0], 'true,true': [0.474, 105, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 255, 0], 'true,true': [0.468, 97, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 295, 0], 'true,true': [0.478, 111, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [0.0, 300, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.439, 110, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.78e-07, 307, 0], 'true,true': [0.476, 107, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.05e-07, 302, 0], 'true,true': [0.467, 96, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.11e-08, 318, 0], 'true,true': [0.48, 113, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [9.31e-08, 311, 0], 'true,true': [0.469, 98, 202], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [8.389, 108, 202], 'false': [0.0, 316, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [1.44e-07, 329, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [8.744, 123, 202], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2250421755138032, 9.808105248222242e-17], 'true': [0.2250421755138032, nan]}, {'': [0.21916980794397994, -9.404242090942502e-17], 'true': [0.21916980794397994, nan]}, {'': [0.22886831548755107, -8.129090620984197e-17], 'true': [0.22886831548755107, nan]}, {'': [0.228262656147269, -5.329070518200751e-17], 'true': [0.228262656147269, nan], 'true,true': [0.228262656147269, nan]}, {'': [0.22636964422241052, 1.027046706819363e-16], 'true': [0.22636964422241052, nan]}, {'': [0.21836854195756866, 3.676235180878002e-17], 'true': [0.21836854195756866, nan]}, {'': [0.23004283194759478, 1.3965069492140335e-18], 'true': [0.23004283194759478, nan]}, {'': [0.2199555555555556, 2.784482183947338e-17], 'true': [0.2199555555555556, nan]}, {'': [0.22701352757544194, -6.95646072391712e-17], 'true': [0.22701352757544194, nan], 'true,true': [0.22701352757544194, nan], 'true,true,true': [0.22701352757544194, nan]}, {'': [0.23522840236686451, 6.27664080791122e-17], 'true': [0.23522840236686451, nan], 'true,true': [0.23522840236686451, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8,16e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   else return -0.1418510649004881;  // std dev = 0,000, 266,000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12837071304274336;  // std dev = 0,217, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.12544463852839194;  // std dev = 0,000, 273,000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11970368602851622;  // std dev = 0,342, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.11231637819360692;  // std dev = 0,000, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10679835131707038;  // std dev = 0,290, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.10159632948783662;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09289858683626825;  // std dev = 0,123, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.09269127618926042;  // std dev = 1,60e-07, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08602998125711278;  // std dev = 0,162, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08104560007478043;  // std dev = 0,185, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.07877675473109141;  // std dev = 4,21e-08, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07486864026469535;  // std dev = 0,174, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.07324622576333695;  // std dev = 1,02e-07, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06817170714781387;  // std dev = 0,096, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return -0.06842697784420299;  // std dev = 0,000, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06476570405452682;  // std dev = 0,128, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.06419184008202597;  // std dev = 1,13e-07, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063526
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.019 seconds
Total inference time: 1.256 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064542
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.365 seconds
Refined model CLL: -0.064542


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063526
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.441 seconds
Total inference time: 1.256 seconds
AUC ROC: 1.0
Total revision time: 9.441
Best scored revision CLL: -0.064542


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 11:59:23
{'F1': 1.0, 'Inference time': 1.256, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'parameter_0.6': {'F1': 0.137825, 'Inference time': 1.166, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 2.149, 'CLL': -0.305731}, 'Recall': 1.0, 'Learning time': 9.441, 'CLL': -0.063526}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 2,11e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.14185106490048782;  // std dev = 1,03e-07, 362,000 (wgt'ed) examples reached here.  /* #neg=362 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.1254446385283921;  // std dev = 0,000, 381,000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360643;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.11231637819360632;  // std dev = 0,000, 395,000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.10159632948783652;  // std dev = 0,000, 370,000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.092691276189261;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.09269127618926054;  // std dev = 1,74e-07, 368,000 (wgt'ed) examples reached here.  /* #neg=368 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.0851847513883968;  // std dev = 2,04e-08, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.08518475138839678;  // std dev = 1,13e-07, 396,000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.07877675473109147;  // std dev = 5,58e-08, 389,000 (wgt'ed) examples reached here.  /* #neg=389 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333704;  // std dev = 5,27e-09, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.07324622576333717;  // std dev = 4,71e-08, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.06842697784420318;  // std dev = 0,000, 362,000 (wgt'ed) examples reached here.  /* #neg=362 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06419184008202587;  // std dev = 1,44e-07, 387,000 (wgt'ed) examples reached here.  /* #neg=387 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.356 seconds
Total inference time: 1.155 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 11:59:28
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.155, 'Precision': [1.0, 0.5], 'Learning time': 3.356, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 2,58e-08, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.14185106490048766;  // std dev = 1,98e-07, 393,000 (wgt'ed) examples reached here.  /* #neg=393 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.135 seconds
Total inference time: 0.795 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 11:59:30
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.795, 'Precision': [nan, 0.5], 'Learning time': 1.135, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.532334398758656;  // std dev = 0,469, 399,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048724;  // std dev = 2,98e-07, 425,000 (wgt'ed) examples reached here.  /* #neg=425 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4223476487287266;  // std dev = 0,479, 419,000 (wgt'ed) examples reached here.  /* #neg=150 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839227;  // std dev = 0,000, 410,000 (wgt'ed) examples reached here.  /* #neg=410 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.34466798762927925;  // std dev = 0,478, 417,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1123163781936062;  // std dev = 0,000, 403,000 (wgt'ed) examples reached here.  /* #neg=403 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.3177025024767586;  // std dev = 9,057, 387,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878361;  // std dev = 1,70e-07, 374,000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.19380249532868088;  // std dev = 0,478, 415,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926098;  // std dev = 1,35e-07, 414,000 (wgt'ed) examples reached here.  /* #neg=414 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15498797990784277;  // std dev = 0,474, 409,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,17e-07, 345,000 (wgt'ed) examples reached here.  /* #neg=345 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11633572536380103;  // std dev = 0,474, 409,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109143;  // std dev = 1,03e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11093236872815931;  // std dev = 0,466, 395,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0732462257633377;  // std dev = 0,000, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.010192066223262578;  // std dev = 10,279, 443,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=269 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420329;  // std dev = 0,000, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.0747044400474462;  // std dev = 9,362, 399,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=269 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202564;  // std dev = 1,84e-07, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.310235
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.55 seconds
Total inference time: 1.196 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.868475
   AUC PR    = 0.095087
   CLL	      = -0.303535
   Precision = 0.095087 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.17366


Total scoring time: 2.749 seconds
Parameter learned model CLL: -0.303535


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [2.98e-07, 425, 0], 'true,true': [0.469, 130, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 410, 0], 'true,true': [0.479, 150, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 403, 0], 'true,true': [0.478, 148, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [1.7e-07, 374, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.057, 118, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.35e-07, 414, 0], 'true,true': [0.478, 146, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.17e-07, 345, 0], 'true,true': [0.474, 140, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [1.03e-07, 378, 0], 'true,true': [0.474, 140, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 385, 0], 'true,true': [0.466, 126, 269], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [10.279, 174, 269], 'false': [0.0, 383, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [1.84e-07, 382, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [9.362, 130, 269], 'true,false': [0.0, 0, 0]}]]
[{'': [0.21965942424985116, 2.0898315757650005e-16], 'true': [0.21965942424985116, nan]}, {'': [0.22983464436862186, -1.2781104088367655e-16], 'true': [0.22983464436862186, nan]}, {'': [0.22895065242769955, -1.7631333393550873e-17], 'true': [0.22895065242769955, nan]}, {'': [0.21193972050290552, 7.718127978677559e-17], 'true': [0.21193972050290552, nan], 'true,true': [0.21193972050290552, nan]}, {'': [0.22803890259834425, 4.3979849284668035e-17], 'true': [0.22803890259834425, nan]}, {'': [0.22513017019266957, 3.99036681314549e-17], 'true': [0.22513017019266957, nan]}, {'': [0.22513017019267204, 2.819614030794048e-17], 'true': [0.22513017019267204, nan]}, {'': [0.21723441756128686, -6.805522956143817e-17], 'true': [0.21723441756128686, nan]}, {'': [0.23850312613057914, -1.1131217792586425e-16], 'true': [0.23850312613057914, nan], 'true,true': [0.23850312613057914, nan], 'true,true,true': [0.23850312613057914, nan]}, {'': [0.21965942424984858, 8.893409568986856e-17], 'true': [0.21965942424984858, nan], 'true,true': [0.21965942424984858, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048782;  // std dev = 0,000, 136,000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.1418510649004874;  // std dev = 2,76e-07, 380,000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839108;  // std dev = 7,88e-08, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.12544463852839227;  // std dev = 0,000, 408,000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360625;  // std dev = 8,43e-08, 145,000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.11231637819360615;  // std dev = 0,000, 412,000 (wgt'ed) examples reached here.  /* #neg=412 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783645;  // std dev = 0,000, 145,000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.10159632948783587;  // std dev = 2,35e-07, 409,000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0926912761892609;  // std dev = 6,66e-08, 141,000 (wgt'ed) examples reached here.  /* #neg=141 */
%   else return -0.09269127618926103;  // std dev = 1,25e-07, 420,000 (wgt'ed) examples reached here.  /* #neg=420 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08518475138839682;  // std dev = 7,15e-08, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.08518475138839678;  // std dev = 1,19e-07, 357,000 (wgt'ed) examples reached here.  /* #neg=357 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109158;  // std dev = 7,07e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.07877675473109143;  // std dev = 1,12e-07, 388,000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333725;  // std dev = 0,000, 142,000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.07324622576333768;  // std dev = 0,000, 370,000 (wgt'ed) examples reached here.  /* #neg=370 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420265;  // std dev = 5,96e-08, 143,000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else return -0.06842697784420333;  // std dev = 0,000, 398,000 (wgt'ed) examples reached here.  /* #neg=398 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.0641918400820256;  // std dev = 1,95e-07, 398,000 (wgt'ed) examples reached here.  /* #neg=398 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.379 seconds
Total inference time: 1.196 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064083
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.154 seconds
Refined model CLL: -0.064083


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.831999999999999 seconds
Total inference time: 1.196 seconds
AUC ROC: 1.0
Total revision time: 10.831999999999999
Best scored revision CLL: -0.064083


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 11:59:44
{'F1': 1.0, 'Inference time': 1.196, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'parameter_0.8': {'F1': 0.137825, 'Inference time': 1.196, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 2.55, 'CLL': -0.310235}, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 10.831999999999999, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 0,000, 501,000 (wgt'ed) examples reached here.  /* #neg=501 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( female(A) )
%   | | then return 0.8581489350995107;  // std dev = 6,31e-07, 117,000 (wgt'ed) examples reached here.  /* #pos=117 */
%   | | else if ( actor(A) )
%   | | | then return 0.8581489350995098;  // std dev = 9,39e-07, 152,000 (wgt'ed) examples reached here.  /* #pos=152 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.14185106490048766;  // std dev = 5,58e-08, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.12544463852839224;  // std dev = 0,000, 519,000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 2,92e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.11231637819360618;  // std dev = 0,000, 487,000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.10159632948783583;  // std dev = 2,63e-07, 503,000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015017;  // std dev = 1,69e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.092691276189261;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.09269127618926132;  // std dev = 0,000, 497,000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948784;  // std dev = 3,21e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0851847513883968;  // std dev = 1,67e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.08518475138839678;  // std dev = 1,33e-07, 502,000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253479;  // std dev = 2,53e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.0787767547310922;  // std dev = 0,000, 543,000 (wgt'ed) examples reached here.  /* #neg=543 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527683;  // std dev = 1,74e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333704;  // std dev = 9,13e-09, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.07324622576333725;  // std dev = 0,000, 458,000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367155;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.06842697784420348;  // std dev = 0,000, 506,000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801126;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.06419184008202569;  // std dev = 1,91e-07, 487,000 (wgt'ed) examples reached here.  /* #neg=487 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.53 seconds
Total inference time: 1.183 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 11:59:49
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.183, 'Precision': [1.0, 0.5], 'Learning time': 3.53, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 3,94e-08, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.14185106490048788;  // std dev = 0,000, 534,000 (wgt'ed) examples reached here.  /* #neg=534 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.38 seconds
Total inference time: 0.801 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 11:59:51
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.801, 'Precision': [nan, 0.5], 'Learning time': 1.38, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true;haswordauthor(D, C).;false;true
0;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
0;true,false,true;haswordvenue(G, E).;false;false
0;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true;haswordauthor(D, C).;true;true
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,false,true;haswordvenue(I, G).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
3;true,true,false;haswordvenue(F, D).;false;false
3;true,false,true;haswordvenue(I, G).;false;false
3;true,true;haswordtitle(A, D).;false;true
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true;haswordauthor(D, C).;true;true
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,false,true;haswordvenue(I, G).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true;haswordauthor(D, C).;true;true
5;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
5;true,false,true;haswordvenue(I, G).;false;false
5;true,true;author(E, D), title(E, A).;true;false
5;true,true,true;samebib(E, F), title(F, B).;false;false
5;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
6;true,false,true;haswordvenue(G, E).;false;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;haswordvenue(I, G).;false;false
7;true,true;author(E, D), title(E, B).;true;false
7;true,true,true;samebib(E, F), title(F, A).;false;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,true,false;haswordvenue(G, D).;false;false
8;true,false,true;haswordvenue(J, H).;false;false
8;true,true;haswordtitle(B, D).;true;true
8;true,true,true;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
9;true,true,false;haswordvenue(F, D).;false;false
9;true,false,true;haswordvenue(I, G).;false;false
9;true,true;haswordtitle(B, D).;false;true
9;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.520231449834282;  // std dev = 0,473, 509,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 506,000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4564103759652169;  // std dev = 0,469, 500,000 (wgt'ed) examples reached here.  /* #neg=163 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839227;  // std dev = 0,000, 469,000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3518687999131057;  // std dev = 0,475, 513,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360578;  // std dev = 0,000, 511,000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( movie(D, A) )
%   | | then return 0.2924430379856111;  // std dev = 10,438, 498,000 (wgt'ed) examples reached here.  /* #neg=161 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783542;  // std dev = 3,40e-07, 491,000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.195221537712168;  // std dev = 0,477, 518,000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926139;  // std dev = 0,000, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15544748155022622;  // std dev = 0,474, 511,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839678;  // std dev = 1,37e-07, 461,000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11928184792672103;  // std dev = 0,473, 509,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.078776754731092;  // std dev = 0,000, 487,000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07710806357052849;  // std dev = 0,477, 519,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333702;  // std dev = 1,26e-07, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.06085886013742834;  // std dev = 10,832, 517,000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420355;  // std dev = 0,000, 504,000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then return 0.046233374142546746;  // std dev = 10,832, 517,000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820253;  // std dev = 2,46e-07, 548,000 (wgt'ed) examples reached here.  /* #neg=548 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.309782
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.775 seconds
Total inference time: 1.35 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.868927
   AUC PR    = 0.095576
   CLL	      = -0.302329
   Precision = 0.095576 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174476


Total scoring time: 2.735 seconds
Parameter learned model CLL: -0.302329


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 506, 0], 'true,true': [0.473, 172, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 469, 0], 'true,true': [0.469, 163, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 511, 0], 'true,true': [0.475, 176, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'true,true': 'movie(D, A)'}, {'false': [3.4e-07, 491, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.438, 161, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [0.0, 484, 0], 'true,true': [0.477, 181, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.37e-07, 461, 0], 'true,true': [0.474, 174, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'false': [0.0, 487, 0], 'true,true': [0.473, 172, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'false': [1.26e-07, 480, 0], 'true,true': [0.477, 182, 337], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)', 'true,true,true': 'genre(E, F)'}, {'true,true,true,true': [10.832, 180, 337], 'false': [0.0, 504, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'false': [2.46e-07, 548, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true': [10.832, 180, 337], 'true,false': [0.0, 0, 0]}]]
[{'': [0.2237292584172544, -5.2658799586963945e-17], 'true': [0.2237292584172544, nan]}, {'': [0.21972400000000203, -1.212013195326397e-16], 'true': [0.21972400000000203, nan]}, {'': [0.2253760891290374, -6.952472952642859e-18], 'true': [0.2253760891290374, nan]}, {'': [0.21877469718230183, 2.3515925572508406e-16], 'true': [0.21877469718230183, nan], 'true,true': [0.21877469718230183, nan]}, {'': [0.2273259194108641, -1.8350793795457133e-17], 'true': [0.2273259194108641, nan]}, {'': [0.22456255912010029, 4.045932063709898e-17], 'true': [0.22456255912010029, nan]}, {'': [0.22372925841724972, -3.0092287320435457e-17], 'true': [0.22372925841724972, nan]}, {'': [0.22770185735871054, 3.3306690738754695e-17], 'true': [0.22770185735871054, nan]}, {'': [0.22694536625151074, -1.1983359630874705e-16], 'true': [0.22694536625151074, nan], 'true,true': [0.22694536625151074, nan], 'true,true,true': [0.22694536625151074, nan]}, {'': [0.22694536625151104, 1.1021192069271627e-16], 'true': [0.22694536625151104, nan], 'true,true': [0.22694536625151104, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048816;  // std dev = 0,000, 167,000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.14185106490048782;  // std dev = 0,000, 509,000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839144;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.1254446385283923;  // std dev = 0,000, 496,000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360642;  // std dev = 5,58e-08, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.11231637819360589;  // std dev = 0,000, 476,000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783648;  // std dev = 0,000, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.10159632948783542;  // std dev = 3,44e-07, 493,000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926072;  // std dev = 7,60e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.09269127618926154;  // std dev = 0,000, 520,000 (wgt'ed) examples reached here.  /* #neg=520 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6,50e-08, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.08518475138839678;  // std dev = 1,41e-07, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 7,52e-08, 155,000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.07877675473109201;  // std dev = 0,000, 490,000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333688;  // std dev = 7,30e-08, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.07324622576333698;  // std dev = 1,35e-07, 486,000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420267;  // std dev = 5,27e-08, 136,000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.06842697784420357;  // std dev = 0,000, 509,000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 167,000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.06419184008202541;  // std dev = 2,39e-07, 478,000 (wgt'ed) examples reached here.  /* #neg=478 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.477 seconds
Total inference time: 1.26 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064087
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.61 seconds
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.597 seconds
Total inference time: 1.26 seconds
AUC ROC: 1.0
Total revision time: 11.597
Best scored revision CLL: -0.064087


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 12:00:06
{'parameter_1.0': {'F1': 0.137825, 'Inference time': 1.35, 'Precision': [0.074013, 0.5], 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'Learning time': 2.775, 'CLL': -0.309782}, 'F1': 1.0, 'Inference time': 1.26, 'Precision': [1.0, 0.5], 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'Learning time': 11.597, 'CLL': -0.063719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048768;  // std dev = 4,71e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.1418510649004885;  // std dev = 0,000, 612,000 (wgt'ed) examples reached here.  /* #neg=612 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.12544463852839235;  // std dev = 0,000, 622,000 (wgt'ed) examples reached here.  /* #neg=622 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1123163781936063;  // std dev = 3,33e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.11231637819360632;  // std dev = 0,000, 668,000 (wgt'ed) examples reached here.  /* #neg=668 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783621;  // std dev = 4,21e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.1015963294878355;  // std dev = 3,54e-07, 600,000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.09269127618926173;  // std dev = 0,000, 605,000 (wgt'ed) examples reached here.  /* #neg=605 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.08518475138839675;  // std dev = 1,60e-07, 651,000 (wgt'ed) examples reached here.  /* #neg=651 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0787767547310917;  // std dev = 3,07e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.0787767547310927;  // std dev = 0,000, 678,000 (wgt'ed) examples reached here.  /* #neg=678 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.07324622576333678;  // std dev = 1,63e-07, 638,000 (wgt'ed) examples reached here.  /* #neg=638 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0684269778442027;  // std dev = 1,97e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.06842697784420215;  // std dev = 2,13e-07, 587,000 (wgt'ed) examples reached here.  /* #neg=587 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.06419184008202554;  // std dev = 2,37e-07, 584,000 (wgt'ed) examples reached here.  /* #neg=584 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.702 seconds
Total inference time: 1.149 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 12:00:12
{'F1': 1.0, 'Recall': 1.0, 'Inference time': 1.149, 'Precision': [1.0, 0.5], 'Learning time': 4.702, 'AUC PR': 1.0, 'CLL': -0.063719, 'AUC ROC': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048766;  // std dev = 5,96e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.1418510649004885;  // std dev = 0,000, 624,000 (wgt'ed) examples reached here.  /* #neg=624 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.544 seconds
Total inference time: 0.751 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 12:00:15
{'F1': nan, 'Recall': 0.0, 'Inference time': 0.751, 'Precision': [nan, 0.5], 'Learning time': 1.544, 'AUC PR': 1.0, 'CLL': -0.158221, 'AUC ROC': 1.0}


