Starting experiment #1 for 15_yeast_twitter

Start learning from source dataset

Source train facts examples: 15015
Source train pos examples: 369
Source train neg examples: 18799

WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( interaction(C, A), interaction(D, C) )
%   then if ( interaction(A, C), complex(A, E) )
%   | then return 0.12203782398839985;  // std dev = 0,441, 144,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=38 */
%   | else if ( interaction(C, C), phenotype(A, F) )
%   | | then if ( complex(C, G) )
%   | | | then return 0.30814893509951236;  // std dev = 3,146, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | | | else return 0.17064893509951234;  // std dev = 2,622, 32,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | else return 0.1815910715980245;  // std dev = 0,468, 674,000 (wgt'ed) examples reached here.  /* #neg=456 #pos=218 */
%   else if ( location(A, H) )
%   | then if ( enzyme(A, I), interaction(J, A) )
%   | | then if ( interaction(A, K), phenotype(A, L) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2775037738091897;  // std dev = 2,747, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( enzyme(A, M) )
%   | | | then return 0.1340110040650296;  // std dev = 3,404, 58,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0.23414893509951282;  // std dev = 5,416, 125,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=47 */
%   | else return 0.6359267128772901;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( interaction(A, C), phenotype(C, D) )
%   then if ( interaction(C, E), phenotype(A, D) )
%   | then return 0.11759722262696366;  // std dev = 0,450, 213,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=60 */
%   | else return 0.14967416754933954;  // std dev = 0,465, 294,000 (wgt'ed) examples reached here.  /* #neg=201 #pos=93 */
%   else if ( complex(A, F) )
%   | then if ( complex(G, F), interaction(G, H) )
%   | | then if ( phenotype(G, I), enzyme(G, J) )
%   | | | then return 0.20315265929472484;  // std dev = 3,890, 65,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=24 */
%   | | | else return 0.29996105965441217;  // std dev = 3,863, 60,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=28 */
%   | | else return 0.1351313124888599;  // std dev = 0,459, 53,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | else if ( interaction(K, A), complex(K, L) )
%   | | then if ( interaction(M, K), interaction(A, N) )
%   | | | then return 0.3679089180231332;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.16050209525776613;  // std dev = 6,453, 188,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=62 */
%   | | else if ( interaction(P, A), phenotype(A, Q) )
%   | | | then return 0.17719486139873486;  // std dev = 4,356, 84,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=29 */
%   | | | else return 0.1259575845259763;  // std dev = 5,852, 162,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=49 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( location(A, C) )
%   then if ( interaction(D, A), enzyme(D, E) )
%   | then if ( complex(D, F), complex(A, G) )
%   | | then return 0.06965291461281745;  // std dev = 0,440, 107,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=28 */
%   | | else if ( complex(A, H) )
%   | | | then return 0.18105125326542093;  // std dev = 2,499, 27,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | | else return 0.10931314308482364;  // std dev = 5,974, 170,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=51 */
%   | else if ( phenotype(A, I), interaction(A, J) )
%   | | then if ( interaction(J, K), location(J, C) )
%   | | | then return 0.21650201361751636;  // std dev = 5,797, 140,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=56 */
%   | | | else return 0.12837616381307732;  // std dev = 4,038, 75,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=24 */
%   | | else if ( phenotype(A, L) )
%   | | | then return 0.11127262780734554;  // std dev = 6,550, 201,000 (wgt'ed) examples reached here.  /* #neg=139 #pos=62 */
%   | | | else return 0.14984601831845065;  // std dev = 8,924, 355,000 (wgt'ed) examples reached here.  /* #neg=234 #pos=121 */
%   else if ( interaction(A, M), enzyme(M, N) )
%   | then return 0.17650136337459124;  // std dev = 0,481, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else return 0.023359965407221985;  // std dev = 0,427, 53,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=13 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( interaction(A, C), phenotype(A, D) )
%   then if ( interaction(C, E), interaction(A, E) )
%   | then if ( enzyme(E, F) )
%   | | then if ( complex(E, G), phenotype(C, H) )
%   | | | then return 0.10152354639264605;  // std dev = 2,506, 30,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | | else return 0.25025168960562205;  // std dev = 3,197, 41,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return 0.09692617419806412;  // std dev = 0,463, 139,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=43 */
%   | else if ( enzyme(C, I), enzyme(A, J) )
%   | | then if ( interaction(K, A), phenotype(K, D) )
%   | | | then return 0.8012336319234881;  // std dev = 0,000985, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.27771471561559014;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( complex(A, L), interaction(C, M) )
%   | | | then return 0.3921576863806781;  // std dev = 1,561, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.16465064939196905;  // std dev = 4,453, 83,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=32 */
%   else if ( interaction(N, A), complex(N, P) )
%   | then return 0.08189126043550615;  // std dev = 0,457, 472,000 (wgt'ed) examples reached here.  /* #neg=332 #pos=140 */
%   | else return 0.12728606319087996;  // std dev = 0,475, 331,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=114 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( phenotype(A, C), interaction(D, A) )
%   then if ( phenotype(D, C), interaction(E, D) )
%   | then if ( enzyme(E, F), interaction(E, E) )
%   | | then return 0.06294566521997325;  // std dev = 0,463, 76,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
%   | | else if ( enzyme(E, G), interaction(E, A) )
%   | | | then return 0.018210830569074122;  // std dev = 1,709, 15,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.1993358194820578;  // std dev = 5,071, 105,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=46 */
%   | else return 0.05072024195232897;  // std dev = 0,455, 345,000 (wgt'ed) examples reached here.  /* #neg=245 #pos=100 */
%   else if ( location(A, H) )
%   | then if ( interaction(A, I), phenotype(I, J) )
%   | | then if ( interaction(I, K), phenotype(K, J) )
%   | | | then return 0.06286663286629603;  // std dev = 5,040, 122,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=36 */
%   | | | else return 0.14498147231897282;  // std dev = 4,401, 83,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=31 */
%   | | else if ( interaction(L, A), interaction(M, L) )
%   | | | then return 0.13132497065879326;  // std dev = 7,399, 237,000 (wgt'ed) examples reached here.  /* #neg=151 #pos=86 */
%   | | | else return 0.15501217270802914;  // std dev = 4,100, 70,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=28 */
%   | else return 0.031271883726093574;  // std dev = 0,455, 52,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( complex(A, C), interaction(A, D) )
%   then if ( interaction(D, E), interaction(E, D) )
%   | then if ( phenotype(D, F), interaction(A, A) )
%   | | then return 0.037239128344366636;  // std dev = 0,452, 35,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | else if ( complex(D, G), complex(E, C) )
%   | | | then return 0.18023301403472047;  // std dev = 4,285, 75,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=32 */
%   | | | else return 0.10767844913612248;  // std dev = 4,190, 76,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=28 */
%   | else if ( phenotype(A, H), complex(D, I) )
%   | | then return 0.014519030156914744;  // std dev = 0,457, 34,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | else if ( interaction(D, J), enzyme(J, K) )
%   | | | then return 0.23875469306750582;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.07004680886716602;  // std dev = 2,822, 36,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   else if ( interaction(A, L), location(A, M) )
%   | then return 0.043724750083576104;  // std dev = 0,460, 315,000 (wgt'ed) examples reached here.  /* #neg=219 #pos=96 */
%   | else if ( complex(A, N) )
%   | | then return 0.05035562219260389;  // std dev = 0,460, 177,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=54 */
%   | | else return 0.10289043726890611;  // std dev = 0,477, 355,000 (wgt'ed) examples reached here.  /* #neg=230 #pos=125 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( interaction(A, C), enzyme(A, D) )
%   then if ( phenotype(C, E), location(A, F) )
%   | then if ( interaction(C, G), interaction(A, G) )
%   | | then if ( interaction(H, A), interaction(H, H) )
%   | | | then return 0.03794685689361519;  // std dev = 2,195, 24,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | | else return 0.18437424278419645;  // std dev = 3,411, 47,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=21 */
%   | | else return 0.03624509760744479;  // std dev = 0,461, 69,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=22 */
%   | else if ( interaction(I, A), enzyme(I, D) )
%   | | then if ( location(A, J), interaction(C, K) )
%   | | | then return 0.23644673558776472;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.40525625174942165;  // std dev = 0,808, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( complex(A, L), complex(C, M) )
%   | | | then return 0.008562349618393016;  // std dev = 1,706, 14,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.16567602675936136;  // std dev = 2,470, 25,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   else if ( interaction(N, A), location(N, P) )
%   | then return 0.0584901434061795;  // std dev = 0,472, 806,000 (wgt'ed) examples reached here.  /* #neg=540 #pos=266 */
%   | else return -0.007160639510967781;  // std dev = 0,454, 117,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=33 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( interaction(A, C), complex(A, D) )
%   then if ( interaction(E, A), enzyme(C, F) )
%   | then return 0.06554676140736222;  // std dev = 0,477, 95,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=34 */
%   | else return -0.01827470689790301;  // std dev = 0,448, 217,000 (wgt'ed) examples reached here.  /* #neg=157 #pos=60 */
%   else if ( location(A, G) )
%   | then if ( phenotype(A, H), enzyme(A, I) )
%   | | then if ( enzyme(J, I), complex(J, K) )
%   | | | then return 1.0796499456048667E-4;  // std dev = 5,214, 133,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=38 */
%   | | | else return 0.10297374582750092;  // std dev = 3,042, 39,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
%   | | else if ( location(L, G), interaction(A, L) )
%   | | | then return 0.08761918085895452;  // std dev = 6,217, 166,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=61 */
%   | | | else return 0.0500350027591448;  // std dev = 9,887, 445,000 (wgt'ed) examples reached here.  /* #neg=299 #pos=146 */
%   | else if ( interaction(M, A) )
%   | | then if ( interaction(A, N), phenotype(M, P) )
%   | | | then return 0.2373957882353391;  // std dev = 1,220, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.014539319725895032;  // std dev = 2,483, 30,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | else return -0.14825489754392568;  // std dev = 0,401, 15,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( location(A, C), phenotype(A, D) )
%   then if ( enzyme(A, E) )
%   | then return 0.008969335840097714;  // std dev = 0,461, 240,000 (wgt'ed) examples reached here.  /* #neg=167 #pos=73 */
%   | else if ( interaction(F, A), interaction(A, G) )
%   | | then if ( interaction(F, F), phenotype(F, H) )
%   | | | then return 0.08476489317690712;  // std dev = 3,340, 48,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=18 */
%   | | | else return 0.025823881403249236;  // std dev = 5,202, 123,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=40 */
%   | | else if ( phenotype(I, D), complex(I, J) )
%   | | | then return 0.079880424518376;  // std dev = 6,012, 157,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=57 */
%   | | | else return 0.16454715714635298;  // std dev = 2,105, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   else if ( interaction(K, A), interaction(L, K) )
%   | then return 0.007590603406850041;  // std dev = 0,460, 436,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=131 */
%   | else if ( interaction(A, M), interaction(M, M) )
%   | | then return 0.006523835456637157;  // std dev = 0,452, 34,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | else if ( location(A, N) )
%   | | | then return 0.09253988653572638;  // std dev = 3,880, 63,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=25 */
%   | | | else return 0.009624328432331313;  // std dev = 2,153, 21,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( interaction(A, C), interaction(C, D) )
%   then return 0.020851460176540614;  // std dev = 0,468, 524,000 (wgt'ed) examples reached here.  /* #neg=354 #pos=170 */
%   else if ( phenotype(A, E), enzyme(A, F) )
%   | then if ( interaction(G, A), interaction(H, G) )
%   | | then if ( phenotype(G, E), complex(G, I) )
%   | | | then return 0.2625000849659585;  // std dev = 1,655, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.03149847012616882;  // std dev = 3,885, 71,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=22 */
%   | | else if ( phenotype(J, E), interaction(J, J) )
%   | | | then return 0.1868724118946511;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.3733676715600391;  // std dev = 1,156, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( location(A, K) )
%   | | then if ( interaction(A, L), interaction(M, A) )
%   | | | then return 0.10185570259630089;  // std dev = 3,189, 42,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=17 */
%   | | | else return 0.035116772189520994;  // std dev = 9,653, 417,000 (wgt'ed) examples reached here.  /* #neg=277 #pos=140 */
%   | | else if ( interaction(N, A), enzyme(N, P) )
%   | | | then return 0.25983222580491977;  // std dev = 1,304, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.039862875366643125;  // std dev = 1,650, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */


Starting fold 1

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 312

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 252

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), interaction(D, C).;true;true
0;false,true,false;enzyme(A, M).;false;false
0;true,false,true;complex(C, G).;false;false
0;false,true,true;interaction(A, K), phenotype(A, L).;false;false
0;true;interaction(A, C), complex(A, E).;false;true
0;true,false;interaction(C, C), phenotype(A, F).;true;false
0;false;location(A, H).;true;false
0;false,true;enzyme(A, I), interaction(J, A).;true;true
1;;proteinclass(A, B) :- interaction(A, C), phenotype(C, D).;true;true
1;false,true;complex(G, F), interaction(G, H).;true;false
1;false,false,false;interaction(P, A), phenotype(A, Q).;false;false
1;false,true,true;phenotype(G, I), enzyme(G, J).;false;false
1;true;interaction(C, E), phenotype(A, D).;false;false
1;false,false,true;interaction(M, K), interaction(A, N).;false;false
1;false,false;interaction(K, A), complex(K, L).;true;true
1;false;complex(A, F).;true;true
2;;proteinclass(A, B) :- location(A, C).;true;true
2;true,true;complex(D, F), complex(A, G).;false;true
2;false;interaction(A, M), enzyme(M, N).;false;false
2;true,true,false;complex(A, H).;false;false
2;true,false,false;phenotype(A, L).;false;false
2;true;interaction(D, A), enzyme(D, E).;true;true
2;true,false;phenotype(A, I), interaction(A, J).;true;true
2;true,false,true;interaction(J, K), location(J, C).;false;false
3;;proteinclass(A, B) :- interaction(A, C), phenotype(A, D).;true;true
3;true,true;enzyme(E, F).;true;false
3;false;interaction(N, A), complex(N, P).;false;false
3;true,false,false;complex(A, L), interaction(C, M).;false;false
3;true;interaction(C, E), interaction(A, E).;true;true
3;true,false;enzyme(C, I), enzyme(A, J).;true;true
3;true,true,true;complex(E, G), phenotype(C, H).;false;false
3;true,false,true;interaction(K, A), phenotype(K, D).;false;false
4;;proteinclass(A, B) :- phenotype(A, C), interaction(D, A).;true;true
4;true,true;enzyme(E, F), interaction(E, E).;false;true
4;false,true,false;interaction(L, A), interaction(M, L).;false;false
4;false,true;interaction(A, I), phenotype(I, J).;true;true
4;true,true,false;enzyme(E, G), interaction(E, A).;false;false
4;false,true,true;interaction(I, K), phenotype(K, J).;false;false
4;true;phenotype(D, C), interaction(E, D).;true;false
4;false;location(A, H).;true;false
5;;proteinclass(A, B) :- complex(A, C), interaction(A, D).;true;true
5;true,true;phenotype(D, F), interaction(A, A).;false;true
5;true,true,false;complex(D, G), complex(E, C).;false;false
5;true,false,false;interaction(D, J), enzyme(J, K).;false;false
5;true;interaction(D, E), interaction(E, D).;true;true
5;true,false;phenotype(A, H), complex(D, I).;false;true
5;false,false;complex(A, N).;false;false
5;false;interaction(A, L), location(A, M).;false;true
6;;proteinclass(A, B) :- interaction(A, C), enzyme(A, D).;true;true
6;true,true;interaction(C, G), interaction(A, G).;true;false
6;false;interaction(N, A), location(N, P).;false;false
6;true,false,false;complex(A, L), complex(C, M).;false;false
6;true;phenotype(C, E), location(A, F).;true;true
6;true,false;interaction(I, A), enzyme(I, D).;true;true
6;true,true,true;interaction(H, A), interaction(H, H).;false;false
6;true,false,true;location(A, J), interaction(C, K).;false;false
7;;proteinclass(A, B) :- interaction(A, C), complex(A, D).;true;true
7;false,true,false;location(L, G), interaction(A, L).;false;false
7;false,true;phenotype(A, H), enzyme(A, I).;true;true
7;false,true,true;enzyme(J, I), complex(J, K).;false;false
7;true;interaction(E, A), enzyme(C, F).;false;false
7;false,false,true;interaction(A, N), phenotype(M, P).;false;false
7;false,false;interaction(M, A).;true;false
7;false;location(A, G).;true;true
8;;proteinclass(A, B) :- location(A, C), phenotype(A, D).;true;true
8;true,false,false;phenotype(I, D), complex(I, J).;false;false
8;false;interaction(K, A), interaction(L, K).;false;true
8;false,false,false;location(A, N).;false;false
8;true;enzyme(A, E).;false;true
8;true,false;interaction(F, A), interaction(A, G).;true;true
8;false,false;interaction(A, M), interaction(M, M).;false;true
8;true,false,true;interaction(F, F), phenotype(F, H).;false;false
9;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;false;true
9;false,true,false;phenotype(J, E), interaction(J, J).;false;false
9;false,true;interaction(G, A), interaction(H, G).;true;true
9;false,false,false;interaction(N, A), enzyme(N, P).;false;false
9;false,true,true;phenotype(G, E), complex(G, I).;false;false
9;false,false,true;interaction(A, L), interaction(M, A).;false;false
9;false,false;location(A, K).;true;true
9;false;phenotype(A, E), enzyme(A, F).;true;true


Starting experiment #1 for 15_yeast_twitter

Start learning from source dataset

Source train facts examples: 15015
Source train pos examples: 369
Source train neg examples: 18799

WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( interaction(C, A) )
%   then if ( enzyme(A, D), complex(C, E) )
%   | then return 0.21192252000517398;  // std dev = 0,478, 212,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=75 */
%   | else return 0.16767274462331785;  // std dev = 0,462, 798,000 (wgt'ed) examples reached here.  /* #neg=551 #pos=247 */
%   else if ( interaction(A, F), interaction(F, G) )
%   | then if ( interaction(G, G), phenotype(A, H) )
%   | | then if ( phenotype(G, I), enzyme(G, J) )
%   | | | then return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.3844647245731965;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | else if ( phenotype(A, K), phenotype(G, K) )
%   | | | then return 0.07554023944733843;  // std dev = 1,978, 23,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | | else return 0.21752393509951234;  // std dev = 3,839, 64,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=23 */
%   | else if ( location(A, L) )
%   | | then if ( complex(A, M) )
%   | | | then return 0.3581489350995123;  // std dev = 1,414, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( interaction(C, A), enzyme(C, D) )
%   then return 0.13404118761750614;  // std dev = 0,458, 317,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=95 */
%   else if ( interaction(E, A), complex(E, F) )
%   | then if ( location(A, G), interaction(H, E) )
%   | | then if ( enzyme(H, I), location(H, G) )
%   | | | then return 0.20629554739445724;  // std dev = 4,481, 86,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=32 */
%   | | | else return 0.1408997400797497;  // std dev = 7,545, 268,000 (wgt'ed) examples reached here.  /* #neg=186 #pos=82 */
%   | | else if ( interaction(A, J), interaction(J, K) )
%   | | | then return 0.6328025476373786;  // std dev = 0,897, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.16572636403496802;  // std dev = 2,581, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | else if ( interaction(L, A), interaction(M, L) )
%   | | then if ( phenotype(L, N), location(L, P) )
%   | | | then return 0.1597205232913985;  // std dev = 4,654, 99,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=32 */
%   | | | else return 0.3245834381543129;  // std dev = 4,581, 84,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=41 */
%   | | else if ( enzyme(A, Q), complex(A, R) )
%   | | | then return 0.23294387207413841;  // std dev = 2,888, 35,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=14 */
%   | | | else return 0.1466212816023922;  // std dev = 6,341, 185,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=59 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( interaction(C, A), interaction(D, C) )
%   then if ( complex(C, E), interaction(D, D) )
%   | then if ( complex(D, E) )
%   | | then return 0.13444584442758964;  // std dev = 0,469, 182,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=59 */
%   | | else if ( phenotype(A, F) )
%   | | | then return 0.14669115863377954;  // std dev = 3,557, 57,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=19 */
%   | | | else return 0.3826980587589245;  // std dev = 2,263, 21,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   | else return 0.10849223799959762;  // std dev = 0,460, 643,000 (wgt'ed) examples reached here.  /* #neg=449 #pos=194 */
%   else if ( interaction(A, G), phenotype(G, H) )
%   | then return 0.1130220303639977;  // std dev = 0,464, 121,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=38 */
%   | else if ( enzyme(A, I) )
%   | | then if ( interaction(J, A), complex(J, K) )
%   | | | then return 0.3057067326379274;  // std dev = 1,414, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.13132250946564206;  // std dev = 3,057, 43,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | else if ( phenotype(A, L), interaction(M, A) )
%   | | | then return 0.1486769842162944;  // std dev = 2,309, 24,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.32049088699082906;  // std dev = 3,198, 41,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( interaction(A, C), interaction(C, D) )
%   then if ( phenotype(A, E), location(A, F) )
%   | then if ( phenotype(D, E), location(C, G) )
%   | | then return 0.11056569884462845;  // std dev = 0,467, 215,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=69 */
%   | | else return 0.2111388169704417;  // std dev = 0,496, 74,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=32 */
%   | else return 0.08768136772344867;  // std dev = 0,461, 225,000 (wgt'ed) examples reached here.  /* #neg=156 #pos=69 */
%   else if ( location(A, H) )
%   | then if ( interaction(I, A), phenotype(A, J) )
%   | | then if ( phenotype(I, K), complex(A, L) )
%   | | | then return 0.12473750465135623;  // std dev = 4,617, 96,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=32 */
%   | | | else return 0.19604727138309694;  // std dev = 5,968, 148,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=60 */
%   | | else if ( interaction(M, A), complex(M, N) )
%   | | | then return 0.11668989904044336;  // std dev = 5,910, 158,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=52 */
%   | | | else return 0.150323109541641;  // std dev = 5,360, 122,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=46 */
%   | else if ( interaction(P, A), enzyme(P, Q) )
%   | | then return 0.21699740370167045;  // std dev = 0,498, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return 0.49212895878441504;  // std dev = 0,460, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( interaction(C, A), phenotype(C, D) )
%   then if ( interaction(A, A) )
%   | then if ( phenotype(A, D), enzyme(A, E) )
%   | | then return 0.07560889681233655;  // std dev = 0,458, 10,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( complex(C, F), interaction(G, C) )
%   | | | then return 0.21890747564885804;  // std dev = 2,580, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | | else return 0.5153537487004299;  // std dev = 0,881, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( complex(C, H), phenotype(A, I) )
%   | | then return 0.05921813254625063;  // std dev = 0,455, 314,000 (wgt'ed) examples reached here.  /* #neg=222 #pos=92 */
%   | | else if ( enzyme(A, J), complex(A, K) )
%   | | | then return 0.04197823886623004;  // std dev = 3,683, 67,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=19 */
%   | | | else return 0.11866549420782023;  // std dev = 8,346, 305,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=108 */
%   else if ( interaction(A, L), enzyme(L, M) )
%   | then if ( enzyme(A, M), interaction(L, N) )
%   | | then return 0.0403521459584323;  // std dev = 0,442, 37,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | else return 0.16139009023950962;  // std dev = 0,490, 57,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=23 */
%   | else return 0.039307028794446176;  // std dev = 0,458, 336,000 (wgt'ed) examples reached here.  /* #neg=237 #pos=99 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( complex(A, C), interaction(D, A) )
%   then if ( complex(D, E) )
%   | then if ( enzyme(D, F), interaction(G, D) )
%   | | then if ( interaction(A, H), interaction(I, G) )
%   | | | then return 0.3526876682577401;  // std dev = 2,293, 22,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10048370049472578;  // std dev = 2,827, 36,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
%   | | else if ( phenotype(A, J), enzyme(A, K) )
%   | | | then return 0.022389131430032183;  // std dev = 3,299, 55,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=15 */
%   | | | else return 0.1385259267058166;  // std dev = 6,063, 156,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=60 */
%   | else return 0.04150075439729299;  // std dev = 0,457, 95,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=28 */
%   else if ( enzyme(A, L), interaction(M, A) )
%   | then return 0.0368146590638862;  // std dev = 0,459, 221,000 (wgt'ed) examples reached here.  /* #neg=155 #pos=66 */
%   | else if ( interaction(A, N), location(N, P) )
%   | | then return 0.059592653177011165;  // std dev = 0,470, 289,000 (wgt'ed) examples reached here.  /* #neg=195 #pos=94 */
%   | | else if ( interaction(Q, A), phenotype(Q, R) )
%   | | | then return 0.07369231216044218;  // std dev = 6,071, 167,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=55 */
%   | | | else return 0.10751065970085114;  // std dev = 4,052, 70,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=26 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( interaction(C, A), interaction(C, C) )
%   then if ( interaction(A, A), phenotype(A, D) )
%   | then return -0.04286810076145234;  // std dev = 0,433, 52,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
%   | else return 0.03884739424078339;  // std dev = 0,461, 215,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=66 */
%   else if ( enzyme(A, E), location(A, F) )
%   | then if ( location(G, F), interaction(G, A) )
%   | | then if ( interaction(H, G), interaction(A, H) )
%   | | | then return 0.23036395184746533;  // std dev = 2,025, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0.04794274133785805;  // std dev = 6,420, 190,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=60 */
%   | | else return -0.009447526066016176;  // std dev = 0,439, 134,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=35 */
%   | else if ( phenotype(A, I), interaction(J, A) )
%   | | then if ( enzyme(J, K), interaction(A, L) )
%   | | | then return 0.011694729891065845;  // std dev = 2,697, 36,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | | else return 0.11123314131596641;  // std dev = 6,769, 194,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=74 */
%   | | else if ( interaction(M, A), complex(A, N) )
%   | | | then return -0.010872370141641332;  // std dev = 3,323, 57,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return 0.06346723927152882;  // std dev = 7,620, 257,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=88 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( complex(A, C), interaction(D, A) )
%   then if ( phenotype(A, E), phenotype(D, E) )
%   | then return 0.028127453738086717;  // std dev = 0,461, 133,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=41 */
%   | else if ( phenotype(A, F), interaction(A, G) )
%   | | then if ( complex(G, C), enzyme(A, H) )
%   | | | then return 6.179182990933484E-4;  // std dev = 1,191, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.2195742484375911;  // std dev = 2,548, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   | | else if ( complex(D, C), location(A, I) )
%   | | | then return 0.12333278151306502;  // std dev = 3,863, 62,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=25 */
%   | | | else return 0.06822113801041896;  // std dev = 5,550, 136,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=47 */
%   else if ( complex(A, J), phenotype(A, K) )
%   | then return -0.0036086627165733834;  // std dev = 0,449, 39,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | else if ( interaction(L, A), location(L, M) )
%   | | then return 0.04235377621104869;  // std dev = 0,468, 588,000 (wgt'ed) examples reached here.  /* #neg=397 #pos=191 */
%   | | else if ( phenotype(A, N) )
%   | | | then return 0.14927646898345895;  // std dev = 2,957, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return 0.044431270172899905;  // std dev = 3,924, 69,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=23 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( interaction(C, A), complex(C, D) )
%   then return 0.028301356371208793;  // std dev = 0,468, 641,000 (wgt'ed) examples reached here.  /* #neg=435 #pos=206 */
%   else if ( interaction(A, E), phenotype(E, F) )
%   | then if ( interaction(G, A), location(G, H) )
%   | | then if ( phenotype(A, F), interaction(G, E) )
%   | | | then return -0.023824388494384348;  // std dev = 1,694, 15,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.2420099789070356;  // std dev = 3,435, 47,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=25 */
%   | | else if ( complex(E, I), interaction(E, J) )
%   | | | then return 0.02525952885430771;  // std dev = 3,882, 68,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=22 */
%   | | | else return 0.14807361270179256;  // std dev = 2,352, 22,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | else if ( interaction(A, K), location(A, L) )
%   | | then if ( interaction(K, K), enzyme(A, M) )
%   | | | then return 0.3321751207049569;  // std dev = 1,067, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.004260565972844234;  // std dev = 3,685, 64,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=20 */
%   | | else if ( interaction(N, A), interaction(P, N) )
%   | | | then return 0.10623925003824679;  // std dev = 5,585, 129,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=52 */
%   | | | else return 0.03509974041854034;  // std dev = 4,219, 81,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=27 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( interaction(C, A), complex(C, D) )
%   then if ( interaction(E, C), location(E, F) )
%   | then if ( enzyme(C, G), interaction(C, E) )
%   | | then return -0.02018005375902403;  // std dev = 0,451, 106,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=30 */
%   | | else return 0.04592286858314125;  // std dev = 0,475, 468,000 (wgt'ed) examples reached here.  /* #neg=308 #pos=160 */
%   | else if ( enzyme(A, H), complex(A, I) )
%   | | then return 0.508203883907482;  // std dev = 0,874, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( interaction(C, J), interaction(J, A) )
%   | | | then return -0.029108861743151675;  // std dev = 1,708, 15,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.20281097015067326;  // std dev = 1,928, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   else if ( complex(A, K), phenotype(A, L) )
%   | then return -0.0543858819061942;  // std dev = 0,438, 98,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=25 */
%   | else if ( location(A, M) )
%   | | then if ( phenotype(A, N), interaction(A, P) )
%   | | | then return 2.243001940390954E-4;  // std dev = 4,717, 100,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=33 */
%   | | | else return 0.05750574976978129;  // std dev = 7,685, 252,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=94 */
%   | | else return -0.06345222990881791;  // std dev = 0,465, 37,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */


Starting fold 1

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 312

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 252

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;false,false,true;complex(A, M).;false;false
0;false;interaction(A, F), interaction(F, G).;true;true
0;false,true;interaction(G, G), phenotype(A, H).;true;true
0;true;enzyme(A, D), complex(C, E).;false;false
0;false,true,true;phenotype(G, I), enzyme(G, J).;false;false
0;false,false;location(A, L).;true;false
0;false,true,false;phenotype(A, K), phenotype(G, K).;false;false
1;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;false;true
1;false,false,true;phenotype(L, N), location(L, P).;false;false
1;false;interaction(E, A), complex(E, F).;true;true
1;false,true;location(A, G), interaction(H, E).;true;true
1;false,true,false;interaction(A, J), interaction(J, K).;false;false
1;false,false;interaction(L, A), interaction(M, L).;true;true
1;false,false,false;enzyme(A, Q), complex(A, R).;false;false
1;false,true,true;enzyme(H, I), location(H, G).;false;false
2;;proteinclass(A, B) :- interaction(C, A), interaction(D, C).;true;true
2;false,false,true;interaction(J, A), complex(J, K).;false;false
2;false;interaction(A, G), phenotype(G, H).;false;true
2;true,true,false;phenotype(A, F).;false;false
2;true;complex(C, E), interaction(D, D).;true;false
2;false,false;enzyme(A, I).;true;true
2;false,false,false;phenotype(A, L), interaction(M, A).;false;false
2;true,true;complex(D, E).;false;true
3;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
3;false;location(A, H).;true;true
3;false,true;interaction(I, A), phenotype(A, J).;true;true
3;true;phenotype(A, E), location(A, F).;true;false
3;false,true,true;phenotype(I, K), complex(A, L).;false;false
3;false,false;interaction(P, A), enzyme(P, Q).;false;false
3;true,true;phenotype(D, E), location(C, G).;false;false
3;false,true,false;interaction(M, A), complex(M, N).;false;false
4;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
4;false;interaction(A, L), enzyme(L, M).;true;false
4;true,true,false;complex(C, F), interaction(G, C).;false;false
4;true;interaction(A, A).;true;true
4;true,true;phenotype(A, D), enzyme(A, E).;false;true
4;true,false,false;enzyme(A, J), complex(A, K).;false;false
4;false,true;enzyme(A, M), interaction(L, N).;false;false
4;true,false;complex(C, H), phenotype(A, I).;false;true
5;;proteinclass(A, B) :- complex(A, C), interaction(D, A).;true;true
5;false;enzyme(A, L), interaction(M, A).;false;true
5;true,true,false;phenotype(A, J), enzyme(A, K).;false;false
5;true;complex(D, E).;true;false
5;false,false;interaction(A, N), location(N, P).;false;true
5;false,false,false;interaction(Q, A), phenotype(Q, R).;false;false
5;true,true;enzyme(D, F), interaction(G, D).;true;true
5;true,true,true;interaction(A, H), interaction(I, G).;false;false
6;;proteinclass(A, B) :- interaction(C, A), interaction(C, C).;true;true
6;false,false,true;enzyme(J, K), interaction(A, L).;false;false
6;false;enzyme(A, E), location(A, F).;true;true
6;false,true;location(G, F), interaction(G, A).;true;false
6;true;interaction(A, A), phenotype(A, D).;false;false
6;false,true,true;interaction(H, G), interaction(A, H).;false;false
6;false,false;phenotype(A, I), interaction(J, A).;true;true
6;false,false,false;interaction(M, A), complex(A, N).;false;false
7;;proteinclass(A, B) :- complex(A, C), interaction(D, A).;true;true
7;true,false,true;complex(G, C), enzyme(A, H).;false;false
7;false;complex(A, J), phenotype(A, K).;false;true
7;true;phenotype(A, E), phenotype(D, E).;false;true
7;false,false;interaction(L, A), location(L, M).;false;true
7;false,false,false;phenotype(A, N).;false;false
7;true,false,false;complex(D, C), location(A, I).;false;false
7;true,false;phenotype(A, F), interaction(A, G).;true;true
8;;proteinclass(A, B) :- interaction(C, A), complex(C, D).;false;true
8;false,false,true;interaction(K, K), enzyme(A, M).;false;false
8;false;interaction(A, E), phenotype(E, F).;true;true
8;false,true;interaction(G, A), location(G, H).;true;true
8;false,true,false;complex(E, I), interaction(E, J).;false;false
8;false,false;interaction(A, K), location(A, L).;true;true
8;false,false,false;interaction(N, A), interaction(P, N).;false;false
8;false,true,true;phenotype(A, F), interaction(G, E).;false;false
9;;proteinclass(A, B) :- interaction(C, A), complex(C, D).;true;true
9;false,false,true;phenotype(A, N), interaction(A, P).;false;false
9;false;complex(A, K), phenotype(A, L).;false;true
9;true;interaction(E, C), location(E, F).;true;true
9;false,false;location(A, M).;true;false
9;true,true;enzyme(C, G), interaction(C, E).;false;false
9;true,false,false;interaction(C, J), interaction(J, A).;false;false
9;true,false;enzyme(A, H), complex(A, I).;false;true


Starting experiment #1 for 15_yeast_twitter

Start learning from source dataset

Source train facts examples: 15015
Source train pos examples: 369
Source train neg examples: 18799

WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( interaction(A, C), interaction(C, D) )
%   then if ( complex(D, E), interaction(F, A) )
%   | then if ( recursion_proteinclass(D, B), complex(A, E) )
%   | | then return 0.8146706742299468;  // std dev = 0,204, 46,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else return 0.10585535711786115;  // std dev = 0,432, 218,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=54 */
%   | else if ( recursion_proteinclass(D, B), location(C, G) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( interaction(H, A), interaction(H, D) )
%   | | | then return -0.030739953789376637;  // std dev = 1,886, 36,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | | | else return 0.14957750652808277;  // std dev = 6,011, 175,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=51 */
%   else if ( interaction(A, I), recursion_proteinclass(I, B) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( interaction(J, A), recursion_proteinclass(J, B) )
%   | | then return 0.6676727446233218;  // std dev = 0,393, 21,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   | | else if ( interaction(K, A), enzyme(K, L) )
%   | | | then return 0.10452574669371391;  // std dev = 5,062, 138,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=34 */
%   | | | else return 0.1515373648515743;  // std dev = 10,017, 484,000 (wgt'ed) examples reached here.  /* #neg=342 #pos=142 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( complex(C, D) )
%   | then return 0.7521370801268367;  // std dev = 0,269, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return 0.48014632824896486;  // std dev = 0,439, 32,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   else if ( interaction(A, E), interaction(E, E) )
%   | then if ( interaction(E, A) )
%   | | then return -0.014468196836785232;  // std dev = 0,323, 85,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=13 */
%   | | else if ( enzyme(E, F), enzyme(A, F) )
%   | | | then return 0.5918582934398599;  // std dev = 0,863, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.11782396495552167;  // std dev = 4,774, 114,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=32 */
%   | else if ( interaction(G, A), interaction(G, G) )
%   | | then if ( enzyme(A, H), complex(G, I) )
%   | | | then return 0.13080565667887234;  // std dev = 2,892, 41,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | | | else return 0.28616647716336546;  // std dev = 3,766, 58,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=26 */
%   | | else if ( interaction(J, A), recursion_proteinclass(J, B) )
%   | | | then return 0.6031805264722693;  // std dev = 1,863, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | | else return 0.12959168355041523;  // std dev = 12,021, 709,000 (wgt'ed) examples reached here.  /* #neg=503 #pos=206 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( interaction(C, A), enzyme(C, D) )
%   then if ( interaction(E, C), recursion_proteinclass(E, B) )
%   | then return 0.6108650113437881;  // std dev = 0,289, 30,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   | else if ( interaction(A, F), enzyme(F, D) )
%   | | then return -0.09932938129878335;  // std dev = 0,233, 56,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   | | else if ( interaction(G, C), interaction(G, G) )
%   | | | then return 0.19878730237084008;  // std dev = 3,184, 44,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
%   | | | else return 0.07632796293193232;  // std dev = 5,604, 179,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=47 */
%   else if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | then return 0.594421393438974;  // std dev = 0,157, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | | then if ( enzyme(A, J) )
%   | | | then return -0.0908961345765881;  // std dev = 0,837, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.6770019591848156;  // std dev = 0,220, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( interaction(A, K), interaction(K, K) )
%   | | | then return 0.060595965790311276;  // std dev = 4,983, 147,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=35 */
%   | | | else return 0.1373292179199262;  // std dev = 11,293, 592,000 (wgt'ed) examples reached here.  /* #neg=403 #pos=189 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( interaction(D, C), recursion_proteinclass(D, B) )
%   | then return 0.46897056867095993;  // std dev = 0,177, 38,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( interaction(A, E), interaction(E, A) )
%   | | then return -0.21210688472847633;  // std dev = 0,089, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( complex(A, F) )
%   | | | then return 0.5568858459812536;  // std dev = 0,314, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.25068874156157067;  // std dev = 1,655, 14,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   else if ( interaction(A, A) )
%   | then return -0.1577247667688517;  // std dev = 0,112, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( interaction(A, G), complex(G, H) )
%   | | then if ( interaction(G, I), recursion_proteinclass(I, B) )
%   | | | then return 0.3847542126780631;  // std dev = 2,925, 51,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=36 */
%   | | | else return 0.026636863218037654;  // std dev = 7,191, 313,000 (wgt'ed) examples reached here.  /* #neg=241 #pos=72 */
%   | | else if ( interaction(J, A), enzyme(J, K) )
%   | | | then return 0.10483352434451762;  // std dev = 5,349, 139,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=42 */
%   | | | else return 0.13610849028519736;  // std dev = 10,282, 477,000 (wgt'ed) examples reached here.  /* #neg=315 #pos=162 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( enzyme(A, C) )
%   then if ( enzyme(D, C), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), interaction(E, A) )
%   | | then return 0.706815072158809;  // std dev = 0,167, 116,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | | else if ( interaction(F, A) )
%   | | | then return -0.193435114093129;  // std dev = 0,076, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.6101097052995926;  // std dev = 1,560, 21,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | else return -0.20931654900727323;  // std dev = 0,503, 245,000 (wgt'ed) examples reached here.  /* #neg=245 */
%   else if ( location(A, G), complex(A, H) )
%   | then if ( complex(I, H), recursion_proteinclass(I, B) )
%   | | then return 0.5662603613348799;  // std dev = 0,240, 90,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=88 */
%   | | else return -0.20401733183494347;  // std dev = 0,052, 198,000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( interaction(A, J), recursion_proteinclass(J, B) )
%   | | then return 0.46091555235187753;  // std dev = 0,224, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else if ( interaction(K, A), recursion_proteinclass(K, B) )
%   | | | then return 0.30729307931394306;  // std dev = 1,003, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.06656087536190043;  // std dev = 9,341, 441,000 (wgt'ed) examples reached here.  /* #neg=315 #pos=126 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( enzyme(A, D), phenotype(A, E) )
%   | then return 0.34921342957667567;  // std dev = 0,101, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.15134588854318898;  // std dev = 0,279, 59,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=48 */
%   else if ( interaction(A, F), interaction(F, A) )
%   | then if ( complex(F, G), complex(A, G) )
%   | | then return -0.08487876960656614;  // std dev = 0,149, 52,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | else if ( enzyme(F, H), enzyme(A, I) )
%   | | | then return -0.07010043807187719;  // std dev = 0,755, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return 0.04742743346475293;  // std dev = 3,751, 118,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=36 */
%   | else if ( enzyme(A, J), interaction(K, A) )
%   | | then if ( interaction(A, L), complex(K, M) )
%   | | | then return 0.16610417320316226;  // std dev = 2,665, 45,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=19 */
%   | | | else return 0.08675008971144371;  // std dev = 5,449, 197,000 (wgt'ed) examples reached here.  /* #neg=131 #pos=66 */
%   | | else if ( interaction(N, A), complex(A, P) )
%   | | | then return 0.0131033997831359;  // std dev = 4,323, 148,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=36 */
%   | | | else return 0.07298219729236023;  // std dev = 9,674, 469,000 (wgt'ed) examples reached here.  /* #neg=320 #pos=149 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( interaction(D, C), interaction(C, D) )
%   | then return 0.14524694794434417;  // std dev = 0,247, 42,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=36 */
%   | else return 0.2851364364732585;  // std dev = 0,088, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( complex(A, E), interaction(A, F) )
%   | then if ( interaction(G, A), complex(G, E) )
%   | | then if ( interaction(F, H), recursion_proteinclass(H, B) )
%   | | | then return 0.0437675190639676;  // std dev = 1,476, 20,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | | else return -0.0796956159725456;  // std dev = 2,224, 99,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=8 */
%   | | else if ( interaction(F, I), recursion_proteinclass(I, B) )
%   | | | then return 0.21471763153804344;  // std dev = 1,674, 28,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=21 */
%   | | | else return 0.014154226060760718;  // std dev = 4,016, 134,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=32 */
%   | else if ( interaction(A, A) )
%   | | then return -0.14980738838128332;  // std dev = 0,075, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( enzyme(A, J), complex(A, K) )
%   | | | then return 0.0023489861584524707;  // std dev = 3,275, 88,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=22 */
%   | | | else return 0.06498273982857795;  // std dev = 11,294, 689,000 (wgt'ed) examples reached here.  /* #neg=469 #pos=220 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( complex(A, C) )
%   then if ( complex(D, C), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, A), recursion_proteinclass(E, B) )
%   | | then return 0.18017762190351747;  // std dev = 0,273, 33,000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.5411407459289334;  // std dev = 0,188, 117,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | else return -0.18342015862706554;  // std dev = 0,838, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
%   else if ( interaction(A, F), recursion_proteinclass(F, B) )
%   | then if ( location(A, G), enzyme(F, H) )
%   | | then if ( interaction(A, I), complex(I, J) )
%   | | | then return 0.25363658920181686;  // std dev = 0,008, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.014832592151685281;  // std dev = 0,594, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3205880767299597;  // std dev = 0,160, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( interaction(A, A) )
%   | | then return -0.10436173032560467;  // std dev = 0,107, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( enzyme(A, K) )
%   | | | then return 0.04869738330919988;  // std dev = 5,431, 205,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=67 */
%   | | | else return 0.10127491564079187;  // std dev = 8,866, 355,000 (wgt'ed) examples reached here.  /* #neg=224 #pos=131 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( complex(C, D), interaction(E, A) )
%   | then return 0.09461856987294347;  // std dev = 0,188, 33,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=30 */
%   | else return 0.2023919034150249;  // std dev = 0,148, 29,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   else if ( interaction(F, A), interaction(F, F) )
%   | then if ( interaction(A, F), phenotype(F, G) )
%   | | then return -0.06268125057291189;  // std dev = 0,158, 48,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=6 */
%   | | else if ( enzyme(F, H), location(F, I) )
%   | | | then return -0.06737089991578378;  // std dev = 1,858, 24,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | | else return 0.018223469357499165;  // std dev = 4,212, 134,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=41 */
%   | else if ( location(A, J) )
%   | | then if ( location(K, J), recursion_proteinclass(K, B) )
%   | | | then return 0.09285203609981446;  // std dev = 10,208, 629,000 (wgt'ed) examples reached here.  /* #neg=382 #pos=247 */
%   | | | else return -0.23314655313798788;  // std dev = 0,830, 140,000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else if ( interaction(L, A), interaction(M, L) )
%   | | | then return -0.07386552867927523;  // std dev = 1,888, 31,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | | else return 0.12417406715483817;  // std dev = 1,979, 18,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( interaction(C, A), phenotype(A, D) )
%   then if ( interaction(E, C), recursion_proteinclass(E, B) )
%   | then if ( phenotype(E, D) )
%   | | then return 0.29435318680841427;  // std dev = 0,226, 51,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | | else return -0.13481987030898845;  // std dev = 0,263, 13,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else if ( interaction(A, C) )
%   | | then return -0.15653277519433692;  // std dev = 0,054, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( interaction(F, C), complex(F, G) )
%   | | | then return 0.010067282233948706;  // std dev = 6,351, 294,000 (wgt'ed) examples reached here.  /* #neg=202 #pos=92 */
%   | | | else return -0.02422260705870623;  // std dev = 3,776, 106,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=30 */
%   else if ( interaction(A, H), recursion_proteinclass(H, B) )
%   | then return 0.12326448099386315;  // std dev = 0,227, 31,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else if ( interaction(A, A) )
%   | | then return -0.09054479820508578;  // std dev = 0,103, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( phenotype(A, I) )
%   | | | then return 0.09874893936275533;  // std dev = 3,064, 58,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=23 */
%   | | | else return 0.030267383302382992;  // std dev = 8,278, 453,000 (wgt'ed) examples reached here.  /* #neg=309 #pos=144 */


Starting fold 1

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 312

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 252

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
0;true,false;recursion_proteinclass(D, B), location(C, G).;false;true
0;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;true,true;recursion_proteinclass(D, B), complex(A, E).;false;false
0;true,false,false;interaction(H, A), interaction(H, D).;false;false
0;false,false;interaction(J, A), recursion_proteinclass(J, B).;false;true
0;true;complex(D, E), interaction(F, A).;true;true
0;false,false,false;interaction(K, A), enzyme(K, L).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,false;interaction(J, A), recursion_proteinclass(J, B).;false;false
1;false,false;interaction(G, A), interaction(G, G).;true;true
1;false;interaction(A, E), interaction(E, E).;true;true
1;false,false,true;enzyme(A, H), complex(G, I).;false;false
1;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
1;true;complex(C, D).;false;false
1;false,true;interaction(E, A).;false;true
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true,false;interaction(A, F), enzyme(F, D).;false;true
2;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
2;false,false,true;enzyme(A, J).;false;false
2;true,false,false;interaction(G, C), interaction(G, G).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;true;true
2;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
2;false,false,false;interaction(A, K), interaction(K, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true,false;interaction(A, E), interaction(E, A).;false;true
3;false;interaction(A, A).;false;true
3;false,false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
3;true,false,false;complex(A, F).;false;false
3;false,false;interaction(A, G), complex(G, H).;true;true
3;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- enzyme(A, C).;true;true
4;false;location(A, G), complex(A, H).;true;true
4;true,true;interaction(E, D), interaction(E, A).;false;true
4;true,true,false;interaction(F, A).;false;false
4;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
4;true;enzyme(D, C), recursion_proteinclass(D, B).;true;false
4;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
4;false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;false,false,false;interaction(N, A), complex(A, P).;false;false
5;false,false;enzyme(A, J), interaction(K, A).;true;true
5;false;interaction(A, F), interaction(F, A).;true;true
5;false,false,true;interaction(A, L), complex(K, M).;false;false
5;false,true,false;enzyme(F, H), enzyme(A, I).;false;false
5;true;enzyme(A, D), phenotype(A, E).;false;false
5;false,true;complex(F, G), complex(A, G).;false;true
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,true,true;interaction(F, H), recursion_proteinclass(H, B).;false;false
6;false,false;interaction(A, A).;false;true
6;false;complex(A, E), interaction(A, F).;true;true
6;false,true,false;interaction(F, I), recursion_proteinclass(I, B).;false;false
6;true;interaction(D, C), interaction(C, D).;false;false
6;false,false,false;enzyme(A, J), complex(A, K).;false;false
6;false,true;interaction(G, A), complex(G, E).;true;true
7;;proteinclass(A, B) :- complex(A, C).;true;true
7;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
7;true,true;interaction(E, A), recursion_proteinclass(E, B).;false;false
7;false,true,true;interaction(A, I), complex(I, J).;false;false
7;false,false;interaction(A, A).;false;true
7;true;complex(D, C), recursion_proteinclass(D, B).;true;false
7;false,false,false;enzyme(A, K).;false;false
7;false,true;location(A, G), enzyme(F, H).;true;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;false,false,false;interaction(L, A), interaction(M, L).;false;false
8;false,false;location(A, J).;true;true
8;false;interaction(F, A), interaction(F, F).;true;true
8;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
8;false,true,false;enzyme(F, H), location(F, I).;false;false
8;true;complex(C, D), interaction(E, A).;false;false
8;false,true;interaction(A, F), phenotype(F, G).;false;true
9;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
9;true,false;interaction(A, C).;false;true
9;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
9;true,true;phenotype(E, D).;false;false
9;true,false,false;interaction(F, C), complex(F, G).;false;false
9;false,false;interaction(A, A).;false;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;false,false,false;phenotype(A, I).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( tweets(D, E), follows(F, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.22400259363609773;  // std dev = 3,084, 41,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | else return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.3581489350995123;  // std dev = 2,236, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return -0.050941973991396876;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.2581489350995123;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.17654104042705457;  // std dev = 3,414, 52,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.012606777803217038;  // std dev = 1,283, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.21615173581192873;  // std dev = 2,547, 28,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13184737227462853;  // std dev = 3,377, 54,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
%   | else if ( follows(A, E) )
%   | | then return -0.17982535822144138;  // std dev = 0,054, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(F, C), follows(F, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.13724830498215845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.04842249750327158;  // std dev = 1,467, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), follows(I, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.30499991931506465;  // std dev = 2,280, 21,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2590497544232181;  // std dev = 2,969, 37,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11730932747135239;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.12179042715786981;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), tweets(G, H) )
%   | | then if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.023631393841102785;  // std dev = 2,606, 39,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return 0.0695728251214264;  // std dev = 0,768, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.1688426435689544;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.0684421469538566;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.06351488809137368;  // std dev = 3,333, 58,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
%   | else if ( follows(E, A) )
%   | | then return -0.107524579171454;  // std dev = 0,003, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.1651746704478794;  // std dev = 2,772, 33,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18730574245666184;  // std dev = 0,478, 39,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return -0.2330866957882074;  // std dev = 0,053, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.19130904490957654;  // std dev = 0,021, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, G), tweets(F, H) )
%   | | | then return -0.20072395357620473;  // std dev = 0,042, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.15457242974094507;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.13250939801936956;  // std dev = 2,767, 33,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then return 0.15120344412141293;  // std dev = 2,976, 39,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( follows(G, A), tweets(G, E) )
%   | | then if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return -0.18936528527210983;  // std dev = 0,069, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, I), recursion_accounttype(I, B) )
%   | | | then return 0.1155660824302872;  // std dev = 1,825, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return -0.20593076528325943;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, J) )
%   | | | then return -0.23869633691390812;  // std dev = 0,207, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1198519024698218;  // std dev = 1,999, 19,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.10399125442740295;  // std dev = 2,808, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | else return -0.06615183627448176;  // std dev = 1,985, 35,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(G, H) )
%   | | then return -0.012225620130340936;  // std dev = 0,788, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1611143301096876;  // std dev = 0,481, 18,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, A) )
%   | then return 0.07878615415965771;  // std dev = 2,746, 40,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   | else return -0.02134832681393796;  // std dev = 1,452, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   else if ( follows(F, A), follows(F, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.005374004234592415;  // std dev = 2,702, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.013760729783026001;  // std dev = 0,418, 54,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.1424236531499412;  // std dev = 0,018, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.14350448877157854;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.13358912804048967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.017204706155490232;  // std dev = 1,453, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.13342910856322876;  // std dev = 0,488, 21,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */


Results
   AUC ROC   = 0.601285
   AUC PR    = 0.404681
   CLL	      = -0.61977
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.976 seconds
Total inference time: 1.894 seconds
AUC ROC: 0.601285


Results scoring model
   AUC ROC   = 0.811134
   AUC PR    = 0.591476
   CLL	      = -0.534498
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.935 seconds
Parameter learned model CLL: -0.534498


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, D)', 'true,false': 'recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(D, B), tweets(A, E)', 'true': 'tweets(D, E), follows(F, A)', 'true,false,false': 'follows(G, A), follows(G, D)', 'false,false': 'follows(I, A), recursion_accounttype(I, B)', 'false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(J, A)'}, {'true,false,true': [2.236, 10, 10], 'true,false,false,false': [0.0, 2, 0], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'true,true,true': [3.084, 26, 15], 'true,true,false': [0.913, 5, 1], 'false,false,true': [0.953, 10, 1], 'false,true': [0.0, 1, 0], 'false,false,false,false': [1.549, 6, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), follows(F, F)', 'true': 'tweets(C, D)', 'false,false,false': 'follows(G, A), recursion_accounttype(G, B)'}, {'true,false': [0.0, 0, 0], 'false,false,false,true': [1.283, 11, 2], 'true,true': [3.414, 34, 18], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [2.547, 17, 11]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true,false': 'follows(A, E)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'true,false,false': 'follows(F, C), follows(F, F)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, I), follows(I, I)'}, {'true,false,true': [0.054, 5, 0], 'true,false,false,false': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true': [3.377, 37, 17], 'false,false,true': [0.0, 0, 0], 'false,true': [1.467, 9, 3], 'false,false,false,false': [2.28, 10, 11]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true,false': 'follows(A, E), follows(E, A)', 'false': 'follows(A, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false,false': 'tweets(A, F)', 'false,false': 'follows(A, G), tweets(G, H)', 'false,false,true': 'follows(G, I), recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'false,false,true,false': [0.768, 3, 1], 'true,true': [2.969, 20, 17], 'false,false,true,true': [2.606, 29, 10], 'false,false,false,true': [0.0, 2, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [1.414, 6, 3]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true,false': 'follows(E, A)', 'true': 'follows(D, C), follows(D, A)'}, {'true,true': [3.333, 41, 17], 'true,false,true': [0.003, 2, 0], 'true,false,false': [2.772, 19, 14], 'false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,false,false': 'follows(I, A), tweets(A, J)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(A, G), tweets(F, H)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'false,false,true,true': [0.042, 3, 0], 'false,false,true,false': [0.0, 2, 0], 'false,true,true': [0.053, 12, 0], 'true': [0.478, 22, 17], 'false,true,false': [0.021, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.767, 19, 14]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, E), follows(A, F)', 'false,false': 'follows(A, A)', 'false,true,true': 'follows(F, H), recursion_accounttype(H, B)', 'false,true,false': 'follows(F, I), recursion_accounttype(I, B)', 'true': 'follows(D, C), follows(C, D)', 'false,false,false': 'tweets(A, J)', 'false,true': 'follows(G, A), tweets(G, E)'}, {'true,false': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [1.825, 8, 6], 'true,true': [2.976, 22, 17], 'false,true,true,true': [0.069, 15, 0], 'false,false,false,true': [0.207, 4, 0], 'false,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 2, 0], 'false,false,false,false': [1.999, 11, 8]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true,true': 'follows(E, A), recursion_accounttype(E, B)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, A)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false,true': 'follows(A, G), tweets(G, H)'}, {'true,false': [0.0, 0, 0], 'false,true,true': [0.788, 4, 1], 'false,false,false': [0.481, 9, 9], 'true,true,false': [1.985, 29, 6], 'false,true,false': [0.0, 0, 0], 'true,true,true': [2.808, 20, 15], 'false,false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(F, A), follows(F, F)', 'false,false': 'recursion_accounttype(G, B)', 'true': 'tweets(C, D), follows(E, A)'}, {'true,true': [2.746, 25, 15], 'true,false': [1.452, 9, 3], 'false,false,true': [2.702, 28, 13], 'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true,false': 'follows(A, C)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)'}, {'true,false,true': [0.018, 2, 0], 'true,true': [0.418, 37, 17], 'true,false,false,true': [0.015, 3, 0], 'false,false,false': [0.488, 10, 11], 'false,false,true': [0.0, 0, 0], 'false,true': [1.453, 9, 3], 'true,false,false,false': [0.0, 1, 0]}]]
[{'': [0.23482461667717, 0.16493055555555544], 'true,false': [0.25, 0.0], 'false': [0.0, 0.1701323251417768], 'true,true': [0.23200475907198043, 0.13888888888888892], 'true,false,false': [nan, 0.0], 'false,false': [0.0826446280991736, 0.2222222222222221], 'true': [0.22453598913535486, 0.2479338842975207], 'false,false,false': [0.0, 0.23999999999999985]}, {'': [0.2240962495538027, 0.2073178066110849], 'false': [nan, 0.2073178066110849], 'false,false': [nan, 0.20731780661108493], 'true': [0.2240962495538027, nan], 'false,false,false': [0.1265507069177228, 0.23168030135129605]}, {'': [0.19844895372354354, 0.23792370760090226], 'false,false,false': [nan, 0.24749372124178476], 'false': [0.1792831097579847, 0.24749372124178476], 'true,false,false': [nan, 0.0], 'false,false': [nan, 0.2474937212417847], 'true': [0.21113993429896447, 0.0007399384986727561], 'true,false': [0.0005857919546505164, 0.0]}, {'': [0.2329659049079104, 0.1755556390627364], 'false,false,false': [0.0, 0.22222222222222218], 'false': [nan, 0.17555563906273652], 'false,false,true': [0.1740915330709295, 0.14764605066248998], 'true,false,false': [0.0, 0.0], 'false,false': [0.1718095606440012, 0.19019399415406754], 'true': [0.23820773485427676, 5.020063600128313e-06], 'true,false': [nan, 5.020063600128313e-06]}, {'': [0.20531602773849927, nan], 'true,false': [3.3406496707660827e-06, 0.23285701119632501], 'true': [0.19151970589755202, 0.22355768482144237]}, {'': [0.22859692887117442, 0.1705359658283625], 'false,false,false': [nan, 0.23201202535519755], 'false': [0.0006104326585326322, 0.21291936387420238], 'false,false': [0.0008630083159077096, 0.23201202535519755], 'false,false,true': [0.0005863619322528888, 0.0], 'false,true': [0.00023359840916623945, 0.0004319063219292707]}, {'': [0.22707483307035917, 0.16079322405047478], 'false,false,false': [0.010663326219291829, 0.2102800965942001], 'false,true,false': [0.2379529909404577, 0.0], 'false': [0.13095682268603598, 0.19403355021019547], 'false,true,true': [0.00032071105571951364, nan], 'false,false': [nan, 0.19403355021019544], 'true': [0.22707483307035917, nan], 'false,true': [0.00032071105571951364, 0.2195138914733416]}, {'': [0.17614069027865675, 0.2129513470091087], 'true,true': [0.2252273579737428, 0.11257968692677571], 'false': [0.12433980298966815, 0.23103376515115276], 'false,false': [nan, 0.23103376515115281], 'true': [0.17614069027865675, nan], 'false,true': [0.12433980298966815, nan]}, {'': [0.18731039391329435, 0.17806965948286038], 'false': [nan, 0.17806965948286047], 'false,false': [0.17806965948286044, nan], 'true': [0.18846380120705825, 0.1757526919495812]}, {'': [0.15937555189121563, 0.22099521079721982], 'true,false': [0.00015715310396793858, 7.339813498095579e-05], 'false': [0.17585327634258577, 0.23853949422807627], 'true,false,false': [7.328558536769114e-05, 0.0], 'false,false': [nan, 0.2385394942280762], 'true': [0.1746623107581522, 0.00010175077281060253]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, D).;true;true
0;true,false;recursion_accounttype(D, B).;true;true
0;false;follows(A, H), recursion_accounttype(H, B).;true;true
0;false,false;follows(I, A), recursion_accounttype(I, B).;true;true
0;true;tweets(D, E), follows(F, A).;true;true
0;false,false,false;follows(J, A).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;true,false;follows(A, E).;true;true
2;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true,false;tweets(A, F).;true;true
3;false,false;follows(J, A).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(A, G), tweets(G, H).;true;true
4;;accounttype(A, B) :- follows(D, C), follows(D, A).;true;true
4;false;follows(E, A).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,false;follows(F, A).;true;true
5;false,false,true;follows(A, G), tweets(F, H).;true;true
5;false,true;tweets(D, E), tweets(A, E).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false;tweets(A, E), follows(A, F).;true;true
6;false,true,false;follows(F, I), recursion_accounttype(I, B).;true;true
6;false,true;follows(G, A), tweets(G, E).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(E, C), tweets(E, F).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( tweets(D, E), follows(F, A) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4981489350995123;  // std dev = 2,400, 25,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.19148226843284558;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.4945125714631487;  // std dev = 1,595, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, J), recursion_accounttype(J, B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return -0.050941973991396876;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else return 0.19148226843284563;  // std dev = 0,471, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( follows(D, C), tweets(A, E) )
%   | | then if ( follows(A, C), follows(D, A) )
%   | | | then return 0.5949872506085707;  // std dev = 1,211, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.06691080504429749;  // std dev = 1,463, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return 0.7861463494015664;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06405261458276988;  // std dev = 0,269, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( follows(F, A) )
%   | then return -0.12938272140839713;  // std dev = 0,056, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.2676840441229856;  // std dev = 1,296, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.1502545606724275;  // std dev = 0,045, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.45729442898453504;  // std dev = 1,643, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.16653882456488167;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.21859179712222876;  // std dev = 0,437, 37,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
%   | | else return -0.11635439982792294;  // std dev = 0,050, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.11742315493349194;  // std dev = 0,008, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(F, G) )
%   | | then if ( follows(A, H), follows(H, F) )
%   | | | then return 0.04262700760469463;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.4757948726500561;  // std dev = 0,776, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.13211309441531838;  // std dev = 0,041, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.30018794556463685;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.4229802800872186;  // std dev = 1,211, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.14209424281556476;  // std dev = 0,471, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), follows(A, F) )
%   | | | then return 0.31919968215558;  // std dev = 2,061, 23,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | | else return -0.06842500180798715;  // std dev = 0,725, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.04382455426357385;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else return -0.11584106206898574;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, G), tweets(G, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.10085022640527201;  // std dev = 0,000172, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.060763991141178364;  // std dev = 1,351, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.28926352629680824;  // std dev = 1,643, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | else if ( follows(K, A) )
%   | | then return -0.1353741020987651;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.11914890490746435;  // std dev = 0,471, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, D), follows(C, A) )
%   then if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( follows(F, E), tweets(A, G) )
%   | | | then return 0.15231793575500105;  // std dev = 2,057, 21,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.5136588956580213;  // std dev = 0,086, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07049483852034719;  // std dev = 0,267, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return -0.09475478288754431;  // std dev = 0,038, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( follows(H, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11907553806568205;  // std dev = 1,702, 15,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return -0.1909734891165986;  // std dev = 0,108, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.1372643589361984;  // std dev = 1,225, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.24544704055338978;  // std dev = 1,365, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(D, A) )
%   | | | then return 0.3293115249280357;  // std dev = 1,117, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.09300942549703796;  // std dev = 1,558, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | else return -0.08909517487083925;  // std dev = 0,630, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then return -0.13524188279157054;  // std dev = 0,040, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.20693975570286263;  // std dev = 0,800, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return -0.08445298425367;  // std dev = 2,73e-05, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(H, A) )
%   | | then return -0.09489451464000169;  // std dev = 0,013, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.052985020426826915;  // std dev = 1,746, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.15362768098679927;  // std dev = 1,839, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then if ( follows(E, A), follows(D, A) )
%   | | | then return 0.23617204394862779;  // std dev = 1,355, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.03496274020424739;  // std dev = 1,334, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return -0.07271334121530725;  // std dev = 0,635, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return -0.037689345731892844;  // std dev = 0,276, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( tweets(A, F), follows(A, G) )
%   | then if ( follows(H, A), tweets(H, F) )
%   | | then return -0.07799255453138013;  // std dev = 0,001, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.07487229427412026;  // std dev = 0,425, 16,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | else if ( tweets(A, I) )
%   | | then return -0.15632871532180131;  // std dev = 0,109, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.13362954604587293;  // std dev = 0,192, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.13347551764448365;  // std dev = 1,799, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return -0.005000015549247384;  // std dev = 1,675, 25,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | | | else return 0.24772865443380213;  // std dev = 1,424, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else return -0.042942406982738636;  // std dev = 0,298, 20,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | else return -0.12126868753516555;  // std dev = 0,112, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.038175441751718754;  // std dev = 0,406, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.2561500063851361;  // std dev = 0,422, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.07160887833295848;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.18712253956588096;  // std dev = 0,798, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.13410432109042572;  // std dev = 1,360, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, C) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.21422674692561505;  // std dev = 1,441, 18,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | | else return -0.10631551768875305;  // std dev = 1,694, 33,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   | | else return 0.18874986435657845;  // std dev = 0,850, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return -0.10903039740860174;  // std dev = 0,103, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(G, A), follows(H, A) )
%   | | | then return -0.08151195128644388;  // std dev = 0,036, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.2411573535669945;  // std dev = 0,360, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.09625594910775623;  // std dev = 1,018, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return 0.16230265413380443;  // std dev = 0,795, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.10295810458109378;  // std dev = 0,480, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.03069444187511611;  // std dev = 0,351, 37,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
%   | | else return -0.06731534537303772;  // std dev = 0,039, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.08305753529933982;  // std dev = 0,033, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(G, F) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.03371095352381429;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.22100212188403856;  // std dev = 0,116, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.15064006728967905;  // std dev = 0,763, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.055451391481914615;  // std dev = 0,631, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1456821281045486;  // std dev = 1,388, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return -0.010892787357582404;  // std dev = 0,443, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */


Results
   AUC ROC   = 0.642353
   AUC PR    = 0.472674
   CLL	      = -0.691109
   Precision = 0.436709 at threshold = 0.5
   Recall    = 0.547619
   F1        = 0.485915


Total learning time: 23.323 seconds
Total inference time: 4.178 seconds
AUC ROC: 0.642353


Results scoring model
   AUC ROC   = 0.941467
   AUC PR    = 0.90125
   CLL	      = -0.362915
   Precision = 0.821429 at threshold = 0.5
   Recall    = 0.741935
   F1        = 0.779661


Total scoring time: 1.822 seconds
Refined model CLL: -0.362915


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.642353
   AUC PR    = 0.472674
   CLL	      = -0.691109
   Precision = 0.436709 at threshold = 0.5
   Recall    = 0.547619
   F1        = 0.485915


Total learning time: 28.056 seconds
Total inference time: 4.178 seconds
AUC ROC: 0.642353
Total revision time: 28.056
Best scored revision CLL: -0.362915


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:01:14
{'CLL': -0.691109, 'Precision': [0.436709, 0.5], 'Inference time': 4.178, 'Learning time': 28.056, 'AUC ROC': 0.642353, 'F1': 0.485915, 'AUC PR': 0.472674, 'parameter_0.2': {'CLL': -0.61977, 'Precision': [nan, 0.5], 'Inference time': 1.894, 'Learning time': 1.976, 'AUC ROC': 0.601285, 'F1': nan, 'AUC PR': 0.404681, 'Recall': 0.0}, 'Recall': 0.547619}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( follows(D, C), tweets(A, E) )
%   | | then if ( follows(A, C), follows(D, A) )
%   | | | then return 0.6581489350995123;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.1308762078267849;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06492798797741085;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( follows(F, A) )
%   | then return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.28672036367094084;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.524815601766179;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.19148226843284558;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( follows(D, C), tweets(A, E) )
%   | | then if ( follows(A, C), follows(D, A) )
%   | | | then return 0.5580193346218546;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.11418623766746651;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.05720661123539927;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return -0.08919679382729742;  // std dev = 0,210, 20,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else return 0.1895524877397339;  // std dev = 1,091, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.448295606241962;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.16653882456488167;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( follows(A, C), recursion_accounttype(D, B) )
%   | | then return 0.4883935270151409;  // std dev = 0,337, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(D, C) )
%   | | | then return 0.09773335295447583;  // std dev = 1,585, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.05070064289107802;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( follows(E, A) )
%   | then return -0.11627290047203209;  // std dev = 0,033, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.2487747652165909;  // std dev = 1,273, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.13504708570788185;  // std dev = 0,035, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.36236334632262296;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.14209424281556485;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, C) )
%   | | | then return 0.39501107852519013;  // std dev = 1,483, 18,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | | else return -0.22464021756233973;  // std dev = 0,271, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( recursion_accounttype(E, B), tweets(E, C) )
%   | | | then return -0.03048460310984935;  // std dev = 1,539, 27,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | | else return 0.3536076866509025;  // std dev = 0,840, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.13377424954788902;  // std dev = 0,127, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.022850241926797948;  // std dev = 0,517, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(G, A) )
%   | | then return 0.133127547989806;  // std dev = 0,860, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.328372901315633;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.2143870001455596;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( recursion_accounttype(C, B), follows(A, C) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then return 0.22742400870989096;  // std dev = 0,363, 23,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | else return -0.1954214909847017;  // std dev = 0,169, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.06414686255791006;  // std dev = 0,186, 34,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(F, B), follows(G, F) )
%   | | | then return -0.013670934391676706;  // std dev = 0,893, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.23191478283583156;  // std dev = 1,340, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else return -0.16735389519100374;  // std dev = 0,062, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.2888026511469143;  // std dev = 0,601, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.033985651507153825;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.2208395417558624;  // std dev = 0,478, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.033144933887486266;  // std dev = 1,538, 25,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | | | else return 0.29763444769063097;  // std dev = 1,349, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else return -0.03804957904516597;  // std dev = 0,282, 20,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | else return -0.10960928607651149;  // std dev = 0,092, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.036986930099706;  // std dev = 0,488, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.2720452652710285;  // std dev = 0,465, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.02551952917788647;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.2036604970356862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.1755339430986145;  // std dev = 1,349, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.10955195380227271;  // std dev = 1,343, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.30640189912557503;  // std dev = 1,157, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return -0.18986784447219113;  // std dev = 0,236, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.15184742869035922;  // std dev = 0,171, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(F, A) )
%   | then return -0.0967691934831439;  // std dev = 0,057, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.13485665534838207;  // std dev = 1,180, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.13248616804289454;  // std dev = 0,049, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.16545198762783345;  // std dev = 1,525, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.03935982055380233;  // std dev = 1,345, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.08974327792209544;  // std dev = 1,327, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.24324835664446504;  // std dev = 1,162, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return -0.1641619789178043;  // std dev = 0,213, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.13406892259071662;  // std dev = 0,155, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(F, A) )
%   | then return -0.0886481814480363;  // std dev = 0,053, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return -0.08760817445477888;  // std dev = 0,895, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.1543259911842138;  // std dev = 0,747, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1248053841016158;  // std dev = 1,526, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.03135440015148965;  // std dev = 1,344, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then if ( tweets(D, C), follows(E, F) )
%   | | | then return 0.09460658905457615;  // std dev = 1,898, 34,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | | | else return -0.2316604607541678;  // std dev = 0,193, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( recursion_accounttype(E, B), tweets(E, C) )
%   | | | then return -0.10253263107424325;  // std dev = 0,966, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return 0.10163268343399343;  // std dev = 0,559, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return -0.10390855508829493;  // std dev = 0,113, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.0790452013448638;  // std dev = 0,201, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return -0.09335663965831446;  // std dev = 1,016, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(J, A) )
%   | | then return 0.1751049946494242;  // std dev = 0,716, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.11434390861904586;  // std dev = 0,473, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(D, A) )
%   then if ( recursion_accounttype(D, B), follows(A, E) )
%   | then if ( follows(D, E), follows(A, D) )
%   | | then if ( follows(E, A), tweets(D, C) )
%   | | | then return 0.22353867144300835;  // std dev = 0,848, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return -0.07715643699431328;  // std dev = 1,107, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( follows(E, A) )
%   | | | then return -0.1623391987155452;  // std dev = 0,199, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.05923567198585009;  // std dev = 0,349, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.08251009448578901;  // std dev = 0,072, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.17751649691458382;  // std dev = 0,710, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then return -0.10091363300500326;  // std dev = 0,034, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.008800657799098152;  // std dev = 1,166, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.06001577195754148;  // std dev = 2,008, 21,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */


Results
   AUC ROC   = 0.6427
   AUC PR    = 0.461152
   CLL	      = -0.685179
   Precision = 0.458599 at threshold = 0.5
   Recall    = 0.571429
   F1        = 0.508834


Total learning time: 11.601 seconds
Total inference time: 1.563 seconds
AUC ROC: 0.6427


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:01:28
{'CLL': -0.685179, 'Precision': [0.458599, 0.5], 'Inference time': 1.563, 'Learning time': 11.601, 'AUC ROC': 0.6427, 'F1': 0.508834, 'AUC PR': 0.461152, 'Recall': 0.571429}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( follows(D, C), tweets(A, E) )
%   | | then if ( follows(A, C), follows(D, A) )
%   | | | then return 0.6581489350995123;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.1308762078267849;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(G, A) )
%   | then return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.28672036367094084;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.524815601766179;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.19148226843284558;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */


Results
   AUC ROC   = 0.618465
   AUC PR    = 0.423494
   CLL	      = -0.676501
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.88 seconds
Total inference time: 0.724 seconds
AUC ROC: 0.618465


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:01:31
{'CLL': -0.676501, 'Precision': [nan, 0.5], 'Inference time': 0.724, 'Learning time': 1.88, 'AUC ROC': 0.618465, 'F1': nan, 'AUC PR': 0.423494, 'Recall': 0.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
0;true,false;recursion_proteinclass(D, B), location(C, G).;false;true
0;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;true,true;recursion_proteinclass(D, B), complex(A, E).;false;false
0;true,false,false;interaction(H, A), interaction(H, D).;false;false
0;false,false;interaction(J, A), recursion_proteinclass(J, B).;false;true
0;true;complex(D, E), interaction(F, A).;true;true
0;false,false,false;interaction(K, A), enzyme(K, L).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,false;interaction(J, A), recursion_proteinclass(J, B).;false;false
1;false,false;interaction(G, A), interaction(G, G).;true;true
1;false;interaction(A, E), interaction(E, E).;true;true
1;false,false,true;enzyme(A, H), complex(G, I).;false;false
1;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
1;true;complex(C, D).;false;false
1;false,true;interaction(E, A).;false;true
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true,false;interaction(A, F), enzyme(F, D).;false;true
2;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
2;false,false,true;enzyme(A, J).;false;false
2;true,false,false;interaction(G, C), interaction(G, G).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;true;true
2;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
2;false,false,false;interaction(A, K), interaction(K, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true,false;interaction(A, E), interaction(E, A).;false;true
3;false;interaction(A, A).;false;true
3;false,false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
3;true,false,false;complex(A, F).;false;false
3;false,false;interaction(A, G), complex(G, H).;true;true
3;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- enzyme(A, C).;true;true
4;false;location(A, G), complex(A, H).;true;true
4;true,true;interaction(E, D), interaction(E, A).;false;true
4;true,true,false;interaction(F, A).;false;false
4;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
4;true;enzyme(D, C), recursion_proteinclass(D, B).;true;false
4;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
4;false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;false,false,false;interaction(N, A), complex(A, P).;false;false
5;false,false;enzyme(A, J), interaction(K, A).;true;true
5;false;interaction(A, F), interaction(F, A).;true;true
5;false,false,true;interaction(A, L), complex(K, M).;false;false
5;false,true,false;enzyme(F, H), enzyme(A, I).;false;false
5;true;enzyme(A, D), phenotype(A, E).;false;false
5;false,true;complex(F, G), complex(A, G).;false;true
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,true,true;interaction(F, H), recursion_proteinclass(H, B).;false;false
6;false,false;interaction(A, A).;false;true
6;false;complex(A, E), interaction(A, F).;true;true
6;false,true,false;interaction(F, I), recursion_proteinclass(I, B).;false;false
6;true;interaction(D, C), interaction(C, D).;false;false
6;false,false,false;enzyme(A, J), complex(A, K).;false;false
6;false,true;interaction(G, A), complex(G, E).;true;true
7;;proteinclass(A, B) :- complex(A, C).;true;true
7;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
7;true,true;interaction(E, A), recursion_proteinclass(E, B).;false;false
7;false,true,true;interaction(A, I), complex(I, J).;false;false
7;false,false;interaction(A, A).;false;true
7;true;complex(D, C), recursion_proteinclass(D, B).;true;false
7;false,false,false;enzyme(A, K).;false;false
7;false,true;location(A, G), enzyme(F, H).;true;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;false,false,false;interaction(L, A), interaction(M, L).;false;false
8;false,false;location(A, J).;true;true
8;false;interaction(F, A), interaction(F, F).;true;true
8;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
8;false,true,false;enzyme(F, H), location(F, I).;false;false
8;true;complex(C, D), interaction(E, A).;false;false
8;false,true;interaction(A, F), phenotype(F, G).;false;true
9;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
9;true,false;interaction(A, C).;false;true
9;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
9;true,true;phenotype(E, D).;false;false
9;true,false,false;interaction(F, C), complex(F, G).;false;false
9;false,false;interaction(A, A).;false;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;false,false,false;phenotype(A, I).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( tweets(D, E), follows(F, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.23910131605189194;  // std dev = 4,451, 84,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=32 */
%   | | else return 0.058148935099512224;  // std dev = 1,549, 15,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.25814893509951237;  // std dev = 2,898, 35,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=14 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.058148935099512224;  // std dev = 1,549, 15,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.274815601766179;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.1465460384497216;  // std dev = 4,733, 105,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=33 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.08334088403637414;  // std dev = 1,742, 17,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.21967430665126358;  // std dev = 3,867, 64,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=25 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1522009369948666;  // std dev = 4,915, 109,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=37 */
%   | else if ( follows(A, E) )
%   | | then return -0.07880003572859202;  // std dev = 0,938, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(F, C), follows(F, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.15577654234756783;  // std dev = 0,006, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.05718841778692901;  // std dev = 1,594, 24,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), follows(I, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2879534786591388;  // std dev = 3,242, 42,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2451030415806647;  // std dev = 4,018, 66,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=30 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3334480459680466;  // std dev = 0,683, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return -0.14012083413980414;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G), tweets(G, H) )
%   | | then if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.04261945387187587;  // std dev = 3,833, 80,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=21 */
%   | | | else return -0.03374031055090268;  // std dev = 1,196, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.16430069862202318;  // std dev = 0,035, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.15554901569077947;  // std dev = 2,152, 19,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.08906066092491226;  // std dev = 4,947, 117,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=38 */
%   | else if ( follows(E, A) )
%   | | then return -0.1703990091831844;  // std dev = 0,057, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.12022548987323942;  // std dev = 3,773, 66,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=24 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18330197898520365;  // std dev = 0,491, 69,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return -0.025883740164246098;  // std dev = 2,319, 32,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | else return -0.21423021166614817;  // std dev = 0,016, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, G), tweets(F, H) )
%   | | | then return -0.2116412210684827;  // std dev = 0,064, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.16391343139278405;  // std dev = 0,063, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.09779673303312132;  // std dev = 3,765, 66,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=24 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then return 0.14404612200463648;  // std dev = 4,013, 67,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=30 */
%   | else return 0.21860039653715663;  // std dev = 0,693, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( follows(G, A), tweets(G, E) )
%   | | then if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return -0.04340965417759872;  // std dev = 2,345, 37,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, I), recursion_accounttype(I, B) )
%   | | | then return 0.1006077491589458;  // std dev = 2,186, 22,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | | else return -0.1974969098052791;  // std dev = 0,177, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, J) )
%   | | | then return 0.016461817521037318;  // std dev = 1,549, 14,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.05045411974354602;  // std dev = 2,667, 37,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.10896492030608365;  // std dev = 3,802, 60,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=27 */
%   | | else return -0.006750961516812717;  // std dev = 3,617, 80,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=19 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(G, H) )
%   | | then return -0.051653554947343264;  // std dev = 1,433, 16,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.12334681693975631;  // std dev = 0,480, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, A) )
%   | then return 0.05949989108337559;  // std dev = 4,089, 81,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=30 */
%   | else return -0.09201247984209031;  // std dev = 1,575, 24,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   else if ( follows(F, A), follows(F, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.052075836057887744;  // std dev = 4,159, 81,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=29 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.02338275574302517;  // std dev = 0,452, 109,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=37 */
%   | else if ( follows(A, C) )
%   | | then return -0.1827291796557694;  // std dev = 0,049, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.17540959073888973;  // std dev = 0,099, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.22470933948121335;  // std dev = 0,563, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.0769769585095456;  // std dev = 1,577, 24,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.13701331461443747;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */


Results
   AUC ROC   = 0.620922
   AUC PR    = 0.407969
   CLL	      = -0.609765
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.669 seconds
Total inference time: 1.496 seconds
AUC ROC: 0.620922


Results scoring model
   AUC ROC   = 0.735172
   AUC PR    = 0.506461
   CLL	      = -0.570011
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.035 seconds
Parameter learned model CLL: -0.570011


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, D)', 'true,false': 'recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(D, B), tweets(A, E)', 'true': 'tweets(D, E), follows(F, A)', 'true,false,false': 'follows(G, A), follows(G, D)', 'false,false': 'follows(I, A), recursion_accounttype(I, B)', 'false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(J, A)'}, {'true,false,true': [2.898, 21, 14], 'true,false,false,false': [0.0, 6, 0], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 5, 0], 'true,true,true': [4.451, 52, 32], 'true,true,false': [1.549, 12, 3], 'false,false,true': [1.549, 12, 3], 'false,true': [0.0, 2, 0], 'false,false,false,false': [2.415, 14, 10]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, E), follows(E, E)', 'false,false': 'follows(F, A), follows(F, F)', 'true': 'tweets(C, D)', 'false,false,false': 'follows(G, A), recursion_accounttype(G, B)'}, {'true,false': [0.0, 0, 0], 'false,false,false,true': [1.742, 13, 4], 'true,true': [4.733, 72, 33], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [3.867, 39, 25]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true,false': 'follows(A, E)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'true,false,false': 'follows(F, C), follows(F, F)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, I), follows(I, I)'}, {'true,false,true': [0.938, 8, 1], 'true,false,false,false': [0.006, 2, 0], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true': [4.915, 72, 37], 'false,false,true': [0.0, 0, 0], 'false,true': [1.594, 21, 3], 'false,false,false,false': [3.242, 21, 21]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true,false': 'follows(A, E), follows(E, A)', 'false': 'follows(A, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false,false': 'tweets(A, F)', 'false,false': 'follows(A, G), tweets(G, H)', 'false,false,true': 'follows(G, I), recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 1, 0], 'true,false,false,true': [0.683, 1, 1], 'false,false,true,false': [1.196, 11, 2], 'true,true': [4.018, 36, 30], 'false,false,true,true': [3.833, 59, 21], 'false,false,false,true': [0.035, 5, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [2.152, 11, 8]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true,false': 'follows(E, A)', 'true': 'follows(D, C), follows(D, A)'}, {'true,true': [4.947, 79, 38], 'true,false,true': [0.057, 3, 0], 'true,false,false': [3.773, 42, 24], 'false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,false,false': 'follows(I, A), tweets(A, J)', 'false,false': 'follows(F, A)', 'false,false,true': 'follows(A, G), tweets(F, H)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'false,false,true,true': [0.064, 6, 0], 'false,false,true,false': [0.063, 6, 0], 'false,true,true': [2.319, 25, 7], 'true': [0.491, 38, 31], 'false,true,false': [0.016, 7, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.765, 42, 24]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'tweets(A, E), follows(A, F)', 'false,false': 'follows(A, A)', 'false,true,true': 'follows(F, H), recursion_accounttype(H, B)', 'false,true,false': 'follows(F, I), recursion_accounttype(I, B)', 'true': 'follows(D, C), follows(C, D)', 'false,false,false': 'tweets(A, J)', 'false,true': 'follows(G, A), tweets(G, E)'}, {'true,false': [0.693, 1, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [2.186, 14, 8], 'true,true': [4.013, 37, 30], 'false,true,true,true': [2.345, 30, 7], 'false,false,false,true': [1.549, 10, 4], 'false,false,true': [0.0, 0, 0], 'false,true,false,false': [0.177, 7, 0], 'false,false,false,false': [2.667, 25, 12]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true,true': 'follows(E, A), recursion_accounttype(E, B)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false': 'follows(A, A)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false,true': 'follows(A, G), tweets(G, H)'}, {'true,false': [0.0, 0, 0], 'false,true,true': [1.433, 13, 3], 'false,false,false': [0.48, 17, 13], 'true,true,false': [3.617, 61, 19], 'false,true,false': [0.0, 0, 0], 'true,true,true': [3.802, 33, 27], 'false,false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(F, A), follows(F, F)', 'false,false': 'recursion_accounttype(G, B)', 'true': 'tweets(C, D), follows(E, A)'}, {'true,true': [4.089, 51, 30], 'true,false': [1.575, 21, 3], 'false,false,true': [4.159, 52, 29], 'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true,false': 'follows(A, C)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)'}, {'true,false,true': [0.049, 4, 0], 'true,true': [0.452, 72, 37], 'true,false,false,true': [0.099, 5, 0], 'false,false,false': [0.499, 21, 21], 'false,false,true': [0.0, 0, 0], 'false,true': [1.577, 21, 3], 'true,false,false,false': [0.563, 1, 1]}]]
[{'': [0.22750000000000062, 0.20274102079395045], 'true,false': [0.2399999999999995, -6.938893903907228e-18], 'false': [0.0, 0.20816115702479296], 'true,true': [0.23582766439909442, 0.15999999999999986], 'true,false,false': [nan, -6.938893903907228e-18], 'false,false': [0.15999999999999986, 0.22592152199762192], 'true': [0.2285481073359876, 0.2248661511005349], 'false,false,false': [-2.7755575615628915e-18, 0.24305555555555558]}, {'': [0.21332426830360565, 0.22518375264629528], 'false': [nan, 0.22518375264629528], 'false,false': [nan, 0.22518375264629537], 'true': [0.21332426830360565, nan], 'false,false,false': [0.17847059979955748, 0.2336910000925419]}, {'': [0.2137097621190311, 0.22534737172407773], 'false,false,false': [nan, 0.2502669224034647], 'false': [0.10593265796453923, 0.2502669224034647], 'true,false,false': [nan, 1.7518799305504817e-05], 'false,false': [nan, 0.250266922403465], 'true': [0.22161696860278277, 0.08083529413242667], 'true,false': [0.09771745747632529, 1.7518799305504817e-05]}, {'': [0.24312179812421975, 0.18191648705618513], 'true,false': [nan, 0.2054295290197963], 'false': [nan, 0.18191648705618527], 'false,false,true': [0.18360934045665808, 0.11004456715902239], 'true,false,false': [0.23338846546082648, 0.0], 'false,false': [0.17402721943119476, 0.20990774591387754], 'true': [0.24462500398368892, 0.2054295290197963], 'false,false,false': [0.00025085111402516346, 0.24376731301939078]}, {'': [0.20950800431442013, nan], 'true,false': [0.0010818677652700143, 0.21565628962848882], 'true': [0.20918509242949357, 0.20983958922222326]}, {'': [0.24103785837686434, 0.17895448747417658], 'false,false,false': [nan, 0.21479373210273778], 'false': [0.14315817488226554, 0.1925546415626189], 'false,false': [0.0012336453944139607, 0.21479373210273778], 'false,false,true': [0.000673050496250179, 0.0006552693389138692], 'false,true': [0.16804755631455942, 0.000270950952597485]}, {'': [0.24052149776203566, 0.17493357510941301], 'false,false,false': [0.17138461139252975, 0.1921834179355115], 'false,true,false': [0.2172560921695525, 0.004480435509122186], 'false': [0.16461979452621386, 0.18670405961659228], 'false,true,true': [0.14858313003365967, nan], 'false,false': [nan, 0.18670405961659226], 'true': [0.24038054457951516, 0.23984620082543434], 'false,true': [0.14858313003365967, 0.18216924960491976]}, {'': [0.19993968795849623, 0.20172096514745813], 'true,true': [0.24087770197214306, 0.16349753517423996], 'false': [0.12833880947084306, 0.2302058956553493], 'false,false': [nan, 0.2302058956553493], 'true': [0.19993968795849623, nan], 'false,true': [0.12833880947084306, nan]}, {'': [0.18691876714479558, 0.21351441193779364], 'false': [nan, 0.21351441193779377], 'false,false': [0.21351441193779355, nan], 'true': [0.20642796723442913, 0.10336630368018866]}, {'': [0.19182474549069853, 0.20651856700500218], 'true,false': [0.0005980300508632089, 0.07929990256379393], 'false': [0.10357581736066084, 0.2486914182853149], 'true,false,false': [0.0019756687677433826, 0.15825680253929197], 'false,false': [nan, 0.2486914182853149], 'true': [0.20420461603393, 0.05410493426598042]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, D).;true;true
0;true,false;recursion_accounttype(D, B).;true;true
0;false;follows(A, H), recursion_accounttype(H, B).;true;true
0;false,false;follows(I, A), recursion_accounttype(I, B).;true;true
0;true;tweets(D, E), follows(F, A).;true;true
0;false,false,false;follows(J, A).;true;true
2;;accounttype(A, B) :- follows(C, A).;true;true
2;true,false;follows(A, E).;true;true
2;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true,false;tweets(A, F).;true;true
3;false,false;follows(J, A).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(A, G), tweets(G, H).;true;true
4;;accounttype(A, B) :- follows(D, C), follows(D, A).;true;true
4;false;follows(E, A).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, D), follows(D, A).;true;true
5;false,false;follows(F, A).;true;true
5;false,false,true;follows(A, G), tweets(F, H).;true;true
5;false,true;tweets(D, E), tweets(A, E).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(E, C), tweets(E, F).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( tweets(D, E), follows(F, A) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.46684458727342437;  // std dev = 3,310, 46,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=28 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.013704490655067887;  // std dev = 0,362, 45,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=7 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.034619523334806335;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return 0.4692600462106234;  // std dev = 2,068, 18,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, J), recursion_accounttype(J, B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.058148935099512224;  // std dev = 0,400, 15,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | else return 0.20297652130640886;  // std dev = 0,475, 29,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(A, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.5844655463343732;  // std dev = 2,181, 29,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | | | else return 0.16636209805851127;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return -0.20863790194148876;  // std dev = 7,45e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.2263743502897015;  // std dev = 1,714, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | else return -0.13332241484774285;  // std dev = 0,039, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.028421303142909433;  // std dev = 0,316, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then return 0.032638282902382576;  // std dev = 0,388, 22,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.40207411659007225;  // std dev = 2,068, 18,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return 0.24826863067122362;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.2736537875000857;  // std dev = 3,480, 56,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=30 */
%   | | | else return -0.11581552700519722;  // std dev = 0,027, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.017271268511389628;  // std dev = 0,370, 43,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
%   | else return -0.06139808266904668;  // std dev = 0,257, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.011701693002584945;  // std dev = 0,329, 24,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.05013786774504262;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.383471201078376;  // std dev = 1,826, 15,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.157562350170857;  // std dev = 1,595, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.25546444807295476;  // std dev = 1,797, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(F, B) )
%   | | | then return 0.2531581605290217;  // std dev = 3,006, 44,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=26 */
%   | | | else return -0.02516648343229608;  // std dev = 0,774, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else return 0.022645249199853723;  // std dev = 0,414, 13,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return 0.31839537000549595;  // std dev = 0,629, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return -0.12602498994853892;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, H), tweets(H, I) )
%   | then return 0.059813973789014756;  // std dev = 0,399, 93,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=23 */
%   | else if ( follows(J, A) )
%   | | then return -0.17328456393382932;  // std dev = 0,010, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.21139871812061772;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.14900081884078417;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, D), follows(C, A) )
%   then if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, E), follows(G, F) )
%   | | | then return 0.15947474521934135;  // std dev = 3,367, 54,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | | else return 0.6036692819062933;  // std dev = 0,119, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11145216218746055;  // std dev = 0,068, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return 0.03392300095194086;  // std dev = 0,386, 38,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | else return -0.15139723387855;  // std dev = 0,020, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(J, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return -0.017475213857783407;  // std dev = 0,329, 24,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.24261968617405405;  // std dev = 2,041, 18,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return 0.14450888409185195;  // std dev = 2,409, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.08447648430294014;  // std dev = 0,419, 60,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=27 */
%   | else if ( follows(A, E) )
%   | | then return 0.22959985993340792;  // std dev = 0,966, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.1277207642367201;  // std dev = 0,761, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G), tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.004962871532366844;  // std dev = 1,588, 19,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return 0.14638764013400846;  // std dev = 1,662, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return -0.13418119007767523;  // std dev = 0,015, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(I, A) )
%   | | then return -0.1386646153736338;  // std dev = 0,009, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.0552630261024318;  // std dev = 2,138, 28,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.10973722471383753;  // std dev = 2,895, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.1331840911872693;  // std dev = 3,011, 45,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=26 */
%   | | | else return 0.6011690677487824;  // std dev = 0,134, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.20368818335008493;  // std dev = 0,282, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return -0.11140222626647438;  // std dev = 0,063, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.032552815592649595;  // std dev = 0,314, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.14190892153622164;  // std dev = 0,104, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.19255872817146988;  // std dev = 1,567, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1638052305124887;  // std dev = 2,041, 18,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return 0.09231492295640836;  // std dev = 2,405, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(C, B) )
%   | | then if ( follows(D, E), follows(C, E) )
%   | | | then return 0.19674229430141915;  // std dev = 2,417, 36,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | | | else return -0.047796025669734954;  // std dev = 1,805, 22,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | else if ( follows(C, F), follows(F, D) )
%   | | | then return -0.022027572129646882;  // std dev = 2,923, 64,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=14 */
%   | | | else return 0.6451519070953994;  // std dev = 0,329, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10017974342615735;  // std dev = 0,181, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( follows(A, G) )
%   | then return -0.03334426887200476;  // std dev = 0,382, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then return -0.0715539544373286;  // std dev = 0,315, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.07840998459987422;  // std dev = 0,625, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.07001914047434328;  // std dev = 2,153, 19,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(C, D) )
%   | then if ( follows(E, C), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(C, E) )
%   | | | then return 0.1833148586521646;  // std dev = 3,152, 53,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=31 */
%   | | | else return -0.16539159434479853;  // std dev = 1,202, 44,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   | | else return 0.35007861065498597;  // std dev = 0,570, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.1533838830240309;  // std dev = 0,054, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.005024287356017577;  // std dev = 0,317, 26,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.08720902101504371;  // std dev = 1,949, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | | else return 0.1599181567230339;  // std dev = 1,146, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0816402249371464;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.028948709686663566;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(F, A), follows(E, A) )
%   | | | then return -0.028296610170464274;  // std dev = 2,517, 57,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=19 */
%   | | | else return 0.1300048347747909;  // std dev = 2,303, 34,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   | | else return -0.06353008111224989;  // std dev = 0,322, 18,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | else return -0.06301319429326407;  // std dev = 0,158, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.017806717142878122;  // std dev = 0,317, 24,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.11553691025972773;  // std dev = 1,260, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return -0.008629375596512202;  // std dev = 1,573, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.12268045292736884;  // std dev = 1,779, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.022168046740719323;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */


Results
   AUC ROC   = 0.715435
   AUC PR    = 0.504046
   CLL	      = -0.578648
   Precision = 0.489796 at threshold = 0.5
   Recall    = 0.571429
   F1        = 0.527473


Total learning time: 56.253 seconds
Total inference time: 4.13 seconds
AUC ROC: 0.715435


Results scoring model
   AUC ROC   = 0.881764
   AUC PR    = 0.801017
   CLL	      = -0.444004
   Precision = 0.787234 at threshold = 0.5
   Recall    = 0.596774
   F1        = 0.678899


Total scoring time: 2.728 seconds
Refined model CLL: -0.444004


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.715435
   AUC PR    = 0.504046
   CLL	      = -0.578648
   Precision = 0.489796 at threshold = 0.5
   Recall    = 0.571429
   F1        = 0.527473


Total learning time: 62.685 seconds
Total inference time: 4.13 seconds
AUC ROC: 0.715435
Total revision time: 62.685
Best scored revision CLL: -0.444004


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:40
{'CLL': -0.578648, 'Precision': [0.489796, 0.5], 'Inference time': 4.13, 'Learning time': 62.685, 'parameter_0.4': {'CLL': -0.609765, 'Precision': [nan, 0.5], 'Inference time': 1.496, 'Learning time': 2.669, 'AUC ROC': 0.620922, 'F1': nan, 'AUC PR': 0.407969, 'Recall': 0.0}, 'AUC ROC': 0.715435, 'F1': 0.527473, 'AUC PR': 0.504046, 'Recall': 0.571429}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(A, C) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.6512523833753738;  // std dev = 2,181, 29,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | | | else return 0.23314893509951226;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.24276431971489684;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.02864351773067639;  // std dev = 0,317, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then return 0.0399671169176941;  // std dev = 0,386, 22,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.4692600462106234;  // std dev = 2,068, 18,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return 0.274815601766179;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(A, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.5523855379461521;  // std dev = 2,181, 29,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | | | else return 0.202334239218108;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.1865705494900609;  // std dev = 1,784, 14,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.025192400949836852;  // std dev = 0,317, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then return 0.03503196034273708;  // std dev = 0,386, 22,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.40207411659007225;  // std dev = 2,068, 18,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return 0.23796730798362162;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(A, C) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.3435984569375602;  // std dev = 2,552, 34,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=23 */
%   | | | else return 0.7964928196152895;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(C, F), follows(F, A) )
%   | | | then return -0.02099982254020361;  // std dev = 1,260, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.30667592720543263;  // std dev = 1,203, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.02221559780193913;  // std dev = 0,317, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then return 0.030590047750322546;  // std dev = 0,386, 22,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.32791564552282043;  // std dev = 2,068, 18,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return 0.20034244703153611;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(A, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.3559600533671401;  // std dev = 2,181, 29,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | | | else return 0.07383481745753268;  // std dev = 1,237, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return -0.1216649018922076;  // std dev = 0,074, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.1633941560211626;  // std dev = 1,721, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.0196355159908722;  // std dev = 0,317, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then return 0.026621534319001657;  // std dev = 0,386, 22,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2569390306095517;  // std dev = 2,068, 18,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return 0.16445940647707036;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, C) )
%   | | then if ( tweets(D, E), tweets(C, E) )
%   | | | then return 0.216585962736898;  // std dev = 2,660, 39,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=26 */
%   | | | else return -0.1952662004966122;  // std dev = 0,264, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(D, C) )
%   | | | then return 0.6435875427272304;  // std dev = 0,078, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10776131366777013;  // std dev = 0,751, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.017389849210175248;  // std dev = 0,317, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then return 0.023099042092253906;  // std dev = 0,386, 22,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.19622711256271927;  // std dev = 2,068, 18,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return 0.13220063779845392;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, C) )
%   | | then if ( tweets(D, E), follows(D, C) )
%   | | | then return 0.1635999361945219;  // std dev = 2,642, 40,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=26 */
%   | | | else return -0.1889800437173216;  // std dev = 0,258, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.31715076768763273;  // std dev = 0,346, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.015428027778552886;  // std dev = 0,317, 53,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.16182786281883965;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.201808500817524;  // std dev = 1,595, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.067038831997752;  // std dev = 1,495, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.1406748388102618;  // std dev = 2,803, 32,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(C, B), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.08745106755790834;  // std dev = 0,382, 64,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=30 */
%   | | else return -0.11040691277034934;  // std dev = 0,135, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(D, A), follows(D, C) )
%   | | then return -0.07299466717864946;  // std dev = 0,267, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( follows(E, A), follows(A, D) )
%   | | | then return 0.7154431056468349;  // std dev = 0,187, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11114552829153013;  // std dev = 2,566, 30,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   else if ( follows(A, F), tweets(A, G) )
%   | then return -0.21430531629912616;  // std dev = 0,257, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(H, A) )
%   | | then return -0.05239200490365739;  // std dev = 0,318, 18,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.3235734078445955;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07795937275687619;  // std dev = 2,152, 19,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B), follows(D, C) )
%   | then if ( follows(A, D), follows(D, A) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.16201520226604044;  // std dev = 1,738, 31,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | | | else return -0.07316127753921987;  // std dev = 0,013, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(D, A) )
%   | | | then return -0.25549770468008565;  // std dev = 0,854, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.04499077714688887;  // std dev = 3,658, 83,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=26 */
%   | else return -0.07584215610031907;  // std dev = 0,167, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( follows(F, A), tweets(A, G) )
%   | then return -0.07081194696951074;  // std dev = 0,286, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then return -0.22260795320250892;  // std dev = 0,144, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2474442724390408;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05433936964581494;  // std dev = 2,242, 22,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then if ( tweets(E, C) )
%   | | then if ( follows(E, D), recursion_accounttype(D, B) )
%   | | | then return 0.09961134643169382;  // std dev = 2,802, 49,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=27 */
%   | | | else return -0.019843475272635105;  // std dev = 2,381, 53,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=10 */
%   | | else return 0.3268606597387028;  // std dev = 0,844, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.14576574296213027;  // std dev = 0,069, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(F, A) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then return 0.03489540604873138;  // std dev = 0,333, 19,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | else return -0.1398754978923421;  // std dev = 0,100, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.1193444468042353;  // std dev = 0,033, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.09126802721777741;  // std dev = 1,761, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.047555029577043516;  // std dev = 2,152, 19,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then if ( tweets(E, C) )
%   | | then if ( follows(E, D), follows(D, A) )
%   | | | then return 0.06973334512984511;  // std dev = 3,090, 65,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=30 */
%   | | | else return -0.03909567324826909;  // std dev = 1,986, 37,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | else return 0.27131767406686375;  // std dev = 0,820, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.12913382221077901;  // std dev = 0,063, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( follows(F, A) )
%   | then return -0.03298172263638912;  // std dev = 0,267, 32,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.10524960073659598;  // std dev = 0,612, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.06989774136179173;  // std dev = 1,415, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.059753875750437474;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.04950269091922546;  // std dev = 1,766, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */


Results
   AUC ROC   = 0.6932
   AUC PR    = 0.463593
   CLL	      = -0.601584
   Precision = 0.515924 at threshold = 0.5
   Recall    = 0.642857
   F1        = 0.572438


Total learning time: 21.384 seconds
Total inference time: 1.322 seconds
AUC ROC: 0.6932


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:03:03
{'CLL': -0.601584, 'Precision': [0.515924, 0.5], 'Inference time': 1.322, 'Learning time': 21.384, 'AUC ROC': 0.6932, 'F1': 0.572438, 'AUC PR': 0.463593, 'Recall': 0.642857}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(A, C) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.6512523833753738;  // std dev = 2,181, 29,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   | | | else return 0.23314893509951226;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.24276431971489684;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.10814893509951223;  // std dev = 2,121, 24,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(J, A) )
%   | | then if ( follows(J, K), follows(K, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.22178529873587596;  // std dev = 1,595, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.4692600462106234;  // std dev = 2,068, 18,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return 0.274815601766179;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */


Results
   AUC ROC   = 0.704885
   AUC PR    = 0.495551
   CLL	      = -0.670609
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.202 seconds
Total inference time: 0.766 seconds
AUC ROC: 0.704885


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:03:07
{'CLL': -0.670609, 'Precision': [nan, 0.5], 'Inference time': 0.766, 'Learning time': 3.202, 'AUC ROC': 0.704885, 'F1': nan, 'AUC PR': 0.495551, 'Recall': 0.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
0;true,false;recursion_proteinclass(D, B), location(C, G).;false;true
0;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;true,true;recursion_proteinclass(D, B), complex(A, E).;false;false
0;true,false,false;interaction(H, A), interaction(H, D).;false;false
0;false,false;interaction(J, A), recursion_proteinclass(J, B).;false;true
0;true;complex(D, E), interaction(F, A).;true;true
0;false,false,false;interaction(K, A), enzyme(K, L).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,false;interaction(J, A), recursion_proteinclass(J, B).;false;false
1;false,false;interaction(G, A), interaction(G, G).;true;true
1;false;interaction(A, E), interaction(E, E).;true;true
1;false,false,true;enzyme(A, H), complex(G, I).;false;false
1;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
1;true;complex(C, D).;false;false
1;false,true;interaction(E, A).;false;true
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true,false;interaction(A, F), enzyme(F, D).;false;true
2;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
2;false,false,true;enzyme(A, J).;false;false
2;true,false,false;interaction(G, C), interaction(G, G).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;true;true
2;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
2;false,false,false;interaction(A, K), interaction(K, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true,false;interaction(A, E), interaction(E, A).;false;true
3;false;interaction(A, A).;false;true
3;false,false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
3;true,false,false;complex(A, F).;false;false
3;false,false;interaction(A, G), complex(G, H).;true;true
3;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- enzyme(A, C).;true;true
4;false;location(A, G), complex(A, H).;true;true
4;true,true;interaction(E, D), interaction(E, A).;false;true
4;true,true,false;interaction(F, A).;false;false
4;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
4;true;enzyme(D, C), recursion_proteinclass(D, B).;true;false
4;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
4;false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;false,false,false;interaction(N, A), complex(A, P).;false;false
5;false,false;enzyme(A, J), interaction(K, A).;true;true
5;false;interaction(A, F), interaction(F, A).;true;true
5;false,false,true;interaction(A, L), complex(K, M).;false;false
5;false,true,false;enzyme(F, H), enzyme(A, I).;false;false
5;true;enzyme(A, D), phenotype(A, E).;false;false
5;false,true;complex(F, G), complex(A, G).;false;true
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,true,true;interaction(F, H), recursion_proteinclass(H, B).;false;false
6;false,false;interaction(A, A).;false;true
6;false;complex(A, E), interaction(A, F).;true;true
6;false,true,false;interaction(F, I), recursion_proteinclass(I, B).;false;false
6;true;interaction(D, C), interaction(C, D).;false;false
6;false,false,false;enzyme(A, J), complex(A, K).;false;false
6;false,true;interaction(G, A), complex(G, E).;true;true
7;;proteinclass(A, B) :- complex(A, C).;true;true
7;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
7;true,true;interaction(E, A), recursion_proteinclass(E, B).;false;false
7;false,true,true;interaction(A, I), complex(I, J).;false;false
7;false,false;interaction(A, A).;false;true
7;true;complex(D, C), recursion_proteinclass(D, B).;true;false
7;false,false,false;enzyme(A, K).;false;false
7;false,true;location(A, G), enzyme(F, H).;true;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;false,false,false;interaction(L, A), interaction(M, L).;false;false
8;false,false;location(A, J).;true;true
8;false;interaction(F, A), interaction(F, F).;true;true
8;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
8;false,true,false;enzyme(F, H), location(F, I).;false;false
8;true;complex(C, D), interaction(E, A).;false;false
8;false,true;interaction(A, F), phenotype(F, G).;false;true
9;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
9;true,false;interaction(A, C).;false;true
9;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
9;true,true;phenotype(E, D).;false;false
9;true,false,false;interaction(F, C), complex(F, G).;false;false
9;false,false;interaction(A, A).;false;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;false,false,false;phenotype(A, I).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( tweets(D, E), follows(A, F) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.26355434050491805;  // std dev = 5,173, 111,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=45 */
%   | | else return 0.03763611458669181;  // std dev = 2,397, 39,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.1795775065280838;  // std dev = 2,471, 28,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.013645936695359509;  // std dev = 2,088, 39,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3429974199479972;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | | else return 0.274815601766179;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.28685283109266146;  // std dev = 5,130, 107,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=49 */
%   | else return 0.8229474345237685;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.04614728456452656;  // std dev = 2,831, 83,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=9 */
%   | | | else return 0.21875793107321675;  // std dev = 4,500, 86,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=34 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.1474219502601102;  // std dev = 6,607, 206,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=70 */
%   | else if ( follows(E, A) )
%   | | then return 0.0103044974088358;  // std dev = 0,912, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(C, F), follows(F, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.023266067430427886;  // std dev = 1,464, 15,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.18482765737488008;  // std dev = 2,333, 23,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.11448914986191712;  // std dev = 2,584, 31,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.17348600669794406;  // std dev = 5,147, 119,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=46 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.20867384269099312;  // std dev = 0,165, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.021235156715100022;  // std dev = 1,167, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.14600439996759826;  // std dev = 0,025, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.11483791333400327;  // std dev = 3,397, 52,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
%   | | | else return -0.052455820953854815;  // std dev = 0,947, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.25348955935160533;  // std dev = 2,825, 32,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.18375403948578187;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.10090756380278174;  // std dev = 6,673, 221,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=74 */
%   | else if ( follows(A, E) )
%   | | then return -0.26176541923845076;  // std dev = 0,051, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.0936192913401751;  // std dev = 3,476, 54,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=19 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.05385324642188006;  // std dev = 0,428, 164,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=48 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.1253913586795898;  // std dev = 2,017, 18,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else return -0.06830669041946673;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, A), tweets(F, H) )
%   | | | then return 0.08523440142175043;  // std dev = 1,176, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.18857434797198208;  // std dev = 2,791, 32,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.07532458373168355;  // std dev = 3,474, 54,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then return 0.05461485624215209;  // std dev = 5,259, 144,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=45 */
%   | else return -0.03135308855439373;  // std dev = 1,464, 20,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(A, G), tweets(G, E) )
%   | | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.12437604740616572;  // std dev = 2,119, 19,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return -0.02785730612861916;  // std dev = 0,929, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(I, F), recursion_accounttype(I, B) )
%   | | | then return -0.009577015656851696;  // std dev = 2,225, 25,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return -0.18360435031290498;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09068949244434463;  // std dev = 2,491, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return 0.1417976715062639;  // std dev = 3,060, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.03614786310883467;  // std dev = 5,021, 134,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=41 */
%   | | else return 0.04246066175417479;  // std dev = 4,087, 76,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=27 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), tweets(G, H) )
%   | | then return 0.3076903232852716;  // std dev = 1,640, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.0387219681848332;  // std dev = 0,432, 56,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then return 0.14862953881803243;  // std dev = 4,459, 85,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=40 */
%   | else return 0.0956163298541766;  // std dev = 2,353, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
%   else if ( follows(A, F), follows(F, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(G, B) )
%   | | then return -0.022739192356186055;  // std dev = 5,315, 170,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=43 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.038833753052793324;  // std dev = 0,443, 204,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=70 */
%   | else if ( follows(C, A) )
%   | | then return -0.25849431916040977;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(C, E), tweets(E, F) )
%   | | | then return -0.15324712103369825;  // std dev = 0,018, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.03262669984577314;  // std dev = 1,566, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.05555995618617312;  // std dev = 2,309, 23,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.008401811552200074;  // std dev = 0,457, 31,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */


Results
   AUC ROC   = 0.700696
   AUC PR    = 0.503569
   CLL	      = -0.592256
   Precision = 0.0 at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.367 seconds
Total inference time: 1.504 seconds
AUC ROC: 0.700696


Results scoring model
   AUC ROC   = 0.772641
   AUC PR    = 0.583038
   CLL	      = -0.573338
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.005 seconds
Parameter learned model CLL: -0.573338


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true,false': 'recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(D, B), tweets(A, E)', 'true': 'tweets(D, E), follows(A, F)', 'true,false,false': 'follows(A, G), follows(D, G)', 'false,false': 'follows(A, I), recursion_accounttype(I, B)', 'false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, J)'}, {'true,false,true': [2.471, 19, 9], 'true,false,false,false': [0.0, 2, 0], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.871, 17, 16], 'true,true,true': [5.173, 66, 45], 'true,true,false': [2.397, 32, 7], 'false,false,true': [2.088, 34, 5], 'false,true': [0.0, 0, 1], 'false,false,false,false': [2.415, 14, 10]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F), follows(F, F)', 'true': 'tweets(C, D)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,false': [0.0, 0, 1], 'false,false,false,true': [2.831, 74, 9], 'true,true': [5.13, 58, 49], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [4.5, 52, 34]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true,false': 'follows(E, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'true,false,false': 'follows(C, F), follows(F, F)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,false,true': [0.912, 4, 1], 'true,false,false,false': [1.464, 12, 3], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true': [6.607, 136, 70], 'false,false,true': [0.0, 0, 0], 'false,true': [2.333, 14, 9], 'false,false,false,false': [2.584, 21, 10]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true,false': 'follows(E, A), follows(A, E)', 'false': 'follows(A, A)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false,false': 'tweets(A, F)', 'false,false': 'follows(G, A), tweets(G, H)', 'false,false,true': 'follows(I, G), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J)'}, {'true,false,true': [0.165, 23, 0], 'true,false,false,false': [0.025, 8, 0], 'true,false,false,true': [1.167, 12, 2], 'false,false,true,false': [0.947, 6, 1], 'true,true': [5.147, 73, 46], 'false,false,true,true': [3.397, 34, 18], 'false,false,false,true': [2.825, 16, 16], 'false,true': [0.0, 0, 0], 'false,false,false,false': [2.415, 14, 10]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)'}, {'true,true': [6.673, 147, 74], 'true,false,true': [0.051, 4, 0], 'true,false,false': [3.476, 35, 19], 'false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,false,false': 'follows(A, I), tweets(A, J)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(G, A), tweets(F, H)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'false,false,true,true': [1.176, 4, 2], 'false,false,true,false': [2.791, 16, 16], 'false,true,true': [2.017, 11, 7], 'true': [0.428, 116, 48], 'false,true,false': [0.373, 5, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.474, 35, 19]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, E), follows(F, A)', 'false,false': 'follows(A, A)', 'false,true,true': 'follows(H, F), recursion_accounttype(H, B)', 'false,true,false': 'follows(I, F), recursion_accounttype(I, B)', 'true': 'follows(C, D), follows(D, C)', 'false,false,false': 'tweets(A, J)', 'false,true': 'follows(A, G), tweets(G, E)'}, {'true,false': [1.464, 17, 3], 'false,true,true,false': [0.929, 4, 1], 'false,true,false,true': [2.225, 18, 7], 'true,true': [5.259, 99, 45], 'false,true,true,true': [2.119, 11, 8], 'false,false,false,true': [2.491, 15, 11], 'false,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 1, 0], 'false,false,false,false': [3.06, 22, 18]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true,true': 'follows(A, E), recursion_accounttype(E, B)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, A)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false,true': 'follows(G, A), tweets(G, H)'}, {'true,false': [0.0, 0, 0], 'false,true,true': [1.64, 5, 7], 'false,false,false': [0.432, 38, 18], 'true,true,false': [4.087, 49, 27], 'false,true,false': [0.0, 0, 0], 'true,true,true': [5.021, 93, 41], 'false,false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, F), follows(F, F)', 'false,false': 'recursion_accounttype(G, B)', 'true': 'tweets(C, D), follows(A, E)'}, {'true,true': [4.459, 45, 40], 'true,false': [2.353, 14, 10], 'false,false,true': [5.315, 127, 43], 'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true,false': 'follows(C, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'true,false,false': 'follows(C, E), tweets(E, F)', 'false,false': 'follows(A, A)', 'true': 'follows(C, D), recursion_accounttype(D, B)'}, {'true,false,true': [0.0, 1, 0], 'true,true': [0.443, 134, 70], 'true,false,false,true': [0.018, 6, 0], 'false,false,false': [0.457, 21, 10], 'false,false,true': [0.0, 0, 0], 'false,true': [2.309, 14, 9], 'true,false,false,false': [1.566, 9, 4]}]]
[{'': [0.2240432098765434, 0.22106493782548758], 'false': [0.0, 0.21864149305555688], 'true,true': [0.24105186267348505, 0.14727153188691663], 'true,false': [0.21811224489795927, 0.0], 'true,false,false': [nan, 0.0], 'false,false': [0.11176857330703491, 0.24807633117882402], 'true': [0.22648888888888932, 0.21000000000000008], 'false,false,false': [0.24977043158861298, 0.24305555555555558]}, {'': [0.24629591237409498, 0.18479684330500187], 'false': [nan, 0.18479684330500187], 'false,false': [nan, 0.18479684330500215], 'true': [0.24593665607319593, 0.0], 'false,false,false': [0.09653356786337758, 0.23551663365890008]}, {'': [0.20761376162549888, 0.2256836479058375], 'false,false,false': [nan, 0.21544468746446574], 'false': [0.23664375117326203, 0.21544468746446574], 'true,false,false': [nan, 0.14281355256868844], 'false,false': [nan, 0.21544468746446582], 'true': [0.21189253037138106, 0.14874889903111702], 'true,false': [0.16642893669533418, 0.14281355256868844]}, {'': [0.1913155946928143, 0.23449136372472754], 'false,false,false': [0.24938004899142147, 0.24305555555555533], 'false': [nan, 0.23449136372472712], 'true': [0.22257546075235626, 0.03769758024379831], 'true,false,false': [0.09731769311999443, 7.724683799494383e-05], 'false,false': [0.21374706672048574, 0.24786050104485607], 'false,false,true': [0.22194676417161352, 0.12816834946697606], 'true,false': [0.0011792629796562762, 0.06555989607307255]}, {'': [0.20477678562577112, nan], 'true,false': [0.0006584302443359419, 0.22370811877619892], 'true': [0.20150699939436775, 0.21643490339077306]}, {'': [0.1830165651980487, 0.22933982453747598], 'false,false,false': [nan, 0.22351463419339535], 'false': [0.211192930558361, 0.23376879093790667], 'false,false': [0.24282544797728745, 0.22351463419339535], 'false,false,true': [0.23061875370745297, 0.24342802243398592], 'false,true': [0.22591454422532337, 0.13888888888888887]}, {'': [0.18247317414913647, 0.2275183098277428], 'false,false,false': [0.23873010636432876, 0.234081395137468], 'false,true,false': [0.197976158238355, 0.0], 'false': [0.21144086665512637, 0.23653633459362028], 'false,true,true': [0.23631677520847533, 0.17273560298206284], 'false,false': [nan, 0.23653633459362014], 'true': [0.19202950290522314, 0.10717839854015328], 'false,true': [0.2268929622849214, 0.19148171698981953]}, {'': [0.19956828657908257, 0.20405717738475965], 'true,true': [0.18810431951002932, 0.21975564161625613], 'false': [0.22410142020866294, 0.1869953984859052], 'false,false': [nan, 0.1869953984859052], 'true': [0.19956828657908257, nan], 'false,true': [0.22410142020866294, nan]}, {'': [0.2336924742902517, 0.16619289659576736], 'false': [nan, 0.16619289659576728], 'false,false': [0.16619289659576722, nan], 'true': [0.23391158832706443, 0.23072484882643365]}, {'': [0.1911193995537356, 0.2190090044832892], 'true,false': [0.0, 0.13656591939327176], 'false': [0.23178488361338653, 0.20858291375379492], 'true,false,false': [5.167956073361587e-05, 0.1886622566905159], 'false,false': [nan, 0.20858291375379498], 'true': [0.1963627853860288, 0.1323036174294673]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
0;true,false;recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), follows(A, F).;true;true
0;false;follows(H, A), recursion_accounttype(H, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;tweets(C, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true,false;follows(E, A), follows(A, E).;true;true
3;true,false,false;tweets(A, F).;true;true
3;true;follows(C, D), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(C, D), follows(A, D).;true;true
4;false;follows(A, E).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;tweets(A, E), follows(F, A).;true;true
6;false,true,false;follows(I, F), recursion_accounttype(I, B).;true;true
6;false,true;follows(A, G), tweets(G, E).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;true,false;follows(C, A).;true;true
9;true,false,false;follows(C, E), tweets(E, F).;true;true
9;true;follows(C, D), recursion_accounttype(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( tweets(D, E), follows(A, F) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.41370449065506754;  // std dev = 4,216, 72,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=40 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.037253412711452674;  // std dev = 0,383, 67,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=12 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.1795775065280838;  // std dev = 0,467, 28,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.016851064900487718;  // std dev = 0,331, 40,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.26555634250691973;  // std dev = 2,553, 27,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
%   | | | else return 0.35814893509951234;  // std dev = 2,739, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.2755338504632993;  // std dev = 4,236, 75,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=35 */
%   | | | else return 0.16841761562981908;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.44363897815485975;  // std dev = 1,303, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.34477888180363836;  // std dev = 0,981, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.8000001837159434;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return -0.03614452400198627;  // std dev = 0,309, 84,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=9 */
%   | else if ( follows(J, A) )
%   | | then return 0.10767927528987441;  // std dev = 0,440, 31,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.33597662820866264;  // std dev = 2,494, 25,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.23393104903001238;  // std dev = 2,745, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.3422704402366749;  // std dev = 4,141, 71,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.7255136313379988;  // std dev = 0,116, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1736332448056896;  // std dev = 0,242, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return -0.16688996736027148;  // std dev = 0,056, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.030436927503639456;  // std dev = 0,311, 83,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1674224651959317;  // std dev = 0,047, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.3082113207998114;  // std dev = 2,066, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.28014342741378134;  // std dev = 2,493, 25,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.19599125719365879;  // std dev = 2,745, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.08241784859602312;  // std dev = 0,404, 164,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.27617198158084794;  // std dev = 1,753, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return -0.0894870566396455;  // std dev = 1,272, 22,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( follows(A, F), follows(G, D) )
%   | | | then return 0.25992730797906655;  // std dev = 2,163, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return -0.04638463761681019;  // std dev = 0,750, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(I, J), tweets(A, J) )
%   | | | then return 0.1313670715919605;  // std dev = 1,708, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.3123168172552109;  // std dev = 1,758, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.13572169631776138;  // std dev = 1,754, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.17784188517503616;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, D), follows(A, D) )
%   then if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E), follows(F, E) )
%   | | | then return 0.3381055959785868;  // std dev = 3,363, 54,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=37 */
%   | | | else return -0.08371875387472305;  // std dev = 1,544, 19,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | else return -0.15210392611933685;  // std dev = 0,029, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.035638339538741036;  // std dev = 0,395, 140,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=33 */
%   else if ( follows(A, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.11146172156471432;  // std dev = 2,032, 19,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return -0.14049711627746894;  // std dev = 0,033, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.22231328084553753;  // std dev = 0,771, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.1254107983346516;  // std dev = 2,414, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.19536036213386052;  // std dev = 4,080, 71,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.4772005382478899;  // std dev = 0,136, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14532466337584868;  // std dev = 0,244, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return -0.14216046859552095;  // std dev = 0,070, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.041249159494709635;  // std dev = 0,311, 83,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=9 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.17167560090841108;  // std dev = 3,451, 52,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=24 */
%   | | | else return -0.2834756179253613;  // std dev = 0,036, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.12439063788350117;  // std dev = 0,030, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.09888768532012282;  // std dev = 2,414, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.10046765484154008;  // std dev = 0,420, 80,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=39 */
%   | else return -0.03740424693696864;  // std dev = 0,309, 84,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=9 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(A, G), tweets(G, E) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.12348786496059226;  // std dev = 1,936, 18,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | | else return 0.034114320718722065;  // std dev = 1,092, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.018087855438118427;  // std dev = 2,035, 25,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return -0.08659248730160973;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(J, A) )
%   | | then return 0.01826839143503136;  // std dev = 0,344, 10,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.12900441353004793;  // std dev = 2,758, 32,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.07709537269771023;  // std dev = 2,414, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.12889467760706014;  // std dev = 4,072, 71,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.34492320437128554;  // std dev = 0,151, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1358127247190252;  // std dev = 0,244, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return -0.13413464810394418;  // std dev = 0,051, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.03159088713975806;  // std dev = 0,311, 83,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.13829787663973694;  // std dev = 0,106, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.16355084586839985;  // std dev = 2,032, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06364043689148756;  // std dev = 2,476, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return 0.11409836452213877;  // std dev = 2,659, 29,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( tweets(C, E), follows(D, F) )
%   | | | then return 0.17655541428714217;  // std dev = 3,698, 63,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=41 */
%   | | | else return -0.2143463202622714;  // std dev = 1,003, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return -0.08061977977407782;  // std dev = 0,286, 20,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | else return -0.1193236778035215;  // std dev = 0,046, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.027753570557529292;  // std dev = 0,311, 83,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=9 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.0907212764548581;  // std dev = 3,404, 52,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=24 */
%   | | | else return -0.2724864715112222;  // std dev = 0,034, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.09910133066960759;  // std dev = 0,031, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.03788456984807021;  // std dev = 2,415, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.06484239348749644;  // std dev = 3,659, 72,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=41 */
%   | | | else return -0.10286604269519005;  // std dev = 0,021, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.028936887404320683;  // std dev = 2,779, 68,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=11 */
%   | | | else return 0.044294656565016056;  // std dev = 3,207, 55,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=18 */
%   | else return -0.022315662017143904;  // std dev = 0,323, 20,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   else if ( follows(H, A), tweets(A, I) )
%   | then return -0.010733031977130563;  // std dev = 0,379, 26,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | else if ( follows(J, A) )
%   | | then return 0.11156738051804835;  // std dev = 0,515, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.0378121471101177;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.02261578341521797;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.70657
   AUC PR    = 0.496158
   CLL	      = -0.58295
   Precision = 0.485294 at threshold = 0.5
   Recall    = 0.52381
   F1        = 0.503817


Total learning time: 63.843 seconds
Total inference time: 4.451 seconds
AUC ROC: 0.70657


Results scoring model
   AUC ROC   = 0.834455
   AUC PR    = 0.712037
   CLL	      = -0.477878
   Precision = 0.695652 at threshold = 0.5
   Recall    = 0.516129
   F1        = 0.592593


Total scoring time: 3.847 seconds
Refined model CLL: -0.477878


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.70657
   AUC PR    = 0.496158
   CLL	      = -0.58295
   Precision = 0.485294 at threshold = 0.5
   Recall    = 0.52381
   F1        = 0.503817


Total learning time: 72.062 seconds
Total inference time: 4.451 seconds
AUC ROC: 0.70657
Total revision time: 72.062
Best scored revision CLL: -0.477878


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:04:26
{'CLL': -0.58295, 'Precision': [0.485294, 0.5], 'Inference time': 4.451, 'Learning time': 72.062, 'parameter_0.6': {'CLL': -0.592256, 'Precision': [0.0, 0.5], 'Inference time': 1.504, 'Learning time': 3.367, 'AUC ROC': 0.700696, 'F1': nan, 'AUC PR': 0.503569, 'Recall': 0.0}, 'AUC ROC': 0.70657, 'F1': 0.503817, 'AUC PR': 0.496158, 'Recall': 0.52381}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.4356137238319067;  // std dev = 4,162, 71,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.06492798797741087;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.03209496733951207;  // std dev = 0,313, 82,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.32873717039363;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3781489350995123;  // std dev = 2,498, 25,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.2775037738091898;  // std dev = 2,747, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( follows(A, C) )
%   | | | then return 0.48732087988100814;  // std dev = 3,311, 53,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=37 */
%   | | | else return 0.26723186829702245;  // std dev = 2,453, 25,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=12 */
%   | | else return -0.05720661123539926;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return -0.030846034903317558;  // std dev = 0,309, 84,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=9 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.2838374893261067;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.3256284409813764;  // std dev = 2,498, 25,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.24026060722470566;  // std dev = 2,747, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.29716136381778985;  // std dev = 4,127, 71,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.6307736285226284;  // std dev = 0,070, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.050700642891078035;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.02592688739421643;  // std dev = 0,311, 83,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.2368685074770855;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.18926780215634909;  // std dev = 2,514, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return 0.26951872084862105;  // std dev = 2,728, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C), follows(A, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.3852313704199574;  // std dev = 2,861, 43,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=32 */
%   | | | else return 0.04854908025341538;  // std dev = 1,289, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return -0.06333301259453683;  // std dev = 1,056, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return 0.177181700456467;  // std dev = 2,317, 23,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.0229398708933346;  // std dev = 0,311, 83,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then return 0.05930686773925413;  // std dev = 0,397, 31,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.22435146062263636;  // std dev = 2,493, 25,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.15935965946873265;  // std dev = 2,745, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.1663734636857422;  // std dev = 4,020, 71,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.46004827447052954;  // std dev = 0,076, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.04474751907958753;  // std dev = 0,261, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.02163503870359809;  // std dev = 0,309, 84,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1071388701848781;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.1797362894025703;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11414003379534922;  // std dev = 2,512, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return 0.17924028456001437;  // std dev = 2,722, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( tweets(C, E), follows(D, F) )
%   | | | then return 0.2035629435476601;  // std dev = 3,698, 63,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=41 */
%   | | | else return -0.15025438473869146;  // std dev = 1,040, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return -0.018628582490310235;  // std dev = 0,276, 21,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.019227146616922788;  // std dev = 0,309, 84,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09731292965735613;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.1413237757799805;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08934289619474865;  // std dev = 2,512, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
%   | | | else return 0.13914572877796974;  // std dev = 2,722, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, E) )
%   | | then if ( follows(A, C), follows(A, D) )
%   | | | then return 0.2677576508134826;  // std dev = 1,683, 20,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return 0.03869694500045;  // std dev = 1,627, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | else if ( tweets(A, F), follows(G, C) )
%   | | | then return 0.002611011414070477;  // std dev = 3,096, 51,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=21 */
%   | | | else return 0.2538116067824057;  // std dev = 0,908, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return -0.017119662347772627;  // std dev = 0,309, 84,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=9 */
%   | else if ( follows(I, A) )
%   | | then return 0.019755272070550164;  // std dev = 0,383, 31,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11496970223420025;  // std dev = 2,486, 25,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.06852834178608172;  // std dev = 2,743, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(C, D) )
%   | then if ( follows(A, C), recursion_accounttype(C, B) )
%   | | then if ( follows(A, D), follows(D, A) )
%   | | | then return 0.2720678102345396;  // std dev = 1,334, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.045064682661310695;  // std dev = 2,788, 37,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=22 */
%   | | else return 0.005369049021553621;  // std dev = 0,353, 102,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | else return -0.10918986709375444;  // std dev = 0,178, 24,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.02563571618113116;  // std dev = 0,353, 40,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=6 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.043351968635330446;  // std dev = 1,967, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.059619015360175595;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.12274705899803692;  // std dev = 1,979, 16,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0.04311291839196426;  // std dev = 1,852, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.04209923647728074;  // std dev = 0,371, 131,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=47 */
%   | else return -0.10493140082312423;  // std dev = 0,177, 33,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, F) )
%   | | | then return 0.05376023087688498;  // std dev = 3,164, 47,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | | | else return 0.3079463103263061;  // std dev = 1,339, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return -0.36402435291150625;  // std dev = 0,059, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.01540820839726192;  // std dev = 1,896, 19,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return -0.08985960174280064;  // std dev = 0,008, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.09671571737528356;  // std dev = 0,417, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.03837517073071238;  // std dev = 2,414, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( recursion_accounttype(E, B), follows(C, E) )
%   | | then if ( tweets(A, D), tweets(E, D) )
%   | | | then return 0.09948692590084653;  // std dev = 3,492, 59,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=39 */
%   | | | else return -0.07241505126223395;  // std dev = 1,633, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | else return -0.09054938038578508;  // std dev = 0,131, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.36290606451698054;  // std dev = 0,686, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.015585089574994656;  // std dev = 0,307, 84,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=9 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.07220793003442698;  // std dev = 3,337, 51,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
%   | | | else return -0.2848258845400403;  // std dev = 0,053, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.08277707669803212;  // std dev = 0,008, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.02932514101452934;  // std dev = 2,414, 24,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */


Results
   AUC ROC   = 0.741827
   AUC PR    = 0.559725
   CLL	      = -0.563032
   Precision = 0.533835 at threshold = 0.5
   Recall    = 0.563492
   F1        = 0.548263


Total learning time: 21.485 seconds
Total inference time: 1.29 seconds
AUC ROC: 0.741827


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:04:49
{'CLL': -0.563032, 'Precision': [0.533835, 0.5], 'Inference time': 1.29, 'Learning time': 21.485, 'AUC ROC': 0.741827, 'F1': 0.548263, 'AUC PR': 0.559725, 'Recall': 0.563492}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.4356137238319067;  // std dev = 4,162, 71,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.0889181658687431;  // std dev = 2,631, 39,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(J, A) )
%   | | then if ( follows(J, K), follows(K, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.32873717039363;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.3781489350995123;  // std dev = 2,498, 25,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.2775037738091898;  // std dev = 2,747, 31,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */


Results
   AUC ROC   = 0.667045
   AUC PR    = 0.451488
   CLL	      = -0.668585
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.37 seconds
Total inference time: 0.718 seconds
AUC ROC: 0.667045


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:04:53
{'CLL': -0.668585, 'Precision': [nan, 0.5], 'Inference time': 0.718, 'Learning time': 3.37, 'AUC ROC': 0.667045, 'F1': nan, 'AUC PR': 0.451488, 'Recall': 0.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
0;true,false;recursion_proteinclass(D, B), location(C, G).;false;true
0;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;true,true;recursion_proteinclass(D, B), complex(A, E).;false;false
0;true,false,false;interaction(H, A), interaction(H, D).;false;false
0;false,false;interaction(J, A), recursion_proteinclass(J, B).;false;true
0;true;complex(D, E), interaction(F, A).;true;true
0;false,false,false;interaction(K, A), enzyme(K, L).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,false;interaction(J, A), recursion_proteinclass(J, B).;false;false
1;false,false;interaction(G, A), interaction(G, G).;true;true
1;false;interaction(A, E), interaction(E, E).;true;true
1;false,false,true;enzyme(A, H), complex(G, I).;false;false
1;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
1;true;complex(C, D).;false;false
1;false,true;interaction(E, A).;false;true
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true,false;interaction(A, F), enzyme(F, D).;false;true
2;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
2;false,false,true;enzyme(A, J).;false;false
2;true,false,false;interaction(G, C), interaction(G, G).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;true;true
2;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
2;false,false,false;interaction(A, K), interaction(K, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true,false;interaction(A, E), interaction(E, A).;false;true
3;false;interaction(A, A).;false;true
3;false,false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
3;true,false,false;complex(A, F).;false;false
3;false,false;interaction(A, G), complex(G, H).;true;true
3;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- enzyme(A, C).;true;true
4;false;location(A, G), complex(A, H).;true;true
4;true,true;interaction(E, D), interaction(E, A).;false;true
4;true,true,false;interaction(F, A).;false;false
4;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
4;true;enzyme(D, C), recursion_proteinclass(D, B).;true;false
4;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
4;false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;false,false,false;interaction(N, A), complex(A, P).;false;false
5;false,false;enzyme(A, J), interaction(K, A).;true;true
5;false;interaction(A, F), interaction(F, A).;true;true
5;false,false,true;interaction(A, L), complex(K, M).;false;false
5;false,true,false;enzyme(F, H), enzyme(A, I).;false;false
5;true;enzyme(A, D), phenotype(A, E).;false;false
5;false,true;complex(F, G), complex(A, G).;false;true
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,true,true;interaction(F, H), recursion_proteinclass(H, B).;false;false
6;false,false;interaction(A, A).;false;true
6;false;complex(A, E), interaction(A, F).;true;true
6;false,true,false;interaction(F, I), recursion_proteinclass(I, B).;false;false
6;true;interaction(D, C), interaction(C, D).;false;false
6;false,false,false;enzyme(A, J), complex(A, K).;false;false
6;false,true;interaction(G, A), complex(G, E).;true;true
7;;proteinclass(A, B) :- complex(A, C).;true;true
7;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
7;true,true;interaction(E, A), recursion_proteinclass(E, B).;false;false
7;false,true,true;interaction(A, I), complex(I, J).;false;false
7;false,false;interaction(A, A).;false;true
7;true;complex(D, C), recursion_proteinclass(D, B).;true;false
7;false,false,false;enzyme(A, K).;false;false
7;false,true;location(A, G), enzyme(F, H).;true;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;false,false,false;interaction(L, A), interaction(M, L).;false;false
8;false,false;location(A, J).;true;true
8;false;interaction(F, A), interaction(F, F).;true;true
8;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
8;false,true,false;enzyme(F, H), location(F, I).;false;false
8;true;complex(C, D), interaction(E, A).;false;false
8;false,true;interaction(A, F), phenotype(F, G).;false;true
9;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
9;true,false;interaction(A, C).;false;true
9;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
9;true,true;phenotype(E, D).;false;false
9;true,false,false;interaction(F, C), complex(F, G).;false;false
9;false,false;interaction(A, A).;false;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;false,false,false;phenotype(A, I).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( tweets(D, E), follows(A, F) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.25425283120340963;  // std dev = 6,069, 154,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=61 */
%   | | else return 0.05814893509951233;  // std dev = 2,828, 50,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.20950028645086372;  // std dev = 2,904, 37,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.012221435270858057;  // std dev = 2,468, 54,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=7 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3465210281227675;  // std dev = 3,278, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | | | else return 0.2029765213064089;  // std dev = 2,560, 29,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.2877926889840272;  // std dev = 5,806, 137,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=63 */
%   | else return 0.8331731054257364;  // std dev = 0,022, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.047007203211310786;  // std dev = 3,274, 112,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | | | else return 0.2088621932279975;  // std dev = 5,288, 120,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=46 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.15751308853342735;  // std dev = 7,711, 276,000 (wgt'ed) examples reached here.  /* #neg=179 #pos=97 */
%   | else if ( follows(E, A) )
%   | | then return -0.014598790802097078;  // std dev = 0,921, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(C, F), follows(F, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.015887127618626772;  // std dev = 1,496, 20,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.20191603139463576;  // std dev = 2,644, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.0719835475380373;  // std dev = 2,825, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.16706658375644484;  // std dev = 5,912, 157,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=60 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.20641550388935917;  // std dev = 0,178, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.0505171477059946;  // std dev = 1,184, 19,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | | else return -0.14453659907087596;  // std dev = 0,038, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.14355707481686228;  // std dev = 4,137, 74,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=28 */
%   | | | else return -0.024260166404891707;  // std dev = 1,180, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2752296225775768;  // std dev = 3,222, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | | else return 0.13337266501857384;  // std dev = 2,560, 29,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.10193007039338069;  // std dev = 7,766, 298,000 (wgt'ed) examples reached here.  /* #neg=197 #pos=101 */
%   | else if ( follows(A, E) )
%   | | then return -0.26034632457142926;  // std dev = 0,040, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.08052536010743402;  // std dev = 3,884, 70,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.05009754327976999;  // std dev = 0,426, 215,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=62 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.15917008425223184;  // std dev = 2,673, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | else return -0.09707338599090674;  // std dev = 0,348, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, A), tweets(F, H) )
%   | | | then return 0.21023774981753351;  // std dev = 1,336, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.18150688090726558;  // std dev = 3,208, 42,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.06527607238191642;  // std dev = 3,883, 70,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then return 0.04971274240986747;  // std dev = 6,055, 193,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=59 */
%   | else return -0.04674992193686005;  // std dev = 1,481, 23,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(A, G), tweets(G, E) )
%   | | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.15200048506232947;  // std dev = 2,714, 30,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | | | else return 0.05011420382169097;  // std dev = 1,080, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.03569161831256184;  // std dev = 2,545, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | | else return -0.17661319847355536;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1245933742037468;  // std dev = 2,737, 31,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=14 */
%   | | | else return 0.09243841451957013;  // std dev = 3,535, 56,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.03726103568889874;  // std dev = 5,728, 174,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=53 */
%   | | else return 0.06814066928492285;  // std dev = 4,788, 101,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), tweets(G, H) )
%   | | then return 0.21530078814605758;  // std dev = 2,090, 18,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | else return 0.5178246966329242;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 8.590333055803018E-4;  // std dev = 0,412, 79,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then return 0.14328416114656448;  // std dev = 5,081, 109,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=51 */
%   | else return 0.11636696345261432;  // std dev = 2,734, 32,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   else if ( follows(A, F), follows(F, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(G, B) )
%   | | then return -0.022584741497046198;  // std dev = 6,198, 232,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=58 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.040837038912934706;  // std dev = 0,447, 276,000 (wgt'ed) examples reached here.  /* #neg=179 #pos=97 */
%   | else if ( follows(C, A) )
%   | | then return -0.25036187448580155;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(C, E), tweets(E, F) )
%   | | | then return -0.1458715490838449;  // std dev = 0,026, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.031412466121380725;  // std dev = 1,571, 13,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.0515304202710197;  // std dev = 2,646, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.004793439108289701;  // std dev = 0,438, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */


Results
   AUC ROC   = 0.698271
   AUC PR    = 0.501422
   CLL	      = -0.591798
   Precision = 0.833333 at threshold = 0.5
   Recall    = 0.039683
   F1        = 0.075758


Total learning time: 4.064 seconds
Total inference time: 1.398 seconds
AUC ROC: 0.698271


Results scoring model
   AUC ROC   = 0.748688
   AUC PR    = 0.556071
   CLL	      = -0.572307
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.032258
   F1        = 0.0625


Total scoring time: 1.255 seconds
Parameter learned model CLL: -0.572307


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true,false': 'recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(D, B), tweets(A, E)', 'true': 'tweets(D, E), follows(A, F)', 'true,false,false': 'follows(A, G), follows(D, G)', 'false,false': 'follows(A, I), recursion_accounttype(I, B)', 'false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, J)'}, {'true,false,true': [2.904, 24, 13], 'true,false,false,false': [0.0, 4, 0], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.278, 22, 21], 'true,true,true': [6.069, 93, 61], 'true,true,false': [2.828, 40, 10], 'false,false,true': [2.468, 47, 7], 'false,true': [0.0, 0, 2], 'false,false,false,false': [2.56, 19, 10]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F), follows(F, F)', 'true': 'tweets(C, D)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,false': [0.022, 0, 3], 'false,false,false,true': [3.274, 100, 12], 'true,true': [5.806, 74, 63], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [5.288, 74, 46]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true,false': 'follows(E, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'true,false,false': 'follows(C, F), follows(F, F)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,false,true': [0.921, 5, 1], 'true,false,false,false': [1.496, 17, 3], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true': [7.711, 179, 97], 'false,false,true': [0.0, 0, 0], 'false,true': [2.644, 17, 12], 'false,false,false,false': [2.825, 30, 11]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true,false': 'follows(E, A), follows(A, E)', 'false': 'follows(A, A)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false,false': 'tweets(A, F)', 'false,false': 'follows(G, A), tweets(G, H)', 'false,false,true': 'follows(I, G), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J)'}, {'true,false,true': [0.178, 29, 0], 'true,false,false,false': [0.038, 10, 0], 'true,false,false,true': [1.184, 17, 2], 'false,false,true,false': [1.18, 9, 2], 'true,true': [5.912, 97, 60], 'false,false,true,true': [4.137, 46, 28], 'false,false,false,true': [3.222, 20, 22], 'false,true': [0.0, 0, 0], 'false,false,false,false': [2.56, 19, 10]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)'}, {'true,true': [7.766, 197, 101], 'true,false,true': [0.04, 4, 0], 'true,false,false': [3.884, 47, 23], 'false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,false,false': 'follows(A, I), tweets(A, J)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(G, A), tweets(F, H)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'false,false,true,true': [1.336, 4, 4], 'false,false,true,false': [3.208, 21, 21], 'false,true,true': [2.673, 17, 13], 'true': [0.426, 153, 62], 'false,true,false': [0.348, 6, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.883, 47, 23]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, E), follows(F, A)', 'false,false': 'follows(A, A)', 'false,true,true': 'follows(H, F), recursion_accounttype(H, B)', 'false,true,false': 'follows(I, F), recursion_accounttype(I, B)', 'true': 'follows(C, D), follows(D, C)', 'false,false,false': 'tweets(A, J)', 'false,true': 'follows(A, G), tweets(G, E)'}, {'true,false': [1.481, 20, 3], 'false,true,true,false': [1.08, 4, 2], 'false,true,false,true': [2.545, 20, 10], 'true,true': [6.055, 134, 59], 'false,true,true,true': [2.714, 16, 14], 'false,false,false,true': [2.737, 17, 14], 'false,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 3, 0], 'false,false,false,false': [3.535, 34, 22]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true,true': 'follows(A, E), recursion_accounttype(E, B)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, A)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false,true': 'follows(G, A), tweets(G, H)'}, {'true,false': [0.0, 0, 0], 'false,true,true': [2.09, 9, 9], 'false,false,false': [0.412, 58, 21], 'true,true,false': [4.788, 61, 40], 'false,true,false': [0.0, 0, 1], 'true,true,true': [5.728, 121, 53], 'false,false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, F), follows(F, F)', 'false,false': 'recursion_accounttype(G, B)', 'true': 'tweets(C, D), follows(A, E)'}, {'true,true': [5.081, 58, 51], 'true,false': [2.734, 17, 15], 'false,false,true': [6.198, 174, 58], 'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true,false': 'follows(C, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'true,false,false': 'follows(C, E), tweets(E, F)', 'false,false': 'follows(A, A)', 'true': 'follows(C, D), recursion_accounttype(D, B)'}, {'true,false,true': [0.0, 1, 0], 'true,true': [0.447, 179, 97], 'true,false,false,true': [0.026, 12, 0], 'false,false,false': [0.438, 30, 11], 'false,false,true': [0.0, 0, 0], 'false,true': [2.646, 17, 12], 'true,false,false,false': [1.571, 9, 4]}]]
[{'': [0.22530612244898027, 0.21484375000000133], 'true,false': [0.2279035792549301, 0.0], 'false': [0.0, 0.2106324011085929], 'true,true': [0.23920559959520998, 0.16000000000000011], 'true,false,false': [nan, 0.0], 'false,false': [0.11282578875171491, 0.24517746913580238], 'true': [0.22690792003075744, 0.2165377751338484], 'false,false,false': [0.24986479177934012, 0.22592152199762194]}, {'': [0.24705389020227, 0.18310296471477822], 'false': [nan, 0.18310296471477822], 'false,false': [nan, 0.1831029647147769], 'true': [0.24608667026055986, 0.00015751220638445437], 'false,false,false': [0.09571921872432414, 0.23305533203647688]}, {'': [0.20945736484347863, 0.2179847582599647], 'false,false,false': [nan, 0.1946084757739764], 'false': [0.24114569286852802, 0.1946084757739764], 'true,false,false': [nan, 0.11197169146867325], 'false,false': [nan, 0.19460847577397647], 'true': [0.21542401497840533, 0.11873419736419066], 'true,false': [0.1412746069043104, 0.11197169146867332]}, {'': [0.1896599178812006, 0.23337772309255128], 'false,false,false': [0.24715069003191875, 0.22592152199762192], 'false': [nan, 0.23337772309255017], 'true': [0.22259042790521846, 0.02955366066436637], 'true,false,false': [0.0737849082276808, 0.00014130461383886627], 'false,false': [0.22090837198033644, 0.24334181080997927], 'false,false,true': [0.23127720269137045, 0.1266363686608227], 'true,false': [0.0010962999326274176, 0.05038763097040016]}, {'': [0.20410787732463354, nan], 'true,false': [0.0003967624484029625, 0.2155430885352061], 'true': [0.20236520878097966, 0.20985478849772107]}, {'': [0.18151869035854445, 0.228976339274901], 'false,false,false': [nan, 0.21536216755556542], 'false': [0.22615792670984705, 0.22983962335626626], 'false,false': [0.241591777139937, 0.21536216755556542], 'false,false,true': [0.22301494892852688, 0.24499814655624277], 'false,true': [0.2381914796536407, 0.12134713853809913]}, {'': [0.18076793871070287, 0.22730223316151646], 'false,false,false': [0.24157026828207254, 0.22318397452067212], 'false,true,false': [0.21591802474233693, -4.625929269271485e-18], 'false': [0.22356948247721734, 0.22997255380471945], 'false,true,true': [0.2455379457883687, 0.1942482117845353], 'false,false': [nan, 0.2299725538047196], 'true': [0.18995241689441592, 0.09538395642444049], 'false,true': [0.2384314365523196, 0.2000141824294457]}, {'': [0.2028679878920523, 0.19033937552618044], 'false': [0.23454136185586402, 0.16941990118158462], 'true,true': [0.18853139952351572, 0.22696332667190677], 'false,false': [nan, 0.1694199011815847], 'true': [0.2028679878920523, nan], 'false,true': [0.24275455776682994, 0.0]}, {'': [0.2362549207331341, 0.16560783124018694], 'false': [nan, 0.1656078312401868], 'false,false': [0.16560783124018674, nan], 'true': [0.23689196068704974, 0.23352490145425653]}, {'': [0.19226912826300682, 0.21318240406642247], 'true,false': [0.0, 0.10665492570028037], 'false': [0.24136295830983195, 0.19193554639113103], 'true,false,false': [5.692183156356482e-05, 0.18996686453485973], 'false,false': [nan, 0.191935546391131], 'true': [0.1996886928500851, 0.10398336942035263]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
0;true,false;recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), follows(A, F).;true;true
0;false;follows(H, A), recursion_accounttype(H, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;tweets(C, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true,false;follows(E, A), follows(A, E).;true;true
3;true,false,false;tweets(A, F).;true;true
3;true;follows(C, D), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(C, D), follows(A, D).;true;true
4;false;follows(A, E).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;tweets(A, E), follows(F, A).;true;true
6;false,true,false;follows(I, F), recursion_accounttype(I, B).;true;true
6;false,true;follows(A, G), tweets(G, E).;true;true
7;;accounttype(A, B) :- tweets(A, C).;true;true
7;false;follows(F, A), recursion_accounttype(F, B).;true;true
7;false,true;follows(G, A), tweets(G, H).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;true,false;follows(C, A).;true;true
9;true,false,false;follows(C, E), tweets(E, F).;true;true
9;true;follows(C, D), recursion_accounttype(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( tweets(D, E), follows(A, F) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.3998156017661798;  // std dev = 4,882, 96,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=52 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.06027659467398043;  // std dev = 0,402, 94,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=19 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.2867203636709409;  // std dev = 2,619, 28,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return -0.030739953789376676;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return -0.012221435270858057;  // std dev = 0,336, 54,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=7 */
%   | | else return 0.28870449065506754;  // std dev = 0,495, 72,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=31 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(F, B) )
%   | | | then return 0.33794819844584845;  // std dev = 4,664, 88,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=47 */
%   | | | else return 0.04591235207721809;  // std dev = 1,616, 19,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2210537414384869;  // std dev = 2,444, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | | else return 0.16204817714192177;  // std dev = 1,140, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else return 0.8022131481429233;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return -0.037876433086922186;  // std dev = 0,310, 112,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3005725654037711;  // std dev = 4,306, 75,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=35 */
%   | | | else return -0.17289717621885942;  // std dev = 0,027, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.10094281206887944;  // std dev = 0,438, 41,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.3262708015288684;  // std dev = 4,705, 91,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=52 */
%   | | | else return 0.5902507109301595;  // std dev = 1,268, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return -0.13161557464197512;  // std dev = 0,308, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else return -0.15075864345075687;  // std dev = 0,133, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.03324376738919047;  // std dev = 0,310, 112,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.0810503924199101;  // std dev = 2,089, 22,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return 0.29345551217997684;  // std dev = 3,749, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.1465126437241053;  // std dev = 0,020, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.1615999481531423;  // std dev = 2,670, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.1402487577601142;  // std dev = 0,444, 158,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=60 */
%   | else return -0.1024163370547537;  // std dev = 0,173, 58,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=2 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(E, G) )
%   | | | then return 0.10827601673605605;  // std dev = 2,176, 22,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return 0.2510318615347645;  // std dev = 3,862, 61,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=32 */
%   | | else return -0.19079758542560765;  // std dev = 0,029, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.20970329192160184;  // std dev = 2,443, 25,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=12 */
%   | | | else return -0.17498481088128498;  // std dev = 0,056, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.12912831607465783;  // std dev = 0,018, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.135176950480702;  // std dev = 2,670, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, D), follows(A, D) )
%   then if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.2624261723631292;  // std dev = 4,326, 83,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=52 */
%   | | | else return -0.12208432789799546;  // std dev = 1,284, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return -0.11754579587878365;  // std dev = 0,094, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0.04238296246267956;  // std dev = 0,401, 191,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=47 */
%   else if ( follows(A, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.16668542717924595;  // std dev = 2,438, 25,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=12 */
%   | | | else return -0.1512535625622728;  // std dev = 0,049, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.11529280638720582;  // std dev = 0,016, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.11115491215791906;  // std dev = 2,671, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.2307327127307007;  // std dev = 4,380, 85,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=54 */
%   | | | else return 0.051044177747965234;  // std dev = 2,101, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | else return -0.12508416884898033;  // std dev = 0,308, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return -0.11194763387765755;  // std dev = 0,108, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.040562959619024744;  // std dev = 0,307, 112,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.16055263826756558;  // std dev = 4,253, 75,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=35 */
%   | | | else return -0.1689548533729147;  // std dev = 0,027, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return -0.10404689400657072;  // std dev = 0,015, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.09011219677071926;  // std dev = 2,671, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.024517126922509444;  // std dev = 0,378, 216,000 (wgt'ed) examples reached here.  /* #neg=154 #pos=62 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), tweets(F, D) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.1401261532464167;  // std dev = 2,871, 34,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
%   | | | else return 0.019206974809530892;  // std dev = 0,828, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(I, E), recursion_accounttype(I, B) )
%   | | | then return 0.0360474594085937;  // std dev = 2,253, 29,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | | | else return -0.08819395188208701;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(J, A), tweets(J, K) )
%   | | then if ( follows(A, L), follows(L, J) )
%   | | | then return -0.25982297822879324;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.10914097811230668;  // std dev = 1,431, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( follows(A, M) )
%   | | | then return 0.1482938036189154;  // std dev = 3,119, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | | | else return 0.05829994587071472;  // std dev = 2,560, 29,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), tweets(D, F) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.11040705973861036;  // std dev = 4,657, 91,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=52 */
%   | | | else return -0.1550775792403439;  // std dev = 0,302, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.4094965343841738;  // std dev = 0,741, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.025911603727625458;  // std dev = 0,325, 82,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=10 */
%   | | else return 0.0731799105438495;  // std dev = 0,456, 71,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=27 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.14685648288336384;  // std dev = 0,380, 19,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | else if ( follows(I, A), follows(A, J) )
%   | | then return -0.1287466383084006;  // std dev = 0,201, 17,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.03934761642814543;  // std dev = 1,324, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0.08592049072696828;  // std dev = 3,108, 41,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), tweets(C, E) )
%   | then if ( recursion_accounttype(D, B), follows(C, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.1743830912184703;  // std dev = 4,047, 75,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=50 */
%   | | | else return -0.08426375680642402;  // std dev = 2,451, 27,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
%   | | else return -0.15032715759196771;  // std dev = 0,063, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.32537550939981075;  // std dev = 0,724, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.034040317499759866;  // std dev = 0,307, 112,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(G, I), tweets(I, H) )
%   | | | then return 0.06296160183795366;  // std dev = 3,335, 46,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=20 */
%   | | | else return 0.2793955071513891;  // std dev = 0,850, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.059476904366141135;  // std dev = 1,179, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return 0.055834348532409435;  // std dev = 3,411, 50,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B), follows(E, F) )
%   | | | then return 0.03690320002820439;  // std dev = 5,469, 179,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=70 */
%   | | | else return -0.17375470995758419;  // std dev = 0,348, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.07805622409265986;  // std dev = 2,999, 45,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | | | else return 0.037427237705761666;  // std dev = 2,447, 32,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | else return -0.055156799701947166;  // std dev = 0,275, 26,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   else if ( follows(H, A), tweets(A, I) )
%   | then return -0.014701408215164405;  // std dev = 0,380, 33,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | else if ( tweets(A, J) )
%   | | then return 0.07370588706252432;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.06701309726629773;  // std dev = 1,230, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.013311527400852704;  // std dev = 2,026, 19,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */


Results
   AUC ROC   = 0.723498
   AUC PR    = 0.529627
   CLL	      = -0.564656
   Precision = 0.520661 at threshold = 0.5
   Recall    = 0.5
   F1        = 0.510121


Total learning time: 84.807 seconds
Total inference time: 4.306 seconds
AUC ROC: 0.723498


Results scoring model
   AUC ROC   = 0.826046
   AUC PR    = 0.670494
   CLL	      = -0.49226
   Precision = 0.732394 at threshold = 0.5
   Recall    = 0.419355
   F1        = 0.533333


Total scoring time: 4.225 seconds
Refined model CLL: -0.49226


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.723498
   AUC PR    = 0.529627
   CLL	      = -0.564656
   Precision = 0.520661 at threshold = 0.5
   Recall    = 0.5
   F1        = 0.510121


Total learning time: 94.351 seconds
Total inference time: 4.306 seconds
AUC ROC: 0.723498
Total revision time: 94.351
Best scored revision CLL: -0.49226


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:06:34
{'CLL': -0.564656, 'Precision': [0.520661, 0.5], 'Inference time': 4.306, 'Learning time': 94.351, 'parameter_0.8': {'CLL': -0.591798, 'Precision': [0.833333, 0.5], 'Inference time': 1.398, 'Learning time': 4.064, 'AUC ROC': 0.698271, 'F1': 0.075758, 'AUC PR': 0.501422, 'Recall': 0.039683}, 'AUC ROC': 0.723498, 'F1': 0.510121, 'AUC PR': 0.529627, 'Recall': 0.5}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.4295775065280845;  // std dev = 4,721, 91,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=52 */
%   | | | else return 0.7152917922423694;  // std dev = 1,309, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return -0.030739953789376686;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.03374295679237956;  // std dev = 0,311, 111,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return 0.13087620782678508;  // std dev = 2,089, 22,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return 0.3669208649240733;  // std dev = 3,774, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.2129876447769317;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.36887697659770613;  // std dev = 4,721, 91,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=52 */
%   | | | else return 0.6045267906174348;  // std dev = 1,309, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return -0.027039036105351237;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.030650126844780606;  // std dev = 0,309, 112,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2840436063776468;  // std dev = 4,289, 75,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=35 */
%   | | | else return -0.19261937264831677;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.18503405676511192;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.3639841812908054;  // std dev = 4,422, 85,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=54 */
%   | | | else return 0.16321936258449038;  // std dev = 2,038, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | else return -0.023851027745157627;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.02704896638403707;  // std dev = 0,309, 112,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return 0.07253293391083734;  // std dev = 2,089, 22,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return 0.2734571515222301;  // std dev = 3,736, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.15733633666574967;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.22949083138774187;  // std dev = 4,680, 91,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=52 */
%   | | | else return 0.42864555575056745;  // std dev = 1,300, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return -0.021090647410594104;  // std dev = 0,314, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.02393727809254227;  // std dev = 0,309, 112,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.20215800012923632;  // std dev = 4,231, 74,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=35 */
%   | | | else return -0.2055041790576491;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.14303764788665482;  // std dev = 2,639, 30,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( tweets(C, E), follows(D, F) )
%   | | | then return 0.2601165469390808;  // std dev = 4,325, 82,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=53 */
%   | | | else return -0.12169231610176645;  // std dev = 1,258, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return 0.007208718430674388;  // std dev = 0,348, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | else return -0.09269127618926093;  // std dev = 1,05e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.019286808767859827;  // std dev = 0,312, 110,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.16076313161048567;  // std dev = 4,226, 74,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=35 */
%   | | | else return -0.17397038608500565;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.1053992946701218;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), tweets(C, E) )
%   | then if ( recursion_accounttype(D, B), follows(C, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.21259683804674845;  // std dev = 4,027, 74,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=50 */
%   | | | else return -0.030139319406254785;  // std dev = 2,266, 27,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
%   | | else return -0.106367412412537;  // std dev = 0,138, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.48148149676408275;  // std dev = 0,819, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.019092151094927325;  // std dev = 0,309, 112,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.1512316414677399;  // std dev = 1,000, 23,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.21367783889892727;  // std dev = 2,515, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1414436583656819;  // std dev = 3,157, 42,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | | | else return 0.0751393723938745;  // std dev = 2,560, 29,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), tweets(C, E) )
%   | then if ( recursion_accounttype(D, B), follows(C, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.15051157168805906;  // std dev = 4,082, 75,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=50 */
%   | | | else return -0.022948090635929775;  // std dev = 2,267, 27,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
%   | | else return -0.0967257400855794;  // std dev = 0,127, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.38581002296686323;  // std dev = 0,823, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.017001275916594817;  // std dev = 0,309, 112,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.12981218518496346;  // std dev = 0,989, 23,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.16601475070703825;  // std dev = 2,513, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.10881663511923241;  // std dev = 3,153, 42,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | | | else return 0.06008677503003639;  // std dev = 2,560, 29,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(C, D), follows(A, C) )
%   | | | then return 0.14830272586955354;  // std dev = 3,398, 56,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=39 */
%   | | | else return -0.057116886981529745;  // std dev = 2,624, 46,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | else return -0.1616780315464989;  // std dev = 0,114, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then return 0.05915161742928032;  // std dev = 0,387, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else return 0.3286124607553861;  // std dev = 0,299, 10,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   else if ( follows(G, A) )
%   | then return -0.015906350473092173;  // std dev = 0,339, 110,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.014947576382139878;  // std dev = 0,344, 51,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=7 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.08305163269238997;  // std dev = 3,150, 42,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | | | else return 0.04769271434712483;  // std dev = 2,560, 29,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(C, D) )
%   | then if ( recursion_accounttype(C, B), follows(A, C) )
%   | | then if ( follows(D, A), follows(A, D) )
%   | | | then return 0.23672166806639544;  // std dev = 1,793, 21,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   | | | else return 0.025440405802895548;  // std dev = 3,212, 51,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=29 */
%   | | else return 9.434010573010107E-4;  // std dev = 0,363, 144,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=37 */
%   | else return -0.11518786109114626;  // std dev = 0,156, 29,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.01687369397032439;  // std dev = 0,342, 55,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=8 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.082706059709518;  // std dev = 3,204, 41,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=22 */
%   | | | else return -0.19806949545470406;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.09280932211172913;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.008598795795939666;  // std dev = 2,026, 19,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return -0.027682658671399196;  // std dev = 0,360, 154,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=51 */
%   | else if ( recursion_accounttype(D, B), follows(C, D) )
%   | | then return 0.1301391172399342;  // std dev = 0,423, 67,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=32 */
%   | | else return -0.10541243961665873;  // std dev = 0,168, 24,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.11123629736708035;  // std dev = 2,203, 24,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | | else return -0.01769122868659269;  // std dev = 2,215, 34,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | else return 0.07271201081980463;  // std dev = 0,490, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.02576454245491372;  // std dev = 0,300, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.06258788213107547;  // std dev = 2,237, 21,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.006765733027036892;  // std dev = 2,026, 19,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */


Results
   AUC ROC   = 0.759936
   AUC PR    = 0.580412
   CLL	      = -0.539975
   Precision = 0.51773 at threshold = 0.5
   Recall    = 0.579365
   F1        = 0.546816


Total learning time: 29.26 seconds
Total inference time: 1.053 seconds
AUC ROC: 0.759936


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:07:04
{'CLL': -0.539975, 'Precision': [0.51773, 0.5], 'Inference time': 1.053, 'Learning time': 29.26, 'AUC ROC': 0.759936, 'F1': 0.546816, 'AUC PR': 0.580412, 'Recall': 0.579365}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.43592671287729085;  // std dev = 4,686, 90,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=52 */
%   | | | else return 0.7152917922423694;  // std dev = 1,309, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(G, C) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then if ( follows(J, A), tweets(H, K) )
%   | | | then return -0.05094197399139684;  // std dev = 1,907, 44,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   | | | else return 0.14386322081379807;  // std dev = 2,390, 28,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(A, L) )
%   | | then if ( follows(M, A), follows(L, M) )
%   | | | then return 0.13087620782678508;  // std dev = 2,089, 22,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return 0.3669208649240733;  // std dev = 3,774, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | else if ( tweets(A, N), follows(P, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.2129876447769317;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */


Results
   AUC ROC   = 0.672745
   AUC PR    = 0.455422
   CLL	      = -0.671142
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 4.188 seconds
Total inference time: 0.709 seconds
AUC ROC: 0.672745


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:07:09
{'CLL': -0.671142, 'Precision': [nan, 0.5], 'Inference time': 0.709, 'Learning time': 4.188, 'AUC ROC': 0.672745, 'F1': nan, 'AUC PR': 0.455422, 'Recall': 0.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
0;true,false;recursion_proteinclass(D, B), location(C, G).;false;true
0;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;true,true;recursion_proteinclass(D, B), complex(A, E).;false;false
0;true,false,false;interaction(H, A), interaction(H, D).;false;false
0;false,false;interaction(J, A), recursion_proteinclass(J, B).;false;true
0;true;complex(D, E), interaction(F, A).;true;true
0;false,false,false;interaction(K, A), enzyme(K, L).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,false;interaction(J, A), recursion_proteinclass(J, B).;false;false
1;false,false;interaction(G, A), interaction(G, G).;true;true
1;false;interaction(A, E), interaction(E, E).;true;true
1;false,false,true;enzyme(A, H), complex(G, I).;false;false
1;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
1;true;complex(C, D).;false;false
1;false,true;interaction(E, A).;false;true
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true,false;interaction(A, F), enzyme(F, D).;false;true
2;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
2;false,false,true;enzyme(A, J).;false;false
2;true,false,false;interaction(G, C), interaction(G, G).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;true;true
2;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
2;false,false,false;interaction(A, K), interaction(K, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true,false;interaction(A, E), interaction(E, A).;false;true
3;false;interaction(A, A).;false;true
3;false,false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
3;true,false,false;complex(A, F).;false;false
3;false,false;interaction(A, G), complex(G, H).;true;true
3;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- enzyme(A, C).;true;true
4;false;location(A, G), complex(A, H).;true;true
4;true,true;interaction(E, D), interaction(E, A).;false;true
4;true,true,false;interaction(F, A).;false;false
4;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
4;true;enzyme(D, C), recursion_proteinclass(D, B).;true;false
4;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
4;false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;false,false,false;interaction(N, A), complex(A, P).;false;false
5;false,false;enzyme(A, J), interaction(K, A).;true;true
5;false;interaction(A, F), interaction(F, A).;true;true
5;false,false,true;interaction(A, L), complex(K, M).;false;false
5;false,true,false;enzyme(F, H), enzyme(A, I).;false;false
5;true;enzyme(A, D), phenotype(A, E).;false;false
5;false,true;complex(F, G), complex(A, G).;false;true
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,true,true;interaction(F, H), recursion_proteinclass(H, B).;false;false
6;false,false;interaction(A, A).;false;true
6;false;complex(A, E), interaction(A, F).;true;true
6;false,true,false;interaction(F, I), recursion_proteinclass(I, B).;false;false
6;true;interaction(D, C), interaction(C, D).;false;false
6;false,false,false;enzyme(A, J), complex(A, K).;false;false
6;false,true;interaction(G, A), complex(G, E).;true;true
7;;proteinclass(A, B) :- complex(A, C).;true;true
7;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
7;true,true;interaction(E, A), recursion_proteinclass(E, B).;false;false
7;false,true,true;interaction(A, I), complex(I, J).;false;false
7;false,false;interaction(A, A).;false;true
7;true;complex(D, C), recursion_proteinclass(D, B).;true;false
7;false,false,false;enzyme(A, K).;false;false
7;false,true;location(A, G), enzyme(F, H).;true;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;false,false,false;interaction(L, A), interaction(M, L).;false;false
8;false,false;location(A, J).;true;true
8;false;interaction(F, A), interaction(F, F).;true;true
8;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
8;false,true,false;enzyme(F, H), location(F, I).;false;false
8;true;complex(C, D), interaction(E, A).;false;false
8;false,true;interaction(A, F), phenotype(F, G).;false;true
9;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
9;true,false;interaction(A, C).;false;true
9;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
9;true,true;phenotype(E, D).;false;false
9;true,false,false;interaction(F, C), complex(F, G).;false;false
9;false,false;interaction(A, A).;false;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;false,false,false;phenotype(A, I).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( tweets(D, E), follows(A, F) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.23120592991816652;  // std dev = 6,719, 193,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=72 */
%   | | else return 0.08787866482924206;  // std dev = 3,619, 74,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=17 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.21985106275908683;  // std dev = 3,294, 47,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=17 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.016851064900487683;  // std dev = 2,646, 64,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.4267763860799034;  // std dev = 3,537, 51,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=29 */
%   | | | else return 0.1914822684328457;  // std dev = 2,708, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.2736970401971526;  // std dev = 6,734, 185,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=82 */
%   | else return 0.8341114932246737;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.04763748660037834;  // std dev = 3,545, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | | | else return 0.20929437685647242;  // std dev = 5,842, 147,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=57 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.15483056833397577;  // std dev = 8,641, 347,000 (wgt'ed) examples reached here.  /* #neg=226 #pos=121 */
%   | else if ( follows(E, A) )
%   | | then return 0.08566436216185223;  // std dev = 1,492, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( follows(C, F), follows(F, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.012264831594326803;  // std dev = 1,694, 26,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2431130885978769;  // std dev = 2,852, 33,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.05843118900646989;  // std dev = 3,104, 51,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.16173681319414146;  // std dev = 6,643, 198,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=74 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.18226439533636377;  // std dev = 0,970, 42,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.027469370411101268;  // std dev = 1,498, 23,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return -0.14253087259548317;  // std dev = 0,044, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.13366619838085375;  // std dev = 4,658, 95,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=35 */
%   | | | else return -0.044532262946075464;  // std dev = 1,188, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.32484010504641714;  // std dev = 3,503, 51,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=30 */
%   | | | else return 0.12595351595018964;  // std dev = 2,708, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.10195433413919965;  // std dev = 8,738, 378,000 (wgt'ed) examples reached here.  /* #neg=250 #pos=128 */
%   | else if ( follows(A, E) )
%   | | then return -0.26776176555143927;  // std dev = 0,080, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.08595343725794612;  // std dev = 4,259, 84,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.04653858759389857;  // std dev = 0,427, 277,000 (wgt'ed) examples reached here.  /* #neg=199 #pos=78 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.11045703669300826;  // std dev = 2,915, 37,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
%   | | else return -0.1292787532451337;  // std dev = 0,312, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, A), tweets(F, H) )
%   | | | then return 0.2557992450454841;  // std dev = 1,584, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.23207611320506077;  // std dev = 3,451, 50,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.06969830259470092;  // std dev = 4,257, 84,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then return 0.04879573541412834;  // std dev = 6,863, 246,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=74 */
%   | else return -0.04565772777437584;  // std dev = 1,748, 31,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(A, G), tweets(G, E) )
%   | | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.11556599411855811;  // std dev = 3,123, 41,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=17 */
%   | | | else return 0.03947149690020484;  // std dev = 1,071, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.059114255141626104;  // std dev = 2,942, 39,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   | | | else return -0.1732157254848872;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14439016948121258;  // std dev = 2,985, 38,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=19 */
%   | | | else return 0.09192388595169074;  // std dev = 3,736, 64,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=26 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.026904046331577905;  // std dev = 6,388, 218,000 (wgt'ed) examples reached here.  /* #neg=155 #pos=63 */
%   | | else return 0.07493943500459707;  // std dev = 5,356, 127,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=52 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), tweets(G, H) )
%   | | then return 0.2740215703399944;  // std dev = 2,534, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   | | else return 0.4871682440370011;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.006154440231540146;  // std dev = 0,399, 95,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then return 0.12677208263534517;  // std dev = 5,958, 152,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=67 */
%   | else return 0.13519933933004522;  // std dev = 2,932, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else if ( follows(A, F), follows(F, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(G, B) )
%   | | then return -0.022343431566038397;  // std dev = 6,747, 280,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=71 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.03988518592647435;  // std dev = 0,445, 347,000 (wgt'ed) examples reached here.  /* #neg=226 #pos=121 */
%   | else if ( follows(C, A) )
%   | | then return -0.27126358982379395;  // std dev = 0,015, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(C, E), tweets(E, F) )
%   | | | then return -0.10067927584500042;  // std dev = 0,982, 17,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return 0.040659466364973106;  // std dev = 1,776, 18,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.07176762848533812;  // std dev = 2,858, 33,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.019001858796022626;  // std dev = 0,433, 51,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=13 */


Results
   AUC ROC   = 0.699531
   AUC PR    = 0.501805
   CLL	      = -0.592167
   Precision = 0.5 at threshold = 0.5
   Recall    = 0.007937
   F1        = 0.015625


Total learning time: 4.916 seconds
Total inference time: 1.435 seconds
AUC ROC: 0.699531


Results scoring model
   AUC ROC   = 0.763231
   AUC PR    = 0.579524
   CLL	      = -0.57015
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.012821
   F1        = 0.025316


Total scoring time: 1.335 seconds
Parameter learned model CLL: -0.57015


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true,false': 'recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(D, B), tweets(A, E)', 'true': 'tweets(D, E), follows(A, F)', 'true,false,false': 'follows(A, G), follows(D, G)', 'false,false': 'follows(A, I), recursion_accounttype(I, B)', 'false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, J)'}, {'true,false,true': [3.294, 30, 17], 'true,false,false,false': [0.0, 4, 0], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.537, 22, 29], 'true,true,true': [6.719, 121, 72], 'true,true,false': [3.619, 57, 17], 'false,false,true': [2.646, 56, 8], 'false,true': [0.0, 0, 2], 'false,false,false,false': [2.708, 22, 11]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F), follows(F, F)', 'true': 'tweets(C, D)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,false': [0.016, 0, 3], 'false,false,false,true': [3.545, 119, 14], 'true,true': [6.734, 103, 82], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [5.842, 90, 57]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true,false': 'follows(E, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'true,false,false': 'follows(C, F), follows(F, F)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,false,true': [1.492, 8, 3], 'true,false,false,false': [1.694, 22, 4], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true': [8.641, 226, 121], 'false,false,true': [0.0, 0, 0], 'false,true': [2.852, 18, 15], 'false,false,false,false': [3.104, 38, 13]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true,false': 'follows(E, A), follows(A, E)', 'false': 'follows(A, A)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false,false': 'tweets(A, F)', 'false,false': 'follows(G, A), tweets(G, H)', 'false,false,true': 'follows(I, G), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J)'}, {'true,false,true': [0.97, 41, 1], 'true,false,false,false': [0.044, 14, 0], 'true,false,false,true': [1.498, 20, 3], 'false,false,true,false': [1.188, 10, 2], 'true,true': [6.643, 124, 74], 'false,false,true,true': [4.658, 60, 35], 'false,false,false,true': [3.503, 21, 30], 'false,true': [0.0, 0, 0], 'false,false,false,false': [2.708, 22, 11]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)'}, {'true,true': [8.738, 250, 128], 'true,false,true': [0.08, 6, 0], 'true,false,false': [4.259, 56, 28], 'false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,false,false': 'follows(A, I), tweets(A, J)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(G, A), tweets(F, H)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'false,false,true,true': [1.584, 5, 6], 'false,false,true,false': [3.451, 21, 29], 'false,true,true': [2.915, 23, 14], 'true': [0.427, 199, 78], 'false,true,false': [0.312, 8, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [4.257, 56, 28]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, E), follows(F, A)', 'false,false': 'follows(A, A)', 'false,true,true': 'follows(H, F), recursion_accounttype(H, B)', 'false,true,false': 'follows(I, F), recursion_accounttype(I, B)', 'true': 'follows(C, D), follows(D, C)', 'false,false,false': 'tweets(A, J)', 'false,true': 'follows(A, G), tweets(G, E)'}, {'true,false': [1.748, 27, 4], 'false,true,true,false': [1.071, 4, 2], 'false,true,false,true': [2.942, 25, 14], 'true,true': [6.863, 172, 74], 'false,true,true,true': [3.123, 24, 17], 'false,false,false,true': [2.985, 19, 19], 'false,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 3, 0], 'false,false,false,false': [3.736, 38, 26]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true,true': 'follows(A, E), recursion_accounttype(E, B)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, A)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false,true': 'follows(G, A), tweets(G, H)'}, {'true,false': [0.0, 0, 0], 'false,true,true': [2.534, 12, 15], 'false,false,false': [0.399, 70, 25], 'true,true,false': [5.356, 75, 52], 'false,true,false': [0.0, 0, 1], 'true,true,true': [6.388, 155, 63], 'false,false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, F), follows(F, F)', 'false,false': 'recursion_accounttype(G, B)', 'true': 'tweets(C, D), follows(A, E)'}, {'true,true': [5.958, 85, 67], 'true,false': [2.932, 18, 18], 'false,false,true': [6.747, 209, 71], 'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true,false': 'follows(C, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'true,false,false': 'follows(C, E), tweets(E, F)', 'false,false': 'follows(A, A)', 'true': 'follows(C, D), recursion_accounttype(D, B)'}, {'true,false,true': [0.015, 2, 0], 'true,true': [0.445, 226, 121], 'true,false,false,true': [0.982, 16, 1], 'false,false,false': [0.433, 38, 13], 'false,false,true': [0.0, 0, 0], 'false,true': [2.858, 18, 15], 'true,false,false,false': [1.776, 12, 6]}]]
[{'': [0.22222222222222437, 0.22222222222222296], 'true,false': [0.23087369850611084, 0.0], 'false': [0.0, 0.21913805697589556], 'true,true': [0.23388547343552843, 0.17695398100803467], 'true,false,false': [nan, 0.0], 'false,false': [0.10937500000000022, 0.24943310657596432], 'true': [0.22222222222222326, 0.2222222222222217], 'false,false,false': [0.24529027297193537, 0.22222222222222174]}, {'': [0.24614326601907058, 0.18323101604154873], 'false': [nan, 0.18323101604154873], 'false,false': [nan, 0.18323101604154882], 'true': [0.2451217429207054, 8.449656189550107e-05], 'false,false,false': [0.09449753457066501, 0.232157048085082]}, {'': [0.20955748336261612, 0.21970870295610467], 'false,false,false': [nan, 0.18895961070283648], 'false': [0.24652196061095652, 0.18895961070283648], 'true,false,false': [nan, 0.11036592218134161], 'false,false': [nan, 0.1889596107028367], 'true': [0.2151694003535907, 0.13972243090916142], 'true,false': [0.20237153429269553, 0.11036592218134156]}, {'': [0.18947813526275123, 0.23391291015228555], 'false,false,false': [0.24059362459770428, 0.22222222222222238], 'false': [nan, 0.23391291015228563], 'true': [0.22286753986346886, 0.04489116031892428], 'true,false,false': [0.09756120141375296, 0.0001390453395911571], 'false,false': [0.21914500647588944, 0.24281117147733067], 'false,false,true': [0.22840822941800806, 0.11761774039129397], 'true,false': [0.02242469046178363, 0.06381272020362183]}, {'': [0.20366474392360273, nan], 'true,false': [0.0010751751805240888, 0.2159466323101253], 'true': [0.20199630172956012, 0.20940676728272428]}, {'': [0.18235910344370712, 0.22783535696744672], 'false,false,false': [nan, 0.21571464148420832], 'false': [0.21278172560311368, 0.2312105095917661], 'false,false': [0.2364592355548713, 0.21571464148420832], 'false,false,true': [0.22798104086920382, 0.23822295220821782], 'false,true': [0.22960892957136894, 0.09737473752726912]}, {'': [0.1819642649156528, 0.22417619269942438], 'false,false,false': [0.23449253290803362, 0.21803391743876688], 'false,true,false': [0.22198728895693967, -4.625929269271485e-18], 'false': [0.22277770181983517, 0.2248090218683781], 'false,true,true': [0.23789386378873584, 0.19107121270401037], 'false,false': [nan, 0.2248090218683773], 'true': [0.19146893566199982, 0.09861707697398689], 'false,true': [0.23256133505664353, 0.20971117575936693]}, {'': [0.20195990445097717, 0.19000902202958034], 'false': [0.23083209024344864, 0.15912313513354795], 'true,true': [0.18716454329431878, 0.225898657752872], 'false,false': [nan, 0.15912313513354803], 'true': [0.20195990445097717, nan], 'false,true': [0.23775887318669983, 0.0]}, {'': [0.23458893979108328, 0.1625624928081236], 'false': [nan, 0.16256249280812343], 'false,false': [0.1625624928081235, nan], 'true': [0.23356403593196987, 0.2388588923022635]}, {'': [0.19065553207981312, 0.2132381540834229], 'true,false': [0.00010516224640089167, 0.12260956985509558], 'false': [0.24752749422375725, 0.18781414477709907], 'true,false,false': [0.0566807959415328, 0.17517269465418084], 'false,false': [nan, 0.1878141447770993], 'true': [0.1976619808970294, 0.11901379925026766]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
0;true,false;recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), follows(A, F).;true;true
0;false;follows(H, A), recursion_accounttype(H, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;tweets(C, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true,false;follows(E, A), follows(A, E).;true;true
3;true,false,false;tweets(A, F).;true;true
3;true;follows(C, D), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(C, D), follows(A, D).;true;true
4;false;follows(A, E).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;tweets(A, E), follows(F, A).;true;true
6;false,true,false;follows(I, F), recursion_accounttype(I, B).;true;true
6;false,true;follows(A, G), tweets(G, E).;true;true
7;;accounttype(A, B) :- tweets(A, C).;true;true
7;false;follows(F, A), recursion_accounttype(F, B).;true;true
7;false,true;follows(G, A), tweets(G, H).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;true,false;follows(C, A).;true;true
9;true;follows(C, D), recursion_accounttype(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( tweets(D, E), follows(A, F) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.3772329045651623;  // std dev = 5,719, 131,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=68 */
%   | | | else return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.04235946141530161;  // std dev = 0,388, 114,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=21 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.32689893509951234;  // std dev = 2,823, 32,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | | else return -0.00851773156715447;  // std dev = 1,317, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return -0.016851064900487683;  // std dev = 0,331, 64,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=8 */
%   | | else return 0.3343394112899879;  // std dev = 0,499, 84,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=40 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.2428662790060476;  // std dev = 5,308, 119,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=51 */
%   | | | else return 0.06004422699296826;  // std dev = 1,438, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.4379210847720766;  // std dev = 2,151, 21,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.26992303528945627;  // std dev = 2,851, 33,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else return 0.8057718431957164;  // std dev = 1,49e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return -0.03832269104677671;  // std dev = 0,307, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, A), follows(K, J) )
%   | | | then return 0.09411036291634606;  // std dev = 2,466, 33,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.3921861402988187;  // std dev = 3,926, 63,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=36 */
%   | | else return 0.08471576405266452;  // std dev = 0,430, 51,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.3274116302889428;  // std dev = 5,342, 116,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=65 */
%   | | | else return 0.6224417751117369;  // std dev = 1,311, 20,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return -0.16289919124834887;  // std dev = 0,246, 26,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | else return -0.1660072383305341;  // std dev = 0,134, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.03367473639771622;  // std dev = 0,307, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return 0.08183008124378996;  // std dev = 2,466, 33,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | | | else return 0.32728947081933707;  // std dev = 3,926, 63,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=36 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.08144646975333218;  // std dev = 0,963, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.13659896748788963;  // std dev = 2,830, 36,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.1400769725804526;  // std dev = 0,442, 198,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=74 */
%   | else return -0.09348293622502203;  // std dev = 0,205, 79,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=4 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(G, E) )
%   | | | then return 0.11727145814713465;  // std dev = 2,864, 41,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | | else return 0.30110444152570087;  // std dev = 3,794, 61,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=37 */
%   | | else return -0.29759357665847413;  // std dev = 0,066, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.22901600579683576;  // std dev = 2,618, 29,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
%   | | | else return -0.18638754986873668;  // std dev = 0,057, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.07146478364311136;  // std dev = 0,963, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.11414478869972454;  // std dev = 2,830, 36,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, D), follows(A, D) )
%   then if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.2661288621464043;  // std dev = 4,999, 111,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=68 */
%   | | | else return -0.14218439511897304;  // std dev = 1,281, 22,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.13181799558070062;  // std dev = 0,062, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.043463457391002984;  // std dev = 0,395, 229,000 (wgt'ed) examples reached here.  /* #neg=171 #pos=58 */
%   else if ( follows(A, G) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.1802680772388131;  // std dev = 2,611, 29,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
%   | | | else return -0.15988031313364293;  // std dev = 0,050, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.06317724365424156;  // std dev = 0,963, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.09401315119824259;  // std dev = 2,830, 36,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.26031071250327853;  // std dev = 4,799, 103,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=67 */
%   | | | else return 0.031215533099317988;  // std dev = 2,565, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else return -0.142387419949851;  // std dev = 0,259, 26,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | else return -0.12088078478528382;  // std dev = 0,082, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.04057289843869493;  // std dev = 0,305, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.16508056961800174;  // std dev = 4,532, 91,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=44 */
%   | | | else return -0.2475135259204889;  // std dev = 0,059, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return -0.056206584986059446;  // std dev = 0,963, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return 0.07650744239301793;  // std dev = 2,830, 36,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.02396131050515199;  // std dev = 0,375, 277,000 (wgt'ed) examples reached here.  /* #neg=199 #pos=78 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), tweets(F, D) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.10449762210686224;  // std dev = 2,860, 37,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=14 */
%   | | | else return 0.15869364223023924;  // std dev = 1,468, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else if ( follows(H, E), recursion_accounttype(H, B) )
%   | | | then return 0.04713104061565149;  // std dev = 2,597, 39,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   | | | else return -0.10626907947676166;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(I, A), tweets(I, J) )
%   | | then if ( follows(A, K), follows(K, I) )
%   | | | then return -0.2216831472543159;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.0465893098446478;  // std dev = 1,548, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.15673903495175848;  // std dev = 3,408, 51,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=30 */
%   | | | else return 0.05639115964438124;  // std dev = 2,708, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( tweets(D, F), follows(G, A) )
%   | | | then return 0.015638134864133818;  // std dev = 4,952, 153,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=50 */
%   | | | else return 0.20612169081384665;  // std dev = 2,244, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | else return -0.08287957331143235;  // std dev = 0,245, 40,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.11906466879320374;  // std dev = 3,975, 69,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=34 */
%   | | | else return -0.22184284129375687;  // std dev = 0,059, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.07340245820160754;  // std dev = 2,386, 27,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | | else return -0.009120903317389939;  // std dev = 1,911, 27,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   else if ( follows(K, A), recursion_accounttype(K, B) )
%   | then return 0.17260231993910982;  // std dev = 0,360, 28,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else return -0.002022597703028272;  // std dev = 0,390, 95,000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.17845509579597435;  // std dev = 4,803, 103,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=67 */
%   | | | else return -0.00927308772837515;  // std dev = 2,467, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else return -0.13067250823152027;  // std dev = 0,259, 26,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | else return -0.11752940344080115;  // std dev = 0,109, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.04183693310568539;  // std dev = 0,302, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.15496803094183126;  // std dev = 0,980, 31,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return 0.18756297002790706;  // std dev = 2,792, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.10119208855519135;  // std dev = 3,383, 50,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return 0.04590166103746882;  // std dev = 2,708, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(G, E) )
%   | | | then return 0.020249635262884515;  // std dev = 4,684, 125,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=53 */
%   | | | else return 0.2405535425832818;  // std dev = 1,707, 24,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | else return 0.0029879856600393937;  // std dev = 0,387, 198,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=52 */
%   | else return -0.03673484218935637;  // std dev = 0,303, 37,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), follows(I, A) )
%   | | then return -0.0158986561698293;  // std dev = 0,382, 42,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
%   | | else if ( recursion_accounttype(H, B) )
%   | | | then return -0.0539094672747112;  // std dev = 0,616, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.27213656868643377;  // std dev = 1,058, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, J) )
%   | | then return 0.037352015800850534;  // std dev = 0,471, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.035870757673481746;  // std dev = 0,471, 21,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */


Results
   AUC ROC   = 0.717703
   AUC PR    = 0.507617
   CLL	      = -0.564465
   Precision = 0.497268 at threshold = 0.5
   Recall    = 0.722222
   F1        = 0.588997


Total learning time: 101.76400000000001 seconds
Total inference time: 4.285 seconds
AUC ROC: 0.717703


Results scoring model
   AUC ROC   = 0.839518
   AUC PR    = 0.695744
   CLL	      = -0.482377
   Precision = 0.675 at threshold = 0.5
   Recall    = 0.692308
   F1        = 0.683544


Total scoring time: 5.183 seconds
Refined model CLL: -0.482377


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.717703
   AUC PR    = 0.507617
   CLL	      = -0.564465
   Precision = 0.497268 at threshold = 0.5
   Recall    = 0.722222
   F1        = 0.588997


Total learning time: 113.19800000000001 seconds
Total inference time: 4.285 seconds
AUC ROC: 0.717703
Total revision time: 113.19800000000001
Best scored revision CLL: -0.482377


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:09:09
{'CLL': -0.564465, 'Precision': [0.497268, 0.5], 'parameter_1.0': {'CLL': -0.592167, 'Precision': [0.5, 0.5], 'Inference time': 1.435, 'Learning time': 4.916, 'AUC ROC': 0.699531, 'F1': 0.015625, 'AUC PR': 0.501805, 'Recall': 0.007937}, 'Inference time': 4.285, 'Learning time': 113.19800000000001, 'AUC ROC': 0.717703, 'F1': 0.588997, 'AUC PR': 0.507617, 'Recall': 0.722222}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.4184937626857202;  // std dev = 5,346, 116,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=65 */
%   | | | else return 0.7581489350995123;  // std dev = 1,342, 20,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return -0.06492798797741088;  // std dev = 0,266, 26,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | else return -0.1418510649004877;  // std dev = 2,11e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.03658790700575082;  // std dev = 0,307, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10959300038435871;  // std dev = 0,984, 31,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return 0.3429974199479972;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.43814893509951125;  // std dev = 3,490, 50,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return 0.1914822684328457;  // std dev = 2,708, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.359577627207934;  // std dev = 5,346, 116,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=65 */
%   | | | else return 0.6392070123615111;  // std dev = 1,342, 20,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return -0.05720661123539924;  // std dev = 0,266, 26,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.032192176879280186;  // std dev = 0,307, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09676851882223118;  // std dev = 0,984, 31,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return 0.2959222839173268;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3760603795621069;  // std dev = 3,490, 50,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return 0.16653882456488187;  // std dev = 2,708, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.38319226715109383;  // std dev = 4,823, 103,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=67 */
%   | | | else return 0.14600094226840973;  // std dev = 2,533, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else return -0.05070064289107805;  // std dev = 0,266, 26,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.02841978220951746;  // std dev = 0,307, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.08627855512573782;  // std dev = 0,984, 31,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return 0.246377439708811;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.323493797843899;  // std dev = 3,181, 42,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=25 */
%   | | | else return 0.15890623496975761;  // std dev = 3,063, 41,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.22147334004161892;  // std dev = 5,267, 116,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=65 */
%   | | | else return 0.45791610337852695;  // std dev = 1,335, 20,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return -0.045161602872387976;  // std dev = 0,266, 26,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.025162564730915663;  // std dev = 0,307, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07755616323552579;  // std dev = 0,984, 31,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return 0.19881003268781505;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.24552329899588987;  // std dev = 3,485, 50,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return 0.11630569256756774;  // std dev = 2,708, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.24922188898700315;  // std dev = 4,818, 103,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=67 */
%   | | | else return 0.029318782608829037;  // std dev = 2,360, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else return -0.040403203370043154;  // std dev = 0,266, 26,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | else return -0.09269127618926096;  // std dev = 7,45e-09, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.022335198232359802;  // std dev = 0,307, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.07020092128923554;  // std dev = 0,984, 31,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return 0.156550433346382;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.19794903597985541;  // std dev = 3,181, 42,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=25 */
%   | | | else return 0.10476899588241191;  // std dev = 3,057, 41,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, C), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(C, E) )
%   | | | then return 0.18588065560605296;  // std dev = 4,647, 105,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=68 */
%   | | | else return -0.08099366304311353;  // std dev = 2,472, 50,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
%   | | else return 0.5326745991385431;  // std dev = 0,311, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.08518475138839682;  // std dev = 1,75e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.019869521792523236;  // std dev = 0,307, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), follows(A, G) )
%   | | | then return 0.12093984099346076;  // std dev = 2,546, 34,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=13 */
%   | | | else return -0.06985512592224818;  // std dev = 1,643, 30,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1444815150705576;  // std dev = 3,482, 50,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return 0.0764055107172708;  // std dev = 2,708, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), tweets(C, E) )
%   | then if ( recursion_accounttype(D, B), follows(C, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.1899815065266428;  // std dev = 4,342, 89,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=61 */
%   | | | else return -0.05930854972581192;  // std dev = 2,782, 44,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=19 */
%   | | else return -0.09123888388576462;  // std dev = 0,093, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0.4181379960461243;  // std dev = 0,837, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.017710468582975352;  // std dev = 0,307, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.06512431312478417;  // std dev = 0,975, 31,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return 0.10888286559291717;  // std dev = 2,845, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.11381529921225593;  // std dev = 3,181, 42,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=25 */
%   | | | else return 0.06559332635528531;  // std dev = 3,056, 41,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then if ( follows(C, E), tweets(C, D) )
%   | | | then return 0.14277182561534563;  // std dev = 4,342, 89,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=61 */
%   | | | else return -0.12037296680247639;  // std dev = 1,755, 36,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=6 */
%   | | else return -0.1714373394052237;  // std dev = 0,128, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.1857866967192931;  // std dev = 0,333, 31,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=18 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.015813093783598024;  // std dev = 0,307, 133,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=14 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), tweets(H, G) )
%   | | | then return 0.06047132549638696;  // std dev = 3,443, 57,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=25 */
%   | | | else return 0.23038423359564894;  // std dev = 1,154, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.0698615949655261;  // std dev = 1,419, 27,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=3 */
%   | | | else return 0.06428068260098954;  // std dev = 3,627, 57,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(C, D) )
%   | then if ( recursion_accounttype(C, B), follows(A, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.027421818886565436;  // std dev = 3,889, 78,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=43 */
%   | | | else return 0.3161377988256132;  // std dev = 1,002, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return -0.003088678908599138;  // std dev = 0,348, 182,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=45 */
%   | else return -0.09132958513722693;  // std dev = 0,215, 41,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.016516660256427562;  // std dev = 0,340, 65,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=9 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.20178949493503825;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.030275042398407313;  // std dev = 2,879, 33,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.009032287426092175;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.03675152655248149;  // std dev = 2,887, 37,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.03779013173884038;  // std dev = 0,375, 198,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=74 */
%   | else return -0.07858244652596594;  // std dev = 0,207, 79,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=4 */
%   else if ( follows(A, E), tweets(A, F) )
%   | then if ( follows(E, G), tweets(G, F) )
%   | | then if ( follows(E, A), follows(G, A) )
%   | | | then return -0.07088647067335868;  // std dev = 1,308, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | | else return 0.10341066555556921;  // std dev = 3,344, 46,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   | | else if ( follows(H, A), tweets(H, F) )
%   | | | then return -0.2696153754254662;  // std dev = 0,881, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.14744949664143298;  // std dev = 1,193, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(A, I), follows(I, A) )
%   | | then return -0.1175280879482467;  // std dev = 0,297, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.06029929612714127;  // std dev = 2,394, 25,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=15 */
%   | | | else return 0.013773082518328322;  // std dev = 3,756, 84,000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */


Results
   AUC ROC   = 0.719939
   AUC PR    = 0.52529
   CLL	      = -0.572956
   Precision = 0.515152 at threshold = 0.5
   Recall    = 0.674603
   F1        = 0.584192


Total learning time: 33.193 seconds
Total inference time: 1.299 seconds
AUC ROC: 0.719939


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:09:44
{'CLL': -0.572956, 'Precision': [0.515152, 0.5], 'Inference time': 1.299, 'Learning time': 33.193, 'AUC ROC': 0.719939, 'F1': 0.584192, 'AUC PR': 0.52529, 'Recall': 0.674603}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(C, F) )
%   | | | then return 0.4184937626857202;  // std dev = 5,346, 116,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=65 */
%   | | | else return 0.7581489350995123;  // std dev = 1,342, 20,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else if ( follows(G, C) )
%   | | | then return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.1418510649004877;  // std dev = 2,11e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then if ( follows(J, A), tweets(H, K) )
%   | | | then return -0.06492798797741081;  // std dev = 1,922, 52,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | | else return 0.13939893509951237;  // std dev = 2,543, 32,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | else if ( follows(H, L), follows(M, A) )
%   | | | then return -0.050941973991396876;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(N, A) )
%   | | then if ( follows(N, P), follows(P, A) )
%   | | | then return -0.10959300038435871;  // std dev = 0,984, 31,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return 0.3429974199479972;  // std dev = 2,871, 33,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | else if ( follows(A, Q) )
%   | | | then return 0.43814893509951125;  // std dev = 3,490, 50,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return 0.1914822684328457;  // std dev = 2,708, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */


Results
   AUC ROC   = 0.683595
   AUC PR    = 0.466397
   CLL	      = -0.66741
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 4.438 seconds
Total inference time: 0.765 seconds
AUC ROC: 0.683595


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:09:49
{'CLL': -0.66741, 'Precision': [nan, 0.5], 'Inference time': 0.765, 'Learning time': 4.438, 'AUC ROC': 0.683595, 'F1': nan, 'AUC PR': 0.466397, 'Recall': 0.0}


Starting fold 2

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 252

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 312

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
0;true,false;recursion_proteinclass(D, B), location(C, G).;false;true
0;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;true,true;recursion_proteinclass(D, B), complex(A, E).;false;false
0;true,false,false;interaction(H, A), interaction(H, D).;false;false
0;false,false;interaction(J, A), recursion_proteinclass(J, B).;false;true
0;true;complex(D, E), interaction(F, A).;true;true
0;false,false,false;interaction(K, A), enzyme(K, L).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,false;interaction(J, A), recursion_proteinclass(J, B).;false;false
1;false,false;interaction(G, A), interaction(G, G).;true;true
1;false;interaction(A, E), interaction(E, E).;true;true
1;false,false,true;enzyme(A, H), complex(G, I).;false;false
1;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
1;true;complex(C, D).;false;false
1;false,true;interaction(E, A).;false;true
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true,false;interaction(A, F), enzyme(F, D).;false;true
2;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
2;false,false,true;enzyme(A, J).;false;false
2;true,false,false;interaction(G, C), interaction(G, G).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;true;true
2;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
2;false,false,false;interaction(A, K), interaction(K, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true,false;interaction(A, E), interaction(E, A).;false;true
3;false;interaction(A, A).;false;true
3;false,false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
3;true,false,false;complex(A, F).;false;false
3;false,false;interaction(A, G), complex(G, H).;true;true
3;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- enzyme(A, C).;true;true
4;false;location(A, G), complex(A, H).;true;true
4;true,true;interaction(E, D), interaction(E, A).;false;true
4;true,true,false;interaction(F, A).;false;false
4;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
4;true;enzyme(D, C), recursion_proteinclass(D, B).;true;false
4;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
4;false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;false,false,false;interaction(N, A), complex(A, P).;false;false
5;false,false;enzyme(A, J), interaction(K, A).;true;true
5;false;interaction(A, F), interaction(F, A).;true;true
5;false,false,true;interaction(A, L), complex(K, M).;false;false
5;false,true,false;enzyme(F, H), enzyme(A, I).;false;false
5;true;enzyme(A, D), phenotype(A, E).;false;false
5;false,true;complex(F, G), complex(A, G).;false;true
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,true,true;interaction(F, H), recursion_proteinclass(H, B).;false;false
6;false,false;interaction(A, A).;false;true
6;false;complex(A, E), interaction(A, F).;true;true
6;false,true,false;interaction(F, I), recursion_proteinclass(I, B).;false;false
6;true;interaction(D, C), interaction(C, D).;false;false
6;false,false,false;enzyme(A, J), complex(A, K).;false;false
6;false,true;interaction(G, A), complex(G, E).;true;true
7;;proteinclass(A, B) :- complex(A, C).;true;true
7;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
7;true,true;interaction(E, A), recursion_proteinclass(E, B).;false;false
7;false,true,true;interaction(A, I), complex(I, J).;false;false
7;false,false;interaction(A, A).;false;true
7;true;complex(D, C), recursion_proteinclass(D, B).;true;false
7;false,false,false;enzyme(A, K).;false;false
7;false,true;location(A, G), enzyme(F, H).;true;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;false,false,false;interaction(L, A), interaction(M, L).;false;false
8;false,false;location(A, J).;true;true
8;false;interaction(F, A), interaction(F, F).;true;true
8;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
8;false,true,false;enzyme(F, H), location(F, I).;false;false
8;true;complex(C, D), interaction(E, A).;false;false
8;false,true;interaction(A, F), phenotype(F, G).;false;true
9;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
9;true,false;interaction(A, C).;false;true
9;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
9;true,true;phenotype(E, D).;false;false
9;true,false,false;interaction(F, C), complex(F, G).;false;false
9;false,false;interaction(A, A).;false;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;false,false,false;phenotype(A, I).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( tweets(D, E), follows(A, F) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.2152917922423695;  // std dev = 3,105, 42,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | else return 0.15814893509951225;  // std dev = 1,449, 10,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.3581489350995123;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.24717449653336157;  // std dev = 2,959, 36,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | else return -0.16221334521702105;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.15048164536050643;  // std dev = 0,094, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.34515913895784645;  // std dev = 2,179, 19,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.14028518779014745;  // std dev = 3,541, 60,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=20 */
%   | else if ( follows(E, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(C, F), follows(F, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.07346374573290121;  // std dev = 1,388, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2849376950009306;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.10083601594959182;  // std dev = 2,913, 42,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.19400299824695516;  // std dev = 0,069, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1190095618292177;  // std dev = 0,006, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.11723599301144334;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.2834933619756897;  // std dev = 1,798, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0.23164119220345306;  // std dev = 1,577, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.09947266410151695;  // std dev = 3,698, 69,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=23 */
%   | else if ( follows(A, E) )
%   | | then return -0.3118280139346758;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0.17398083578726706;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.024911428166739566;  // std dev = 0,412, 52,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.505124592466426;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.3272236196240546;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, A), tweets(F, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.17882484897821121;  // std dev = 1,526, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.1346608532748712;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then return 0.040617710063755516;  // std dev = 2,940, 46,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | else return -0.1327680086413899;  // std dev = 0,046, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(A, G), tweets(G, E) )
%   | | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.2935881268962158;  // std dev = 1,092, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.03240469105309813;  // std dev = 1,049, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03734586611309694;  // std dev = 1,063, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.155616107001033;  // std dev = 1,141, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return -0.00631339017861072;  // std dev = 2,629, 44,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   | | else return 0.12998579095768747;  // std dev = 1,850, 16,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | else return -0.25573419326363456;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), tweets(G, H) )
%   | | then return 0.22880212916878076;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.05523961076097633;  // std dev = 0,418, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then return 0.12136516446134532;  // std dev = 2,757, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else return 0.011339048761813426;  // std dev = 1,027, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(A, F), follows(F, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(G, B) )
%   | | then return -0.03589019796851794;  // std dev = 2,110, 38,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.031375619353039876;  // std dev = 0,423, 60,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=20 */
%   | else if ( follows(C, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(C, E), tweets(E, F) )
%   | | | then return -0.12436225630910883;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 5.218304398891038E-4;  // std dev = 1,266, 10,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.06066818549349605;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.696458
   AUC PR    = 0.458242
   CLL	      = -0.590015
   Precision = 0.421053 at threshold = 0.5
   Recall    = 0.102564
   F1        = 0.164948


Total learning time: 2.03 seconds
Total inference time: 1.372 seconds
AUC ROC: 0.696458


Results scoring model
   AUC ROC   = 0.816
   AUC PR    = 0.655938
   CLL	      = -0.530698
   Precision = 0.833333 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.322581


Total scoring time: 0.898 seconds
Parameter learned model CLL: -0.530698


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true,false': 'recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(D, B), tweets(A, E)', 'true': 'tweets(D, E), follows(A, F)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, I)'}, {'true,false,true': [1.095, 3, 2], 'true,true,true': [3.105, 27, 15], 'false,false,false,true': [1.581, 5, 5], 'true,true,false': [1.449, 7, 3], 'true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 8, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F), follows(F, F)', 'true': 'tweets(C, D)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,false': [0.0, 1, 0], 'false,false,false,true': [0.094, 19, 0], 'true,true': [2.959, 21, 15], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [2.179, 9, 10]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true,false': 'follows(E, A)', 'true,false,false': 'follows(C, F), follows(F, F)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)'}, {'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,true': [3.541, 40, 20], 'false,false': [0.0, 0, 0], 'false,true': [1.0, 2, 2], 'true,false,false,false': [1.388, 8, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true,false': 'follows(E, A), follows(A, E)', 'false': 'follows(A, A)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false,false': 'tweets(A, F)', 'false,false': 'follows(G, A), tweets(G, H)', 'false,false,true': 'follows(I, G), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J)'}, {'true,false,true': [0.069, 5, 0], 'true,false,false,false': [0.0, 1, 0], 'true,false,false,true': [0.006, 4, 0], 'false,false,true,false': [0.0, 0, 0], 'true,true': [2.913, 29, 13], 'false,false,true,true': [1.798, 6, 7], 'false,false,false,true': [1.577, 5, 5], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)'}, {'true,true': [3.698, 46, 23], 'true,false,true': [0.0, 2, 0], 'true,false,false': [1.0, 2, 2], 'false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,false,false': 'follows(A, I), tweets(A, J)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(G, A), tweets(F, H)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.526, 5, 5], 'false,true,true': [0.913, 1, 5], 'true': [0.412, 39, 13], 'false,true,false': [0.009, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.0, 2, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, E), follows(F, A)', 'false,false': 'follows(A, A)', 'false,true,true': 'follows(H, F), recursion_accounttype(H, B)', 'false,true,false': 'follows(I, F), recursion_accounttype(I, B)', 'true': 'follows(C, D), follows(D, C)', 'false,false,false': 'tweets(A, J)', 'false,true': 'follows(A, G), tweets(G, E)'}, {'true,false': [0.046, 6, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [1.049, 3, 2], 'true,true': [2.94, 33, 13], 'false,true,true,true': [1.092, 2, 5], 'false,false,false,true': [1.063, 3, 2], 'false,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false,false,false': [1.141, 3, 3]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true,true': 'follows(A, E), recursion_accounttype(E, B)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, A)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false,true': 'follows(G, A), tweets(G, H)'}, {'true,false': [0.0, 1, 0], 'false,true,true': [1.225, 3, 3], 'false,false,false': [0.418, 5, 3], 'true,true,false': [1.85, 7, 9], 'false,true,false': [0.0, 0, 0], 'true,true,true': [2.629, 34, 10], 'false,false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, F), follows(F, F)', 'false,false': 'recursion_accounttype(G, B)', 'true': 'tweets(C, D), follows(A, E)'}, {'true,true': [2.757, 19, 13], 'true,false': [1.027, 3, 2], 'false,false,true': [2.11, 28, 10], 'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true,false': 'follows(C, A)', 'true,false,false': 'follows(C, E), tweets(E, F)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(G, A), recursion_accounttype(G, B)'}, {'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,true': [0.423, 40, 20], 'false,false': [0.0, 0, 0], 'false,true': [1.0, 2, 2], 'true,false,false,false': [1.266, 7, 3]}]]
[{'': [0.22776238842720795, 0.20061728395061712], 'true,false': [0.24000000000000005, nan], 'false': [nan, 0.20061728395061712], 'true,true': [0.22959183673469336, 0.20999999999999988], 'false,false': [-6.938893903907228e-18, 0.24999999999999983], 'true': [0.22633136094674502, 0.24000000000000005], 'false,false,false': [0.24999999999999983, nan]}, {'': [0.2410109735151282, 0.1866020061388686], 'false': [nan, 0.1866020061388686], 'false,false': [nan, 0.18660200613886868], 'true': [0.24317603615854447, 0.0], 'false,false,false': [0.0004612894802452843, 0.24991282925763608]}, {'': [0.20425705628828952, 0.25000000000000006], 'false': [0.25000000000000006, nan], 'true,false,false': [nan, 0.17504520240016688], 'true': [0.2089207859850833, 0.17504520240016688], 'true,false': [nan, 0.17504520240016688]}, {'': [0.1737759330532554, 0.24942618567667676], 'false,false,false': [0.2487166721119629, nan], 'false': [nan, 0.24942618567667668], 'true': [0.20197984544415518, 0.0019037347033159402], 'true,false,false': [9.436639054146226e-06, 0.0], 'false,false': [0.24880298816354157, 0.2487166721119629], 'false,false,true': [0.24880298816354157, nan], 'true,false': [0.0009607449401010271, 8.052598659538668e-06]}, {'': [0.2004074262267792, nan], 'true,false': [0.0, 0.25], 'true': [0.19816932702553322, 0.2191133863262572]}, {'': [0.16950465721839883, 0.24238803018188748], 'false,false,false': [nan, 0.25], 'false': [0.24657596617917316, 0.23821728450059873], 'false,false': [0.23294692443898546, 0.25], 'false,false,true': [nan, 0.23294692443898546], 'false,true': [0.13888888888888898, 8.108997959493935e-05]}, {'': [0.1692910572648517, 0.21735551077295814], 'false,false,false': [0.22586936418750886, 0.2170619419262604], 'false,true,false': [0.21988383848819293, nan], 'false': [0.20748861496627213, 0.2245333776350156], 'false,true,true': [0.17021122256301263, nan], 'false,false': [nan, 0.2245333776350156], 'true': [0.18785749830639997, 0.00035449756026244283], 'false,true': [0.17021122256301263, 0.21988383848819293]}, {'': [0.17425156726125607, 0.21415757111836603], 'true,true': [0.1570311436088784, 0.21385471802534772], 'false': [0.24999999999999997, 0.17436548611597216], 'false,false': [nan, 0.17436548611597216], 'true': [0.17581702362327362, 0.0], 'false,true': [0.24999999999999997, nan]}, {'': [0.23532931930192935, 0.11713463345965154], 'false': [nan, 0.11713463345965151], 'false,false': [0.11713463345965151, nan], 'true': [0.23751579085083938, 0.21086606689296708]}, {'': [0.17452218445070725, 0.25000000000000006], 'false': [0.25000000000000006, nan], 'true,false,false': [0.0, 0.1603114778688077], 'true': [0.17928704019925049, 0.14702663567603438], 'true,false': [nan, 0.14702663567603436]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
0;false;follows(A, H), recursion_accounttype(H, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, G), recursion_accounttype(G, B).;true;true
1;true;tweets(C, D).;true;true
3;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
3;true,false;follows(E, A), follows(A, E).;true;true
3;true,false,false;tweets(A, F).;true;true
3;true;follows(C, D), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(C, D), follows(A, D).;true;true
4;false;follows(A, E).;true;true
5;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
5;false;follows(D, A), follows(A, D).;true;true
5;false,true;tweets(D, E), tweets(A, E).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;true;follows(C, D), follows(D, C).;true;true
7;;accounttype(A, B) :- tweets(A, C).;true;true
7;true;tweets(D, C), recursion_accounttype(D, B).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;true,false;follows(C, E), tweets(E, F).;true;true
9;true;follows(C, D), recursion_accounttype(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.23314893509951237;  // std dev = 2,372, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return 0.4295775065280837;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(A, I), follows(G, I) )
%   | | | then return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(A, J), recursion_accounttype(J, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.28672036367094084;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.21261636568751283;  // std dev = 0,484, 26,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.32373365448410585;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.29744840516913423;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(I, A), tweets(A, J) )
%   | | then if ( follows(A, K), follows(I, K) )
%   | | | then return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.20437961999570878;  // std dev = 1,089, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.3139249258605565;  // std dev = 1,208, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.17577346836704025;  // std dev = 2,225, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return 0.1281544207479926;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3188437728680282;  // std dev = 0,497, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else return -0.1141434790550199;  // std dev = 0,037, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then if ( follows(A, G), tweets(G, F) )
%   | | then return 0.5458492063460803;  // std dev = 0,904, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.08392507752655254;  // std dev = 1,193, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then return 0.1702973912629414;  // std dev = 1,089, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.26174486272408504;  // std dev = 1,205, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.20906169903896207;  // std dev = 2,626, 28,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=13 */
%   | | | else return -0.15498337968110934;  // std dev = 0,091, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10142968309448266;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return -0.15498940338273637;  // std dev = 0,147, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.10142968309448268;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A), tweets(A, I) )
%   | then if ( follows(A, H), tweets(H, I) )
%   | | then return 0.42290575388538293;  // std dev = 0,903, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.06797038576046792;  // std dev = 1,195, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( tweets(A, J) )
%   | | then return 0.13887529600472584;  // std dev = 1,088, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.21115070958808;  // std dev = 1,202, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, D), follows(A, D) )
%   then if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.10940676920205272;  // std dev = 2,342, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return 0.20720160570092938;  // std dev = 1,316, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else return -0.09299073454014949;  // std dev = 0,028, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.31824803359854154;  // std dev = 0,902, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.32257961849085093;  // std dev = 0,019, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.11128616832565733;  // std dev = 1,088, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.2631664061839674;  // std dev = 1,077, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(A, J) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0.24387777093284724;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3690819194999121;  // std dev = 1,610, 13,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return -0.08063572102308952;  // std dev = 1,746, 17,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else return -0.1366236797267456;  // std dev = 0,103, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.08438864565860298;  // std dev = 0,006, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(F, G), tweets(A, G) )
%   | | then return 0.23985856212219528;  // std dev = 0,903, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.2564789104939156;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.2900798221531067;  // std dev = 0,779, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08298359772701798;  // std dev = 1,294, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.19473371695454023;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.08724233057182877;  // std dev = 2,554, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | | else return -0.1217093604931732;  // std dev = 0,093, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07840029935454303;  // std dev = 0,004, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.0774268388510151;  // std dev = 0,004, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, G) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(G, A), tweets(G, H) )
%   | | | then return 0.18356468500491008;  // std dev = 0,903, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.024569218549647893;  // std dev = 1,127, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.10851532690158944;  // std dev = 1,115, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.15194744383807324;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.06345264431405169;  // std dev = 2,296, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | | else return -0.07288449512408304;  // std dev = 0,018, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.10249897494722324;  // std dev = 1,385, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.05583187225170634;  // std dev = 1,082, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return -0.2177850383256664;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(H, A) )
%   | then return 0.006021080601401686;  // std dev = 0,440, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.10345776020943316;  // std dev = 0,433, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.06753322894133229;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(A, C) )
%   | | | then return 0.3503291374741268;  // std dev = 1,221, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.08242370771312461;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( recursion_accounttype(D, B), follows(D, C) )
%   | | | then return -0.08545671045747083;  // std dev = 0,899, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.21982911978732125;  // std dev = 0,894, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return 0.29244329344059106;  // std dev = 1,217, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return -0.06916924969214962;  // std dev = 0,018, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(F, A) )
%   | | then return 0.011565354121422242;  // std dev = 0,339, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.19808621386229097;  // std dev = 0,763, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.03669089355769517;  // std dev = 1,292, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.044263273025750734;  // std dev = 2,366, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | | | else return -0.09328938932156473;  // std dev = 0,079, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.06426712848425702;  // std dev = 0,013, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.044414688949790365;  // std dev = 1,289, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( follows(C, H), tweets(H, I) )
%   | | then return -0.07555309006843726;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.027198507840798553;  // std dev = 0,822, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.041794668820105296;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.020169236318439254;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.673303
   AUC PR    = 0.453359
   CLL	      = -0.625518
   Precision = 0.516129 at threshold = 0.5
   Recall    = 0.307692
   F1        = 0.385542


Total learning time: 15.785 seconds
Total inference time: 2.441 seconds
AUC ROC: 0.673303


Results scoring model
   AUC ROC   = 0.9052
   AUC PR    = 0.801632
   CLL	      = -0.416058
   Precision = 0.823529 at threshold = 0.5
   Recall    = 0.56
   F1        = 0.666667


Total scoring time: 1.374 seconds
Refined model CLL: -0.416058


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.673303
   AUC PR    = 0.453359
   CLL	      = -0.625518
   Precision = 0.516129 at threshold = 0.5
   Recall    = 0.307692
   F1        = 0.385542


Total learning time: 20.087 seconds
Total inference time: 2.441 seconds
AUC ROC: 0.673303
Total revision time: 20.087
Best scored revision CLL: -0.416058


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:10:14
{'CLL': -0.625518, 'Precision': [0.516129, 0.5], 'Inference time': 2.441, 'Learning time': 20.087, 'AUC ROC': 0.673303, 'F1': 0.385542, 'AUC PR': 0.453359, 'parameter_0.2': {'CLL': -0.590015, 'Precision': [0.421053, 0.5], 'Inference time': 1.372, 'Learning time': 2.03, 'AUC ROC': 0.696458, 'F1': 0.164948, 'AUC PR': 0.458242, 'Recall': 0.102564}, 'Recall': 0.307692}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.23314893509951237;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | else return 0.4295775065280837;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( tweets(A, G), tweets(E, G) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.202334239218108;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | else return 0.36887697659770574;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( tweets(A, G), tweets(E, G) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.1714928196152892;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | else return 0.3027909085849406;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else return -0.11231637819360636;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.19123909051776852;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.47542757614889813;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.14823384994422154;  // std dev = 2,225, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return 0.10061480232517389;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.2393401664098931;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(F, A) )
%   | | then return 0.17810088226934812;  // std dev = 0,388, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else return 0.3910982381448857;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.20613740734453975;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.20613740734453975;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then return 0.11590595027532069;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | else return 0.1843038277162846;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else return -0.09269127618926103;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( follows(E, A) )
%   | then if ( tweets(A, F), tweets(E, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.09809413420128694;  // std dev = 1,244, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.4710252516355675;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.18921528599979623;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.30668715998571133;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.16162857548414666;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.09780124118248718;  // std dev = 2,225, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return 0.0597471680014641;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.13977569193759043;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else return -0.08518475138839683;  // std dev = 1,49e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( tweets(A, F), follows(A, G) )
%   | then if ( follows(G, A), tweets(G, F) )
%   | | then return 0.2204316259338436;  // std dev = 0,851, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(G, H) )
%   | | | then return -0.04754324777339812;  // std dev = 0,743, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return 0.07909031819737009;  // std dev = 1,036, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.21300276597666526;  // std dev = 1,075, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(C, F), follows(F, A) )
%   | | | then return 0.0982747008662368;  // std dev = 2,270, 22,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | | else return 0.04771400826859592;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.03378218470624229;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( tweets(A, H), tweets(G, H) )
%   | | then return 0.1699640754421463;  // std dev = 0,854, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.16131813170654866;  // std dev = 0,014, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.22359539929202218;  // std dev = 0,791, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.06973938154295249;  // std dev = 1,291, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.12090133809708557;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(A, C) )
%   | | | then return 0.42879453386628824;  // std dev = 1,210, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.00875455730119723;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(D, A), tweets(A, E) )
%   | | | then return -0.1994455210052562;  // std dev = 0,952, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.23590834749026135;  // std dev = 0,890, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.29136575055958636;  // std dev = 1,215, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(G, A) )
%   | | then return 0.04202094941251174;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.1681546221066403;  // std dev = 0,791, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.053980713002089696;  // std dev = 1,291, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(A, C) )
%   | | | then return 0.32690875295522676;  // std dev = 1,209, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.006832378836457227;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(D, C), recursion_accounttype(D, B) )
%   | | | then return -0.05778668055796412;  // std dev = 0,904, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.21625463730233757;  // std dev = 0,883, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return 0.22169990485658606;  // std dev = 1,220, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return -0.06842697784420274;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(F, A) )
%   | | then return 0.0345081254509422;  // std dev = 0,313, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.01634582455522173;  // std dev = 1,082, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.11771380773477765;  // std dev = 1,054, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.23464388861863228;  // std dev = 1,405, 12,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return -0.0943468066326284;  // std dev = 0,939, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.17497581336456516;  // std dev = 0,245, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return 0.1670702627823338;  // std dev = 1,221, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return -0.0641918400820262;  // std dev = 6,45e-09, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.028374029378278806;  // std dev = 0,939, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.11420670727170523;  // std dev = 0,783, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.03640956457223606;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.013620356792317101;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.668115
   AUC PR    = 0.469159
   CLL	      = -0.632139
   Precision = 0.5 at threshold = 0.5
   Recall    = 0.525641
   F1        = 0.5125


Total learning time: 9.659 seconds
Total inference time: 1.542 seconds
AUC ROC: 0.668115


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:10:25
{'CLL': -0.632139, 'Precision': [0.5, 0.5], 'Inference time': 1.542, 'Learning time': 9.659, 'AUC ROC': 0.668115, 'F1': 0.5125, 'AUC PR': 0.469159, 'Recall': 0.525641}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.2391013160518933;  // std dev = 2,225, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.4295775065280837;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( tweets(A, H), tweets(F, H) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.618703
   AUC PR    = 0.400511
   CLL	      = -0.700522
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.466 seconds
Total inference time: 0.805 seconds
AUC ROC: 0.618703


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:10:29
{'CLL': -0.700522, 'Precision': [nan, 0.5], 'Inference time': 0.805, 'Learning time': 2.466, 'AUC ROC': 0.618703, 'F1': nan, 'AUC PR': 0.400511, 'Recall': 0.0}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
0;true,false;recursion_proteinclass(D, B), location(C, G).;false;true
0;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;true,true;recursion_proteinclass(D, B), complex(A, E).;false;false
0;true,false,false;interaction(H, A), interaction(H, D).;false;false
0;false,false;interaction(J, A), recursion_proteinclass(J, B).;false;true
0;true;complex(D, E), interaction(F, A).;true;true
0;false,false,false;interaction(K, A), enzyme(K, L).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,false;interaction(J, A), recursion_proteinclass(J, B).;false;false
1;false,false;interaction(G, A), interaction(G, G).;true;true
1;false;interaction(A, E), interaction(E, E).;true;true
1;false,false,true;enzyme(A, H), complex(G, I).;false;false
1;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
1;true;complex(C, D).;false;false
1;false,true;interaction(E, A).;false;true
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true,false;interaction(A, F), enzyme(F, D).;false;true
2;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
2;false,false,true;enzyme(A, J).;false;false
2;true,false,false;interaction(G, C), interaction(G, G).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;true;true
2;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
2;false,false,false;interaction(A, K), interaction(K, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true,false;interaction(A, E), interaction(E, A).;false;true
3;false;interaction(A, A).;false;true
3;false,false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
3;true,false,false;complex(A, F).;false;false
3;false,false;interaction(A, G), complex(G, H).;true;true
3;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- enzyme(A, C).;true;true
4;false;location(A, G), complex(A, H).;true;true
4;true,true;interaction(E, D), interaction(E, A).;false;true
4;true,true,false;interaction(F, A).;false;false
4;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
4;true;enzyme(D, C), recursion_proteinclass(D, B).;true;false
4;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
4;false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;false,false,false;interaction(N, A), complex(A, P).;false;false
5;false,false;enzyme(A, J), interaction(K, A).;true;true
5;false;interaction(A, F), interaction(F, A).;true;true
5;false,false,true;interaction(A, L), complex(K, M).;false;false
5;false,true,false;enzyme(F, H), enzyme(A, I).;false;false
5;true;enzyme(A, D), phenotype(A, E).;false;false
5;false,true;complex(F, G), complex(A, G).;false;true
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,true,true;interaction(F, H), recursion_proteinclass(H, B).;false;false
6;false,false;interaction(A, A).;false;true
6;false;complex(A, E), interaction(A, F).;true;true
6;false,true,false;interaction(F, I), recursion_proteinclass(I, B).;false;false
6;true;interaction(D, C), interaction(C, D).;false;false
6;false,false,false;enzyme(A, J), complex(A, K).;false;false
6;false,true;interaction(G, A), complex(G, E).;true;true
7;;proteinclass(A, B) :- complex(A, C).;true;true
7;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
7;true,true;interaction(E, A), recursion_proteinclass(E, B).;false;false
7;false,true,true;interaction(A, I), complex(I, J).;false;false
7;false,false;interaction(A, A).;false;true
7;true;complex(D, C), recursion_proteinclass(D, B).;true;false
7;false,false,false;enzyme(A, K).;false;false
7;false,true;location(A, G), enzyme(F, H).;true;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;false,false,false;interaction(L, A), interaction(M, L).;false;false
8;false,false;location(A, J).;true;true
8;false;interaction(F, A), interaction(F, F).;true;true
8;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
8;false,true,false;enzyme(F, H), location(F, I).;false;false
8;true;complex(C, D), interaction(E, A).;false;false
8;false,true;interaction(A, F), phenotype(F, G).;false;true
9;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
9;true,false;interaction(A, C).;false;true
9;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
9;true,true;phenotype(E, D).;false;false
9;true,false,false;interaction(F, C), complex(F, G).;false;false
9;false,false;interaction(A, A).;false;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;false,false,false;phenotype(A, I).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(E, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.1763307532813291;  // std dev = 4,885, 110,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=35 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.274815601766179;  // std dev = 1,708, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.23314893509951226;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.3966104735610508;  // std dev = 1,797, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11617247410820102;  // std dev = 0,447, 111,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=31 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.16155271734220183;  // std dev = 1,412, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.35218284570447006;  // std dev = 2,731, 30,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then return 0.14160437491439018;  // std dev = 5,038, 116,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=38 */
%   | else if ( follows(A, F), tweets(F, D) )
%   | | then return -0.1813100676534777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.0159425329135281;  // std dev = 1,264, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), follows(I, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.302862265503382;  // std dev = 2,111, 18,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.178232290354113;  // std dev = 4,372, 81,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=31 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return -0.20328430209041407;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.026457621100761237;  // std dev = 2,912, 49,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=12 */
%   | | | else return 0.10544599810649063;  // std dev = 1,935, 19,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return 0.10467722240507672;  // std dev = 4,561, 96,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=32 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.20761676108951843;  // std dev = 0,037, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.13291353062504938;  // std dev = 1,976, 18,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | else return -0.24909881407984225;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.08220344330512001;  // std dev = 2,609, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.12097952712141216;  // std dev = 3,941, 67,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=25 */
%   | else return 0.1512811232582882;  // std dev = 1,897, 15,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F), tweets(A, G) )
%   | | then return -0.0027925380126176207;  // std dev = 2,238, 30,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | | else return -0.23878637866625946;  // std dev = 0,047, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.17398095416600962;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.09885013120567704;  // std dev = 2,549, 31,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then return 0.10581255703343659;  // std dev = 4,363, 81,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=31 */
%   | else return -0.20693179997034086;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, A) )
%   | | then if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return -0.03676978205215975;  // std dev = 2,281, 37,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.1343144162204823;  // std dev = 1,655, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.04389331246031106;  // std dev = 1,915, 19,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.08099973689146363;  // std dev = 4,370, 82,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=31 */
%   | else return 0.011958101539724035;  // std dev = 3,433, 68,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.010920908943636906;  // std dev = 4,367, 98,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=29 */
%   | else return -0.07408304809725062;  // std dev = 1,250, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(F, B) )
%   | | then return 0.14839725042658017;  // std dev = 3,103, 39,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.03134577837106351;  // std dev = 0,458, 116,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=38 */
%   | else if ( follows(A, C) )
%   | | then return -0.17159639446838176;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1486101468578449;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.1486101468578449;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.06141334434529155;  // std dev = 1,252, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.12085752830821749;  // std dev = 0,498, 18,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */


Results
   AUC ROC   = 0.721287
   AUC PR    = 0.493531
   CLL	      = -0.588587
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.718 seconds
Total inference time: 1.333 seconds
AUC ROC: 0.721287


Results scoring model
   AUC ROC   = 0.6791
   AUC PR    = 0.46014
   CLL	      = -0.591971
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.858 seconds
Parameter learned model CLL: -0.591971


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, D)', 'true,false': 'recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(D, B)', 'true': 'follows(E, A)', 'true,false,false': 'follows(F, A), follows(F, D)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(I, A), tweets(I, J)'}, {'true,false,true': [1.708, 7, 5], 'true,false,false,false': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true,true': [4.885, 75, 35], 'true,true,false': [0.0, 1, 0], 'false,false,true': [1.369, 5, 3], 'false,true': [0.0, 5, 0], 'false,false,false,false': [1.797, 6, 7]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false,false,false': 'follows(F, A), recursion_accounttype(F, B)'}, {'true': [0.447, 80, 31], 'false,false,false,true': [1.412, 6, 3], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [2.731, 14, 16]}], ['accounttype(A, B)', {'': 'follows(C, A), tweets(C, D)', 'true,false': 'follows(A, F), tweets(F, D)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'true': 'follows(E, C), recursion_accounttype(E, B)', 'false,false,false': 'follows(A, I), follows(I, I)'}, {'true,false,true': [0.0, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true': [5.038, 78, 38], 'true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [1.264, 11, 2], 'false,false,false,false': [2.111, 8, 10]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true,false': 'follows(A, E), follows(E, A)', 'false': 'follows(A, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true,false,true': [0.0, 1, 0], 'true,true': [4.372, 50, 31], 'false,false,true,false': [1.935, 12, 7], 'false,false,false': [0.0, 0, 0], 'true,false,false': [0.0, 0, 0], 'false,false,true,true': [2.912, 37, 12], 'false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true,true': 'follows(E, D), follows(E, A)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'true,true,false': 'follows(F, A)', 'false': 'recursion_accounttype(G, B)'}, {'true,true,false,true': [0.037, 2, 0], 'true,false': [0.0, 1, 0], 'true,true,false,false': [1.976, 11, 7], 'false,false': [0.0, 0, 0], 'true,true,true': [4.561, 64, 32], 'false,true': [2.609, 22, 11]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, E), follows(E, A)', 'false,false,false': 'follows(K, A)', 'true': 'tweets(A, D)', 'false,false': 'tweets(A, H), follows(I, A)', 'false,false,true': 'follows(A, J)', 'false,true': 'tweets(E, F), tweets(A, G)'}, {'true,false': [1.897, 9, 6], 'true,true': [3.941, 42, 25], 'false,true,false': [0.047, 5, 0], 'false,false,true,false': [0.0, 0, 0], 'false,true,true': [2.238, 23, 7], 'false,false,true,true': [0.0, 2, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.549, 19, 12]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, E)', 'false,true,true': 'follows(E, G), recursion_accounttype(G, B)', 'false,true,false': 'follows(E, H), recursion_accounttype(H, B)', 'true': 'follows(D, C), follows(C, D)', 'false,true': 'follows(F, A)'}, {'true,false': [0.0, 1, 0], 'false,true,true,false': [0.0, 0, 0], 'false,true,false,true': [1.655, 7, 5], 'true,true': [4.363, 50, 31], 'false,true,true,true': [2.281, 30, 7], 'false,false': [0.0, 0, 0], 'false,true,false,false': [1.915, 12, 7]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, A), recursion_accounttype(D, B)'}, {'true,true': [4.37, 51, 31], 'true,false': [3.433, 49, 19], 'false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'recursion_accounttype(F, B)', 'true': 'follows(D, A)'}, {'true,true': [4.367, 69, 29], 'true,false': [1.25, 11, 2], 'false,false,true': [3.103, 20, 19], 'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true,false': 'follows(A, C)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'true,false,false': 'follows(E, C)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)'}, {'true,false,true': [0.0, 1, 0], 'true,true': [0.458, 78, 38], 'true,false,false,true': [0.0, 1, 0], 'false,false,false': [0.498, 8, 10], 'false,false,true': [0.0, 0, 0], 'false,true': [1.252, 11, 2], 'true,false,false,false': [0.0, 1, 0]}]]
[{'': [0.21852237252861728, 0.2366863905325444], 'false,false,false': [nan, 0.24852071005917156], 'true,false,false': [nan, 0.0], 'false': [-2.7755575615628915e-18, 0.24943310657596363], 'true,true': [0.216942148760332, 0.0], 'false,false': [0.2343749999999999, 0.24852071005917156], 'true': [0.21589156724292, 0.2366863905325442], 'true,false': [0.24305555555555536, 0.0]}, {'': [0.19999527291769076, 0.24887122678414528], 'false': [nan, 0.24887122678414528], 'false,false': [nan, 0.24887122678414547], 'false,false,false': [0.22163839354545353, 0.24865495848511882]}, {'': [0.21582973002308406, 0.22000673944317117], 'false,false,false': [nan, 0.24757679398751536], 'false': [0.12281807612491491, 0.24757679398751536], 'false,false': [nan, 0.24757679398751536], 'true': [0.2187827837079622, 0.0], 'true,false': [0.0, nan]}, {'': [0.2348301436549312, 0.18102368847815983], 'true,false': [0.0, nan], 'false': [nan, 0.1810236884781603], 'false,false,true': [0.17303185022888518, 0.19713835073823938], 'false,false': [0.1810236884781603, nan], 'true': [0.23595422134908287, 0.0]}, {'': [0.21403279255451182, 0.20623511842244951], 'true,true': [0.21668850608749254, 0.2057897448673887], 'true': [0.21481423704135713, 0.0], 'true,true,false': [0.0006791717488977417, 0.21698372058970014], 'false': [0.20623511842244951, nan]}, {'': [0.23347791175227683, 0.17834136087602848], 'false,false,false': [nan, 0.2096224434544496], 'false': [0.1499788777224923, 0.2011559608125782], 'false,false,true': [0.0, nan], 'false,false': [0.0, 0.20962244345444953], 'true': [0.23184978175468227, 0.2399999999999999], 'false,true': [0.1669440712679138, 0.0004507797415721493]}, {'': [0.2333305933548307, 0.17495170552420275], 'false,true,true': [0.14060314368016474, nan], 'false': [0.1749517055242028, nan], 'false,true,false': [0.22830888418991382, 0.1930999368061983], 'true': [0.23501842488076294, 0.0], 'false,true': [0.14060314368016474, 0.20866898046481389]}, {'': [0.20707303340976208, nan], 'true': [0.2329045981539281, 0.17331738341733108]}, {'': [0.18667982891999593, 0.24692927616226087], 'false': [nan, 0.24692927616226093], 'false,false': [0.24692927616226087, nan], 'true': [0.19464129655556994, 0.12028318860423957]}, {'': [0.20519021826394263, 0.20253105561145116], 'true,false': [0.0, 0.0], 'false': [0.12062662191314698, 0.24775216988068896], 'true,false,false': [0.0, 0.0], 'false,false': [nan, 0.24775216988068896], 'true': [0.20960641725693907, 0.00011741501760286858]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, D).;true;true
0;true,true;recursion_accounttype(D, B).;true;true
0;true;follows(E, A).;true;true
0;true,false;recursion_accounttype(D, B).;true;true
0;false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(C, A), tweets(C, D).;true;true
2;true;follows(E, C), recursion_accounttype(E, B).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- tweets(A, C).;true;true
4;true,true;follows(E, D), follows(E, A).;true;true
4;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;true,true,false;follows(F, A).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, E), follows(E, A).;true;true
5;false,false;tweets(A, H), follows(I, A).;true;true
5;false,true;tweets(E, F), tweets(A, G).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;true;follows(D, C), follows(C, D).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(E, C).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(E, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.1763307532813291;  // std dev = 0,466, 110,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=35 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1438632208137979;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1,247, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.23314893509951226;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.626967209001619;  // std dev = 1,990, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | | else return 0.05481273745690345;  // std dev = 2,650, 41,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | else return -0.15488575288088355;  // std dev = 0,034, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.08692669036458205;  // std dev = 0,257, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.16155271734220183;  // std dev = 0,471, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), tweets(H, G) )
%   | | | then return 0.5853005423349523;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.2587620559572571;  // std dev = 1,565, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.06404736295600061;  // std dev = 0,842, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.3656387206321666;  // std dev = 1,215, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.19340988174274845;  // std dev = 4,118, 78,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=31 */
%   | | | else return -0.1357148380748535;  // std dev = 0,030, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.10763189050978693;  // std dev = 0,977, 22,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | | else return 0.26283261198667196;  // std dev = 1,650, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | else return -0.15308643596433238;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return 0.020018766647977245;  // std dev = 0,355, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.361077137020833;  // std dev = 1,090, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.25579753669230104;  // std dev = 1,123, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.30079034998039766;  // std dev = 1,193, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, A) )
%   | | | then return 0.1713406650853745;  // std dev = 3,823, 69,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=28 */
%   | | | else return -0.17987626087401698;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.10506495920409813;  // std dev = 0,471, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else return -0.17987626087401698;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.05908219938496997;  // std dev = 0,267, 38,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(I, A) )
%   | | | then return 0.43471724316226634;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.16009166031818686;  // std dev = 1,531, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -1.6561083062885396E-4;  // std dev = 0,827, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.23898096444697345;  // std dev = 1,177, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1229734485580042;  // std dev = 3,685, 65,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=25 */
%   | | | else return 0.015828697578841942;  // std dev = 1,893, 31,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.1718400384557565;  // std dev = 0,083, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.15278150356513154;  // std dev = 1,872, 18,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | else return -0.28049997636854596;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(I, A) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.6529318250474061;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09552005197776856;  // std dev = 0,928, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.10258773925059904;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.02324464114476828;  // std dev = 0,364, 18,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(D, A) )
%   | | | then return 0.36868264562104386;  // std dev = 2,050, 25,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=19 */
%   | | | else return -0.03046481520022209;  // std dev = 2,643, 43,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
%   | | else return -0.14722425651402588;  // std dev = 0,062, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.062438976924476;  // std dev = 0,471, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G), tweets(A, H) )
%   | | then return 0.014923639160495116;  // std dev = 0,346, 30,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | | else return -0.16868688082754138;  // std dev = 0,091, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then return -0.12932548217092343;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.010808483861855057;  // std dev = 1,271, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.18453008415898065;  // std dev = 1,939, 18,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, A) )
%   | | | then return 0.08092758149299308;  // std dev = 3,248, 55,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=22 */
%   | | | else return -0.20264518379493648;  // std dev = 0,086, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.08660546904541332;  // std dev = 1,460, 15,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.09032953594122198;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return -0.15170210228173747;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return -0.05732648620401078;  // std dev = 0,264, 38,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then if ( follows(A, K), follows(J, K) )
%   | | | then return 0.26629323196483073;  // std dev = 1,080, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.12514282263916587;  // std dev = 0,914, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.10837404586030533;  // std dev = 0,443, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.28455360724202117;  // std dev = 1,948, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | | else return -0.037314571852256236;  // std dev = 2,649, 41,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | else return -0.13348448065330468;  // std dev = 0,053, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.060043990413586865;  // std dev = 0,253, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.03753039349986202;  // std dev = 0,466, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), tweets(H, G) )
%   | | | then return 0.2741258428387425;  // std dev = 1,218, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.038431124855079775;  // std dev = 1,469, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.03133415638505453;  // std dev = 0,791, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.11050080357671983;  // std dev = 1,156, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then return 0.06017587957980581;  // std dev = 0,425, 65,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=28 */
%   | | else return -0.11886716872040454;  // std dev = 0,048, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.05335221456135984;  // std dev = 0,253, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G), tweets(F, G) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.013851817027256241;  // std dev = 1,572, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.2935230329318424;  // std dev = 0,894, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.2549950817487694;  // std dev = 0,122, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.17284879175468562;  // std dev = 1,081, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.06299894449950096;  // std dev = 1,084, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.08375656627547746;  // std dev = 1,154, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.02889151799754197;  // std dev = 0,411, 82,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=31 */
%   | | else return -0.03419260929946756;  // std dev = 0,288, 34,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=7 */
%   | else return -0.10367401296434871;  // std dev = 0,006, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.3568364780681095;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return -0.12841725807390747;  // std dev = 0,036, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1308864031930779;  // std dev = 1,081, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.10667033767024219;  // std dev = 0,013, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.04792890088391971;  // std dev = 1,083, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.06344121206549293;  // std dev = 1,153, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */


Results
   AUC ROC   = 0.714209
   AUC PR    = 0.545354
   CLL	      = -0.579033
   Precision = 0.553191 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.416


Total learning time: 12.096 seconds
Total inference time: 1.815 seconds
AUC ROC: 0.714209


Results scoring model
   AUC ROC   = 0.8585
   AUC PR    = 0.76924
   CLL	      = -0.458303
   Precision = 0.772727 at threshold = 0.5
   Recall    = 0.68
   F1        = 0.723404


Total scoring time: 1.109 seconds
Refined model CLL: -0.458303


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.714209
   AUC PR    = 0.545354
   CLL	      = -0.579033
   Precision = 0.553191 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.416


Total learning time: 15.781 seconds
Total inference time: 1.815 seconds
AUC ROC: 0.714209
Total revision time: 15.781
Best scored revision CLL: -0.458303


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:10:49
{'CLL': -0.579033, 'Precision': [0.553191, 0.5], 'Inference time': 1.815, 'Learning time': 15.781, 'parameter_0.4': {'CLL': -0.588587, 'Precision': [nan, 0.5], 'Inference time': 1.333, 'Learning time': 1.718, 'AUC ROC': 0.721287, 'F1': nan, 'AUC PR': 0.493531, 'Recall': 0.0}, 'AUC ROC': 0.714209, 'F1': 0.416, 'AUC PR': 0.545354, 'Recall': 0.333333}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.6498156017661788;  // std dev = 1,990, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | | else return 0.07766113022146359;  // std dev = 2,650, 41,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07042249347191633;  // std dev = 0,258, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.19148226843284558;  // std dev = 0,471, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), follows(H, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.3126943896449669;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.4295775065280837;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.551211263094493;  // std dev = 1,990, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | | else return 0.06794204742591953;  // std dev = 2,650, 41,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.062064272658592184;  // std dev = 0,258, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.16653882456488167;  // std dev = 0,471, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), tweets(H, G) )
%   | | | then return 0.5170719622367218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.27021896952830904;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.36887697659770574;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then return 0.19859958339101752;  // std dev = 0,450, 65,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=28 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.05504701669119268;  // std dev = 0,258, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G), tweets(F, G) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.14581755373685482;  // std dev = 1,581, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.4959057862159933;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.19839858039797137;  // std dev = 0,060, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.395591224880662;  // std dev = 1,086, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.27155044599519546;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.3027909085849406;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then return 0.1633401239615572;  // std dev = 0,446, 65,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=28 */
%   | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.049089449304182894;  // std dev = 0,258, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G), tweets(F, G) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.12047053460631316;  // std dev = 1,581, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.3779328099901726;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.1688678021506586;  // std dev = 0,053, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.3242696052640105;  // std dev = 1,085, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.22021658531217972;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.2393401664098931;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then return 0.1320408208596089;  // std dev = 0,444, 65,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=28 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.04398245185610451;  // std dev = 0,258, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G), tweets(F, G) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.09809100438758454;  // std dev = 1,581, 11,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.28373213784992807;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.14657228063689146;  // std dev = 0,047, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.2556077475159327;  // std dev = 1,084, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.17377735398571437;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.1843038277162846;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.31789073285510727;  // std dev = 1,990, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | | else return -0.019079455449508374;  // std dev = 2,650, 41,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.03956761470708773;  // std dev = 0,258, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( tweets(A, G), tweets(F, G) )
%   | | then return 0.13217379209602065;  // std dev = 0,412, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return -0.12924005543021674;  // std dev = 0,042, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.1963290026405038;  // std dev = 1,083, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1373376796610724;  // std dev = 1,793, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.12103950180410943;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, D) )
%   then if ( follows(A, C), recursion_accounttype(C, B) )
%   | then if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.12734206441994345;  // std dev = 0,415, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | | else return 0.009296328184129414;  // std dev = 0,408, 36,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | else return -0.037739597589339376;  // std dev = 0,258, 41,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then return 0.39284851013615807;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return -0.1071514898638419;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1487198645931888;  // std dev = 1,083, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.1071514898638419;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.10409967314448623;  // std dev = 1,793, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.09743259410614133;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( tweets(A, D), follows(C, E) )
%   | | | then return -0.009611040511108504;  // std dev = 2,724, 45,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | | | else return 0.17663986690666533;  // std dev = 1,622, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | | else if ( follows(A, F), follows(C, F) )
%   | | | then return 0.323680307385218;  // std dev = 0,722, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05252228373533843;  // std dev = 0,831, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.035435954537589284;  // std dev = 0,250, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   else if ( follows(G, A), follows(A, G) )
%   | then return 0.04201136298360346;  // std dev = 0,358, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.11201029976196812;  // std dev = 1,083, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07723515849674491;  // std dev = 1,837, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.07984609140553925;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, D) )
%   then if ( follows(C, D), follows(D, E) )
%   | then if ( tweets(C, F), tweets(D, G) )
%   | | then return 0.009846685753921072;  // std dev = 0,357, 97,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=30 */
%   | | else return 0.43208877691330305;  // std dev = 0,685, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.11586439916411621;  // std dev = 0,281, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( follows(A, I), follows(I, H) )
%   | | then return 0.35355508671656444;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( recursion_accounttype(H, B) )
%   | | | then return -0.0942544187159232;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0842566059169085;  // std dev = 1,083, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.0942544187159232;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, K), tweets(A, L) )
%   | | | then return 0.057955768808524814;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.0605276522587397;  // std dev = 1,895, 15,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.17601681235275463;  // std dev = 1,810, 21,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.04765940467269476;  // std dev = 2,478, 41,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | else return 0.1321169092043855;  // std dev = 0,401, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else return -0.0366793795784877;  // std dev = 0,243, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.011177839277410166;  // std dev = 0,468, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( follows(H, A), tweets(H, F) )
%   | | | then return 0.15690878106190204;  // std dev = 1,158, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.025460029598658725;  // std dev = 1,493, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.03600858769840361;  // std dev = 0,716, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.04477873007681426;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */


Results
   AUC ROC   = 0.707881
   AUC PR    = 0.488782
   CLL	      = -0.592064
   Precision = 0.495935 at threshold = 0.5
   Recall    = 0.391026
   F1        = 0.437276


Total learning time: 18.998 seconds
Total inference time: 1.337 seconds
AUC ROC: 0.707881


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:11:09
{'CLL': -0.592064, 'Precision': [0.495935, 0.5], 'Inference time': 1.337, 'Learning time': 18.998, 'AUC ROC': 0.707881, 'F1': 0.437276, 'AUC PR': 0.488782, 'Recall': 0.391026}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(E, C) )
%   | | | then return 0.6498156017661788;  // std dev = 1,990, 24,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | | else return 0.07766113022146359;  // std dev = 2,650, 41,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(C, F), follows(F, C) )
%   | | | then return -0.08302753548872309;  // std dev = 0,970, 17,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.19148226843284558;  // std dev = 0,471, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( tweets(A, J) )
%   | | then if ( tweets(K, J), follows(K, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.3126943896449669;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( follows(A, L), follows(L, M) )
%   | | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.4295775065280837;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */


Results
   AUC ROC   = 0.637543
   AUC PR    = 0.459825
   CLL	      = -0.699471
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.632 seconds
Total inference time: 0.85 seconds
AUC ROC: 0.637543


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:11:14
{'CLL': -0.699471, 'Precision': [nan, 0.5], 'Inference time': 0.85, 'Learning time': 3.632, 'AUC ROC': 0.637543, 'F1': nan, 'AUC PR': 0.459825, 'Recall': 0.0}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
0;true,false;recursion_proteinclass(D, B), location(C, G).;false;true
0;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;true,true;recursion_proteinclass(D, B), complex(A, E).;false;false
0;true,false,false;interaction(H, A), interaction(H, D).;false;false
0;false,false;interaction(J, A), recursion_proteinclass(J, B).;false;true
0;true;complex(D, E), interaction(F, A).;true;true
0;false,false,false;interaction(K, A), enzyme(K, L).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,false;interaction(J, A), recursion_proteinclass(J, B).;false;false
1;false,false;interaction(G, A), interaction(G, G).;true;true
1;false;interaction(A, E), interaction(E, E).;true;true
1;false,false,true;enzyme(A, H), complex(G, I).;false;false
1;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
1;true;complex(C, D).;false;false
1;false,true;interaction(E, A).;false;true
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true,false;interaction(A, F), enzyme(F, D).;false;true
2;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
2;false,false,true;enzyme(A, J).;false;false
2;true,false,false;interaction(G, C), interaction(G, G).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;true;true
2;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
2;false,false,false;interaction(A, K), interaction(K, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true,false;interaction(A, E), interaction(E, A).;false;true
3;false;interaction(A, A).;false;true
3;false,false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
3;true,false,false;complex(A, F).;false;false
3;false,false;interaction(A, G), complex(G, H).;true;true
3;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- enzyme(A, C).;true;true
4;false;location(A, G), complex(A, H).;true;true
4;true,true;interaction(E, D), interaction(E, A).;false;true
4;true,true,false;interaction(F, A).;false;false
4;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
4;true;enzyme(D, C), recursion_proteinclass(D, B).;true;false
4;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
4;false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;false,false,false;interaction(N, A), complex(A, P).;false;false
5;false,false;enzyme(A, J), interaction(K, A).;true;true
5;false;interaction(A, F), interaction(F, A).;true;true
5;false,false,true;interaction(A, L), complex(K, M).;false;false
5;false,true,false;enzyme(F, H), enzyme(A, I).;false;false
5;true;enzyme(A, D), phenotype(A, E).;false;false
5;false,true;complex(F, G), complex(A, G).;false;true
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,true,true;interaction(F, H), recursion_proteinclass(H, B).;false;false
6;false,false;interaction(A, A).;false;true
6;false;complex(A, E), interaction(A, F).;true;true
6;false,true,false;interaction(F, I), recursion_proteinclass(I, B).;false;false
6;true;interaction(D, C), interaction(C, D).;false;false
6;false,false,false;enzyme(A, J), complex(A, K).;false;false
6;false,true;interaction(G, A), complex(G, E).;true;true
7;;proteinclass(A, B) :- complex(A, C).;true;true
7;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
7;true,true;interaction(E, A), recursion_proteinclass(E, B).;false;false
7;false,true,true;interaction(A, I), complex(I, J).;false;false
7;false,false;interaction(A, A).;false;true
7;true;complex(D, C), recursion_proteinclass(D, B).;true;false
7;false,false,false;enzyme(A, K).;false;false
7;false,true;location(A, G), enzyme(F, H).;true;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;false,false,false;interaction(L, A), interaction(M, L).;false;false
8;false,false;location(A, J).;true;true
8;false;interaction(F, A), interaction(F, F).;true;true
8;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
8;false,true,false;enzyme(F, H), location(F, I).;false;false
8;true;complex(C, D), interaction(E, A).;false;false
8;false,true;interaction(A, F), phenotype(F, G).;false;true
9;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
9;true,false;interaction(A, C).;false;true
9;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
9;true,true;phenotype(E, D).;false;false
9;true,false,false;interaction(F, C), complex(F, G).;false;false
9;false,false;interaction(A, A).;false;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;false,false,false;phenotype(A, I).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(E, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.18530942892667374;  // std dev = 5,972, 162,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=53 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.2265699877310913;  // std dev = 2,103, 19,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.016851064900487787;  // std dev = 0,935, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.35814893509951234;  // std dev = 1,732, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.32873717039363;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.10968322170140395;  // std dev = 0,445, 157,000 (wgt'ed) examples reached here.  /* #neg=114 #pos=43 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2409297724565629;  // std dev = 1,840, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.3192609420505243;  // std dev = 3,627, 53,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then return 0.14455271183272078;  // std dev = 6,166, 174,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=58 */
%   | else if ( follows(A, F), tweets(F, D) )
%   | | then return -0.034013622005943746;  // std dev = 0,921, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.05046391729814694;  // std dev = 1,748, 18,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), follows(I, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2276955720519838;  // std dev = 2,541, 26,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16225654065056289;  // std dev = 5,121, 113,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=42 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return -0.20416642170742982;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.82332235819694;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.06484757213934227;  // std dev = 3,971, 81,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=23 */
%   | | | else return 0.0861207992316354;  // std dev = 2,362, 28,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.1857240397941781;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return 0.10619667995461485;  // std dev = 5,600, 144,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=49 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.201012194574403;  // std dev = 0,046, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0859105672133234;  // std dev = 2,279, 24,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | else return -0.24208131794936322;  // std dev = 0,015, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.11426383049120399;  // std dev = 3,331, 51,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.11460945018902237;  // std dev = 4,708, 97,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=36 */
%   | else return 0.136126673339597;  // std dev = 2,068, 18,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F), tweets(A, G) )
%   | | then return 0.030309072826418072;  // std dev = 2,982, 47,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | else return -0.012276987987272602;  // std dev = 1,459, 13,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.20895539372698374;  // std dev = 0,027, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.1739963643085791;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(K, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.09390772386912517;  // std dev = 3,112, 44,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then return 0.09297959490618217;  // std dev = 5,105, 113,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=42 */
%   | else return 0.20718745114522405;  // std dev = 0,586, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, A) )
%   | | then if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.011143997101223125;  // std dev = 3,331, 62,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=16 */
%   | | | else return -0.18174796932430728;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.0934118868865507;  // std dev = 2,084, 19,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | | else return 0.06158474855899382;  // std dev = 2,306, 25,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return -0.1503880023532692;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.07554826980919943;  // std dev = 5,138, 115,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=43 */
%   | else return 0.024557389893372913;  // std dev = 4,571, 110,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=32 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return -0.007590767255104006;  // std dev = 5,152, 140,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=39 */
%   | else return -0.017360549513764353;  // std dev = 1,745, 18,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(F, B) )
%   | | then return 0.14949835508198905;  // std dev = 4,081, 68,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=32 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.03523494782853697;  // std dev = 0,459, 174,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=58 */
%   | else if ( follows(A, C) )
%   | | then return -0.19485621991798466;  // std dev = 0,022, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.17525654633017704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.06806792717474942;  // std dev = 0,596, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.0035947722505562368;  // std dev = 1,736, 17,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.06979696950057349;  // std dev = 0,498, 26,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */


Results
   AUC ROC   = 0.713963
   AUC PR    = 0.485769
   CLL	      = -0.594127
   Precision = 0.5 at threshold = 0.5
   Recall    = 0.00641
   F1        = 0.012658


Total learning time: 2.066 seconds
Total inference time: 1.285 seconds
AUC ROC: 0.713963


Results scoring model
   AUC ROC   = 0.702561
   AUC PR    = 0.490661
   CLL	      = -0.601228
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.854 seconds
Parameter learned model CLL: -0.601228


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, D)', 'true,false': 'recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(D, B)', 'true': 'follows(E, A)', 'true,false,false': 'follows(F, A), follows(F, D)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(I, A), tweets(I, J)'}, {'true,false,true': [2.103, 12, 7], 'true,false,false,false': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'true,true,true': [5.972, 109, 53], 'true,true,false': [0.0, 4, 0], 'false,false,true': [1.732, 6, 6], 'false,true': [0.935, 7, 1], 'false,false,false,false': [2.058, 9, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false,false,false': 'follows(F, A), recursion_accounttype(F, B)'}, {'true': [0.445, 114, 43], 'false,false,false,true': [1.84, 8, 6], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [3.627, 27, 26]}], ['accounttype(A, B)', {'': 'follows(C, A), tweets(C, D)', 'true,false': 'follows(A, F), tweets(F, D)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'true': 'follows(E, C), recursion_accounttype(E, B)', 'false,false,false': 'follows(A, I), follows(I, I)'}, {'true,false,true': [0.921, 6, 1], 'false,false,false,true': [0.0, 0, 0], 'true,true': [6.166, 116, 58], 'true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [1.748, 14, 4], 'false,false,false,false': [2.541, 14, 12]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true,false': 'follows(A, E), follows(E, A)', 'false': 'follows(A, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), tweets(H, I)'}, {'true,false,true': [0.0, 1, 0], 'false,false,true,false': [2.362, 19, 9], 'true,true': [5.121, 71, 42], 'true,false,false': [0.0, 0, 1], 'false,false,true,true': [3.971, 58, 23], 'false,false,false,true': [0.0, 2, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true,true': 'follows(E, D), follows(E, A)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'true,true,false': 'follows(F, A)', 'false': 'recursion_accounttype(G, B)'}, {'true,true,false,true': [0.046, 4, 0], 'true,false': [0.015, 2, 0], 'true,true,false,false': [2.279, 16, 8], 'false,false': [0.0, 0, 0], 'true,true,true': [5.6, 95, 49], 'false,true': [3.331, 33, 18]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, E), follows(E, A)', 'false,false,false': 'follows(K, A)', 'true': 'tweets(A, D)', 'false,false': 'tweets(A, H), follows(I, A)', 'false,false,true': 'follows(A, J)', 'false,true': 'tweets(E, F), tweets(A, G)'}, {'true,false': [2.068, 11, 7], 'true,true': [4.708, 61, 36], 'false,true,false': [1.459, 10, 3], 'false,false,true,false': [0.0, 2, 0], 'false,true,true': [2.982, 34, 13], 'false,false,true,true': [0.027, 5, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.112, 28, 16]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, A)', 'false,true,true': 'follows(E, G), recursion_accounttype(G, B)', 'false,true,false': 'follows(E, H), recursion_accounttype(H, B)', 'true': 'follows(D, C), follows(C, D)', 'false,false,false': 'tweets(A, I)', 'false,true': 'follows(F, A)'}, {'true,false': [0.586, 1, 1], 'false,true,true,false': [0.013, 3, 0], 'false,true,false,true': [2.084, 12, 7], 'true,true': [5.105, 71, 42], 'false,true,true,true': [3.331, 46, 16], 'false,false,false,true': [0.0, 2, 0], 'false,false,true': [0.0, 0, 0], 'false,true,false,false': [2.306, 16, 9], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, A), recursion_accounttype(D, B)'}, {'true,true': [5.138, 72, 43], 'true,false': [4.571, 78, 32], 'false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'recursion_accounttype(F, B)', 'true': 'follows(D, A)'}, {'true,true': [5.152, 101, 39], 'true,false': [1.745, 14, 4], 'false,false,true': [4.081, 36, 32], 'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true,false': 'follows(A, C)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'true,false,false': 'follows(E, C)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)'}, {'true,false,true': [0.022, 3, 0], 'true,true': [0.459, 116, 58], 'true,false,false,true': [0.0, 1, 0], 'false,false,false': [0.498, 14, 12], 'false,false,true': [0.0, 0, 0], 'false,true': [1.736, 13, 4], 'true,false,false,false': [0.596, 2, 1]}]]
[{'': [0.2185223725286163, 0.23668639053254445], 'false,false,false': [0.0, 0.24913494809688583], 'true,false,false': [nan, 0.0], 'false': [0.10937500000000004, 0.24765868886576484], 'true,true': [0.22012650510592946, 0.0], 'false,false': [0.25, 0.24376731301939056], 'true': [0.21733923646392853, 0.2275000000000001], 'true,false': [0.23268698060941836, 0.0]}, {'': [0.19809787828519215, 0.247915079930088], 'false': [nan, 0.247915079930088], 'false,false': [nan, 0.24791507993008735], 'false,false,false': [0.2418760002649988, 0.2482282068817699]}, {'': [0.21589499664610934, 0.22383654256138827], 'false,false,false': [nan, 0.24838049631622086], 'false': [0.1698230843333287, 0.24838049631622086], 'false,false': [nan, 0.24838049631622086], 'true': [0.21847411260493438, 0.12113276496151497], 'true,false': [0.12113276496151497, nan]}, {'': [0.23298104114572027, 0.1935592711737475], 'true,false': [0.0, 0.0], 'false': [nan, 0.19355927117374833], 'false,false,true': [0.1946490654119982, 0.19929791414306744], 'false,false': [0.19592965375980056, 0.0], 'true': [0.23205575962139635, 0.2639332982073426], 'false,false,false': [0.0, nan]}, {'': [0.21352953504114655, 0.2175609166215074], 'false': [0.2175609166215074, nan], 'true,true': [0.21778539357610388, 0.19566244275855396], 'true': [0.21469570179255573, 0.00010578940820861471], 'true,true,false': [0.0005346658756186506, 0.21642307158686747]}, {'': [0.23000324897510802, 0.19169604514998093], 'false,false,false': [nan, 0.2201291463861601], 'false': [0.1840453933483227, 0.20012139071512913], 'false,false,true': [0.00014897106445670437, 0.0], 'false,false': [0.00035582295172966106, 0.22012914638616035], 'true': [0.22851099427644397, 0.2376543209876542], 'false,true': [0.18923964946742078, 0.1638455278360587]}, {'': [0.22979335757548824, 0.18989831650845543], 'false,true,true': [0.1789880532580052, 5.882517247798406e-05], 'false,false': [nan, 0.0], 'false': [0.1927849924449011, 0.0], 'false,true,false': [0.2284931673673877, 0.21268776138620982], 'true': [0.23059905845980663, 0.17145466552263722], 'false,false,false': [0.0, nan], 'false,true': [0.17236778351023302, 0.2197613557038608]}, {'': [0.21083669427087476, nan], 'true': [0.22951271086372776, 0.18998284325076853]}, {'': [0.18725755116040987, 0.244892257945699], 'false': [nan, 0.2448922579456989], 'false,false': [0.24489225794569894, nan], 'true': [0.18956018004347938, 0.16926364065413071]}, {'': [0.205938542131935, 0.22123306586707853], 'true,false': [0.00015672924747181052, 0.09991147399838382], 'false': [0.17721773166761604, 0.24788283652101073], 'true,false,false': [0.0, 0.11841359881289933], 'false,false': [nan, 0.24788283652101073], 'true': [0.21101353214942117, 0.0671614631269666]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, D).;true;true
0;true,false;recursion_accounttype(D, B).;true;true
0;false;follows(A, G), recursion_accounttype(G, B).;true;true
0;true,true;recursion_accounttype(D, B).;true;true
0;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
0;true;follows(E, A).;true;true
0;false,false,false;follows(I, A), tweets(I, J).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true,false;follows(A, E), follows(E, A).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(A, F).;true;true
4;;accounttype(A, B) :- tweets(A, C).;true;true
4;true,true;follows(E, D), follows(E, A).;true;true
4;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;true,true,false;follows(F, A).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, E), follows(E, A).;true;true
5;false,false;tweets(A, H), follows(I, A).;true;true
5;false,false,true;follows(A, J).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false;follows(A, E).;true;true
6;false,true,true;follows(E, G), recursion_accounttype(G, B).;true;true
6;false,true;follows(F, A).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(E, C).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(E, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.18330230933264208;  // std dev = 0,468, 163,000 (wgt'ed) examples reached here.  /* #neg=110 #pos=53 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.15814893509951225;  // std dev = 1,449, 10,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.30259337954395676;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.016851064900487787;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.35814893509951234;  // std dev = 0,500, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.32873717039363;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then return 0.23433919733142763;  // std dev = 0,490, 90,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=36 */
%   | | else return -0.1522554146218452;  // std dev = 0,046, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.046292278652575146;  // std dev = 0,319, 61,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=7 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B), follows(F, E) )
%   | | then if ( follows(E, A), tweets(F, G) )
%   | | | then return 0.4430348495053407;  // std dev = 2,341, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   | | | else return 0.22061773085089992;  // std dev = 1,540, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return -0.13885002657511827;  // std dev = 0,033, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.3087411357856349;  // std dev = 0,500, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.16020616679634886;  // std dev = 1,387, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.313249254031989;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.178554420614863;  // std dev = 0,481, 96,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=36 */
%   | else return -0.04013959609368264;  // std dev = 0,319, 61,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=7 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.02963137319969141;  // std dev = 0,425, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.563806453213217;  // std dev = 1,265, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.1926232728831758;  // std dev = 1,481, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.2564123687585864;  // std dev = 1,732, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.12780301532608795;  // std dev = 1,803, 15,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.4485693453234025;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2609715838204747;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.1493355584728461;  // std dev = 4,708, 96,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=36 */
%   | | | else return -0.17957878777420078;  // std dev = 0,102, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.20613740734453975;  // std dev = 0,500, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then return -0.15405696771023686;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.8459430322897632;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, H) )
%   | then if ( tweets(A, I) )
%   | | then return 0.07616352694570949;  // std dev = 0,417, 75,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.03777903947230601;  // std dev = 1,369, 13,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.1774096515628789;  // std dev = 2,064, 19,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else return -0.16059038394669023;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.06713350132334998;  // std dev = 4,591, 109,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=32 */
%   | | | else return 0.18964884503723345;  // std dev = 2,762, 34,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.1459636529785766;  // std dev = 0,077, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1262323401176121;  // std dev = 2,287, 24,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | else return -0.2732087240315131;  // std dev = 0,021, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.04612386958182655;  // std dev = 0,421, 31,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(J, K), follows(K, I) )
%   | | | then return 0.4072300048538585;  // std dev = 1,205, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.16977093323785986;  // std dev = 0,083, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.1725260507339802;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(D, F) )
%   | | | then return 0.24769230548907362;  // std dev = 3,674, 54,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | | else return -0.04970637818913566;  // std dev = 2,484, 38,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | | else return -0.07071836834955873;  // std dev = 0,271, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else return 0.06021668325401904;  // std dev = 0,484, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.11253399970189765;  // std dev = 0,235, 34,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | else return 0.20708937067211683;  // std dev = 0,450, 26,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then return -0.16722389782851074;  // std dev = 0,009, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.054164258903670194;  // std dev = 1,753, 18,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.13192110317593675;  // std dev = 2,506, 26,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.11315619113873471;  // std dev = 4,308, 82,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=33 */
%   | | | else return -0.0828183749930619;  // std dev = 1,528, 15,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | else return -0.16163869057133742;  // std dev = 0,155, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.12639651564531534;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.00931158513151238;  // std dev = 2,850, 62,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=16 */
%   | | | else return -0.1358721180146241;  // std dev = 0,011, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08678854879755322;  // std dev = 2,286, 24,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.0957416502056075;  // std dev = 1,981, 19,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else return -0.14282679652864064;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.06516956838832647;  // std dev = 0,467, 78,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=29 */
%   | | else return -0.04199451860879391;  // std dev = 0,320, 47,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=6 */
%   | else if ( follows(A, E), tweets(E, C) )
%   | | then return 0.13095421802843377;  // std dev = 0,473, 32,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.07304805406274208;  // std dev = 1,732, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return -0.21365854965816666;  // std dev = 0,178, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.020373077469154708;  // std dev = 0,402, 31,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(I, J), follows(I, H) )
%   | | | then return 0.2612676412130098;  // std dev = 1,208, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.16518168715662515;  // std dev = 0,099, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.07918863164321814;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), follows(D, C) )
%   | | | then return 0.34533132455626603;  // std dev = 2,464, 30,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=21 */
%   | | | else return -0.05620650020160242;  // std dev = 3,333, 59,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=15 */
%   | | else return -0.16500701251200264;  // std dev = 0,147, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.05120814009493315;  // std dev = 0,308, 61,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=7 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.0010240011827655968;  // std dev = 0,482, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.24931350621728277;  // std dev = 1,593, 13,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.017211006431658796;  // std dev = 1,443, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.02030337877981488;  // std dev = 1,751, 15,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.07035917963345506;  // std dev = 1,781, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.002714252954439012;  // std dev = 0,402, 135,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=38 */
%   | | else return 0.06596861848425482;  // std dev = 0,451, 40,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=20 */
%   | else return -0.013114300534336511;  // std dev = 0,290, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), recursion_accounttype(G, B) )
%   | | | then return 0.314291009082708;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.017390748924996303;  // std dev = 1,433, 10,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.005495111538729713;  // std dev = 0,428, 10,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.04856283851062246;  // std dev = 0,883, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.0764507020853632;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.042372059303235884;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.72214
   AUC PR    = 0.524815
   CLL	      = -0.572846
   Precision = 0.5625 at threshold = 0.5
   Recall    = 0.173077
   F1        = 0.264706


Total learning time: 9.594 seconds
Total inference time: 1.539 seconds
AUC ROC: 0.72214


Results scoring model
   AUC ROC   = 0.798852
   AUC PR    = 0.639985
   CLL	      = -0.526965
   Precision = 0.764706 at threshold = 0.5
   Recall    = 0.173333
   F1        = 0.282609


Total scoring time: 1.267 seconds
Refined model CLL: -0.526965


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.72214
   AUC PR    = 0.524815
   CLL	      = -0.572846
   Precision = 0.5625 at threshold = 0.5
   Recall    = 0.173077
   F1        = 0.264706


Total learning time: 13.780999999999999 seconds
Total inference time: 1.539 seconds
AUC ROC: 0.72214
Total revision time: 13.780999999999999
Best scored revision CLL: -0.526965


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:11:31
{'CLL': -0.572846, 'Precision': [0.5625, 0.5], 'Inference time': 1.539, 'Learning time': 13.780999999999999, 'parameter_0.6': {'CLL': -0.594127, 'Precision': [0.5, 0.5], 'Inference time': 1.285, 'Learning time': 2.066, 'AUC ROC': 0.713963, 'F1': 0.012658, 'AUC PR': 0.485769, 'Recall': 0.00641}, 'AUC ROC': 0.72214, 'F1': 0.264706, 'AUC PR': 0.524815, 'Recall': 0.173077}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.23314893509951096;  // std dev = 0,484, 96,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=36 */
%   | else return -0.02894783909403609;  // std dev = 0,316, 62,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=7 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.48972788246793336;  // std dev = 2,103, 19,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.35814893509951234;  // std dev = 1,732, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.19148226843284563;  // std dev = 1,826, 15,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3581489350995123;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.514834239218108;  // std dev = 2,622, 32,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.06871354956293599;  // std dev = 3,259, 58,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=14 */
%   | | else return -0.17266576078189175;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then return -0.08836366318935987;  // std dev = 0,218, 40,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | | else return 0.09973157490587821;  // std dev = 0,426, 21,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.32195770885975555;  // std dev = 2,896, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | | | else return 0.6185268779640003;  // std dev = 1,262, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return -0.17814499269628373;  // std dev = 0,071, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.24080747227790825;  // std dev = 0,492, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.16900142371343788;  // std dev = 0,467, 96,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=36 */
%   | else return -0.022888280456951352;  // std dev = 0,314, 62,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=7 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.35409306563997944;  // std dev = 1,838, 15,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.23423580899327737;  // std dev = 1,565, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else return -0.15218248510499202;  // std dev = 0,057, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.2687103807980095;  // std dev = 1,732, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.1187535652770277;  // std dev = 1,737, 15,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.38843029477571306;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2508827444988947;  // std dev = 1,410, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(C, A), follows(C, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.3228313119225224;  // std dev = 2,481, 26,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return 0.7074466965379066;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(C, F), follows(G, D) )
%   | | | then return -0.0038831835100638385;  // std dev = 3,202, 66,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=13 */
%   | | | else return 0.4778711488667347;  // std dev = 0,843, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.02813680118767134;  // std dev = 0,305, 57,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=6 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.21298933412424853;  // std dev = 2,846, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | | | else return 0.4655970351992055;  // std dev = 1,259, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return -0.1714443295662057;  // std dev = 0,103, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.15462994716509967;  // std dev = 0,488, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.10672634540217452;  // std dev = 0,444, 101,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=37 */
%   | else return -0.024920532654068243;  // std dev = 0,305, 57,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=6 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(F, E) )
%   | | | then return 0.07249197570826112;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.2335839501158478;  // std dev = 0,118, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.42075067182156134;  // std dev = 1,248, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.06614035074784419;  // std dev = 1,439, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.18518490391932482;  // std dev = 0,500, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.05464489778759875;  // std dev = 1,652, 15,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.17042035201039193;  // std dev = 1,489, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(C, D), follows(C, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.22684564389775913;  // std dev = 2,481, 26,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return 0.5172037960901767;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.003726067634519237;  // std dev = 0,407, 69,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=15 */
%   | else return -0.020380977180168718;  // std dev = 0,307, 56,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.08337002982138177;  // std dev = 0,487, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.27423565555221174;  // std dev = 1,580, 13,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.030171111444132766;  // std dev = 1,532, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.04398361545404774;  // std dev = 1,649, 15,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | | else return 0.1330727532376523;  // std dev = 1,474, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.06526862167096874;  // std dev = 0,432, 101,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=37 */
%   | else return -0.019880770994937208;  // std dev = 0,305, 57,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=6 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), tweets(F, E) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.15113121069681665;  // std dev = 2,423, 28,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | | | else return -0.14131305170780856;  // std dev = 0,027, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.12460680214261939;  // std dev = 1,732, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return -0.3070788635645773;  // std dev = 0,099, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(I, A), recursion_accounttype(J, B) )
%   | | | then return 0.29250147006022953;  // std dev = 0,895, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.05218109000909651;  // std dev = 0,890, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.11457019813355172;  // std dev = 0,388, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(C, B), follows(D, A) )
%   | then if ( tweets(C, E), tweets(D, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.18182781949269752;  // std dev = 3,043, 42,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=27 */
%   | | | else return -0.10578046378127585;  // std dev = 2,236, 45,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=6 */
%   | | else return 0.5110787997715706;  // std dev = 0,908, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.015264428765131441;  // std dev = 0,349, 85,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=20 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.23293952182857963;  // std dev = 1,569, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.02376230444329767;  // std dev = 1,098, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.05355804489402243;  // std dev = 0,357, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.006446031274047589;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return 0.08090827163836221;  // std dev = 0,405, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | then if ( recursion_accounttype(C, B), follows(D, A) )
%   | | then if ( follows(C, D), tweets(A, E) )
%   | | | then return 0.08601675306865834;  // std dev = 2,818, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | | | else return 0.25710589739894835;  // std dev = 1,168, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return -0.012695092092642224;  // std dev = 0,364, 129,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=30 */
%   | else return -0.1941147624369925;  // std dev = 0,305, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(F, B), follows(G, F) )
%   | | then return -0.03944023506081998;  // std dev = 0,309, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.4080797373375512;  // std dev = 1,054, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.051782325714866156;  // std dev = 1,421, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.0032540754716627;  // std dev = 0,351, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return 0.062519449652356;  // std dev = 0,382, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(C, D), follows(C, A) )
%   | | then if ( follows(A, D), follows(D, C) )
%   | | | then return 0.20247333739551257;  // std dev = 1,889, 23,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=18 */
%   | | | else return -0.03718893659223338;  // std dev = 1,415, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else if ( follows(D, C), follows(C, D) )
%   | | | then return -0.13739190948296803;  // std dev = 0,962, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0.022547047264907163;  // std dev = 3,022, 55,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=14 */
%   | else return -0.0237953559033834;  // std dev = 0,296, 57,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=6 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.07198395628514503;  // std dev = 2,659, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | | | else return 0.236933714521555;  // std dev = 1,260, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return -0.18967968321723727;  // std dev = 0,078, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.012211707355619559;  // std dev = 0,463, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.746928
   AUC PR    = 0.570314
   CLL	      = -0.56057
   Precision = 0.647059 at threshold = 0.5
   Recall    = 0.352564
   F1        = 0.456432


Total learning time: 22.403 seconds
Total inference time: 1.823 seconds
AUC ROC: 0.746928


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:11:56
{'CLL': -0.56057, 'Precision': [0.647059, 0.5], 'Inference time': 1.823, 'Learning time': 22.403, 'AUC ROC': 0.746928, 'F1': 0.456432, 'AUC PR': 0.570314, 'Recall': 0.352564}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.5456489350995116;  // std dev = 2,622, 32,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.09952824544433996;  // std dev = 3,259, 58,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=14 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.030739953789376686;  // std dev = 1,333, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( follows(G, C), follows(C, G) )
%   | | | then return -0.030739953789376676;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.19148226843284566;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.37243464938522663;  // std dev = 2,957, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | | | else return 0.7470378239884012;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.2867203636709409;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.704327
   AUC PR    = 0.517879
   CLL	      = -0.688809
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.708 seconds
Total inference time: 0.815 seconds
AUC ROC: 0.704327


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:12:03
{'CLL': -0.688809, 'Precision': [nan, 0.5], 'Inference time': 0.815, 'Learning time': 5.708, 'AUC ROC': 0.704327, 'F1': nan, 'AUC PR': 0.517879, 'Recall': 0.0}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
0;true,false;recursion_proteinclass(D, B), location(C, G).;false;true
0;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;true,true;recursion_proteinclass(D, B), complex(A, E).;false;false
0;true,false,false;interaction(H, A), interaction(H, D).;false;false
0;false,false;interaction(J, A), recursion_proteinclass(J, B).;false;true
0;true;complex(D, E), interaction(F, A).;true;true
0;false,false,false;interaction(K, A), enzyme(K, L).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,false;interaction(J, A), recursion_proteinclass(J, B).;false;false
1;false,false;interaction(G, A), interaction(G, G).;true;true
1;false;interaction(A, E), interaction(E, E).;true;true
1;false,false,true;enzyme(A, H), complex(G, I).;false;false
1;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
1;true;complex(C, D).;false;false
1;false,true;interaction(E, A).;false;true
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true,false;interaction(A, F), enzyme(F, D).;false;true
2;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
2;false,false,true;enzyme(A, J).;false;false
2;true,false,false;interaction(G, C), interaction(G, G).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;true;true
2;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
2;false,false,false;interaction(A, K), interaction(K, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true,false;interaction(A, E), interaction(E, A).;false;true
3;false;interaction(A, A).;false;true
3;false,false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
3;true,false,false;complex(A, F).;false;false
3;false,false;interaction(A, G), complex(G, H).;true;true
3;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- enzyme(A, C).;true;true
4;false;location(A, G), complex(A, H).;true;true
4;true,true;interaction(E, D), interaction(E, A).;false;true
4;true,true,false;interaction(F, A).;false;false
4;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
4;true;enzyme(D, C), recursion_proteinclass(D, B).;true;false
4;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
4;false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;false,false,false;interaction(N, A), complex(A, P).;false;false
5;false,false;enzyme(A, J), interaction(K, A).;true;true
5;false;interaction(A, F), interaction(F, A).;true;true
5;false,false,true;interaction(A, L), complex(K, M).;false;false
5;false,true,false;enzyme(F, H), enzyme(A, I).;false;false
5;true;enzyme(A, D), phenotype(A, E).;false;false
5;false,true;complex(F, G), complex(A, G).;false;true
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,true,true;interaction(F, H), recursion_proteinclass(H, B).;false;false
6;false,false;interaction(A, A).;false;true
6;false;complex(A, E), interaction(A, F).;true;true
6;false,true,false;interaction(F, I), recursion_proteinclass(I, B).;false;false
6;true;interaction(D, C), interaction(C, D).;false;false
6;false,false,false;enzyme(A, J), complex(A, K).;false;false
6;false,true;interaction(G, A), complex(G, E).;true;true
7;;proteinclass(A, B) :- complex(A, C).;true;true
7;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
7;true,true;interaction(E, A), recursion_proteinclass(E, B).;false;false
7;false,true,true;interaction(A, I), complex(I, J).;false;false
7;false,false;interaction(A, A).;false;true
7;true;complex(D, C), recursion_proteinclass(D, B).;true;false
7;false,false,false;enzyme(A, K).;false;false
7;false,true;location(A, G), enzyme(F, H).;true;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;false,false,false;interaction(L, A), interaction(M, L).;false;false
8;false,false;location(A, J).;true;true
8;false;interaction(F, A), interaction(F, F).;true;true
8;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
8;false,true,false;enzyme(F, H), location(F, I).;false;false
8;true;complex(C, D), interaction(E, A).;false;false
8;false,true;interaction(A, F), phenotype(F, G).;false;true
9;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
9;true,false;interaction(A, C).;false;true
9;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
9;true,true;phenotype(E, D).;false;false
9;true,false,false;interaction(F, C), complex(F, G).;false;false
9;false,false;interaction(A, A).;false;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;false,false,false;phenotype(A, I).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(E, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.20233498161114163;  // std dev = 6,966, 215,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=74 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.16584124279182005;  // std dev = 2,353, 26,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.050941973991396876;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.39148226843284567;  // std dev = 1,932, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.33183314562582816;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11618285619493406;  // std dev = 0,449, 206,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=58 */
%   else if ( follows(A, D), follows(D, D) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.37854412936393783;  // std dev = 2,384, 23,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | | else return 0.24016017501108422;  // std dev = 4,109, 71,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=29 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then return 0.15777069245171366;  // std dev = 7,105, 225,000 (wgt'ed) examples reached here.  /* #neg=146 #pos=79 */
%   | else if ( follows(A, F), tweets(F, D) )
%   | | then return -0.062349979968724864;  // std dev = 1,291, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.017772080354398187;  // std dev = 2,001, 27,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, I), follows(I, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2220635127669468;  // std dev = 2,801, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19332136324019597;  // std dev = 6,002, 150,000 (wgt'ed) examples reached here.  /* #neg=88 #pos=62 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return 0.1321732326760702;  // std dev = 0,797, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.8240211155556169;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.0299803295624792;  // std dev = 4,374, 107,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=26 */
%   | | | else return 0.06558227356276711;  // std dev = 2,543, 36,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | else if ( follows(H, A), tweets(H, I) )
%   | | | then return -0.17596611588538244;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then return 0.10900826262259868;  // std dev = 6,528, 193,000 (wgt'ed) examples reached here.  /* #neg=125 #pos=68 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.2172266989707751;  // std dev = 0,069, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.08148924454904383;  // std dev = 2,577, 33,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | else return -0.21188509630822758;  // std dev = 0,070, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.10993763531574574;  // std dev = 3,705, 65,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=22 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.12375722173817597;  // std dev = 5,581, 133,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=53 */
%   | else return 0.23276728126168492;  // std dev = 2,335, 22,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F), tweets(A, G) )
%   | | then return 0.019553452492637242;  // std dev = 3,278, 58,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
%   | | else return -0.06323231346634631;  // std dev = 1,533, 18,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.20241187736581362;  // std dev = 0,034, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.16646674346990573;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.18520046498015924;  // std dev = 0,046, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.07471879549330056;  // std dev = 3,403, 57,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then return 0.11007058668527434;  // std dev = 6,024, 153,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=63 */
%   | else return 0.17114310677131514;  // std dev = 0,634, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, A) )
%   | | then if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return -0.009867359344972421;  // std dev = 3,647, 80,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=18 */
%   | | | else return -0.15190839891144056;  // std dev = 0,037, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.05668015337757053;  // std dev = 2,340, 27,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.06486802861369094;  // std dev = 2,466, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, I) )
%   | | | then return -0.14463130796538037;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.089748548864828;  // std dev = 6,042, 154,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=64 */
%   | else return 0.00775926464439512;  // std dev = 5,011, 145,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=36 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return -0.003365777808994809;  // std dev = 5,927, 181,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=54 */
%   | else return -0.058104073568217444;  // std dev = 1,831, 26,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(F, B) )
%   | | then return 0.1418014580361037;  // std dev = 4,692, 94,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=42 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.03832807499464942;  // std dev = 0,463, 229,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=81 */
%   | else if ( follows(A, C) )
%   | | then return -0.18086124433482187;  // std dev = 0,058, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(E, C) )
%   | | | then return -0.1648818364527402;  // std dev = 0,068, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.07490309326902374;  // std dev = 0,591, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return -0.04857253265073869;  // std dev = 1,831, 26,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.1055221321891399;  // std dev = 0,497, 31,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=14 */


Results
   AUC ROC   = 0.714877
   AUC PR    = 0.482264
   CLL	      = -0.589861
   Precision = 0.428571 at threshold = 0.5
   Recall    = 0.019231
   F1        = 0.03681


Total learning time: 2.787 seconds
Total inference time: 2.133 seconds
AUC ROC: 0.714877


Results scoring model
   AUC ROC   = 0.693532
   AUC PR    = 0.47973
   CLL	      = -0.590556
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.136 seconds
Parameter learned model CLL: -0.590556


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), follows(C, D)', 'true,false': 'recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(D, B)', 'true': 'follows(E, A)', 'true,false,false': 'follows(F, A), follows(F, D)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(I, A), tweets(I, J)'}, {'true,false,true': [2.353, 18, 8], 'true,false,false,false': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 3, 0], 'true,true,true': [6.966, 141, 74], 'true,true,false': [0.0, 7, 0], 'false,false,true': [1.932, 7, 8], 'false,true': [0.953, 10, 1], 'false,false,false,false': [2.176, 10, 9]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, D)', 'false,false': 'follows(E, A), follows(E, E)', 'false,false,false': 'follows(F, A), recursion_accounttype(F, B)'}, {'true': [0.449, 148, 58], 'false,false,false,true': [2.384, 10, 13], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [4.109, 42, 29]}], ['accounttype(A, B)', {'': 'follows(C, A), tweets(C, D)', 'true,false': 'follows(A, F), tweets(F, D)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'true': 'follows(E, C), recursion_accounttype(E, B)', 'false,false,false': 'follows(A, I), follows(I, I)'}, {'true,false,true': [1.291, 15, 2], 'false,false,false,true': [0.0, 0, 0], 'true,true': [7.105, 146, 79], 'true,false,false': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [2.001, 22, 5], 'false,false,false,false': [2.801, 18, 14]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true,false': 'follows(A, E), follows(E, A)', 'false': 'follows(A, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), tweets(H, I)'}, {'true,false,true': [0.797, 2, 1], 'false,false,true,false': [2.543, 26, 10], 'true,true': [6.002, 88, 62], 'true,false,false': [0.0, 0, 1], 'false,false,true,true': [4.374, 81, 26], 'false,false,false,true': [3.73e-09, 3, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true,true': 'follows(E, D), follows(E, A)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'true,true,false': 'follows(F, A)', 'false': 'recursion_accounttype(G, B)'}, {'true,true,false,true': [0.069, 7, 0], 'true,false': [0.07, 3, 0], 'true,true,false,false': [2.577, 23, 10], 'false,false': [0.0, 0, 0], 'true,true,true': [6.528, 125, 68], 'false,true': [3.705, 43, 22]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, E), follows(E, A)', 'false,false,false': 'follows(K, A)', 'true': 'tweets(A, D)', 'false,false': 'tweets(A, H), follows(I, A)', 'false,false,true': 'follows(A, J)', 'false,true': 'tweets(E, F), tweets(A, G)'}, {'true,false': [2.335, 11, 11], 'true,true': [5.581, 80, 53], 'false,true,false': [1.533, 15, 3], 'false,false,true,false': [0.0, 3, 0], 'false,true,true': [3.278, 43, 15], 'false,false,true,true': [0.034, 7, 0], 'false,false,false,true': [0.046, 2, 0], 'false,false,false,false': [3.403, 39, 18]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, A)', 'false,true,true': 'follows(E, G), recursion_accounttype(G, B)', 'false,true,false': 'follows(E, H), recursion_accounttype(H, B)', 'true': 'follows(D, C), follows(C, D)', 'false,false,false': 'tweets(A, I)', 'false,true': 'follows(F, A)'}, {'true,false': [0.634, 1, 1], 'false,true,true,false': [0.037, 6, 0], 'false,true,false,true': [2.34, 19, 8], 'true,true': [6.024, 90, 63], 'false,true,true,true': [3.647, 62, 18], 'false,false,false,true': [0.0, 3, 0], 'false,false,true': [0.0, 0, 0], 'false,true,false,false': [2.466, 20, 10], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, A), recursion_accounttype(D, B)'}, {'true,true': [6.042, 90, 64], 'true,false': [5.011, 109, 36], 'false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'recursion_accounttype(F, B)', 'true': 'follows(D, A)'}, {'true,true': [5.927, 127, 54], 'true,false': [1.831, 22, 4], 'false,false,true': [4.692, 52, 42], 'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true,false': 'follows(A, C)', 'false': 'follows(A, F), recursion_accounttype(F, B)', 'true,false,false': 'follows(E, C)', 'false,false': 'follows(A, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)'}, {'true,false,true': [0.058, 5, 0], 'true,true': [0.463, 148, 81], 'true,false,false,true': [0.068, 6, 0], 'false,false,false': [0.497, 17, 14], 'false,false,true': [0.0, 0, 0], 'false,true': [1.831, 22, 4], 'true,false,false,false': [0.591, 2, 1]}]]
[{'': [0.22086740536443017, 0.2343749999999997], 'false,false,false': [0.0, 0.2493074792243767], 'true,false,false': [nan, 0.0], 'false': [0.0826446280991736, 0.2483564645726808], 'true,true': [0.22572201189832344, -7.93016446160826e-18], 'false,false': [0.24888888888888885, 0.24173553719008264], 'true': [0.2222222222222223, 0.2085048010973938], 'true,false': [0.21301775147929003, 0.0]}, {'': [0.20117529278587876, 0.24361517164799046], 'false': [nan, 0.24361517164799046], 'false,false': [nan, 0.24361517164799057], 'false,false,false': [0.24709767638694333, 0.2378013689385974]}, {'': [0.21866156944502305, 0.21126563024779768], 'false,false,false': [nan, 0.2452424721234812], 'false': [0.14836085418634987, 0.2452424721234812], 'false,false': [nan, 0.2452424721234812], 'true': [0.22437346741871844, 0.09801354026409978], 'true,false': [0.09801354026409982, nan]}, {'': [0.24067051485412663, 0.17651867685133707], 'true,false': [0.21178776547447506, 0.0], 'false': [nan, 0.17651867685133762], 'false,false,true': [0.17883113190348138, 0.1796372845513875], 'false,false': [0.1792728394555459, 4.625929269271485e-18], 'true': [0.240134636505383, 0.24858835405177707], 'false,false,false': [4.625929269271485e-18, nan]}, {'': [0.21302437263493693, 0.21122281146048777], 'true,true': [0.2208113145041862, 0.17904404843439753], 'true': [0.21454638673487159, 0.001645588226168467], 'true,true,false': [0.0006871422905592728, 0.20126186894605397], 'false': [0.21122281146048777, nan]}, {'': [0.23755281379315388, 0.17587965423485635], 'false,false,false': [0.001047202405144984, 0.20317285366781357], 'false': [0.1735314237873166, 0.17803625990027327], 'false,false,true': [0.0001684751370361456, 0.0], 'false,false': [0.00038926365259219777, 0.19853360852418334], 'true': [0.23416534616424386, 0.24783504904997164], 'false,true': [0.18522318934204154, 0.13062766730731562]}, {'': [0.23678981728539578, 0.17306247537961897], 'false,true,true': [0.16623760582298755, 0.0002288227850087606], 'false,false': [nan, 0.0], 'false': [0.17618636158636292, 0.0], 'false,true,false': [0.20284604831364905, 0.2026749377179411], 'true': [0.2372102710483457, 0.20094337884179286], 'false,false,false': [0.0, nan], 'false,true': [0.15596499674707381, 0.2027727040031087]}, {'': [0.2077717751042089, nan], 'true': [0.2370656905853714, 0.173197324352529]}, {'': [0.18624562136798817, 0.2342372224995017], 'false': [nan, 0.23423722249950135], 'false,false': [0.23423722249950166, nan], 'true': [0.19410748948083836, 0.12889498757448825]}, {'': [0.20566363511262142, 0.19887348052670564], 'true,false': [0.0006764148060986297, 0.05204182440674446], 'false': [0.12893247869333888, 0.24670254738407185], 'true,false,false': [0.0007615937772508102, 0.1162710773179509], 'false,false': [nan, 0.24670254738407185], 'true': [0.21461797787932735, 0.03580888763569826]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), follows(C, D).;true;true
0;true,false;recursion_accounttype(D, B).;true;true
0;false;follows(A, G), recursion_accounttype(G, B).;true;true
0;true,true;recursion_accounttype(D, B).;true;true
0;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
0;true;follows(E, A).;true;true
0;false,false,false;follows(I, A), tweets(I, J).;true;true
3;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;true,false;follows(A, E), follows(E, A).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(A, F).;true;true
4;;accounttype(A, B) :- tweets(A, C).;true;true
4;true,true;follows(E, D), follows(E, A).;true;true
4;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;true,true,false;follows(F, A).;true;true
5;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
5;false;follows(A, E), follows(E, A).;true;true
5;false,false;tweets(A, H), follows(I, A).;true;true
5;false,false,true;follows(A, J).;true;true
5;false,false,false;follows(K, A).;true;true
6;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
6;false;follows(A, E).;true;true
6;false,true,true;follows(E, G), recursion_accounttype(G, B).;true;true
6;false,true;follows(F, A).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(E, C).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( follows(E, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2669080591871047;  // std dev = 5,754, 137,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=56 */
%   | | | else return 0.08314893509951238;  // std dev = 3,735, 80,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=18 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.15444523139580865;  // std dev = 0,457, 27,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.050941973991396876;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.39148226843284567;  // std dev = 0,499, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.33183314562582816;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then return 0.2534927344912066;  // std dev = 0,495, 116,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=50 */
%   | | else return -0.16806954649668146;  // std dev = 0,067, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.05268340318063297;  // std dev = 0,299, 80,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=8 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, G), recursion_accounttype(F, B) )
%   | | | then return -0.17754174826741256;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.338127126118911;  // std dev = 1,937, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else return 0.8186730105296569;  // std dev = 0,017, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.34870661130094033;  // std dev = 3,740, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | | else return -0.17281251928179858;  // std dev = 0,081, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then return 0.21341602750741515;  // std dev = 0,495, 116,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=50 */
%   | | else return -0.1459177552120116;  // std dev = 0,059, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.04599725934673436;  // std dev = 0,299, 80,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=8 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(A, G), recursion_accounttype(F, B) )
%   | | | then return -0.1530815414450542;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.27953496775934855;  // std dev = 1,938, 15,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else return 0.6657673798163116;  // std dev = 0,025, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2962299204467393;  // std dev = 3,732, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | | else return -0.15376173234480475;  // std dev = 0,057, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.15423712837726603;  // std dev = 5,449, 127,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=51 */
%   | | | else return -0.11889029716264699;  // std dev = 0,044, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.37078444754482687;  // std dev = 0,598, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.18801502305308548;  // std dev = 1,871, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then return 0.07078553993939755;  // std dev = 0,541, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.8364123229841194;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, I) )
%   | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return -0.045477775883195695;  // std dev = 0,290, 75,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=7 */
%   | | else return 0.1821393333774233;  // std dev = 0,472, 68,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=29 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.07374691894157757;  // std dev = 5,302, 145,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=45 */
%   | | | else return 0.17616286116444502;  // std dev = 3,215, 48,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=23 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.18770670665380967;  // std dev = 0,237, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.08561725470680163;  // std dev = 2,475, 33,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | else return -0.2293983049330667;  // std dev = 0,146, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.5705410768833378;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.06834964176757664;  // std dev = 1,247, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else return 0.38006488640714736;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.04867122756854186;  // std dev = 0,386, 43,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.35465877194102247;  // std dev = 3,122, 45,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=30 */
%   | | | else return -0.044585633392470896;  // std dev = 3,297, 66,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=15 */
%   | | else if ( tweets(A, F), tweets(D, G) )
%   | | | then return -0.177361679183546;  // std dev = 0,962, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0.2449967111083911;  // std dev = 1,409, 10,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | else if ( follows(A, H) )
%   | | then return 0.3301855892916682;  // std dev = 0,672, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.10508006822748836;  // std dev = 0,500, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( follows(A, I), follows(I, A) )
%   | then return 0.020698232674559544;  // std dev = 0,390, 76,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=18 */
%   | else if ( tweets(A, J), follows(K, A) )
%   | | then return -0.1324903215692199;  // std dev = 0,015, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.07926520597703351;  // std dev = 0,418, 59,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.025305055396774474;  // std dev = 4,267, 92,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=31 */
%   | | | else return 0.28678328197580444;  // std dev = 0,992, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.2297739340451739;  // std dev = 2,218, 26,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | | | else return -0.07290938856528928;  // std dev = 1,138, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( follows(A, H) )
%   | | then return 0.21161064199105437;  // std dev = 0,275, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return 0.07971357086258302;  // std dev = 0,500, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return 0.002352913504878726;  // std dev = 0,371, 85,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=18 */
%   | | else return 0.07594229114921904;  // std dev = 0,420, 57,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=18 */
%   | else return -0.09643003097290893;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(A, D), follows(D, C) )
%   | | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | | then return 0.168099286472843;  // std dev = 3,372, 51,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=28 */
%   | | | else return -0.07727340675396234;  // std dev = 2,964, 59,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
%   | | else return 0.22140388492417973;  // std dev = 0,430, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   | else return -0.054530435359219476;  // std dev = 0,293, 79,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=8 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.11394058678829637;  // std dev = 3,430, 54,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=25 */
%   | | | else return 0.40642883211855646;  // std dev = 1,292, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return -0.18403953743410678;  // std dev = 0,104, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.06017790726858241;  // std dev = 0,500, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else return -0.08834871478205225;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), follows(D, C) )
%   | | | then return 0.2612846447842298;  // std dev = 2,816, 41,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=29 */
%   | | | else return -0.033480209642004585;  // std dev = 3,662, 73,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=21 */
%   | | else return -0.1372269545006388;  // std dev = 0,076, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.048547646570567746;  // std dev = 0,291, 80,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=8 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(E, F), tweets(A, G) )
%   | | | then return 0.07934463454155875;  // std dev = 2,971, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | | | else return 0.20544995627631202;  // std dev = 2,190, 26,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=17 */
%   | | else return -0.1528579126928373;  // std dev = 0,107, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.04530197515522927;  // std dev = 0,500, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else return -0.08148684600080669;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.019336528516166185;  // std dev = 5,134, 154,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=53 */
%   | | | else return -0.13221032598040822;  // std dev = 0,115, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.11380980897717824;  // std dev = 2,846, 41,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=21 */
%   | | | else return 0.01469997720181969;  // std dev = 1,879, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | else return -0.12594192575331864;  // std dev = 0,229, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.006030053775815154;  // std dev = 0,359, 26,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.07174026452386466;  // std dev = 1,414, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.09705747831826023;  // std dev = 1,049, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.1225339495108122;  // std dev = 0,385, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */


Results
   AUC ROC   = 0.756266
   AUC PR    = 0.544886
   CLL	      = -0.560806
   Precision = 0.6 at threshold = 0.5
   Recall    = 0.115385
   F1        = 0.193548


Total learning time: 15.929 seconds
Total inference time: 1.4 seconds
AUC ROC: 0.756266


Results scoring model
   AUC ROC   = 0.846294
   AUC PR    = 0.741613
   CLL	      = -0.488004
   Precision = 0.928571 at threshold = 0.5
   Recall    = 0.26
   F1        = 0.40625


Total scoring time: 1.401 seconds
Refined model CLL: -0.488004


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.756266
   AUC PR    = 0.544886
   CLL	      = -0.560806
   Precision = 0.6 at threshold = 0.5
   Recall    = 0.115385
   F1        = 0.193548


Total learning time: 21.253 seconds
Total inference time: 1.4 seconds
AUC ROC: 0.756266
Total revision time: 21.253
Best scored revision CLL: -0.488004


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:12:28
{'CLL': -0.560806, 'Precision': [0.6, 0.5], 'Inference time': 1.4, 'Learning time': 21.253, 'parameter_0.8': {'CLL': -0.589861, 'Precision': [0.428571, 0.5], 'Inference time': 2.133, 'Learning time': 2.787, 'AUC ROC': 0.714877, 'F1': 0.03681, 'AUC PR': 0.482264, 'Recall': 0.019231}, 'AUC ROC': 0.756266, 'F1': 0.193548, 'AUC PR': 0.544886, 'Recall': 0.115385}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, F) )
%   | | | then return 0.42336632640385913;  // std dev = 3,362, 46,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=26 */
%   | | | else return 0.7043027812533584;  // std dev = 1,301, 13,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( follows(A, G), follows(G, C) )
%   | | | then return 0.06449814144871872;  // std dev = 3,212, 63,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=13 */
%   | | | else return 0.4945125714631486;  // std dev = 2,256, 22,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=14 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return -0.04851773156715435;  // std dev = 0,291, 75,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=7 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3669208649240726;  // std dev = 3,774, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(A, E), follows(A, C) )
%   | | | then return 0.38092077597197915;  // std dev = 2,843, 34,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | | | else return 0.6259639868337868;  // std dev = 1,236, 13,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.05687768927156438;  // std dev = 3,318, 66,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=14 */
%   | | | else return 0.4030549547318567;  // std dev = 2,710, 31,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=19 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.042713692917610464;  // std dev = 0,291, 75,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=7 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.316152557176245;  // std dev = 3,774, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.30649504889097184;  // std dev = 2,941, 36,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | | | else return 0.6340323155914667;  // std dev = 0,079, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.06304140128780432;  // std dev = 3,358, 65,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=15 */
%   | | | else return 0.328528089655919;  // std dev = 2,709, 31,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=19 */
%   | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.037770793621671024;  // std dev = 0,291, 75,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=7 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.26219011311468027;  // std dev = 3,774, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.24129976240089768;  // std dev = 2,940, 36,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | | | else return 0.47940327640330227;  // std dev = 0,086, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.04757114267407795;  // std dev = 3,371, 67,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=15 */
%   | | | else return 0.2572789569984751;  // std dev = 2,709, 31,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=19 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.033527727284692055;  // std dev = 0,291, 75,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=7 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.21033170903974932;  // std dev = 3,774, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.23217041118424747;  // std dev = 2,779, 37,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=21 */
%   | | | else return -0.06211736122980174;  // std dev = 2,492, 54,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=8 */
%   | | else if ( follows(A, F), follows(C, F) )
%   | | | then return 0.5394863688900945;  // std dev = 0,214, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.0681024583628721;  // std dev = 2,019, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(C, G), follows(A, C) )
%   | | | then return 0.38957337798754466;  // std dev = 1,104, 13,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.08502848626600965;  // std dev = 2,105, 22,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | else return 0.57850162346084;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return -0.029860176834185896;  // std dev = 0,291, 75,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=7 */
%   | else return 0.11380261402359344;  // std dev = 0,459, 71,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=29 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.08128887361063414;  // std dev = 0,414, 127,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=50 */
%   | else return -0.027298685177430393;  // std dev = 0,290, 79,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=8 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.023380852946019548;  // std dev = 1,643, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return -0.3091782894205935;  // std dev = 0,243, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(E, A), follows(E, D) )
%   | | | then return 0.48676639815395567;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.08299854010136078;  // std dev = 2,668, 32,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.4467301253973599;  // std dev = 1,279, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return -0.10271588271156207;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.051051596749847675;  // std dev = 0,473, 16,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(E, F) )
%   | | | then return 0.14720102477534458;  // std dev = 4,096, 82,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=43 */
%   | | | else return -0.24356029402098736;  // std dev = 0,535, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.10006816407447588;  // std dev = 0,028, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( tweets(A, G), follows(A, C) )
%   | | then if ( follows(H, A), follows(H, C) )
%   | | | then return 0.38950712078648225;  // std dev = 1,174, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.07072985747600025;  // std dev = 0,746, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.07230247530825178;  // std dev = 1,813, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | | else return 0.38638617736804887;  // std dev = 0,069, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(J, A) )
%   | then return -0.02068914117576397;  // std dev = 0,346, 89,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=18 */
%   | else return 0.07467352931467011;  // std dev = 0,397, 57,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.02576314233939116;  // std dev = 4,039, 94,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=34 */
%   | | | else return 0.5008934149314653;  // std dev = 0,429, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.05789834322968061;  // std dev = 0,286, 19,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( follows(A, C), tweets(C, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.19187514776430262;  // std dev = 1,228, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.07160542807985008;  // std dev = 1,793, 20,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | else return 0.2906724394570243;  // std dev = 0,901, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return -0.025185733551183025;  // std dev = 0,290, 75,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=7 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.03059099094162218;  // std dev = 0,464, 49,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | else return 0.1094259607871395;  // std dev = 0,345, 22,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then if ( tweets(C, E), tweets(D, E) )
%   | | | then return 0.08244297259280559;  // std dev = 4,092, 94,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=45 */
%   | | | else return -0.07427124078066552;  // std dev = 1,503, 22,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | else return -0.09726296560804583;  // std dev = 0,045, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.025548613249916752;  // std dev = 0,288, 80,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=8 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(F, G), tweets(F, H) )
%   | | | then return 0.06662327266107204;  // std dev = 3,353, 51,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=24 */
%   | | | else return 0.19365194603529107;  // std dev = 1,561, 15,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | else return -0.107213960633231;  // std dev = 0,031, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.024422342109958084;  // std dev = 0,495, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else return -0.11633363179886358;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, D), follows(C, E) )
%   | | | then return 0.09530325851596269;  // std dev = 3,987, 80,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=42 */
%   | | | else return -0.015020131143992125;  // std dev = 2,245, 47,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
%   | | else return -0.12970084810766117;  // std dev = 0,242, 23,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | else return 0.25956294395940305;  // std dev = 0,926, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then return -0.024023807212334033;  // std dev = 0,345, 89,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=18 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.06785009306993911;  // std dev = 1,561, 16,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | | else return -0.002902728526140022;  // std dev = 1,782, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.019649906930060947;  // std dev = 0,949, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.12614395882944182;  // std dev = 1,379, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */


Results
   AUC ROC   = 0.787414
   AUC PR    = 0.616857
   CLL	      = -0.534482
   Precision = 0.688889 at threshold = 0.5
   Recall    = 0.397436
   F1        = 0.504065


Total learning time: 28.101 seconds
Total inference time: 1.423 seconds
AUC ROC: 0.787414


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:12:58
{'CLL': -0.534482, 'Precision': [0.688889, 0.5], 'Inference time': 1.423, 'Learning time': 28.101, 'AUC ROC': 0.787414, 'F1': 0.504065, 'AUC PR': 0.616857, 'Recall': 0.397436}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, F) )
%   | | | then return 0.42336632640385913;  // std dev = 3,362, 46,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=26 */
%   | | | else return 0.7043027812533584;  // std dev = 1,301, 13,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else if ( follows(A, G), follows(G, C) )
%   | | | then return 0.06449814144871872;  // std dev = 3,212, 63,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=13 */
%   | | | else return 0.524815601766179;  // std dev = 2,160, 21,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(H, I), tweets(A, J) )
%   | | | then return -0.021851064900487778;  // std dev = 1,625, 25,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 7,45e-09, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(H, K), follows(A, K) )
%   | | | then return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.0418510649004878;  // std dev = 1,342, 20,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( follows(A, L) )
%   | | then if ( follows(M, L), recursion_accounttype(M, B) )
%   | | | then return 0.3669208649240726;  // std dev = 3,774, 57,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=29 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.739018
   AUC PR    = 0.538218
   CLL	      = -0.683147
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.002 seconds
Total inference time: 0.835 seconds
AUC ROC: 0.739018


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:13:04
{'CLL': -0.683147, 'Precision': [nan, 0.5], 'Inference time': 0.835, 'Learning time': 5.002, 'AUC ROC': 0.739018, 'F1': nan, 'AUC PR': 0.538218, 'Recall': 0.0}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), interaction(C, D).;true;true
0;true,false;recursion_proteinclass(D, B), location(C, G).;false;true
0;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
0;true,true;recursion_proteinclass(D, B), complex(A, E).;false;false
0;true,false,false;interaction(H, A), interaction(H, D).;false;false
0;false,false;interaction(J, A), recursion_proteinclass(J, B).;false;true
0;true;complex(D, E), interaction(F, A).;true;true
0;false,false,false;interaction(K, A), enzyme(K, L).;false;false
1;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
1;false,false,false;interaction(J, A), recursion_proteinclass(J, B).;false;false
1;false,false;interaction(G, A), interaction(G, G).;true;true
1;false;interaction(A, E), interaction(E, E).;true;true
1;false,false,true;enzyme(A, H), complex(G, I).;false;false
1;false,true,false;enzyme(E, F), enzyme(A, F).;false;false
1;true;complex(C, D).;false;false
1;false,true;interaction(E, A).;false;true
2;;proteinclass(A, B) :- interaction(C, A), enzyme(C, D).;true;true
2;true,false;interaction(A, F), enzyme(F, D).;false;true
2;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
2;false,false,true;enzyme(A, J).;false;false
2;true,false,false;interaction(G, C), interaction(G, G).;false;false
2;false,false;interaction(I, A), recursion_proteinclass(I, B).;true;true
2;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
2;false,false,false;interaction(A, K), interaction(K, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
3;true,false;interaction(A, E), interaction(E, A).;false;true
3;false;interaction(A, A).;false;true
3;false,false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
3;true,false,false;complex(A, F).;false;false
3;false,false;interaction(A, G), complex(G, H).;true;true
3;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- enzyme(A, C).;true;true
4;false;location(A, G), complex(A, H).;true;true
4;true,true;interaction(E, D), interaction(E, A).;false;true
4;true,true,false;interaction(F, A).;false;false
4;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
4;true;enzyme(D, C), recursion_proteinclass(D, B).;true;false
4;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
4;false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
5;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
5;false,false,false;interaction(N, A), complex(A, P).;false;false
5;false,false;enzyme(A, J), interaction(K, A).;true;true
5;false;interaction(A, F), interaction(F, A).;true;true
5;false,false,true;interaction(A, L), complex(K, M).;false;false
5;false,true,false;enzyme(F, H), enzyme(A, I).;false;false
5;true;enzyme(A, D), phenotype(A, E).;false;false
5;false,true;complex(F, G), complex(A, G).;false;true
6;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
6;false,true,true;interaction(F, H), recursion_proteinclass(H, B).;false;false
6;false,false;interaction(A, A).;false;true
6;false;complex(A, E), interaction(A, F).;true;true
6;false,true,false;interaction(F, I), recursion_proteinclass(I, B).;false;false
6;true;interaction(D, C), interaction(C, D).;false;false
6;false,false,false;enzyme(A, J), complex(A, K).;false;false
6;false,true;interaction(G, A), complex(G, E).;true;true
7;;proteinclass(A, B) :- complex(A, C).;true;true
7;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
7;true,true;interaction(E, A), recursion_proteinclass(E, B).;false;false
7;false,true,true;interaction(A, I), complex(I, J).;false;false
7;false,false;interaction(A, A).;false;true
7;true;complex(D, C), recursion_proteinclass(D, B).;true;false
7;false,false,false;enzyme(A, K).;false;false
7;false,true;location(A, G), enzyme(F, H).;true;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;false,false,false;interaction(L, A), interaction(M, L).;false;false
8;false,false;location(A, J).;true;true
8;false;interaction(F, A), interaction(F, F).;true;true
8;false,false,true;location(K, J), recursion_proteinclass(K, B).;false;false
8;false,true,false;enzyme(F, H), location(F, I).;false;false
8;true;complex(C, D), interaction(E, A).;false;false
8;false,true;interaction(A, F), phenotype(F, G).;false;true
9;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
9;true,false;interaction(A, C).;false;true
9;false;interaction(A, H), recursion_proteinclass(H, B).;false;true
9;true,true;phenotype(E, D).;false;false
9;true,false,false;interaction(F, C), complex(F, G).;false;false
9;false,false;interaction(A, A).;false;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;false,false,false;phenotype(A, I).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( tweets(D, E), follows(A, F) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.22400259363609895;  // std dev = 6,896, 205,000 (wgt'ed) examples reached here.  /* #neg=130 #pos=75 */
%   | | else return 0.10814893509951233;  // std dev = 3,873, 80,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=20 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then return 0.20430278125335852;  // std dev = 2,426, 26,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.003920030417729115;  // std dev = 1,857, 29,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.33037115732173455;  // std dev = 2,995, 36,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=17 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.2224704146268254;  // std dev = 6,837, 197,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=77 */
%   | else return 0.3912282534522817;  // std dev = 1,467, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), follows(F, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.027517768413763643;  // std dev = 3,235, 92,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=12 */
%   | | | else return 0.22488613716011274;  // std dev = 4,361, 80,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.15098898973224012;  // std dev = 8,281, 312,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=107 */
%   | else if ( follows(E, A) )
%   | | then return -0.09570700058266368;  // std dev = 0,905, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(C, F), follows(F, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.12932359873751437;  // std dev = 2,528, 31,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.1788533730296477;  // std dev = 2,225, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.20248883560563816;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.12624529833964088;  // std dev = 6,797, 212,000 (wgt'ed) examples reached here.  /* #neg=140 #pos=72 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.13877235690893552;  // std dev = 1,407, 31,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.0046422390399886385;  // std dev = 1,160, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.027418895511977473;  // std dev = 0,934, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.20481921955290125;  // std dev = 4,187, 72,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=31 */
%   | | | else return -0.044876325655674995;  // std dev = 0,904, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.21180211899031934;  // std dev = 3,025, 37,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.10957932117464855;  // std dev = 8,566, 343,000 (wgt'ed) examples reached here.  /* #neg=225 #pos=118 */
%   | else if ( follows(A, E) )
%   | | then return -0.26165876756444434;  // std dev = 0,175, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.07085003446259398;  // std dev = 2,282, 24,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.05056997308673263;  // std dev = 0,444, 262,000 (wgt'ed) examples reached here.  /* #neg=185 #pos=77 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.14045036908248917;  // std dev = 2,804, 33,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | | else return 0.10271172299723466;  // std dev = 0,470, 17,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, A), tweets(F, H) )
%   | | | then return 0.4012403974782337;  // std dev = 1,099, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.17520092525339992;  // std dev = 2,907, 36,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=17 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.056943577397935215;  // std dev = 2,281, 24,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then return 0.044762426120848624;  // std dev = 6,914, 237,000 (wgt'ed) examples reached here.  /* #neg=165 #pos=72 */
%   | else return 0.007643595067757576;  // std dev = 1,929, 25,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(A, G), tweets(G, E) )
%   | | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.14344220262332844;  // std dev = 3,051, 39,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=18 */
%   | | | else return -0.29072144166317293;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(I, F), recursion_accounttype(I, B) )
%   | | | then return 0.032054509099785744;  // std dev = 2,304, 25,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13327239884730968;  // std dev = 2,129, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return 0.13715451853024302;  // std dev = 2,693, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.034289236536147266;  // std dev = 6,402, 206,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=62 */
%   | | else return 0.0875614752353536;  // std dev = 4,374, 82,000 (wgt'ed) examples reached here.  /* #neg=47 #pos=35 */
%   | else return -0.24580701376792502;  // std dev = 0,094, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), tweets(G, H) )
%   | | then return 0.17823304361116865;  // std dev = 2,828, 33,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.009105671400003847;  // std dev = 0,409, 54,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, E) )
%   | then return 0.08972920692251521;  // std dev = 6,359, 176,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=69 */
%   | else return 0.10319508704832021;  // std dev = 2,694, 30,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   else if ( follows(A, F), follows(F, F) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(G, B) )
%   | | then return -0.023197167218768276;  // std dev = 5,375, 172,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=44 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.03842418991011118;  // std dev = 0,459, 312,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=107 */
%   | else if ( follows(C, A) )
%   | | then return -0.18864475956773039;  // std dev = 0,096, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(C, E), tweets(E, F) )
%   | | | then return -0.16626392217126856;  // std dev = 0,011, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.03791283178230667;  // std dev = 2,447, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.035468342406995715;  // std dev = 2,225, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.24153756387706135;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.728057
   AUC PR    = 0.547205
   CLL	      = -0.590525
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.845 seconds
Total inference time: 1.678 seconds
AUC ROC: 0.728057


Results scoring model
   AUC ROC   = 0.718459
   AUC PR    = 0.532914
   CLL	      = -0.59399
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.263 seconds
Parameter learned model CLL: -0.59399


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), follows(D, C)', 'true,false': 'recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(D, B), tweets(A, E)', 'true': 'tweets(D, E), follows(A, F)', 'true,false,false': 'follows(A, G), follows(D, G)', 'false,false': 'follows(A, I), recursion_accounttype(I, B)', 'false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, J)'}, {'true,false,true': [2.426, 17, 9], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'false,false,false,true': [2.995, 19, 17], 'true,true,true': [6.896, 130, 75], 'true,true,false': [3.873, 60, 20], 'false,false,true': [1.857, 25, 4], 'false,true': [0.0, 0, 1], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F), follows(F, F)', 'true': 'tweets(C, D)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,false': [1.467, 4, 5], 'false,false,false,true': [3.235, 80, 12], 'true,true': [6.837, 120, 77], 'false,false,true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,false,false': [4.361, 48, 32]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true,false': 'follows(E, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'true,false,false': 'follows(C, F), follows(F, F)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,false,true': [0.905, 10, 1], 'true,false,false,false': [2.528, 21, 10], 'true,false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'true,true': [8.281, 205, 107], 'false,false,true': [0.0, 0, 0], 'false,true': [2.225, 13, 8], 'false,false,false,false': [3.73e-09, 3, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true,false': 'follows(E, A), follows(A, E)', 'false': 'follows(A, A)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'true,false,false': 'tweets(A, F)', 'false,false': 'follows(G, A), tweets(G, H)', 'false,false,true': 'follows(I, G), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, J)'}, {'true,false,true': [1.407, 29, 2], 'true,false,false,false': [0.934, 7, 1], 'true,false,false,true': [1.16, 9, 2], 'false,false,true,false': [0.904, 6, 1], 'true,true': [6.797, 140, 72], 'false,false,true,true': [4.187, 41, 31], 'false,false,false,true': [3.025, 20, 17], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true,false': 'follows(A, E)', 'true': 'follows(C, D), follows(A, D)'}, {'true,true': [8.566, 225, 118], 'true,false,true': [0.175, 11, 0], 'true,false,false': [2.282, 16, 8], 'false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,false,false': 'follows(A, I), tweets(A, J)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(G, A), tweets(F, H)', 'false,true': 'tweets(D, E), tweets(A, E)'}, {'false,false,true,true': [1.099, 2, 4], 'false,false,true,false': [2.907, 19, 17], 'false,true,true': [2.804, 19, 14], 'true': [0.444, 185, 77], 'false,true,false': [0.47, 11, 6], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.281, 16, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'tweets(A, E), follows(F, A)', 'false,false': 'follows(A, A)', 'false,true,true': 'follows(H, F), recursion_accounttype(H, B)', 'false,true,false': 'follows(I, F), recursion_accounttype(I, B)', 'true': 'follows(C, D), follows(D, C)', 'false,false,false': 'tweets(A, J)', 'false,true': 'follows(A, G), tweets(G, E)'}, {'true,false': [1.929, 20, 5], 'false,true,true,false': [0.0, 1, 0], 'false,true,false,true': [2.304, 17, 8], 'true,true': [6.914, 165, 72], 'false,true,true,true': [3.051, 21, 18], 'false,false,false,true': [2.129, 10, 9], 'false,false,true': [0.0, 0, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false,false,false': [2.693, 18, 14]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true,true': 'follows(A, E), recursion_accounttype(E, B)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, A)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false,true': 'follows(G, A), tweets(G, H)'}, {'true,false': [0.094, 3, 0], 'false,true,true': [2.828, 18, 15], 'false,false,false': [0.409, 40, 14], 'true,true,false': [4.374, 47, 35], 'false,true,false': [0.0, 0, 0], 'true,true,true': [6.402, 144, 62], 'false,false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, F), follows(F, F)', 'false,false': 'recursion_accounttype(G, B)', 'true': 'tweets(C, D), follows(A, E)'}, {'true,true': [6.359, 107, 69], 'true,false': [2.694, 17, 13], 'false,false,true': [5.375, 128, 44], 'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true,false': 'follows(C, A)', 'false': 'follows(G, A), recursion_accounttype(G, B)', 'true,false,false': 'follows(C, E), tweets(E, F)', 'false,false': 'follows(A, A)', 'true': 'follows(C, D), recursion_accounttype(D, B)'}, {'true,false,true': [0.096, 7, 0], 'true,true': [0.459, 205, 107], 'true,false,false,true': [0.011, 2, 0], 'false,false,false': [3.73e-09, 3, 0], 'false,false,true': [0.0, 0, 0], 'false,true': [2.225, 13, 8], 'true,false,false,false': [2.447, 22, 11]}]]
[{'': [0.22222222222222426, 0.22222222222222232], 'true,false': [0.22633136094674564, 0.0], 'false': [0.0, 0.21869822485207108], 'true,true': [0.23200475907198093, 0.18749999999999956], 'true,false,false': [0.0, nan], 'false,false': [0.11890606420927453, 0.2492283950617279], 'true': [0.2222222222222237, 0.22222222222222232], 'false,false,false': [0.2492283950617279, nan]}, {'': [0.23853858789169746, 0.18724245037348974], 'false': [nan, 0.18724245037348974], 'false,false': [nan, 0.18724245037348952], 'true': [0.23726605666547937, 0.23915791159491928], 'false,false,false': [0.11372956064735965, 0.23770604505561327]}, {'': [0.2159449074630055, 0.22225472448370442], 'true,false': [0.07451298647473402, 0.20613309541686756], 'false': [0.2358276643990932, 4.625929269271485e-18], 'true,false,false': [nan, 0.20613309541686756], 'false,false': [nan, 4.625929269271485e-18], 'true': [0.21981763660409634, 0.1814501761729334], 'false,false,false': [nan, 4.625929269271485e-18]}, {'': [0.20030253694926883, 0.24067415586195706], 'false,false,false': [0.24737621692820289, nan], 'false': [nan, 0.2406741558619573], 'true': [0.21791315174265757, 0.08800363121382018], 'true,false,false': [0.12233461129397866, 0.1089543301768589], 'false,false': [0.23726496746925485, 0.24737621692820283], 'false,false,true': [0.2434699078744345, 0.11661935239809003], 'true,false': [0.06384784029674198, 0.11695138112469498]}, {'': [0.21191744429959672, nan], 'true,false': [0.0027970543435946837, 0.21705208519533767], 'true': [0.21393372471163183, 0.17354205125770444]}, {'': [0.19701700529787447, 0.233751501199761], 'false,false,false': [nan, 0.21688011887353334], 'false': [0.23255706100015394, 0.2343842164568704], 'false,false': [0.2361447719759891, 0.21688011887353334], 'false,false,true': [0.2011557098312903, 0.23467716190434157], 'false,true': [0.23831204554711322, 0.2204456448394872]}, {'': [0.19678995898987778, 0.23092697669177856], 'false,false,false': [0.23848811164923192, 0.22659936460629984], 'false,true,false': [0.21237761306406167, nan], 'false': [0.2300768497871691, 0.23103202856760954], 'false,true,true': [0.23862248470191225, 0.0], 'false,false': [nan, 0.23103202856760943], 'true': [0.20171471358048787, 0.14885694804477378], 'false,true': [0.23725156304110526, 0.21237761306406167]}, {'': [0.20806834966323534, 0.20409457556243502], 'false': [0.24231725563106654, 0.16742407329803516], 'true,true': [0.19894150650593487, 0.23331379816546477], 'false,false': [nan, 0.16742407329803508], 'true': [0.20930602205028934, 0.002969718586668252], 'false,true': [0.24231725563106654, nan]}, {'': [0.23153776205410492, 0.1679946503954989], 'false': [nan, 0.16799465039549874], 'false,false': [0.16799465039549874, nan], 'true': [0.22974419644827293, 0.24190509095175994]}, {'': [0.20384214253561378, 0.21474179861192144], 'true,false': [0.0013280552496397122, 0.17332925610720715], 'false': [0.23582766439909303, 1.850371707708594e-17], 'true,false,false': [6.12231642587481e-05, 0.18144816919255358], 'false,false': [nan, 1.850371707708594e-17], 'true': [0.21067199592000124, 0.15107598121126564]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), follows(D, C).;true;true
0;true,false;recursion_accounttype(D, B).;true;true
0;true;tweets(D, E), follows(A, F).;true;true
0;false;follows(H, A), recursion_accounttype(H, B).;true;true
2;;accounttype(A, B) :- follows(A, C).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
6;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
6;false;tweets(A, E), follows(F, A).;true;true
6;false,true,true;follows(H, F), recursion_accounttype(H, B).;true;true
6;false,true;follows(A, G), tweets(G, E).;true;true
9;;accounttype(A, B) :- follows(A, C).;true;true
9;true,false;follows(C, A).;true;true
9;true,false,false;follows(C, E), tweets(E, F).;true;true
9;true;follows(C, D), recursion_accounttype(D, B).;true;true
9;false;follows(G, A), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( tweets(D, E), follows(A, F) )
%   | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.2918838748585497;  // std dev = 6,385, 166,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=72 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.08363913117794324;  // std dev = 0,418, 102,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | else if ( recursion_accounttype(D, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.26723984419042146;  // std dev = 2,306, 22,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(J, A), recursion_accounttype(J, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return -0.003920030417729115;  // std dev = 0,345, 29,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | | else return 0.33037115732173455;  // std dev = 0,499, 36,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.4410040710857658;  // std dev = 3,252, 45,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.6187818488635426;  // std dev = 1,549, 15,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.06016115920837028;  // std dev = 3,991, 87,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=21 */
%   | | | else return 0.31831771715123613;  // std dev = 3,224, 42,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.018449060357645736;  // std dev = 0,337, 92,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.318211876706579;  // std dev = 4,030, 66,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=32 */
%   | | | else return -0.17510162881815122;  // std dev = 0,068, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.20789357611992404;  // std dev = 5,849, 148,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=64 */
%   | | | else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.016432083254514458;  // std dev = 0,337, 97,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=13 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.29535733704795347;  // std dev = 1,708, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.7810311723835707;  // std dev = 0,035, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.17403928530900303;  // std dev = 3,056, 41,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | | else return 0.24941584744811107;  // std dev = 2,901, 36,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=17 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.15203642431261633;  // std dev = 0,486, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.36167969832800395;  // std dev = 3,544, 57,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=38 */
%   | | | else return 0.049887148438012244;  // std dev = 4,247, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.014352092128923879;  // std dev = 0,337, 97,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=13 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(A, G) )
%   | | | then return 0.19088763058264926;  // std dev = 3,344, 47,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | | | else return 0.32737932636379197;  // std dev = 2,808, 34,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | else return -0.1834745612927937;  // std dev = 0,085, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.12410245017700079;  // std dev = 0,486, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.2803125887053887;  // std dev = 3,543, 57,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=38 */
%   | | | else return 0.04081033555197224;  // std dev = 4,246, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.012554825424669801;  // std dev = 0,337, 97,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=13 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G), follows(F, A) )
%   | | | then return 0.33598506371287024;  // std dev = 1,515, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.17326621547014948;  // std dev = 4,083, 69,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=33 */
%   | | else return -0.1576644025214158;  // std dev = 0,075, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.09970923890362424;  // std dev = 0,486, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), follows(D, C) )
%   | | | then return 0.2163661605923457;  // std dev = 3,454, 55,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=37 */
%   | | | else return 0.03464088134166806;  // std dev = 4,316, 93,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=27 */
%   | | else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.010997412365696388;  // std dev = 0,337, 97,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=13 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(E, G), follows(E, F) )
%   | | | then return 0.12859472751686174;  // std dev = 3,913, 64,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=30 */
%   | | | else return 0.2504919173976336;  // std dev = 1,887, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else return -0.13790401550296205;  // std dev = 0,066, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.0791214630429606;  // std dev = 0,486, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.059637638880192995;  // std dev = 0,435, 170,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=65 */
%   | else return -0.009461324144238462;  // std dev = 0,337, 92,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=12 */
%   else if ( tweets(A, E), follows(F, A) )
%   | then if ( follows(A, G), tweets(G, E) )
%   | | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | | then return 0.12338219594300767;  // std dev = 3,028, 39,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=18 */
%   | | | else return -0.3248961071957756;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.062191656485117805;  // std dev = 2,225, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return -0.1403065928472627;  // std dev = 0,213, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.43903377839580354;  // std dev = 0,078, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.013969721752763276;  // std dev = 2,513, 28,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | | | else return 0.11937139946035402;  // std dev = 1,761, 20,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.14622460146565686;  // std dev = 3,145, 47,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=28 */
%   | | | else return -0.10898618588805244;  // std dev = 3,031, 72,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=12 */
%   | | else if ( follows(A, F), follows(C, F) )
%   | | | then return 0.576522718216877;  // std dev = 0,250, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.0122344913690481;  // std dev = 2,436, 28,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else if ( tweets(A, G), follows(A, C) )
%   | | then if ( follows(H, A), follows(H, C) )
%   | | | then return 0.4506175669929025;  // std dev = 1,195, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.06930065404781043;  // std dev = 1,090, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, I), follows(C, I) )
%   | | | then return 0.0498707223200511;  // std dev = 2,384, 33,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | | | else return 0.35773480046645906;  // std dev = 0,819, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.021240506458319437;  // std dev = 0,394, 172,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=44 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return -0.008598702637638546;  // std dev = 0,377, 183,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=49 */
%   | else if ( tweets(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.15919772249965564;  // std dev = 1,910, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return 0.013339281983047685;  // std dev = 2,918, 55,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=15 */
%   | | else return 0.46324186808225887;  // std dev = 0,883, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.059551709197709836;  // std dev = 3,292, 47,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | | | else return 0.13564729740646192;  // std dev = 2,722, 34,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | else return -0.1375267429876506;  // std dev = 0,072, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.0458165203253731;  // std dev = 0,486, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else return -0.07055792224711464;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return -0.002147695693106708;  // std dev = 5,089, 175,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=49 */
%   | | | else return 0.06996681127948835;  // std dev = 3,560, 71,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=27 */
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return 0.07345298689759844;  // std dev = 3,281, 49,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=23 */
%   | | | else return 0.007851081231861023;  // std dev = 2,021, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | else if ( follows(C, A) )
%   | | then return -0.1676492832629562;  // std dev = 0,131, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(C, I), tweets(I, J) )
%   | | | then return -0.14098663095833727;  // std dev = 0,007, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.03011127857406075;  // std dev = 2,088, 33,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   else if ( follows(K, A), recursion_accounttype(K, B) )
%   | then return 0.03553180514575702;  // std dev = 0,486, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | else return -0.06606865827901644;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.748408
   AUC PR    = 0.590453
   CLL	      = -0.550728
   Precision = 0.702128 at threshold = 0.5
   Recall    = 0.211538
   F1        = 0.325123


Total learning time: 65.095 seconds
Total inference time: 4.736 seconds
AUC ROC: 0.748408


Results scoring model
   AUC ROC   = 0.813256
   AUC PR    = 0.69234
   CLL	      = -0.507077
   Precision = 0.73913 at threshold = 0.5
   Recall    = 0.404762
   F1        = 0.523077


Total scoring time: 3.894 seconds
Refined model CLL: -0.507077


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.748408
   AUC PR    = 0.590453
   CLL	      = -0.550728
   Precision = 0.702128 at threshold = 0.5
   Recall    = 0.211538
   F1        = 0.325123


Total learning time: 76.09700000000001 seconds
Total inference time: 4.736 seconds
AUC ROC: 0.748408
Total revision time: 76.09700000000001
Best scored revision CLL: -0.507077


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:14:27
{'CLL': -0.550728, 'Precision': [0.702128, 0.5], 'parameter_1.0': {'CLL': -0.590525, 'Precision': [nan, 0.5], 'Inference time': 1.678, 'Learning time': 5.845, 'AUC ROC': 0.728057, 'F1': nan, 'AUC PR': 0.547205, 'Recall': 0.0}, 'Inference time': 4.736, 'Learning time': 76.09700000000001, 'AUC ROC': 0.748408, 'F1': 0.325123, 'AUC PR': 0.590453, 'Recall': 0.211538}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(D, A) )
%   | | then if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.4803711573217336;  // std dev = 3,252, 45,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.6581489350995123;  // std dev = 1,549, 15,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.09952824544433964;  // std dev = 3,991, 87,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=21 */
%   | | | else return 0.3581489350995123;  // std dev = 3,240, 42,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.011416282291792016;  // std dev = 0,337, 92,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.34299741994799593;  // std dev = 4,060, 66,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=32 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( follows(A, C), tweets(A, E) )
%   | | | then return 0.405946095581084;  // std dev = 3,136, 42,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=26 */
%   | | | else return 0.5461639838550821;  // std dev = 1,771, 18,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.08697564907438804;  // std dev = 3,991, 87,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=21 */
%   | | | else return 0.3087411357856348;  // std dev = 3,240, 42,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.010032259705423964;  // std dev = 0,337, 92,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=12 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2959222839173279;  // std dev = 4,060, 66,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=32 */
%   | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), follows(A, D) )
%   | | then if ( tweets(C, E), tweets(A, E) )
%   | | | then return 0.33204429874693464;  // std dev = 3,242, 45,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.45095511519533626;  // std dev = 1,562, 15,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else if ( tweets(D, F), follows(G, C) )
%   | | | then return 0.11660277413210804;  // std dev = 5,053, 124,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=38 */
%   | | | else return 0.5719091368197882;  // std dev = 0,914, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return -0.008825367568025816;  // std dev = 0,337, 92,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=12 */
%   | else if ( follows(I, A) )
%   | | then return 0.11964095489842631;  // std dev = 0,464, 44,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2551323233254948;  // std dev = 2,102, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return 0.2692215039621108;  // std dev = 1,923, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.28668959413988704;  // std dev = 3,532, 57,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=38 */
%   | | | else return 0.07525229322246837;  // std dev = 4,154, 91,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.008347901175836493;  // std dev = 0,336, 97,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=13 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.4303896014671942;  // std dev = 1,715, 14,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.20488282847091244;  // std dev = 4,065, 67,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=32 */
%   | | else return -0.13690788979028934;  // std dev = 0,025, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.11524405839554167;  // std dev = 0,486, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else return -0.1248093092354005;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.17343561064348953;  // std dev = 4,811, 105,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=52 */
%   | | | else return -0.0017001017008993545;  // std dev = 2,544, 43,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.007336530657557603;  // std dev = 0,336, 97,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=13 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A), tweets(G, H) )
%   | | | then return 0.3767789147447484;  // std dev = 1,557, 12,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.1633517371699331;  // std dev = 4,113, 69,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=33 */
%   | | else return -0.121525799200032;  // std dev = 0,022, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.09216138113673769;  // std dev = 0,486, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else return -0.11180211754379087;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.017494756038042143;  // std dev = 0,385, 183,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=49 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(C, F) )
%   | | | then return 0.21738251724072274;  // std dev = 1,944, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return 0.5206250021643548;  // std dev = 0,941, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.04248650580925803;  // std dev = 0,391, 55,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=15 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.08708811235534462;  // std dev = 3,367, 47,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | | | else return 0.24164244073006932;  // std dev = 2,788, 34,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | else return -0.10914185453753612;  // std dev = 0,020, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.07287043323593416;  // std dev = 0,486, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else return -0.10117231631625817;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(E, F) )
%   | | | then return 0.16162376468720666;  // std dev = 4,769, 105,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=55 */
%   | | | else return -0.27881637561369593;  // std dev = 0,608, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.10613066929455818;  // std dev = 0,076, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( tweets(A, G), follows(A, C) )
%   | | then if ( follows(H, A), follows(H, C) )
%   | | | then return 0.4286348107636053;  // std dev = 1,142, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.01180497835807067;  // std dev = 0,982, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.07373056799764954;  // std dev = 2,386, 31,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | | | else return 0.3814532638652934;  // std dev = 0,778, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, J), recursion_accounttype(J, B) )
%   | then return -0.0110303423851577;  // std dev = 0,335, 92,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=12 */
%   | else return 0.06285128960145106;  // std dev = 0,455, 80,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=32 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(E, F) )
%   | | | then return 0.12565633560667147;  // std dev = 4,759, 105,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=55 */
%   | | | else return -0.22904578789981378;  // std dev = 0,548, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.09702790711964505;  // std dev = 0,072, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, G), follows(C, G) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.1558790525526109;  // std dev = 2,577, 38,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=20 */
%   | | | else return -0.08641167963776993;  // std dev = 1,107, 9,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else return 0.3152670371217215;  // std dev = 0,912, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(I, A) )
%   | then return -0.007695582336885825;  // std dev = 0,385, 109,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=23 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.007108854650522891;  // std dev = 0,354, 27,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | else return 0.10324784359377076;  // std dev = 0,445, 36,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), tweets(A, D) )
%   | then return 0.0014101359577444914;  // std dev = 0,363, 183,000 (wgt'ed) examples reached here.  /* #neg=134 #pos=49 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(C, F), follows(C, G) )
%   | | | then return 0.10119217764613217;  // std dev = 1,735, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.3130749896800061;  // std dev = 1,136, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.011336446075395424;  // std dev = 0,384, 55,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=15 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | then if ( follows(H, I), tweets(H, J) )
%   | | | then return 0.058748337817181;  // std dev = 3,896, 64,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=30 */
%   | | | else return 0.18826894756064536;  // std dev = 1,850, 17,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else return -0.11209429895230592;  // std dev = 0,036, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.015040205059203848;  // std dev = 0,470, 21,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else return -0.0970638542445944;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, C) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.10224235910870172;  // std dev = 4,916, 118,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=64 */
%   | | | else return -0.08431788657849262;  // std dev = 2,656, 66,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=14 */
%   | | else return 0.3728497046291042;  // std dev = 0,862, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.07876750665759802;  // std dev = 0,083, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.0064439740351250946;  // std dev = 0,392, 95,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=22 */
%   | | else return -0.13946129242315883;  // std dev = 0,305, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.002831562732000293;  // std dev = 0,351, 27,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.016698770520011615;  // std dev = 1,999, 16,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0.09704079304208317;  // std dev = 1,676, 20,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */


Results
   AUC ROC   = 0.775168
   AUC PR    = 0.61457
   CLL	      = -0.531609
   Precision = 0.735849 at threshold = 0.5
   Recall    = 0.25
   F1        = 0.373206


Total learning time: 39.009 seconds
Total inference time: 1.477 seconds
AUC ROC: 0.775168


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:15:08
{'CLL': -0.531609, 'Precision': [0.735849, 0.5], 'Inference time': 1.477, 'Learning time': 39.009, 'AUC ROC': 0.775168, 'F1': 0.373206, 'AUC PR': 0.61457, 'Recall': 0.25}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), follows(D, A) )
%   | | then if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.4803711573217336;  // std dev = 3,252, 45,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.6581489350995123;  // std dev = 1,549, 15,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else if ( follows(A, F), follows(F, C) )
%   | | | then return 0.09952824544433964;  // std dev = 3,991, 87,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=21 */
%   | | | else return 0.3581489350995123;  // std dev = 3,240, 42,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=21 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H), tweets(G, H) )
%   | | then if ( tweets(I, H), follows(I, A) )
%   | | | then return -0.07042249347191633;  // std dev = 1,669, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | | else return 0.034619523334806335;  // std dev = 1,572, 17,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.23314893509951226;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.021851064900487778;  // std dev = 1,625, 25,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | else if ( follows(A, K) )
%   | | then if ( follows(L, K), recursion_accounttype(L, B) )
%   | | | then return 0.34299741994799593;  // std dev = 4,060, 66,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=32 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.734693
   AUC PR    = 0.549998
   CLL	      = -0.691453
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 4.491 seconds
Total inference time: 0.853 seconds
AUC ROC: 0.734693


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:15:14
{'CLL': -0.691453, 'Precision': [nan, 0.5], 'Inference time': 0.853, 'Learning time': 4.491, 'AUC ROC': 0.734693, 'F1': nan, 'AUC PR': 0.549998, 'Recall': 0.0}


