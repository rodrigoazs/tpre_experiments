Starting experiment #1 for 53_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 3017
Source train neg examples: 249953

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22063938582525197;  // std dev = 0,481, 7.854,000 (wgt'ed) examples reached here.  /* #neg=5.007 #pos=2.847 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.039967116917694;  // std dev = 1,279, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.23314893509951234;  // std dev = 3,062, 40,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   | | else return 0.039967116917694;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.1642713840791042;  // std dev = 3,226, 49,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   | | | else return -0.06185106490048781;  // std dev = 1,356, 25,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.030317478081730163;  // std dev = 8,842, 789,000 (wgt'ed) examples reached here.  /* #neg=701 #pos=88 */
%   | | | else return 0.021850002715170316;  // std dev = 6,202, 281,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=46 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1871821138179756;  // std dev = 0,479, 7.951,000 (wgt'ed) examples reached here.  /* #neg=5.104 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7460347316828684;  // std dev = 2,975, 94,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=84 */
%   | | | else return -0.1437598290535222;  // std dev = 1,026, 346,000 (wgt'ed) examples reached here.  /* #neg=345 #pos=1 */
%   | | else if ( haswordtitle(E, H), haswordauthor(I, H) )
%   | | | then return -0.047222798186000385;  // std dev = 3,859, 170,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=17 */
%   | | | else return 0.014195983202376845;  // std dev = 4,015, 124,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=19 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 3.182459134780664E-4;  // std dev = 6,365, 338,000 (wgt'ed) examples reached here.  /* #neg=291 #pos=47 */
%   | | | else return -0.10465559766184954;  // std dev = 1,394, 55,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=2 */
%   | | else return -0.14401240349925076;  // std dev = 0,010, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16104604901001662;  // std dev = 0,480, 7.906,000 (wgt'ed) examples reached here.  /* #neg=5.059 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6657722044539056;  // std dev = 2,352, 90,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=84 */
%   | | | else return -0.12671951612311877;  // std dev = 1,022, 337,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=1 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.20081244966833756;  // std dev = 3,109, 42,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | | else return -0.053782974104813044;  // std dev = 4,375, 252,000 (wgt'ed) examples reached here.  /* #neg=231 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.007883956126767535;  // std dev = 6,396, 359,000 (wgt'ed) examples reached here.  /* #neg=312 #pos=47 */
%   | | | else return -0.09148627459592903;  // std dev = 1,393, 53,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=2 */
%   | | else return -0.12686796154793803;  // std dev = 0,009, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordtitle(F, D) )
%   | | | then return 0.14698969125141786;  // std dev = 6,578, 185,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=69 */
%   | | | else return 0.05179449605622093;  // std dev = 2,687, 36,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | else return 0.774016718278443;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.12936627409154092;  // std dev = 0,479, 7.767,000 (wgt'ed) examples reached here.  /* #neg=5.007 #pos=2.760 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), venue(J, B) )
%   | | | then return 0.20890407844199715;  // std dev = 0,677, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.15092779400288225;  // std dev = 3,156, 45,000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
%   | | else if ( author(K, H), venue(K, A) )
%   | | | then return 0.26639077906431996;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.13175814727941682;  // std dev = 0,030, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.006898241999599237;  // std dev = 0,301, 1.045,000 (wgt'ed) examples reached here.  /* #neg=894 #pos=151 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6874096891813799;  // std dev = 0,211, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.14423113196540166;  // std dev = 6,081, 155,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=61 */
%   | | | else return -0.18375044358234957;  // std dev = 2,162, 76,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=5 */
%   | else return 0.10640179388049786;  // std dev = 0,479, 7.754,000 (wgt'ed) examples reached here.  /* #neg=4.994 #pos=2.760 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then return 0.019473495059904283;  // std dev = 0,284, 433,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=85 */
%   | | else return -0.025897491364396803;  // std dev = 0,312, 313,000 (wgt'ed) examples reached here.  /* #neg=277 #pos=36 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return -0.036503631956922314;  // std dev = 0,283, 21,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.08255109944165509;  // std dev = 0,966, 18,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return -0.012828364037592825;  // std dev = 6,346, 382,000 (wgt'ed) examples reached here.  /* #neg=336 #pos=46 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09100221421503503;  // std dev = 0,479, 7.888,000 (wgt'ed) examples reached here.  /* #neg=5.041 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.663875681555963;  // std dev = 0,347, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.17236201581013566;  // std dev = 0,041, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.13911419953592097;  // std dev = 3,137, 44,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return -0.11175999031445824;  // std dev = 0,025, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.03314364189857134;  // std dev = 5,724, 383,000 (wgt'ed) examples reached here.  /* #neg=300 #pos=83 */
%   | | | else return -0.03590502371029361;  // std dev = 4,357, 230,000 (wgt'ed) examples reached here.  /* #neg=209 #pos=21 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.006486794136756009;  // std dev = 6,398, 374,000 (wgt'ed) examples reached here.  /* #neg=327 #pos=47 */
%   | | | else return -0.1121707705334578;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07386688786973081;  // std dev = 0,480, 7.862,000 (wgt'ed) examples reached here.  /* #neg=5.015 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), title(H, E) )
%   | | | then return 0.011017554090816404;  // std dev = 5,862, 438,000 (wgt'ed) examples reached here.  /* #neg=353 #pos=85 */
%   | | | else return -0.041638804869011344;  // std dev = 3,384, 134,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=15 */
%   | | else if ( haswordtitle(E, I), haswordvenue(A, I) )
%   | | | then return 0.07109836967750553;  // std dev = 4,058, 105,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=21 */
%   | | | else return -0.12970116852168762;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.014292235163421282;  // std dev = 0,934, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.13651563183602905;  // std dev = 0,023, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.019950799783823074;  // std dev = 6,478, 432,000 (wgt'ed) examples reached here.  /* #neg=384 #pos=48 */
%   | | | else return -0.10147630643617565;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05860840705048745;  // std dev = 0,480, 7.858,000 (wgt'ed) examples reached here.  /* #neg=5.011 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.028837550243310566;  // std dev = 0,288, 388,000 (wgt'ed) examples reached here.  /* #neg=303 #pos=85 */
%   | | else if ( haswordauthor(G, D) )
%   | | | then return 0.0627614484413952;  // std dev = 3,282, 53,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
%   | | | else return -0.040894213968438974;  // std dev = 4,351, 247,000 (wgt'ed) examples reached here.  /* #neg=226 #pos=21 */
%   | else return -0.017118875294366953;  // std dev = 0,313, 438,000 (wgt'ed) examples reached here.  /* #neg=389 #pos=49 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( venue(E, B), title(E, D) )
%   | then if ( haswordvenue(B, C) )
%   | | then return 0.03199731835615791;  // std dev = 0,476, 7.497,000 (wgt'ed) examples reached here.  /* #neg=4.888 #pos=2.609 */
%   | | else if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.7033472337653681;  // std dev = 3,338, 143,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=131 */
%   | | | else return -0.13052333013658715;  // std dev = 1,615, 541,000 (wgt'ed) examples reached here.  /* #neg=538 #pos=3 */
%   | else if ( title(G, D), venue(G, A) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return -0.19975766417222857;  // std dev = 4,885, 232,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=27 */
%   | | | else return -0.07801204537964908;  // std dev = 1,389, 53,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=3 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.3828282980240634;  // std dev = 4,795, 111,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=78 */
%   | | | else return 0.04377348618340962;  // std dev = 4,420, 200,000 (wgt'ed) examples reached here.  /* #neg=151 #pos=49 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.5824969647897352;  // std dev = 0,292, 75,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=68 */
%   | else return 0.002514000827675966;  // std dev = 0,272, 272,000 (wgt'ed) examples reached here.  /* #neg=223 #pos=49 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03305436884739179;  // std dev = 0,475, 7.951,000 (wgt'ed) examples reached here.  /* #neg=5.104 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then return 0.06613839627242944;  // std dev = 0,373, 51,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
%   | | else if ( title(G, E), venue(G, A) )
%   | | | then return 0.01492120638957422;  // std dev = 5,654, 388,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=83 */
%   | | | else return -0.03451101908872176;  // std dev = 3,908, 247,000 (wgt'ed) examples reached here.  /* #neg=226 #pos=21 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.005565103859966245;  // std dev = 5,583, 338,000 (wgt'ed) examples reached here.  /* #neg=291 #pos=47 */
%   | | | else return -0.07351190551159793;  // std dev = 1,380, 62,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=2 */
%   | | else return -0.09102381961328473;  // std dev = 0,007, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5017132915351568;  // std dev = 4,813, 101,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=65 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048763;  // std dev = 8,94e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4291108541123058;  // std dev = 4,813, 101,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=65 */
%   else if ( movie(D, B) )
%   | then return -0.1254446385283914;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3960635432018785;  // std dev = 4,478, 94,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=65 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360621;  // std dev = 7,57e-09, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.24112013366563184;  // std dev = 0,484, 104,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783631;  // std dev = 0,000, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.19499421572132444;  // std dev = 0,481, 102,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926096;  // std dev = 4,75e-09, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.16581409205454203;  // std dev = 4,725, 99,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=65 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.0851847513883968;  // std dev = 5,82e-09, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1244060819466333;  // std dev = 4,725, 99,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=65 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109161;  // std dev = 5,37e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08703056240841407;  // std dev = 4,770, 100,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=65 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333707;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.07901338251042984;  // std dev = 4,678, 98,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=65 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4,94e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.040256722046503234;  // std dev = 4,813, 101,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=65 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202626;  // std dev = 0,000, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.317763
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.197 seconds
Total inference time: 3.044 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.867048
   AUC PR    = 0.100619
   CLL	      = -0.30366
   Precision = 0.100619 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.182841


Total scoring time: 3.312 seconds
Parameter learned model CLL: -0.30366


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [8.94e-08, 101, 0], 'false,true,false': [0.0, 0, 0], 'true': [4.813, 36, 65]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 88, 0], 'true': [4.813, 36, 65]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [7.57e-09, 89, 0], 'true': [4.478, 29, 65]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.484, 39, 65], 'false,true,true': [0.0, 106, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.481, 37, 65], 'false,true': [4.75e-09, 99, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.82e-09, 112, 0], 'false,true,false': [0.0, 0, 0], 'true': [4.725, 34, 65]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.37e-08, 93, 0], 'false,true,false': [0.0, 0, 0], 'true': [4.725, 34, 65]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 101, 0], 'true': [4.77, 35, 65]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [4.678, 33, 65], 'false': [0.0, 0, 0], 'true,false,false,false': [4.94e-08, 103, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 102, 0], 'true': [4.813, 36, 65]}]]
[{'': [0.22938927556121883, 7.91446116564468e-17], 'false,true': [7.91446116564468e-17, nan], 'false': [7.91446116564468e-17, nan]}, {'': [0.2293892755612182, -1.766263902812749e-17], 'false': [-1.766263902812749e-17, nan]}, {'': [0.21333182435491074, 5.98771968337163e-17], 'false': [5.98771968337163e-17, nan]}, {'': [0.23437500000000047, 0.0], 'false,true': [0.0, nan], 'false': [0.0, nan], 'true': [0.23437500000000047, nan]}, {'': [0.23116109188773576, 2.2428747972225384e-17], 'false': [2.2428747972225384e-17, nan], 'true': [0.23116109188773576, nan]}, {'': [0.22548719518416513, 3.271192840413408e-17], 'false,true': [3.271192840413408e-17, nan], 'false': [3.271192840413408e-17, nan]}, {'': [0.2254871951841653, 3.1038493161563513e-17], 'false,true': [3.1038493161563513e-17, nan], 'false': [3.1038493161563513e-17, nan]}, {'': [0.22750000000000004, -5.4961535872532505e-18], 'false': [-5.4961535872532505e-18, nan]}, {'': [0.11432560600361964, nan], 'true,false': [nan, 2.3713501496848002e-17], 'true,false,false': [nan, 2.3713501496848002e-17], 'true': [0.22334443981674304, 2.3713501496848002e-17]}, {'': [0.22938927556121977, -1.5782582212808597e-17], 'false': [-1.5782582212808597e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.14185106490048763;  // std dev = 8,30e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109542;  // std dev = 1,19e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.14095283345445683;  // std dev = 0,255, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.1254446385283914;  // std dev = 0,000, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.12499909160227458;  // std dev = 0,270, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360622;  // std dev = 6,50e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.11215576861489684;  // std dev = 0,249, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.10159632948783628;  // std dev = 3,65e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.09285402323528208;  // std dev = 0,120, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.09269127618926108;  // std dev = 0,000, 86,000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08220086142099077;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.25517224256948967;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.08518475138839678;  // std dev = 4,34e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.08061085509643302;  // std dev = 0,161, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.07877675473109161;  // std dev = 4,94e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(B) )
%   | | then return -0.07072375763027818;  // std dev = 7,45e-09, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.22474050251109337;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333707;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.1298641164449253;  // std dev = 0,067, 29,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | else return 0.12761080855527612;  // std dev = 0,070, 44,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=39 */
%   | else return -0.06914551375560675;  // std dev = 0,120, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13684417577021005;  // std dev = 0,001, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( actor(B) )
%   | | then return -0.06206527113028399;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.1776811723177034;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06523961559572587;  // std dev = 0,035, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063344
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.876 seconds
Total inference time: 1.356 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066534
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.39 seconds
Refined model CLL: -0.066534


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063344
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.775 seconds
Total inference time: 1.356 seconds
AUC ROC: 1.0
Total revision time: 8.775
Best scored revision CLL: -0.066534


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:42:14
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.356, 'CLL': -0.063344, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.775, 'parameter_0.2': {'AUC PR': 0.056112, 'AUC ROC': 0.857618, 'Precision': [0.056112, 0.5], 'Inference time': 3.044, 'CLL': -0.317763, 'Recall': 1.0, 'F1': 0.106262, 'Learning time': 2.197}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.14185106490048782;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109542;  // std dev = 1,19e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.1254446385283911;  // std dev = 7,60e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.11231637819360625;  // std dev = 7,74e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.10159632948783624;  // std dev = 4,94e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.09269127618926103;  // std dev = 3,65e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.08518475138839685;  // std dev = 4,47e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07877675473109164;  // std dev = 5,96e-08, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07324622576333711;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936707;  // std dev = 4,94e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.06842697784420267;  // std dev = 5,27e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06419184008202626;  // std dev = 0,000, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.117 seconds
Total inference time: 1.348 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:42:17
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.348, 'CLL': -0.063421, 'Recall': 1.0, 'Learning time': 2.117, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.14185106490048766;  // std dev = 7,88e-08, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.852 seconds
Total inference time: 0.851 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:42:19
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.851, 'CLL': -0.152968, 'Recall': 0.0, 'Learning time': 0.852, 'F1': nan}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.549638296801637;  // std dev = 6,333, 188,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=130 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048824;  // std dev = 0,000, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4725496332250925;  // std dev = 6,295, 187,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=130 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839152;  // std dev = 0,000, 177,000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3193547149288322;  // std dev = 6,896, 205,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=130 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360653;  // std dev = 0,000, 184,000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2827512469200708;  // std dev = 0,470, 194,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783652;  // std dev = 0,000, 182,000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.21391695698012714;  // std dev = 0,470, 194,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=130 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926058;  // std dev = 6,45e-09, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18193781162006362;  // std dev = 6,333, 188,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=130 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 5,67e-09, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.06719361554599969;  // std dev = 7,010, 209,000 (wgt'ed) examples reached here.  /* #neg=79 #pos=130 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109147;  // std dev = 7,60e-08, 199,000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15899172469433204;  // std dev = 5,921, 178,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=130 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333673;  // std dev = 7,57e-09, 174,000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.033797099363346156;  // std dev = 6,807, 202,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=130 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 8,09e-08, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.05930450166731031;  // std dev = 6,479, 192,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=130 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202626;  // std dev = 0,000, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.331186
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.982 seconds
Total inference time: 1.582 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.87154
   AUC PR    = 0.103751
   CLL	      = -0.30746
   Precision = 0.103751 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.187997


Total scoring time: 2.239 seconds
Parameter learned model CLL: -0.30746


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 170, 0], 'false,true,false': [0.0, 0, 0], 'true': [6.333, 58, 130]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 177, 0], 'true': [6.295, 57, 130]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 184, 0], 'true': [6.896, 75, 130]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.47, 64, 130], 'false,true,true': [0.0, 182, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.47, 64, 130], 'false,true': [6.45e-09, 192, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.67e-09, 196, 0], 'false,true,false': [0.0, 0, 0], 'true': [6.333, 58, 130]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [7.6e-08, 199, 0], 'false,true,false': [0.0, 0, 0], 'true': [7.01, 79, 130]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [7.57e-09, 174, 0], 'true': [5.921, 48, 130]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [6.807, 72, 130], 'false': [0.0, 0, 0], 'true,false,false,false': [8.09e-08, 197, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 190, 0], 'true': [6.479, 62, 130]}]]
[{'': [0.2133318243549161, -1.750233944703188e-16], 'false,true': [-1.750233944703188e-16, nan], 'false': [-1.750233944703188e-16, nan]}, {'': [0.21190197031656388, -1.2544892933617588e-17], 'false': [-1.2544892933617588e-17, nan]}, {'': [0.23200475907198306, -7.240584943207542e-18], 'false': [-7.240584943207542e-18, nan]}, {'': [0.2210649378254864, -8.540177112501205e-17], 'false,true': [-8.540177112501205e-17, nan], 'false': [-8.540177112501205e-17, nan], 'true': [0.2210649378254864, nan]}, {'': [0.22106493782548603, 4.163336342344337e-17], 'false': [4.163336342344337e-17, nan], 'true': [0.22106493782548603, nan]}, {'': [0.21333182435491232, 3.172065784643304e-17], 'false,true': [3.172065784643304e-17, nan], 'false': [3.172065784643304e-17, nan]}, {'': [0.23511366498019753, 2.901085290477796e-17], 'false,true': [2.901085290477796e-17, nan], 'false': [2.901085290477796e-17, nan]}, {'': [0.19694483019820797, 5.67872696503672e-17], 'false': [5.67872696503672e-17, nan]}, {'': [0.1187439441910329, nan], 'true,false': [nan, 3.325033424004276e-17], 'true,false,false': [nan, 3.325033424004276e-17], 'true': [0.22938927556121913, 3.325033424004276e-17]}, {'': [0.21864149305555503, -3.505967446184705e-18], 'false': [-3.505967446184705e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.14185106490048768;  // std dev = 6,50e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.14185106490048843;  // std dev = 0,000, 208,000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109556;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.1254446385283916;  // std dev = 0,000, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11231637819360632;  // std dev = 3,65e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.11231637819360651;  // std dev = 0,000, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830914;  // std dev = 3,86e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.10159632948783626;  // std dev = 2,58e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.10159632948783655;  // std dev = 0,000, 213,000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601497;  // std dev = 2,53e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.0926912761892606;  // std dev = 8,82e-08, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694897;  // std dev = 5,96e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.08518475138839679;  // std dev = 2,11e-08, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.08518475138839678;  // std dev = 6,99e-08, 174,000 (wgt'ed) examples reached here.  /* #neg=174 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325353;  // std dev = 2,11e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.07877675473109147;  // std dev = 7,30e-08, 201,000 (wgt'ed) examples reached here.  /* #neg=201 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.07324622576333667;  // std dev = 1,12e-07, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then if ( movie(D, A), movie(D, B) )
%   | | | then return 0.15274385809367097;  // std dev = 3,33e-08, 55,000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.12007089369375801;  // std dev = 0,078, 88,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=75 */
%   | else return -0.06842697784420283;  // std dev = 0,000, 278,000 (wgt'ed) examples reached here.  /* #neg=278 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13622080728868635;  // std dev = 0,022, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else return -0.06474520988043947;  // std dev = 0,036, 200,000 (wgt'ed) examples reached here.  /* #neg=200 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063642
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.555 seconds
Total inference time: 1.427 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064834
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.906 seconds
Refined model CLL: -0.064834


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063642
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.682 seconds
Total inference time: 1.427 seconds
AUC ROC: 1.0
Total revision time: 8.682
Best scored revision CLL: -0.064834


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:42:32
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'parameter_0.4': {'AUC PR': 0.056112, 'AUC ROC': 0.857618, 'Precision': [0.056112, 0.5], 'Inference time': 1.582, 'CLL': -0.331186, 'Recall': 1.0, 'F1': 0.106262, 'Learning time': 1.982}, 'Inference time': 1.427, 'CLL': -0.063642, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.682}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.14185106490048843;  // std dev = 0,000, 225,000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109556;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.12544463852839174;  // std dev = 0,000, 225,000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.11231637819360679;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830914;  // std dev = 3,86e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.10159632948783649;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601497;  // std dev = 2,53e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.09269127618926103;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.09269127618926055;  // std dev = 6,66e-08, 256,000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694897;  // std dev = 5,96e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.08518475138839683;  // std dev = 1,18e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.08518475138839678;  // std dev = 7,15e-08, 227,000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325353;  // std dev = 2,11e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07877675473109176;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.07877675473109146;  // std dev = 7,88e-08, 202,000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.07324622576333673;  // std dev = 1,14e-07, 235,000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.06842697784420265;  // std dev = 4,21e-08, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.06419184008202623;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #neg=245 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.881 seconds
Total inference time: 1.207 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:42:36
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.207, 'CLL': -0.063421, 'Recall': 1.0, 'Learning time': 2.881, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,63e-07, 130,000 (wgt'ed) examples reached here.  /* #pos=130 */
%   | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.14185106490048843;  // std dev = 0,000, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.954 seconds
Total inference time: 0.885 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:42:38
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.885, 'CLL': -0.152968, 'Recall': 0.0, 'Learning time': 0.954, 'F1': nan}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5830559982965346;  // std dev = 7,324, 269,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=195 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048777;  // std dev = 1,40e-07, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.44626578782789106;  // std dev = 7,964, 289,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=195 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839202;  // std dev = 0,000, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3007561943481537;  // std dev = 8,641, 316,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=195 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360696;  // std dev = 0,000, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.25681266771412725;  // std dev = 0,480, 304,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783662;  // std dev = 0,000, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.18210887239624615;  // std dev = 0,483, 310,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=195 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926043;  // std dev = 8,33e-09, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19923886094140575;  // std dev = 7,756, 282,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=195 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 5,89e-09, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1168231135149347;  // std dev = 8,157, 296,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=195 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109143;  // std dev = 3,65e-08, 291,000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09023027156914755;  // std dev = 8,130, 295,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=195 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333695;  // std dev = 5,96e-09, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.0890811475455132;  // std dev = 7,877, 286,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=195 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420276;  // std dev = 0,000, 255,000 (wgt'ed) examples reached here.  /* #neg=255 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.06776714296320893;  // std dev = 7,877, 286,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=195 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202612;  // std dev = 4,56e-09, 270,000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.329942
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.776 seconds
Total inference time: 1.405 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.870805
   AUC PR    = 0.103229
   CLL	      = -0.307719
   Precision = 0.103229 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18714


Total scoring time: 2.012 seconds
Parameter learned model CLL: -0.307719


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [1.4e-07, 312, 0], 'false,true,false': [0.0, 0, 0], 'true': [7.324, 74, 195]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 308, 0], 'true': [7.964, 94, 195]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 272, 0], 'true': [8.641, 121, 195]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.48, 109, 195], 'false,true,true': [0.0, 283, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.483, 115, 195], 'false,true': [8.33e-09, 282, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.89e-09, 301, 0], 'false,true,false': [0.0, 0, 0], 'true': [7.756, 87, 195]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [3.65e-08, 291, 0], 'false,true,false': [0.0, 0, 0], 'true': [8.157, 101, 195]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [5.96e-09, 290, 0], 'true': [8.13, 100, 195]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [7.877, 91, 195], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 255, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [4.56e-09, 270, 0], 'true': [7.877, 91, 195]}]]
[{'': [0.1994168129240941, 6.26279654916755e-17], 'false,true': [6.26279654916755e-17, nan], 'false': [6.26279654916755e-17, nan]}, {'': [0.21946576310149804, -8.651088503572649e-17], 'false': [-8.651088503572649e-17, nan]}, {'': [0.23629025797148112, -9.79608551139844e-17], 'false': [-9.79608551139844e-17, nan]}, {'': [0.22999264196676042, -5.806113344329441e-17], 'false,true': [-5.806113344329441e-17, nan], 'false': [-5.806113344329441e-17, nan], 'true': [0.22999264196676042, nan]}, {'': [0.23335067637877283, 6.771573057997409e-17], 'false': [6.771573057997409e-17, nan], 'true': [0.23335067637877283, nan]}, {'': [0.21333182435491135, 3.540910643322758e-17], 'false,true': [3.540910643322758e-17, nan], 'false': [3.540910643322758e-17, nan]}, {'': [0.22478771000730383, 4.578239276804769e-18], 'false,true': [4.578239276804769e-18, nan], 'false': [4.578239276804769e-18, nan]}, {'': [0.22407354208560779, 3.598653941888438e-17], 'false': [3.598653941888438e-17, nan]}, {'': [0.12086844513507047, nan], 'true,false': [nan, -1.2190684191962503e-17], 'true,false,false': [nan, -1.2190684191962503e-17], 'true': [0.21694214876033044, -1.2190684191962503e-17]}, {'': [0.21694214876033177, 2.1382073066854867e-17], 'false': [2.1382073066854867e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.14185106490048766;  // std dev = 7,88e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.14185106490048785;  // std dev = 9,88e-08, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1254446385283914;  // std dev = 0,000, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.12544463852839186;  // std dev = 0,000, 249,000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.11231637819360625;  // std dev = 6,50e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.1123163781936069;  // std dev = 0,000, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415830997;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1015963294878362;  // std dev = 5,37e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.10159632948783662;  // std dev = 0,000, 286,000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.320711847160149;  // std dev = 4,00e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.09269127618926098;  // std dev = 4,21e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.09269127618926046;  // std dev = 1,63e-07, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08518475138839685;  // std dev = 4,34e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.08518475138839678;  // std dev = 9,54e-08, 262,000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07877675473109166;  // std dev = 4,47e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.07877675473109143;  // std dev = 3,65e-08, 331,000 (wgt'ed) examples reached here.  /* #neg=331 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.0732462257633368;  // std dev = 1,17e-07, 253,000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | | else return -0.06842697784420265;  // std dev = 1,67e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.06842697784420318;  // std dev = 0,000, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.06419184008202616;  // std dev = 6,50e-08, 263,000 (wgt'ed) examples reached here.  /* #neg=263 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.084 seconds
Total inference time: 1.752 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064211
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.395 seconds
Refined model CLL: -0.064211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.267 seconds
Total inference time: 1.752 seconds
AUC ROC: 1.0
Total revision time: 9.267
Best scored revision CLL: -0.064211


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:42:51
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.752, 'parameter_0.6': {'AUC PR': 0.056112, 'AUC ROC': 0.857618, 'Precision': [0.056112, 0.5], 'Inference time': 1.405, 'CLL': -0.329942, 'Recall': 1.0, 'F1': 0.106262, 'Learning time': 1.776}, 'CLL': -0.063421, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.267}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1418510649004877;  // std dev = 3,16e-08, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.14185106490048785;  // std dev = 8,94e-08, 341,000 (wgt'ed) examples reached here.  /* #neg=341 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.12544463852839133;  // std dev = 1,83e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.12544463852839205;  // std dev = 0,000, 352,000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1123163781936064;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.11231637819360668;  // std dev = 0,000, 366,000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830997;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.10159632948783655;  // std dev = 0,000, 350,000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.320711847160149;  // std dev = 4,00e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.09269127618926057;  // std dev = 1,63e-07, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 359,000 (wgt'ed) examples reached here.  /* #neg=359 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.07877675473109148;  // std dev = 2,11e-08, 353,000 (wgt'ed) examples reached here.  /* #neg=353 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.07324622576333704;  // std dev = 7,45e-09, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.07324622576333716;  // std dev = 5,58e-08, 380,000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.06842697784420308;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #neg=337 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.0641918400820262;  // std dev = 6,45e-09, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.0641918400820259;  // std dev = 1,40e-07, 399,000 (wgt'ed) examples reached here.  /* #neg=399 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.633 seconds
Total inference time: 1.243 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:42:56
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.243, 'CLL': -0.063421, 'Recall': 1.0, 'Learning time': 3.633, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,08e-06, 195,000 (wgt'ed) examples reached here.  /* #pos=195 */
%   | else return -0.1418510649004877;  // std dev = 3,33e-08, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.1418510649004877;  // std dev = 1,74e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.125 seconds
Total inference time: 1.03 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:42:59
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 1.03, 'CLL': -0.152968, 'Recall': 0.0, 'Learning time': 1.125, 'F1': nan}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.48768888667335797;  // std dev = 9,814, 413,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=260 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048738;  // std dev = 2,92e-07, 392,000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4849505701271155;  // std dev = 8,875, 373,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=260 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839224;  // std dev = 0,000, 402,000 (wgt'ed) examples reached here.  /* #neg=402 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.38362722932161064;  // std dev = 9,009, 378,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=260 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360643;  // std dev = 0,000, 358,000 (wgt'ed) examples reached here.  /* #neg=358 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.29516407542395584;  // std dev = 0,464, 379,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.101596329487836;  // std dev = 1,97e-07, 387,000 (wgt'ed) examples reached here.  /* #neg=387 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.19034047211444924;  // std dev = 0,476, 398,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=260 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.092691276189261;  // std dev = 6,04e-09, 417,000 (wgt'ed) examples reached here.  /* #neg=417 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1444705485265529;  // std dev = 9,472, 397,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=260 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 6,25e-09, 362,000 (wgt'ed) examples reached here.  /* #neg=362 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13778419856064766;  // std dev = 9,061, 380,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=260 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109141;  // std dev = 1,19e-07, 399,000 (wgt'ed) examples reached here.  /* #neg=399 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08127250820069809;  // std dev = 9,380, 393,000 (wgt'ed) examples reached here.  /* #neg=133 #pos=260 */
%   else if ( movie(D, B) )
%   | then return -0.0732462257633372;  // std dev = 1,86e-09, 392,000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.08605582039911733;  // std dev = 9,035, 379,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=260 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420326;  // std dev = 0,000, 367,000 (wgt'ed) examples reached here.  /* #neg=367 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.054899254244676024;  // std dev = 9,188, 385,000 (wgt'ed) examples reached here.  /* #neg=125 #pos=260 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202561;  // std dev = 9,72e-09, 396,000 (wgt'ed) examples reached here.  /* #neg=396 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.332352
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.218 seconds
Total inference time: 1.483 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.872398
   AUC PR    = 0.104376
   CLL	      = -0.306896
   Precision = 0.104376 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.189022


Total scoring time: 2.531 seconds
Parameter learned model CLL: -0.306896


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [2.92e-07, 392, 0], 'false,true,false': [0.0, 0, 0], 'true': [9.814, 153, 260]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 402, 0], 'true': [8.875, 113, 260]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 358, 0], 'true': [9.009, 118, 260]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.464, 119, 260], 'false,true,true': [1.97e-07, 387, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.476, 138, 260], 'false,true': [6.04e-09, 417, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [6.25e-09, 362, 0], 'false,true,false': [0.0, 0, 0], 'true': [9.472, 137, 260]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [1.19e-07, 399, 0], 'false,true,false': [0.0, 0, 0], 'true': [9.061, 120, 260]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 392, 0], 'true': [9.38, 133, 260]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [9.035, 119, 260], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 367, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [9.72e-09, 396, 0], 'true': [9.188, 125, 260]}]]
[{'': [0.2332194009462481, 2.1751308237554087e-16], 'false,true': [2.1751308237554087e-16, nan], 'false': [2.1751308237554087e-16, nan]}, {'': [0.21117092770018794, -1.2593574607688342e-16], 'false': [-1.2593574607688342e-16, nan]}, {'': [0.21471963270905073, -2.977134367709917e-17], 'false': [-2.977134367709917e-17, nan]}, {'': [0.21539811056731456, 9.983400841590555e-17], 'false,true': [9.983400841590555e-17, nan], 'false': [9.983400841590555e-17, nan], 'true': [0.21539811056731456, nan]}, {'': [0.22650943158001408, 3.6208712553722135e-17], 'false': [3.6208712553722135e-17, nan], 'true': [0.22650943158001408, nan]}, {'': [0.22600232220241362, 3.925650473812708e-17], 'false,true': [3.925650473812708e-17, nan], 'false': [3.925650473812708e-17, nan]}, {'': [0.21606648199446118, 3.5616177231082714e-17], 'false,true': [3.5616177231082714e-17, nan], 'false': [3.5616177231082714e-17, nan]}, {'': [0.22389267654695072, 3.398641912117826e-18], 'false': [3.398641912117826e-18, nan]}, {'': [0.11539616972480315, nan], 'true,false': [nan, -9.680418743325616e-17], 'true,false,false': [nan, -9.680418743325616e-17], 'true': [0.2153981105673167, -9.680418743325616e-17]}, {'': [0.2192612582222972, 9.476146018265224e-17], 'false': [9.476146018265224e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048788;  // std dev = 0,000, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else return -0.14185106490048746;  // std dev = 2,55e-07, 367,000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.12544463852839108;  // std dev = 7,88e-08, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.12544463852839222;  // std dev = 0,000, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,95e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11231637819360622;  // std dev = 8,16e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.11231637819360615;  // std dev = 0,000, 412,000 (wgt'ed) examples reached here.  /* #neg=412 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.417513584158311;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.10159632948783641;  // std dev = 0,000, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else return -0.10159632948783612;  // std dev = 1,66e-07, 372,000 (wgt'ed) examples reached here.  /* #neg=372 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601502;  // std dev = 1,33e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.09269127618926089;  // std dev = 6,83e-08, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return -0.09269127618926068;  // std dev = 1,76e-07, 374,000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08518475138839683;  // std dev = 6,32e-08, 140,000 (wgt'ed) examples reached here.  /* #neg=140 */
%   else return -0.08518475138839678;  // std dev = 1,19e-07, 360,000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07877675473109164;  // std dev = 5,58e-08, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.07877675473109143;  // std dev = 7,88e-08, 353,000 (wgt'ed) examples reached here.  /* #neg=353 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07324622576333685;  // std dev = 7,81e-08, 164,000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.0732462257633377;  // std dev = 0,000, 388,000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.10820250918951593;  // std dev = 0,089, 144,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=115 */
%   | | else if ( movie(D, A), movie(D, B) )
%   | | | then return 0.15274385809367144;  // std dev = 0,000, 145,000 (wgt'ed) examples reached here.  /* #pos=145 */
%   | | | else return -0.06842697784420275;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return -0.06842697784420347;  // std dev = 0,000, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13633080972296818;  // std dev = 0,042, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
%   else return -0.06466091202867744;  // std dev = 0,045, 391,000 (wgt'ed) examples reached here.  /* #neg=391 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063616
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.257 seconds
Total inference time: 1.454 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064678
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.77 seconds
Refined model CLL: -0.064678


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063616
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.776 seconds
Total inference time: 1.454 seconds
AUC ROC: 1.0
Total revision time: 9.776
Best scored revision CLL: -0.064678


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:43:12
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.454, 'parameter_0.8': {'AUC PR': 0.056112, 'AUC ROC': 0.857618, 'Precision': [0.056112, 0.5], 'Inference time': 1.483, 'CLL': -0.332352, 'Recall': 1.0, 'F1': 0.106262, 'Learning time': 2.218}, 'CLL': -0.063616, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.776}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048768;  // std dev = 4,47e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.14185106490048735;  // std dev = 2,46e-07, 478,000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.1254446385283923;  // std dev = 0,000, 526,000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,95e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.11231637819360633;  // std dev = 2,36e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.1123163781936059;  // std dev = 0,000, 498,000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158311;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.10159632948783621;  // std dev = 3,49e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.10159632948783594;  // std dev = 2,31e-07, 464,000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601502;  // std dev = 1,33e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.09269127618926123;  // std dev = 2,98e-08, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.08518475138839678;  // std dev = 1,28e-07, 476,000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.07877675473109198;  // std dev = 0,000, 500,000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.07324622576333704;  // std dev = 1,29e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.07324622576333721;  // std dev = 0,000, 490,000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06842697784420271;  // std dev = 1,05e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.0684269778442035;  // std dev = 0,000, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080112;  // std dev = 0,000, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06419184008202572;  // std dev = 1,84e-07, 465,000 (wgt'ed) examples reached here.  /* #neg=465 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.007 seconds
Total inference time: 1.534 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:43:18
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.534, 'CLL': -0.063421, 'Recall': 1.0, 'Learning time': 4.007, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,07e-06, 260,000 (wgt'ed) examples reached here.  /* #pos=260 */
%   | else return -0.14185106490048766;  // std dev = 5,37e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.1418510649004872;  // std dev = 2,98e-07, 447,000 (wgt'ed) examples reached here.  /* #neg=447 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.224 seconds
Total inference time: 0.916 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:43:20
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.916, 'CLL': -0.152968, 'Recall': 0.0, 'Learning time': 1.224, 'F1': nan}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5114555483259609;  // std dev = 10,631, 499,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=326 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.1418510649004877;  // std dev = 0,000, 498,000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4659090888296025;  // std dev = 10,182, 478,000 (wgt'ed) examples reached here.  /* #neg=152 #pos=326 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839224;  // std dev = 0,000, 462,000 (wgt'ed) examples reached here.  /* #neg=462 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3811112574351639;  // std dev = 10,112, 475,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=326 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360586;  // std dev = 0,000, 486,000 (wgt'ed) examples reached here.  /* #neg=486 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2632406084702193;  // std dev = 0,475, 498,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783547;  // std dev = 3,33e-07, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.22220786890827926;  // std dev = 0,467, 481,000 (wgt'ed) examples reached here.  /* #neg=155 #pos=326 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926142;  // std dev = 0,000, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17823843118372557;  // std dev = 10,066, 473,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=326 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 6,45e-09, 501,000 (wgt'ed) examples reached here.  /* #neg=501 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09151201448529629;  // std dev = 10,730, 504,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=326 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109204;  // std dev = 0,000, 494,000 (wgt'ed) examples reached here.  /* #neg=494 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11436238561009485;  // std dev = 10,018, 471,000 (wgt'ed) examples reached here.  /* #neg=145 #pos=326 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333703;  // std dev = 5,51e-09, 478,000 (wgt'ed) examples reached here.  /* #neg=478 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.06814884558606488;  // std dev = 10,316, 484,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420353;  // std dev = 0,000, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.042388499368270056;  // std dev = 10,467, 491,000 (wgt'ed) examples reached here.  /* #neg=165 #pos=326 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202536;  // std dev = 1,09e-08, 508,000 (wgt'ed) examples reached here.  /* #neg=508 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.331039
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.374 seconds
Total inference time: 1.586 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.871431
   AUC PR    = 0.103954
   CLL	      = -0.307544
   Precision = 0.103954 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.18833


Total scoring time: 3.092 seconds
Parameter learned model CLL: -0.307544


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 498, 0], 'false,true,false': [0.0, 0, 0], 'true': [10.631, 173, 326]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 462, 0], 'true': [10.182, 152, 326]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 486, 0], 'true': [10.112, 149, 326]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.475, 172, 326], 'false,true,true': [3.33e-07, 484, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.467, 155, 326], 'false,true': [0.0, 492, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [6.45e-09, 501, 0], 'false,true,false': [0.0, 0, 0], 'true': [10.066, 147, 326]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 494, 0], 'false,true,false': [0.0, 0, 0], 'true': [10.73, 178, 326]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [5.51e-09, 478, 0], 'true': [10.018, 145, 326]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [10.316, 158, 326], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 488, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [1.09e-08, 508, 0], 'true': [10.467, 165, 326]}]]
[{'': [0.22649708234103746, -2.140188963132832e-17], 'false,true': [-2.140188963132832e-17, nan], 'false': [-2.140188963132832e-17, nan]}, {'': [0.21687295390487601, -1.2111523905001707e-16], 'false': [-1.2111523905001707e-16, nan]}, {'': [0.21528642659279548, -1.0965165675310187e-17], 'false': [-1.0965165675310187e-17, nan]}, {'': [0.22609312753020583, 2.2938492244321414e-16], 'false,true': [2.2938492244321414e-16, nan], 'false': [2.2938492244321414e-16, nan], 'true': [0.22609312753020583, nan]}, {'': [0.2184032745363337, -2.3468128975816318e-17], 'false': [-2.3468128975816318e-17, nan], 'true': [0.2184032745363337, nan]}, {'': [0.21419663968461544, 4.1661063598708467e-17], 'false,true': [4.1661063598708467e-17, nan], 'false': [4.1661063598708467e-17, nan]}, {'': [0.22844230284706707, -3.5059674461847047e-17], 'false,true': [-3.5059674461847047e-17, nan], 'false': [-3.5059674461847047e-17, nan]}, {'': [0.2130805396657944, 3.1587935428665544e-17], 'false': [3.1587935428665544e-17, nan]}, {'': [0.11415028707794633, nan], 'true,false': [nan, -1.2103251006159493e-16], 'true,false,false': [nan, -1.2103251006159493e-16], 'true': [0.21987910661840032, -1.2103251006159493e-16]}, {'': [0.2231200301973184, 1.1801583332629618e-16], 'false': [1.1801583332629618e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048824;  // std dev = 0,000, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.14185106490048763;  // std dev = 5,96e-08, 491,000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283914;  // std dev = 2,11e-08, 170,000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.1254446385283923;  // std dev = 0,000, 453,000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360653;  // std dev = 0,000, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.11231637819360585;  // std dev = 0,000, 487,000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1015963294878365;  // std dev = 0,000, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.1015963294878355;  // std dev = 3,24e-07, 477,000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926078;  // std dev = 6,99e-08, 169,000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.09269127618926136;  // std dev = 0,000, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5,37e-08, 155,000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.08518475138839678;  // std dev = 1,35e-07, 454,000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,46e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109157;  // std dev = 6,83e-08, 149,000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.07877675473109197;  // std dev = 0,000, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2,76e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333695;  // std dev = 4,08e-08, 150,000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.07324622576333695;  // std dev = 1,44e-07, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936716;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | | else return -0.06842697784420268;  // std dev = 2,11e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return -0.06842697784420365;  // std dev = 0,000, 615,000 (wgt'ed) examples reached here.  /* #neg=615 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 145,000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else return -0.06419184008202536;  // std dev = 2,45e-07, 510,000 (wgt'ed) examples reached here.  /* #neg=510 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.333 seconds
Total inference time: 1.62 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064216
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.328 seconds
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.126999999999999 seconds
Total inference time: 1.62 seconds
AUC ROC: 1.0
Total revision time: 11.126999999999999
Best scored revision CLL: -0.064216


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:43:36
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'parameter_1.0': {'AUC PR': 0.056112, 'AUC ROC': 0.857618, 'Precision': [0.056112, 0.5], 'Inference time': 1.586, 'CLL': -0.331039, 'Recall': 1.0, 'F1': 0.106262, 'Learning time': 2.374}, 'Inference time': 1.62, 'CLL': -0.063421, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.126999999999999}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048768;  // std dev = 3,80e-08, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.14185106490048782;  // std dev = 0,000, 537,000 (wgt'ed) examples reached here.  /* #neg=537 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.12544463852839233;  // std dev = 0,000, 614,000 (wgt'ed) examples reached here.  /* #neg=614 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360626;  // std dev = 4,71e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.11231637819360564;  // std dev = 2,98e-08, 590,000 (wgt'ed) examples reached here.  /* #neg=590 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1015963294878362;  // std dev = 4,21e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.10159632948783567;  // std dev = 3,15e-07, 566,000 (wgt'ed) examples reached here.  /* #neg=566 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.09269127618926168;  // std dev = 0,000, 581,000 (wgt'ed) examples reached here.  /* #neg=581 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.08518475138839678;  // std dev = 1,52e-07, 621,000 (wgt'ed) examples reached here.  /* #neg=621 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,46e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109179;  // std dev = 7,45e-09, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.07877675473109227;  // std dev = 0,000, 577,000 (wgt'ed) examples reached here.  /* #neg=577 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2,76e-07, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.0732462257633369;  // std dev = 1,59e-07, 605,000 (wgt'ed) examples reached here.  /* #neg=605 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420268;  // std dev = 2,11e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.06842697784420361;  // std dev = 0,000, 599,000 (wgt'ed) examples reached here.  /* #neg=599 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.0641918400820255;  // std dev = 2,40e-07, 615,000 (wgt'ed) examples reached here.  /* #neg=615 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.534 seconds
Total inference time: 1.459 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:43:42
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.459, 'CLL': -0.063421, 'Recall': 1.0, 'Learning time': 4.534, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,05e-06, 326,000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048766;  // std dev = 6,50e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.14185106490048838;  // std dev = 0,000, 595,000 (wgt'ed) examples reached here.  /* #neg=595 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152968
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.474 seconds
Total inference time: 0.912 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:43:45
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.912, 'CLL': -0.152968, 'Recall': 0.0, 'Learning time': 1.474, 'F1': nan}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5538011090125565;  // std dev = 4,413, 92,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=64 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048763;  // std dev = 8,69e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5039139047910116;  // std dev = 4,178, 88,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=64 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839136;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2812689024965207;  // std dev = 5,036, 106,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=64 */
%   else if ( movie(D, B) )
%   | then return -0.1123163781936062;  // std dev = 7,90e-09, 95,000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2663164162287983;  // std dev = 0,476, 98,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.1015963294878363;  // std dev = 2,58e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.2222059441521103;  // std dev = 0,469, 95,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926089;  // std dev = 6,18e-09, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10850847974653424;  // std dev = 4,961, 104,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=64 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839682;  // std dev = 5,35e-09, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.053204599789194264;  // std dev = 5,140, 109,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=64 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.0787767547310916;  // std dev = 5,58e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09930044562392339;  // std dev = 4,757, 99,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=64 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333707;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.03213986754688856;  // std dev = 5,036, 106,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=64 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4,71e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.05417835612102376;  // std dev = 4,842, 101,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=64 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202626;  // std dev = 0,000, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.286807
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.376 seconds
Total inference time: 1.7 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.867715
   AUC PR    = 0.100629
   CLL	      = -0.290335
   Precision = 0.100629 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.182857


Total scoring time: 1.483 seconds
Parameter learned model CLL: -0.290335


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [8.69e-08, 98, 0], 'false,true,false': [0.0, 0, 0], 'true': [4.413, 28, 64]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 104, 0], 'true': [4.178, 24, 64]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [7.9e-09, 95, 0], 'true': [5.036, 42, 64]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.476, 34, 64], 'false,true,true': [2.58e-08, 103, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.469, 31, 64], 'false,true': [6.18e-09, 110, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.35e-09, 84, 0], 'false,true,false': [0.0, 0, 0], 'true': [4.961, 40, 64]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.58e-08, 97, 0], 'false,true,false': [0.0, 0, 0], 'true': [5.14, 45, 64]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 88, 0], 'true': [4.757, 35, 64]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [5.036, 42, 64], 'false': [0.0, 0, 0], 'true,false,false,false': [4.71e-08, 97, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 75, 0], 'true': [4.842, 37, 64]}]]
[{'': [0.21172022684309946, 7.703588334133739e-17], 'false,true': [7.703588334133739e-17, nan], 'false': [7.703588334133739e-17, nan]}, {'': [0.1983471074380142, -8.540177112501205e-18], 'false': [-8.540177112501205e-18, nan]}, {'': [0.23923104307582754, 6.310741403132469e-17], 'false': [6.310741403132469e-17, nan]}, {'': [0.22657226155768398, 6.467318590049456e-18], 'false,true': [6.467318590049456e-18, nan], 'false': [6.467318590049456e-18, nan], 'true': [0.22657226155768398, nan]}, {'': [0.21983379501385011, 3.835315903250541e-17], 'false': [3.835315903250541e-17, nan], 'true': [0.21983379501385011, nan]}, {'': [0.23668639053254414, 2.9077269692563625e-17], 'false,true': [2.9077269692563625e-17, nan], 'false': [2.9077269692563625e-17, nan]}, {'': [0.2424038380607692, 3.204767493763338e-17], 'false,true': [3.204767493763338e-17, nan], 'false': [3.204767493763338e-17, nan]}, {'': [0.22854810733598593, -7.569702440626067e-18], 'false': [-7.569702440626067e-18, nan]}, {'': [0.1274421254948033, nan], 'true,false': [nan, 2.2891196384023845e-17], 'true,false,false': [nan, 2.2891196384023845e-17], 'true': [0.23923104307582777, 2.2891196384023845e-17]}, {'': [0.2321341044995592, -9.62193288008469e-18], 'false': [-9.62193288008469e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1418510649004877;  // std dev = 3,94e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109542;  // std dev = 8,43e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.12544463852839133;  // std dev = 0,000, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.11231637819360621;  // std dev = 7,15e-08, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.10159632948783617;  // std dev = 5,58e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.09269127618926104;  // std dev = 2,98e-08, 92,000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08743349060106893;  // std dev = 0,052, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.08518475138839682;  // std dev = 5,16e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07861371603038253;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.20975771563253567;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.07877675473109158;  // std dev = 6,14e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07310477183268203;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.17709649774527728;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   else return -0.07324622576333707;  // std dev = 4,34e-08, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936707;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return -0.06842697784420278;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.06839078093760749;  // std dev = 0,000642, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801095;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.06655098787821183;  // std dev = 0,085, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.06419386454914407;  // std dev = 5,14e-06, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063461
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.254 seconds
Total inference time: 1.818 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065083
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.504 seconds
Refined model CLL: -0.065083


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063461
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.616999999999999 seconds
Total inference time: 1.818 seconds
AUC ROC: 1.0
Total revision time: 7.616999999999999
Best scored revision CLL: -0.065083


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:43:56
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.818, 'CLL': -0.063461, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.616999999999999, 'parameter_0.2': {'AUC PR': 0.060354, 'AUC ROC': 0.868098, 'Precision': [0.060354, 0.5], 'Inference time': 1.7, 'CLL': -0.286807, 'Recall': 1.0, 'F1': 0.113837, 'Learning time': 1.376}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.14185106490048768;  // std dev = 7,88e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109542;  // std dev = 8,43e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.12544463852839133;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,69e-07, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.11231637819360622;  // std dev = 8,30e-08, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.10159632948783638;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014983;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.092691276189261;  // std dev = 4,08e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.08518475138839679;  // std dev = 3,49e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07877675473109162;  // std dev = 5,67e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527728;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.0732462257633371;  // std dev = 0,000, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936707;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06842697784420265;  // std dev = 5,58e-08, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,47e-08, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.06419184008202625;  // std dev = 0,000, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.161 seconds
Total inference time: 1.379 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:44:00
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.379, 'CLL': -0.063422, 'Recall': 1.0, 'Learning time': 2.161, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995126;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.14185106490048785;  // std dev = 0,000, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.872 seconds
Total inference time: 1.086 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:44:02
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 1.086, 'CLL': -0.152985, 'Recall': 0.0, 'Learning time': 0.872, 'F1': nan}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4695233426824475;  // std dev = 7,080, 211,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=129 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048832;  // std dev = 0,000, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.42018776124874474;  // std dev = 6,916, 205,000 (wgt'ed) examples reached here.  /* #neg=76 #pos=129 */
%   else if ( movie(D, B) )
%   | then return -0.1254446385283916;  // std dev = 0,000, 193,000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.37459773772422067;  // std dev = 6,608, 195,000 (wgt'ed) examples reached here.  /* #neg=66 #pos=129 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360654;  // std dev = 0,000, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2957579568954392;  // std dev = 0,472, 194,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.1015963294878365;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.17692206813152267;  // std dev = 0,486, 209,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=129 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926054;  // std dev = 6,59e-09, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1876225733232321;  // std dev = 6,506, 192,000 (wgt'ed) examples reached here.  /* #neg=63 #pos=129 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 5,27e-09, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09510098156290328;  // std dev = 6,944, 206,000 (wgt'ed) examples reached here.  /* #neg=77 #pos=129 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109148;  // std dev = 8,16e-08, 166,000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1242391660850452;  // std dev = 6,436, 190,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=129 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333667;  // std dev = 8,23e-09, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.01765364798022219;  // std dev = 7,158, 214,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=129 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 8,09e-08, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.04918490066229678;  // std dev = 6,828, 202,000 (wgt'ed) examples reached here.  /* #neg=73 #pos=129 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202626;  // std dev = 0,000, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.292133
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.983 seconds
Total inference time: 1.474 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.868902
   AUC PR    = 0.102138
   CLL	      = -0.293504
   Precision = 0.102138 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185345


Total scoring time: 1.869 seconds
Parameter learned model CLL: -0.293504


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 186, 0], 'false,true,false': [0.0, 0, 0], 'true': [7.08, 82, 129]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 193, 0], 'true': [6.916, 76, 129]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 191, 0], 'true': [6.608, 66, 129]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.472, 65, 129], 'false,true,true': [0.0, 188, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.486, 80, 129], 'false,true': [6.59e-09, 215, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.27e-09, 176, 0], 'false,true,false': [0.0, 0, 0], 'true': [6.506, 63, 129]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [8.16e-08, 166, 0], 'false,true,false': [0.0, 0, 0], 'true': [6.944, 77, 129]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [8.23e-09, 194, 0], 'true': [6.436, 61, 129]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [7.158, 85, 129], 'false': [0.0, 0, 0], 'true,false,false,false': [8.09e-08, 197, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 186, 0], 'true': [6.828, 73, 129]}]]
[{'': [0.23759574133555364, -2.1488187573390127e-16], 'false,true': [-2.1488187573390127e-16, nan], 'false': [-2.1488187573390127e-16, nan]}, {'': [0.23328970850684236, -2.7611764343009074e-17], 'false': [-2.7611764343009074e-17, nan]}, {'': [0.22390532544378494, -3.022596716256971e-17], 'false': [-3.022596716256971e-17, nan]}, {'': [0.22279200765224655, -9.21248892774066e-17], 'false,true': [-9.21248892774066e-17, nan], 'false': [-9.21248892774066e-17, nan], 'true': [0.22279200765224655, nan]}, {'': [0.23625832741924283, 4.4408920985006264e-17], 'false': [4.4408920985006264e-17, nan], 'true': [0.23625832741924283, nan]}, {'': [0.2204589843749988, 2.901719268906659e-17], 'false,true': [2.901719268906659e-17, nan], 'false': [2.901719268906659e-17, nan]}, {'': [0.23407012913563927, 4.01285430587406e-17], 'false,true': [4.01285430587406e-17, nan], 'false': [4.01285430587406e-17, nan]}, {'': [0.21797783933518064, 6.752902933287034e-17], 'false': [6.752902933287034e-17, nan]}, {'': [0.1265167390213353, nan], 'true,false': [nan, 3.325033424004276e-17], 'true,false,false': [nan, 3.325033424004276e-17], 'true': [0.23943139138789385, 3.325033424004276e-17]}, {'': [0.23078619743162476, -4.178258694825858e-18], 'false': [-4.178258694825858e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.1418510649004877;  // std dev = 4,94e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.14185106490048832;  // std dev = 0,000, 185,000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109555;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.12544463852839127;  // std dev = 4,71e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.12544463852839163;  // std dev = 0,000, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.11231637819360633;  // std dev = 2,98e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.11231637819360653;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583092;  // std dev = 3,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.10159632948783627;  // std dev = 3,16e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.10159632948783649;  // std dev = 0,000, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601498;  // std dev = 2,49e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.09269127618926053;  // std dev = 1,00e-07, 225,000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694898;  // std dev = 4,21e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.0851847513883968;  // std dev = 1,49e-08, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.08518475138839678;  // std dev = 6,99e-08, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253534;  // std dev = 2,09e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.07877675473109147;  // std dev = 7,45e-08, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.07324622576333666;  // std dev = 1,16e-07, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.15274385809367141;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.06842697784420275;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return -0.06842697784420265;  // std dev = 7,60e-08, 218,000 (wgt'ed) examples reached here.  /* #neg=218 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.06419184008202626;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.579 seconds
Total inference time: 1.783 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064216
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.119 seconds
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.55 seconds
Total inference time: 1.783 seconds
AUC ROC: 1.0
Total revision time: 8.55
Best scored revision CLL: -0.064216


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:44:15
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'parameter_0.4': {'AUC PR': 0.060354, 'AUC ROC': 0.868098, 'Precision': [0.060354, 0.5], 'Inference time': 1.474, 'CLL': -0.292133, 'Recall': 1.0, 'F1': 0.113837, 'Learning time': 1.983}, 'Inference time': 1.783, 'CLL': -0.063422, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.55}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.14185106490048838;  // std dev = 0,000, 244,000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109555;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.12544463852839177;  // std dev = 0,000, 245,000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.11231637819360675;  // std dev = 0,000, 240,000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583092;  // std dev = 3,77e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.10159632948783648;  // std dev = 0,000, 228,000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601498;  // std dev = 2,49e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.09269127618926093;  // std dev = 1,05e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.09269127618926061;  // std dev = 4,47e-08, 205,000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694898;  // std dev = 4,21e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.08518475138839678;  // std dev = 7,45e-08, 234,000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253534;  // std dev = 2,09e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.07877675473109144;  // std dev = 6,14e-08, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527814;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.07324622576333673;  // std dev = 1,11e-07, 224,000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367141;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.06842697784420261;  // std dev = 6,14e-08, 248,000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801106;  // std dev = 5,58e-08, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.0641918400820262;  // std dev = 6,45e-09, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.06419184008202626;  // std dev = 0,000, 258,000 (wgt'ed) examples reached here.  /* #neg=258 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.749 seconds
Total inference time: 1.383 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:44:19
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.383, 'CLL': -0.063422, 'Recall': 1.0, 'Learning time': 2.749, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995104;  // std dev = 7,54e-07, 129,000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else return -0.1418510649004877;  // std dev = 2,11e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.1418510649004884;  // std dev = 0,000, 213,000 (wgt'ed) examples reached here.  /* #neg=213 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.089 seconds
Total inference time: 0.897 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:44:22
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.897, 'CLL': -0.152985, 'Recall': 0.0, 'Learning time': 1.089, 'F1': nan}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.49841296150214875;  // std dev = 8,354, 303,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=194 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.1418510649004878;  // std dev = 1,23e-07, 306,000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.40393635276325573;  // std dev = 8,610, 314,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=194 */
%   else if ( movie(D, B) )
%   | then return -0.125444638528392;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.37713314533001147;  // std dev = 8,042, 291,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=194 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360696;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3055904549251956;  // std dev = 0,467, 286,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.1015963294878366;  // std dev = 0,000, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.19804415591812752;  // std dev = 0,479, 301,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926042;  // std dev = 9,22e-09, 305,000 (wgt'ed) examples reached here.  /* #neg=305 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13820756024363845;  // std dev = 8,427, 306,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=194 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 5,82e-09, 262,000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15040774740763724;  // std dev = 7,870, 285,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=194 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109143;  // std dev = 3,65e-08, 293,000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11799421576314247;  // std dev = 7,811, 283,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=194 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333696;  // std dev = 5,74e-09, 297,000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.0614102380432994;  // std dev = 8,150, 295,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=194 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420297;  // std dev = 0,000, 294,000 (wgt'ed) examples reached here.  /* #neg=294 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.05347406974698725;  // std dev = 8,069, 292,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=194 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202602;  // std dev = 5,89e-09, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.306433
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.936 seconds
Total inference time: 1.696 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.868044
   AUC PR    = 0.101784
   CLL	      = -0.308617
   Precision = 0.101784 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.184762


Total scoring time: 2.485 seconds
Parameter learned model CLL: -0.308617


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [1.23e-07, 306, 0], 'false,true,false': [0.0, 0, 0], 'true': [8.354, 109, 194]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 292, 0], 'true': [8.61, 120, 194]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 274, 0], 'true': [8.042, 97, 194]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.467, 92, 194], 'false,true,true': [0.0, 275, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.479, 107, 194], 'false,true': [9.22e-09, 305, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.82e-09, 262, 0], 'false,true,false': [0.0, 0, 0], 'true': [8.427, 112, 194]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [3.65e-08, 293, 0], 'false,true,false': [0.0, 0, 0], 'true': [7.87, 91, 194]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 297, 0], 'true': [7.811, 89, 194]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [8.15, 101, 194], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 294, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 285, 0], 'true': [8.069, 98, 194]}]]
[{'': [0.2303260028973242, 4.9343245538895844e-17], 'false,true': [4.9343245538895844e-17, nan], 'false': [4.9343245538895844e-17, nan]}, {'': [0.23611505537750346, -7.908437983631252e-17], 'false': [-7.908437983631252e-17, nan]}, {'': [0.22222222222222288, -1.0048733945512366e-16], 'false': [-1.0048733945512366e-16, nan]}, {'': [0.21820137904054462, -6.136505445200865e-17], 'false,true': [-6.136505445200865e-17, nan], 'false': [-6.136505445200865e-17, nan], 'true': [0.21820137904054462, nan]}, {'': [0.22911446893522017, 8.444975138132338e-17], 'false': [8.444975138132338e-17, nan], 'true': [0.22911446893522017, nan]}, {'': [0.23204750309709812, 3.474743817529116e-17], 'false,true': [3.474743817529116e-17, nan], 'false': [3.474743817529116e-17, nan]}, {'': [0.21734687596183316, 4.54698849675832e-18], 'false,true': [4.54698849675832e-18, nan], 'false': [4.54698849675832e-18, nan]}, {'': [0.2155851615078217, 3.289549702593056e-17], 'false': [3.289549702593056e-17, nan]}, {'': [0.11698239140918619, nan], 'true,false': [nan, -5.1357255560891597e-17], 'true,false,false': [nan, -5.1357255560891597e-17], 'true': [0.22515369146796885, -5.1357255560891597e-17]}, {'': [0.22297804466128807, 3.4280570584917116e-17], 'false': [3.4280570584917116e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.14185106490048763;  // std dev = 8,43e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else return -0.14185106490048796;  // std dev = 0,000, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.12544463852839202;  // std dev = 0,000, 303,000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11231637819360624;  // std dev = 6,99e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.11231637819360674;  // std dev = 0,000, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583099;  // std dev = 3,04e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1015963294878363;  // std dev = 2,11e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.1015963294878366;  // std dev = 0,000, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.320711847160149;  // std dev = 3,95e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.092691276189261;  // std dev = 3,94e-08, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.09269127618926042;  // std dev = 1,63e-07, 309,000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.0851847513883968;  // std dev = 2,98e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.08518475138839678;  // std dev = 9,88e-08, 279,000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07877675473109162;  // std dev = 5,27e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.07877675473109143;  // std dev = 3,33e-08, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07324622576333707;  // std dev = 0,000, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.07324622576333696;  // std dev = 9,88e-08, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936715;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | | else return -0.06842697784420265;  // std dev = 1,90e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.06842697784420314;  // std dev = 0,000, 352,000 (wgt'ed) examples reached here.  /* #neg=352 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.06419184008202604;  // std dev = 9,54e-08, 283,000 (wgt'ed) examples reached here.  /* #neg=283 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.134 seconds
Total inference time: 1.452 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064221
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.652 seconds
Refined model CLL: -0.064221


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.206999999999999 seconds
Total inference time: 1.452 seconds
AUC ROC: 1.0
Total revision time: 9.206999999999999
Best scored revision CLL: -0.064221


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:44:35
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.452, 'parameter_0.6': {'AUC PR': 0.060354, 'AUC ROC': 0.868098, 'Precision': [0.060354, 0.5], 'Inference time': 1.696, 'CLL': -0.306433, 'Recall': 1.0, 'F1': 0.113837, 'Learning time': 1.936}, 'CLL': -0.063422, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.206999999999999}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.1418510649004877;  // std dev = 3,16e-08, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.14185106490048793;  // std dev = 0,000, 326,000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.12544463852839205;  // std dev = 0,000, 336,000 (wgt'ed) examples reached here.  /* #neg=336 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,19e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.11231637819360635;  // std dev = 0,000, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583099;  // std dev = 3,04e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.10159632948783659;  // std dev = 0,000, 318,000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.320711847160149;  // std dev = 3,95e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.092691276189261;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.09269127618926053;  // std dev = 1,81e-07, 373,000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256949106;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.08518475138839679;  // std dev = 2,24e-08, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.08518475138839678;  // std dev = 1,03e-07, 352,000 (wgt'ed) examples reached here.  /* #neg=352 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.209757715632535;  // std dev = 2,92e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.07877675473109147;  // std dev = 4,21e-08, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527758;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.07324622576333704;  // std dev = 5,27e-09, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.07324622576333716;  // std dev = 5,58e-08, 379,000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936715;  // std dev = 0,000, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.06842697784420325;  // std dev = 0,000, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 1,05e-07, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.06419184008202587;  // std dev = 1,46e-07, 395,000 (wgt'ed) examples reached here.  /* #neg=395 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.786 seconds
Total inference time: 1.866 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:44:41
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.866, 'CLL': -0.063422, 'Recall': 1.0, 'Learning time': 3.786, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995093;  // std dev = 1,09e-06, 194,000 (wgt'ed) examples reached here.  /* #pos=194 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.14185106490048777;  // std dev = 1,49e-07, 372,000 (wgt'ed) examples reached here.  /* #neg=372 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.536 seconds
Total inference time: 1.233 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:44:44
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 1.233, 'CLL': -0.152985, 'Recall': 0.0, 'Learning time': 1.536, 'F1': nan}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5188632208137939;  // std dev = 9,374, 392,000 (wgt'ed) examples reached here.  /* #neg=133 #pos=259 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048743;  // std dev = 2,72e-07, 377,000 (wgt'ed) examples reached here.  /* #neg=377 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4190068556220695;  // std dev = 9,705, 407,000 (wgt'ed) examples reached here.  /* #neg=148 #pos=259 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839222;  // std dev = 0,000, 370,000 (wgt'ed) examples reached here.  /* #neg=370 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3554984113513095;  // std dev = 9,488, 397,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=259 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360621;  // std dev = 0,000, 400,000 (wgt'ed) examples reached here.  /* #neg=400 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.261947525410845;  // std dev = 0,481, 406,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783613;  // std dev = 1,62e-07, 371,000 (wgt'ed) examples reached here.  /* #neg=371 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.21162138815405046;  // std dev = 0,477, 398,000 (wgt'ed) examples reached here.  /* #neg=139 #pos=259 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926078;  // std dev = 8,23e-09, 386,000 (wgt'ed) examples reached here.  /* #neg=386 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.16396109931972166;  // std dev = 9,443, 395,000 (wgt'ed) examples reached here.  /* #neg=136 #pos=259 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 6,25e-09, 373,000 (wgt'ed) examples reached here.  /* #neg=373 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.14356223023398093;  // std dev = 9,157, 383,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=259 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109143;  // std dev = 1,07e-07, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08256609040753454;  // std dev = 9,511, 398,000 (wgt'ed) examples reached here.  /* #neg=139 #pos=259 */
%   else if ( movie(D, B) )
%   | then return -0.0732462257633377;  // std dev = 0,000, 380,000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.054359379459872875;  // std dev = 9,620, 403,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=259 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420332;  // std dev = 0,000, 391,000 (wgt'ed) examples reached here.  /* #neg=391 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.0609838749050758;  // std dev = 9,351, 391,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=259 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202565;  // std dev = 9,41e-09, 380,000 (wgt'ed) examples reached here.  /* #neg=380 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.301454
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.697 seconds
Total inference time: 1.824 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.868092
   AUC PR    = 0.101928
   CLL	      = -0.303775
   Precision = 0.101928 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185


Total scoring time: 2.878 seconds
Parameter learned model CLL: -0.303775


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [2.72e-07, 377, 0], 'false,true,false': [0.0, 0, 0], 'true': [9.374, 133, 259]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 370, 0], 'true': [9.705, 148, 259]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 400, 0], 'true': [9.488, 138, 259]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.481, 147, 259], 'false,true,true': [1.62e-07, 371, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.477, 139, 259], 'false,true': [8.23e-09, 386, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [6.25e-09, 373, 0], 'false,true,false': [0.0, 0, 0], 'true': [9.443, 136, 259]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [1.07e-07, 385, 0], 'false,true,false': [0.0, 0, 0], 'true': [9.157, 124, 259]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 380, 0], 'true': [9.511, 139, 259]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [9.62, 144, 259], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 391, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [9.41e-09, 380, 0], 'true': [9.351, 132, 259]}]]
[{'': [0.22417091836735048, 1.9554060698968273e-16], 'false,true': [1.9554060698968273e-16, nan], 'false': [1.9554060698968273e-16, nan]}, {'': [0.2314049586776858, -1.248250752010987e-16], 'false': [-1.248250752010987e-16, nan]}, {'': [0.22677638967317373, -1.9984014443252817e-17], 'false': [-1.9984014443252817e-17, nan]}, {'': [0.23097502972651954, 7.062335143168112e-17], 'false,true': [7.062335143168112e-17, nan], 'false': [7.062335143168112e-17, nan], 'true': [0.23097502972651954, nan]}, {'': [0.2272733011792621, 6.902941085752269e-17], 'false': [6.902941085752269e-17, nan], 'true': [0.2272733011792621, nan]}, {'': [0.22575869251722352, 3.928939390094388e-17], 'false,true': [3.928939390094388e-17, nan], 'false': [3.928939390094388e-17, nan]}, {'': [0.21893938877489244, 2.999044014571851e-17], 'false,true': [2.999044014571851e-17, nan], 'false': [2.999044014571851e-17, nan]}, {'': [0.2272733011792628, -6.77820372929043e-17], 'false': [-6.77820372929043e-17, nan]}, {'': [0.12032481777341288, nan], 'true,false': [nan, -1.1584935909132068e-16], 'true,false,false': [nan, -1.1584935909132068e-16], 'true': [0.2296424459235625, -1.1584935909132068e-16]}, {'': [0.2236249108783957, 8.764918615461762e-17], 'false': [8.764918615461762e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.14185106490048768;  // std dev = 6,32e-08, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else return -0.14185106490048743;  // std dev = 2,72e-07, 378,000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.12544463852839136;  // std dev = 0,000, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.12544463852839222;  // std dev = 0,000, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 4,13e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.1123163781936062;  // std dev = 9,42e-08, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else return -0.11231637819360639;  // std dev = 0,000, 367,000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.417513584158311;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else return -0.10159632948783612;  // std dev = 1,67e-07, 373,000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601502;  // std dev = 1,46e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.09269127618926098;  // std dev = 4,21e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
%   else return -0.09269127618926043;  // std dev = 2,04e-07, 343,000 (wgt'ed) examples reached here.  /* #neg=343 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.08518475138839683;  // std dev = 6,05e-08, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.08518475138839678;  // std dev = 1,23e-07, 383,000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0787767547310916;  // std dev = 6,14e-08, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.07877675473109143;  // std dev = 9,19e-08, 367,000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07324622576333722;  // std dev = 0,000, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.0732462257633377;  // std dev = 0,000, 394,000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.15274385809367158;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | | else return -0.06842697784420271;  // std dev = 1,05e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.06842697784420348;  // std dev = 0,000, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.06419184008202564;  // std dev = 1,84e-07, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.87 seconds
Total inference time: 1.551 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064223
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.257 seconds
Refined model CLL: -0.064223


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.702 seconds
Total inference time: 1.551 seconds
AUC ROC: 1.0
Total revision time: 11.702
Best scored revision CLL: -0.064223


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:45:00
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.551, 'parameter_0.8': {'AUC PR': 0.060354, 'AUC ROC': 0.868098, 'Precision': [0.060354, 0.5], 'Inference time': 1.824, 'CLL': -0.301454, 'Recall': 1.0, 'F1': 0.113837, 'Learning time': 2.697}, 'CLL': -0.063422, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.702}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.14185106490048768;  // std dev = 5,05e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.1418510649004872;  // std dev = 2,95e-07, 474,000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109575;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.12544463852839147;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.1254446385283923;  // std dev = 0,000, 514,000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 4,13e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.11231637819360633;  // std dev = 2,36e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.11231637819360582;  // std dev = 0,000, 527,000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158311;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.10159632948783631;  // std dev = 1,83e-08, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.10159632948783634;  // std dev = 8,94e-08, 431,000 (wgt'ed) examples reached here.  /* #neg=431 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601502;  // std dev = 1,46e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.0926912761892611;  // std dev = 1,03e-07, 448,000 (wgt'ed) examples reached here.  /* #neg=448 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948795;  // std dev = 3,26e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.08518475138839678;  // std dev = 1,21e-07, 442,000 (wgt'ed) examples reached here.  /* #neg=442 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253484;  // std dev = 2,86e-07, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.07877675473109172;  // std dev = 4,21e-08, 460,000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527722;  // std dev = 4,21e-08, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.07324622576333704;  // std dev = 9,13e-09, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.0732462257633372;  // std dev = 0,000, 471,000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.0684269778442027;  // std dev = 1,49e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.06842697784420347;  // std dev = 0,000, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.06419184008202579;  // std dev = 1,70e-07, 441,000 (wgt'ed) examples reached here.  /* #neg=441 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.882 seconds
Total inference time: 2.063 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:45:06
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 2.063, 'CLL': -0.063422, 'Recall': 1.0, 'Learning time': 3.882, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995087;  // std dev = 1,08e-06, 259,000 (wgt'ed) examples reached here.  /* #pos=259 */
%   | else return -0.14185106490048768;  // std dev = 4,59e-08, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.1418510649004875;  // std dev = 1,88e-07, 496,000 (wgt'ed) examples reached here.  /* #neg=496 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.463 seconds
Total inference time: 1.032 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:45:09
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 1.032, 'CLL': -0.152985, 'Recall': 0.0, 'Learning time': 1.463, 'F1': nan}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5303481052239893;  // std dev = 10,306, 482,000 (wgt'ed) examples reached here.  /* #neg=158 #pos=324 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.1418510649004872;  // std dev = 2,83e-07, 455,000 (wgt'ed) examples reached here.  /* #neg=455 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4073756086943294;  // std dev = 10,998, 517,000 (wgt'ed) examples reached here.  /* #neg=193 #pos=324 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839233;  // std dev = 0,000, 490,000 (wgt'ed) examples reached here.  /* #neg=490 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.344720174663344;  // std dev = 10,776, 505,000 (wgt'ed) examples reached here.  /* #neg=181 #pos=324 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360588;  // std dev = 0,000, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2771785357201282;  // std dev = 0,477, 498,000 (wgt'ed) examples reached here.  /* #neg=174 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783527;  // std dev = 3,80e-07, 530,000 (wgt'ed) examples reached here.  /* #neg=530 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.2130325012152226;  // std dev = 0,476, 496,000 (wgt'ed) examples reached here.  /* #neg=172 #pos=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926133;  // std dev = 0,000, 473,000 (wgt'ed) examples reached here.  /* #neg=473 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15483584266584877;  // std dev = 10,679, 500,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=324 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 6,78e-09, 505,000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13074709630098402;  // std dev = 10,456, 489,000 (wgt'ed) examples reached here.  /* #neg=165 #pos=324 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109225;  // std dev = 5,96e-08, 516,000 (wgt'ed) examples reached here.  /* #neg=516 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10521841697195271;  // std dev = 10,349, 484,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=324 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333732;  // std dev = 0,000, 497,000 (wgt'ed) examples reached here.  /* #neg=497 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.062034624713912766;  // std dev = 10,620, 497,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442035;  // std dev = 0,000, 475,000 (wgt'ed) examples reached here.  /* #neg=475 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.05913800021314383;  // std dev = 10,435, 488,000 (wgt'ed) examples reached here.  /* #neg=164 #pos=324 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202543;  // std dev = 1,09e-08, 470,000 (wgt'ed) examples reached here.  /* #neg=470 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.303339
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 3.113 seconds
Total inference time: 1.615 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.86826
   AUC PR    = 0.102112
   CLL	      = -0.305287
   Precision = 0.102112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.185302


Total scoring time: 3.136 seconds
Parameter learned model CLL: -0.305287


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [2.83e-07, 455, 0], 'false,true,false': [0.0, 0, 0], 'true': [10.306, 158, 324]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 490, 0], 'true': [10.998, 193, 324]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 484, 0], 'true': [10.776, 181, 324]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.477, 174, 324], 'false,true,true': [3.8e-07, 530, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.476, 172, 324], 'false,true': [0.0, 473, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [6.78e-09, 505, 0], 'false,true,false': [0.0, 0, 0], 'true': [10.679, 176, 324]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.96e-08, 516, 0], 'false,true,false': [0.0, 0, 0], 'true': [10.456, 165, 324]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 497, 0], 'true': [10.349, 160, 324]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [10.62, 173, 324], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 475, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [1.09e-08, 470, 0], 'true': [10.435, 164, 324]}]]
[{'': [0.22034744580844273, 1.7568364345716762e-16], 'false,true': [1.7568364345716762e-16, nan], 'false': [1.7568364345716762e-16, nan]}, {'': [0.23394902147114868, -1.3775828550450922e-16], 'false': [-1.3775828550450922e-16, nan]}, {'': [0.2299539260856879, -5.50523813863714e-18], 'false': [-5.50523813863714e-18, nan]}, {'': [0.2273189142110598, 2.731567592662649e-16], 'false,true': [2.731567592662649e-16, nan], 'false': [2.731567592662649e-16, nan], 'true': [0.2273189142110598, nan]}, {'': [0.22652185223725277, -7.511022576745245e-18], 'false': [-7.511022576745245e-18, nan], 'true': [0.22652185223725277, nan]}, {'': [0.22809600000000063, 4.572799784594704e-17], 'false,true': [4.572799784594704e-17, nan], 'false': [4.572799784594704e-17, nan]}, {'': [0.22356882080620213, 6.885104028683141e-18], 'false,true': [6.885104028683141e-18, nan], 'false': [6.885104028683141e-18, nan]}, {'': [0.22129635953827992, -1.1616015549398017e-17], 'false': [-1.1616015549398017e-17, nan]}, {'': [0.12028238802313065, nan], 'true,false': [nan, -1.2154020480106978e-16], 'true,false,false': [nan, -1.2154020480106978e-16], 'true': [0.22692290564311318, -1.2154020480106978e-16]}, {'': [0.22312550389680044, 1.19053703066187e-16], 'false': [1.19053703066187e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1418510649004883;  // std dev = 0,000, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.1418510649004872;  // std dev = 2,98e-07, 438,000 (wgt'ed) examples reached here.  /* #neg=438 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1254446385283916;  // std dev = 0,000, 200,000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else return -0.12544463852839233;  // std dev = 0,000, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360614;  // std dev = 7,45e-08, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.11231637819360589;  // std dev = 0,000, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783648;  // std dev = 0,000, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.10159632948783547;  // std dev = 3,32e-07, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926064;  // std dev = 8,16e-08, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.09269127618926129;  // std dev = 0,000, 465,000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6,50e-08, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.08518475138839678;  // std dev = 1,44e-07, 471,000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109154;  // std dev = 8,30e-08, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.07877675473109214;  // std dev = 1,05e-07, 513,000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2,73e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333689;  // std dev = 6,99e-08, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.07324622576333707;  // std dev = 1,07e-07, 470,000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then if ( movie(D, A), movie(D, B) )
%   | | | then return 0.15274385809367147;  // std dev = 0,000, 150,000 (wgt'ed) examples reached here.  /* #pos=150 */
%   | | | else return -0.06842697784420275;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( movie(E, A), movie(E, B) )
%   | | | then return 0.1527438580936715;  // std dev = 0,000, 174,000 (wgt'ed) examples reached here.  /* #pos=174 */
%   | | | else return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.06842697784420367;  // std dev = 0,000, 637,000 (wgt'ed) examples reached here.  /* #neg=637 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.06419184008202543;  // std dev = 2,37e-07, 470,000 (wgt'ed) examples reached here.  /* #neg=470 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.643 seconds
Total inference time: 1.521 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064225
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.22 seconds
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 13.112 seconds
Total inference time: 1.521 seconds
AUC ROC: 1.0
Total revision time: 13.112
Best scored revision CLL: -0.064225


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:45:26
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'parameter_1.0': {'AUC PR': 0.060354, 'AUC ROC': 0.868098, 'Precision': [0.060354, 0.5], 'Inference time': 1.615, 'CLL': -0.303339, 'Recall': 1.0, 'F1': 0.113837, 'Learning time': 3.113}, 'Inference time': 1.521, 'CLL': -0.063422, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 13.112}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048768;  // std dev = 5,37e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.14185106490048824;  // std dev = 0,000, 577,000 (wgt'ed) examples reached here.  /* #neg=577 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.12544463852839233;  // std dev = 0,000, 606,000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360626;  // std dev = 4,94e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.11231637819360568;  // std dev = 0,000, 594,000 (wgt'ed) examples reached here.  /* #neg=594 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783624;  // std dev = 3,33e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.10159632948783553;  // std dev = 3,49e-07, 587,000 (wgt'ed) examples reached here.  /* #neg=587 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.09269127618926178;  // std dev = 0,000, 608,000 (wgt'ed) examples reached here.  /* #neg=608 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3,86e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.08518475138839678;  // std dev = 1,46e-07, 603,000 (wgt'ed) examples reached here.  /* #neg=603 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109177;  // std dev = 1,29e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07877675473109241;  // std dev = 0,000, 600,000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2,73e-07, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07324622576333689;  // std dev = 1,60e-07, 598,000 (wgt'ed) examples reached here.  /* #neg=598 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420268;  // std dev = 1,83e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.06842697784420361;  // std dev = 0,000, 572,000 (wgt'ed) examples reached here.  /* #neg=572 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080118;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.06419184008202554;  // std dev = 2,37e-07, 576,000 (wgt'ed) examples reached here.  /* #neg=576 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.019 seconds
Total inference time: 1.151 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:45:31
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.151, 'CLL': -0.063422, 'Recall': 1.0, 'Learning time': 4.019, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995085;  // std dev = 1,04e-06, 324,000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048768;  // std dev = 5,05e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.14185106490048827;  // std dev = 0,000, 583,000 (wgt'ed) examples reached here.  /* #neg=583 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.444 seconds
Total inference time: 0.895 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:45:33
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.895, 'CLL': -0.152985, 'Recall': 0.0, 'Learning time': 1.444, 'F1': nan}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5599033210644246;  // std dev = 3,454, 57,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=40 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048766;  // std dev = 5,77e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4652360146026091;  // std dev = 3,523, 58,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=40 */
%   else if ( movie(D, B) )
%   | then return -0.1254446385283916;  // std dev = 0,000, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3742265862876438;  // std dev = 3,523, 58,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=40 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360626;  // std dev = 6,18e-09, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2884951670527329;  // std dev = 0,463, 58,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783621;  // std dev = 4,21e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.16292602119085456;  // std dev = 0,481, 63,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=40 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926107;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11230595084555736;  // std dev = 3,873, 64,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.0851847513883968;  // std dev = 2,63e-09, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1259835401678411;  // std dev = 3,651, 60,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=40 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109177;  // std dev = 1,29e-08, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1974607146250851;  // std dev = 3,038, 52,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=40 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.025870916454838654;  // std dev = 3,767, 62,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=40 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 2,98e-08, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.0303668544861318;  // std dev = 3,711, 61,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=40 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202625;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.281303
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.137 seconds
Total inference time: 1.745 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.86623
   AUC PR    = 0.065359
   CLL	      = -0.316108
   Precision = 0.065359 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.122699


Total scoring time: 1.273 seconds
Parameter learned model CLL: -0.316108


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.77e-08, 56, 0], 'false,true,false': [0.0, 0, 0], 'true': [3.454, 17, 40]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 64, 0], 'true': [3.523, 18, 40]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [6.18e-09, 65, 0], 'true': [3.523, 18, 40]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.463, 18, 40], 'false,true,true': [4.21e-08, 59, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.481, 23, 40], 'false,true': [0.0, 68, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [2.63e-09, 49, 0], 'false,true,false': [0.0, 0, 0], 'true': [3.873, 24, 40]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [1.29e-08, 54, 0], 'false,true,false': [0.0, 0, 0], 'true': [3.651, 20, 40]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 66, 0], 'true': [3.038, 12, 40]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [3.767, 22, 40], 'false': [0.0, 0, 0], 'true,false,false,false': [2.98e-08, 71, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 63, 0], 'true': [3.711, 21, 40]}]]
[{'': [0.2092951677439218, 5.947623346206196e-17], 'false,true': [5.947623346206196e-17, nan], 'false': [5.947623346206196e-17, nan]}, {'': [0.21403091557669338, -3.8163916471489756e-17], 'false': [-3.8163916471489756e-17, nan]}, {'': [0.21403091557669465, 3.928481471750554e-17], 'false': [3.928481471750554e-17, nan]}, {'': [0.21403091557669413, 3.010774304068221e-17], 'false,true': [3.010774304068221e-17, nan], 'false': [3.010774304068221e-17, nan], 'true': [0.21403091557669413, nan]}, {'': [0.23179642227261238, -1.6326809185664067e-18], 'false': [-1.6326809185664067e-18, nan], 'true': [0.23179642227261238, nan]}, {'': [0.23437499999999983, 7.93016446160826e-18], 'false,true': [7.93016446160826e-18, nan], 'false': [7.93016446160826e-18, nan]}, {'': [0.22222222222222218, 3.0839528461809902e-18], 'false,true': [3.0839528461809902e-18, nan], 'false': [3.0839528461809902e-18, nan]}, {'': [0.1775147928994083, -1.6821560979169039e-18], 'false': [-1.6821560979169039e-18, nan]}, {'': [0.10893125265951929, nan], 'true,false': [nan, 1.2509555207044018e-17], 'true,false,false': [nan, 1.2509555207044018e-17], 'true': [0.22892819979188314, 1.2509555207044018e-17]}, {'': [0.22574576726686368, -2.64338815386942e-18], 'false': [-2.64338815386942e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004877;  // std dev = 2,79e-08, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.8581489350995117;  // std dev = 2,46e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.14185106490048766;  // std dev = 6,99e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.719473412210955;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.12544463852839155;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.5553664367462842;  // std dev = 1,40e-07, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.11231637819360626;  // std dev = 5,05e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.4175135841583102;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.10159632948783615;  // std dev = 5,67e-08, 74,000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926101;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.32071184716014944;  // std dev = 2,98e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.09269127618926107;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.2551722425694896;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.08518475138839679;  // std dev = 1,97e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.20975771563253542;  // std dev = 5,96e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.07877675473109173;  // std dev = 2,24e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.17709649774527753;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.07324622576333704;  // std dev = 7,45e-09, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420267;  // std dev = 2,89e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0.1422119135252007;  // std dev = 0,305, 42,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 5,27e-09, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.1352339712281357;  // std dev = 3,33e-08, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.06480401001979447;  // std dev = 0,023, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.127118
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.879 seconds
Total inference time: 1.359 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 0.999298
   AUC PR    = 0.930233
   CLL	      = -0.067017
   Precision = 0.930233 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.963855


Total scoring time: 1.264 seconds
Refined model CLL: -0.067017


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.127118
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 5.553 seconds
Total inference time: 1.359 seconds
AUC ROC: 0.985041
Total revision time: 5.553
Best scored revision CLL: -0.067017


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:45:43
{'AUC PR': 0.626761, 'AUC ROC': 0.985041, 'Precision': [0.626761, 0.5], 'Inference time': 1.359, 'CLL': -0.127118, 'Recall': 1.0, 'F1': 0.770563, 'Learning time': 5.553, 'parameter_0.2': {'AUC PR': 0.183316, 'AUC ROC': 0.888089, 'Precision': [0.183316, 0.5], 'Inference time': 1.745, 'CLL': -0.281303, 'Recall': 1.0, 'F1': 0.309835, 'Learning time': 1.137}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 7,30e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else if ( female(A) )
%   | then return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.822434649385226;  // std dev = 0,186, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839147;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7289117654342737;  // std dev = 0,021, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.26809766809737984;  // std dev = 0,006, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360624;  // std dev = 6,05e-08, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5646958654710619;  // std dev = 0,026, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.2193611760132923;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.42447873271525866;  // std dev = 0,026, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.18680264316783438;  // std dev = 0,005, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10284421007818202;  // std dev = 0,085, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09258638325420972;  // std dev = 1,83e-08, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.3254437982349144;  // std dev = 0,023, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.15950142290812316;  // std dev = 0,006, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08509572251345617;  // std dev = 4,08e-08, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25840212492839537;  // std dev = 0,020, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.1404776700177143;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07870030186048105;  // std dev = 1,67e-08, 70,000 (wgt'ed) examples reached here.  /* #neg=70 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.21203885903721814;  // std dev = 0,018, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.12339729464226626;  // std dev = 0,003, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07317989914708264;  // std dev = 0,000, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return 0.17177383449116337;  // std dev = 0,284, 41,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06836891780487402;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return 0.14798349757688298;  // std dev = 0,281, 41,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641406111937701;  // std dev = 0,000, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13652536392996242;  // std dev = 0,013, 40,000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.1454625904082772;  // std dev = 0,006, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.128549
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.839 seconds
Total inference time: 1.439 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:45:46
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [0.626761, 0.5], 'Inference time': 1.439, 'CLL': -0.128549, 'Recall': 1.0, 'Learning time': 1.839, 'F1': 0.770563}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048766;  // std dev = 6,83e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.822434649385226;  // std dev = 0,186, 28,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */


Results
   AUC ROC   = 0.891758
   AUC PR    = 0.203944
   CLL	      = -0.235682
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.823 seconds
Total inference time: 0.975 seconds
AUC ROC: 0.891758


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:45:48
{'AUC PR': 0.203944, 'AUC ROC': 0.891758, 'Precision': [nan, 0.5], 'Inference time': 0.975, 'CLL': -0.235682, 'Recall': 0.0, 'Learning time': 0.823, 'F1': nan}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.44510545683864156;  // std dev = 5,784, 138,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=81 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048768;  // std dev = 6,32e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.45346525954557565;  // std dev = 5,259, 123,000 (wgt'ed) examples reached here.  /* #neg=42 #pos=81 */
%   else if ( movie(D, B) )
%   | then return -0.1254446385283913;  // std dev = 0,000, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.36446893871766006;  // std dev = 5,300, 124,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=81 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360617;  // std dev = 8,54e-09, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.25418195668716387;  // std dev = 0,485, 130,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.1015963294878363;  // std dev = 2,11e-08, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.1747048627347083;  // std dev = 0,489, 134,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=81 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.0926912761892609;  // std dev = 5,89e-09, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13601467080255236;  // std dev = 5,628, 133,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=81 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.0851847513883968;  // std dev = 5,82e-09, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08860340338257737;  // std dev = 5,723, 136,000 (wgt'ed) examples reached here.  /* #neg=55 #pos=81 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109153;  // std dev = 7,88e-08, 142,000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12412260332736634;  // std dev = 5,300, 124,000 (wgt'ed) examples reached here.  /* #neg=43 #pos=81 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333707;  // std dev = 4,66e-09, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.06802892490081149;  // std dev = 5,490, 129,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=81 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 5,48e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07143304356245496;  // std dev = 5,340, 125,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=81 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202626;  // std dev = 3,09e-09, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.263053
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.925 seconds
Total inference time: 1.96 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.865677
   AUC PR    = 0.065854
   CLL	      = -0.292029
   Precision = 0.065854 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.12357


Total scoring time: 1.874 seconds
Parameter learned model CLL: -0.292029


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [6.32e-08, 116, 0], 'false,true,false': [0.0, 0, 0], 'true': [5.784, 57, 81]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 121, 0], 'true': [5.259, 42, 81]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [8.54e-09, 127, 0], 'true': [5.3, 43, 81]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.485, 49, 81], 'false,true,true': [2.11e-08, 104, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.489, 53, 81], 'false,true': [5.89e-09, 108, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.82e-09, 116, 0], 'false,true,false': [0.0, 0, 0], 'true': [5.628, 52, 81]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [7.88e-08, 142, 0], 'false,true,false': [0.0, 0, 0], 'true': [5.723, 55, 81]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [4.66e-09, 108, 0], 'true': [5.3, 43, 81]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [5.49, 48, 81], 'false': [0.0, 0, 0], 'true,false,false,false': [5.48e-08, 112, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [3.09e-09, 114, 0], 'true': [5.34, 44, 81]}]]
[{'': [0.24243856332703329, 3.4455197315953135e-17], 'false,true': [3.4455197315953135e-17, nan], 'false': [3.4455197315953135e-17, nan]}, {'': [0.22486615110053448, -3.670158759091427e-18], 'false': [-3.670158759091427e-18, nan]}, {'': [0.2265218522372517, 7.34320740696954e-17], 'false': [7.34320740696954e-17, nan]}, {'': [0.2348520710059168, 4.270088556250602e-18], 'false,true': [4.270088556250602e-18, nan], 'false': [4.270088556250602e-18, nan], 'true': [0.2348520710059168, nan]}, {'': [0.23908442860325135, 3.4951465590051226e-17], 'false': [3.4951465590051226e-17, nan], 'true': [0.23908442860325135, nan]}, {'': [0.23811408219797578, 3.34981085016211e-17], 'false,true': [3.34981085016211e-17, nan], 'false': [3.34981085016211e-17, nan]}, {'': [0.24086288927335636, 4.378344322465406e-17], 'false,true': [4.378344322465406e-17, nan], 'false': [4.378344322465406e-17, nan]}, {'': [0.2265218522372531, 2.1587669923266933e-17], 'false': [2.1587669923266933e-17, nan]}, {'': [0.12969220140997295, nan], 'true,false': [nan, 2.676430505792788e-17], 'true,false,false': [nan, 2.676430505792788e-17], 'true': [0.23363980530016198, 2.676430505792788e-17]}, {'': [0.22809600000000022, 8.764918615461762e-18], 'false': [8.764918615461762e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 4,34e-08, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.1418510649004878;  // std dev = 0,000, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839155;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0.7194734122109537;  // std dev = 2,53e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.12544463852839105;  // std dev = 8,16e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360633;  // std dev = 2,79e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0.5553664367462836;  // std dev = 3,42e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.1123163781936062;  // std dev = 8,94e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783634;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return 0.4175135841583104;  // std dev = 8,43e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.10159632948783637;  // std dev = 0,000, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601501;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.09269127618926087;  // std dev = 6,83e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.0851847513883968;  // std dev = 6,75e-08, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( actor(A) )
%   | | then return -0.07877675473109179;  // std dev = 5,27e-09, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.25664313714018494;  // std dev = 0,616, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109153;  // std dev = 7,74e-08, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07278930479045777;  // std dev = 0,016, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0.17709649774527716;  // std dev = 3,65e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.07324622576333722;  // std dev = 1,05e-08, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06823859076935206;  // std dev = 0,018, 161,000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else return 0.1423358187554183;  // std dev = 0,432, 85,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=81 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06310590539369904;  // std dev = 0,021, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.135219481693665;  // std dev = 4,47e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   else return -0.0650910586280665;  // std dev = 0,038, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.115338
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 2.255 seconds
Total inference time: 1.281 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066313
   Precision = 0.931034 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.964286


Total scoring time: 1.547 seconds
Refined model CLL: -0.066313


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.115338
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 7.601 seconds
Total inference time: 1.281 seconds
AUC ROC: 1.0
Total revision time: 7.601
Best scored revision CLL: -0.066313


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:46:00
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [0.626761, 0.5], 'parameter_0.4': {'AUC PR': 0.183316, 'AUC ROC': 0.888089, 'Precision': [0.183316, 0.5], 'Inference time': 1.96, 'CLL': -0.263053, 'Recall': 1.0, 'F1': 0.309835, 'Learning time': 1.925}, 'Inference time': 1.281, 'CLL': -0.115338, 'Recall': 1.0, 'F1': 0.770563, 'Learning time': 7.601}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.14185106490048816;  // std dev = 0,000, 159,000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109537;  // std dev = 2,53e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.12544463852839116;  // std dev = 6,99e-08, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360621;  // std dev = 1,00e-07, 147,000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462836;  // std dev = 3,42e-07, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583104;  // std dev = 8,43e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.10159632948783645;  // std dev = 0,000, 154,000 (wgt'ed) examples reached here.  /* #neg=154 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601501;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926071;  // std dev = 7,60e-08, 162,000 (wgt'ed) examples reached here.  /* #neg=162 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.08564738853372428;  // std dev = 0,068, 148,000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07874318724317336;  // std dev = 9,25e-08, 142,000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253567;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07321710532577393;  // std dev = 4,71e-08, 149,000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527716;  // std dev = 3,65e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06840148759069446;  // std dev = 0,000, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367116;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06416934953523404;  // std dev = 0,000, 142,000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080109;  // std dev = 5,58e-08, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.071699
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.395 seconds
Total inference time: 1.519 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:46:04
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.519, 'CLL': -0.071699, 'Recall': 1.0, 'Learning time': 2.395, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 81,000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.1418510649004879;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.916 seconds
Total inference time: 1.045 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:46:06
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 1.045, 'CLL': -0.188432, 'Recall': 0.0, 'Learning time': 0.916, 'F1': nan}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.44188099251577706;  // std dev = 7,126, 209,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=122 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048835;  // std dev = 0,000, 190,000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4409564625725865;  // std dev = 6,576, 189,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=122 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839144;  // std dev = 0,000, 167,000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3811302687366935;  // std dev = 6,377, 183,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=122 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360628;  // std dev = 7,09e-09, 154,000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2696323977864814;  // std dev = 0,480, 191,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783645;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.20831413093849094;  // std dev = 0,479, 190,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=122 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926064;  // std dev = 6,32e-09, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18484702568083813;  // std dev = 6,342, 182,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=122 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 5,59e-09, 191,000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19889096897462397;  // std dev = 5,734, 167,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=122 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109148;  // std dev = 8,30e-08, 174,000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.06140413605360908;  // std dev = 6,608, 190,000 (wgt'ed) examples reached here.  /* #neg=68 #pos=122 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333667;  // std dev = 8,43e-09, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.08599036269736399;  // std dev = 6,233, 179,000 (wgt'ed) examples reached here.  /* #neg=57 #pos=122 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 7,74e-08, 184,000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.022638829174791392;  // std dev = 6,639, 191,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=122 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202626;  // std dev = 0,000, 175,000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.275851
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.88 seconds
Total inference time: 1.593 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.863523
   AUC PR    = 0.065136
   CLL	      = -0.313558
   Precision = 0.065136 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.122306


Total scoring time: 2.843 seconds
Parameter learned model CLL: -0.313558


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 190, 0], 'false,true,false': [0.0, 0, 0], 'true': [7.126, 87, 122]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 167, 0], 'true': [6.576, 67, 122]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [7.09e-09, 154, 0], 'true': [6.377, 61, 122]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.48, 69, 122], 'false,true,true': [0.0, 147, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.479, 68, 122], 'false,true': [6.32e-09, 171, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.59e-09, 191, 0], 'false,true,false': [0.0, 0, 0], 'true': [6.342, 60, 122]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [8.3e-08, 174, 0], 'false,true,false': [0.0, 0, 0], 'true': [5.734, 45, 122]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [8.43e-09, 194, 0], 'true': [6.608, 68, 122]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [6.233, 57, 122], 'false': [0.0, 0, 0], 'true,false,false,false': [7.74e-08, 184, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 175, 0], 'true': [6.639, 69, 122]}]]
[{'': [0.2429889425608426, -2.220446049250313e-16], 'false,true': [-2.220446049250313e-16, nan], 'false': [-2.220446049250313e-16, nan]}, {'': [0.2288289801517315, -2.659216825449477e-18], 'false': [-2.659216825449477e-18, nan]}, {'': [0.2222222222222223, 4.7580986769649563e-17], 'false': [4.7580986769649563e-17, nan]}, {'': [0.23075025355664677, -5.739928562687884e-17], 'false,true': [-5.739928562687884e-17, nan], 'false': [-5.739928562687884e-17, nan], 'true': [0.23075025355664677, nan]}, {'': [0.22980609418282513, 4.025370030804661e-17], 'false': [4.025370030804661e-17, nan], 'true': [0.22980609418282513, nan]}, {'': [0.2209878034053865, 3.022596716256971e-17], 'false,true': [3.022596716256971e-17, nan], 'false': [3.022596716256971e-17, nan]}, {'': [0.1968518053712935, 3.9559670992390636e-17], 'false,true': [3.9559670992390636e-17, nan], 'false': [3.9559670992390636e-17, nan]}, {'': [0.22980609418282555, 7.096270879047392e-17], 'false': [7.096270879047392e-17, nan]}, {'': [0.11298253265388494, nan], 'true,false': [nan, 3.2582632244433945e-17], 'true,false,false': [nan, 3.2582632244433945e-17], 'true': [0.21703442464342565, 3.2582632244433945e-17]}, {'': [0.2307502535566455, -5.709718412357948e-18], 'false': [-5.709718412357948e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 5,77e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.14185106490048835;  // std dev = 0,000, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109553;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.12745868981749092;  // std dev = 0,154, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.12544463852839144;  // std dev = 0,000, 166,000 (wgt'ed) examples reached here.  /* #neg=166 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11211573117747804;  // std dev = 5,67e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0.5553664367462834;  // std dev = 4,69e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.1123163781936062;  // std dev = 9,88e-08, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10143093143168616;  // std dev = 4,71e-08, 81,000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0.4175135841583093;  // std dev = 3,53e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.10159632948783652;  // std dev = 0,000, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601499;  // std dev = 2,19e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else if ( actor(A) )
%   | | then return -0.09255277252140964;  // std dev = 1,83e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.2458961554443609;  // std dev = 0,420, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926064;  // std dev = 8,30e-08, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08446984518570325;  // std dev = 0,022, 75,000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0.2551722425694898;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.08518475138839678;  // std dev = 7,88e-08, 195,000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07821048361055838;  // std dev = 0,020, 82,000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0.2097577156325354;  // std dev = 1,93e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.07877675473109147;  // std dev = 8,16e-08, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1770964977452781;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else if ( actor(A) )
%   | | then return -0.07323072827945153;  // std dev = 0,000, 63,000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.15690715811200903;  // std dev = 0,418, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333671;  // std dev = 1,07e-07, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936714;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | | else return -0.06842697784420274;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( actor(A) )
%   | | then return -0.0684237613060196;  // std dev = 8,04e-05, 194,000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | else if ( female(B) )
%   | | | then return -0.062355958844340705;  // std dev = 0,020, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.10439775104355359;  // std dev = 0,406, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06336958161142428;  // std dev = 0,026, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0.1340070300080111;  // std dev = 5,16e-08, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   else return -0.06403615072984163;  // std dev = 0,008, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.082443
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.157 seconds
Total inference time: 1.589 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064136
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.864 seconds
Refined model CLL: -0.064136


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.082443
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.744 seconds
Total inference time: 1.589 seconds
AUC ROC: 1.0
Total revision time: 9.744
Best scored revision CLL: -0.064136


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:46:20
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.589, 'parameter_0.6': {'AUC PR': 0.183316, 'AUC ROC': 0.888089, 'Precision': [0.183316, 0.5], 'Inference time': 1.593, 'CLL': -0.275851, 'Recall': 1.0, 'F1': 0.309835, 'Learning time': 1.88}, 'CLL': -0.082443, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.744}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004885;  // std dev = 0,000, 222,000 (wgt'ed) examples reached here.  /* #neg=222 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109553;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.12607250067114753;  // std dev = 0,155, 247,000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,69e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.11281671378835216;  // std dev = 0,143, 255,000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583093;  // std dev = 3,53e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.10209988059834146;  // std dev = 0,133, 220,000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 2,19e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.0925541379341356;  // std dev = 0,000, 249,000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694898;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08506835109986909;  // std dev = 0,000, 215,000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325354;  // std dev = 1,93e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07867679470794035;  // std dev = 3,33e-08, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07315950389809697;  // std dev = 0,000, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452781;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.07324622576333704;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06835106323781849;  // std dev = 6,14e-08, 222,000 (wgt'ed) examples reached here.  /* #neg=222 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936714;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080111;  // std dev = 5,16e-08, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.06419184008202619;  // std dev = 7,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.06478761824987411;  // std dev = 0,165, 250,000 (wgt'ed) examples reached here.  /* #neg=250 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.070605
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.753 seconds
Total inference time: 1.616 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:46:25
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.616, 'CLL': -0.070605, 'Recall': 1.0, 'Learning time': 2.753, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048818;  // std dev = 0,000, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995105;  // std dev = 6,85e-07, 122,000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.193993
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.972 seconds
Total inference time: 0.859 seconds
AUC ROC: 0.985041


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:46:27
{'AUC PR': 0.626761, 'AUC ROC': 0.985041, 'Precision': [nan, 0.5], 'Inference time': 0.859, 'CLL': -0.193993, 'Recall': 0.0, 'Learning time': 0.972, 'F1': nan}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4923901802356955;  // std dev = 7,721, 257,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=163 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.1418510649004885;  // std dev = 0,000, 227,000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4313816920817816;  // std dev = 7,615, 253,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=163 */
%   else if ( movie(D, B) )
%   | then return -0.1254446385283918;  // std dev = 0,000, 234,000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3378229329164543;  // std dev = 7,747, 258,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=163 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360683;  // std dev = 0,000, 244,000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.32802254404789855;  // std dev = 0,460, 234,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783656;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.18664376851785291;  // std dev = 0,482, 257,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=163 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926047;  // std dev = 5,43e-09, 238,000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1767163348682379;  // std dev = 7,325, 243,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=163 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 5,82e-09, 252,000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09854879590920393;  // std dev = 7,695, 256,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=163 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109143;  // std dev = 5,96e-08, 256,000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.05487211546351152;  // std dev = 7,897, 264,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=163 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333668;  // std dev = 8,38e-09, 230,000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.04613150448674777;  // std dev = 7,848, 262,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=163 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6,14e-08, 229,000 (wgt'ed) examples reached here.  /* #neg=229 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.04701031442279652;  // std dev = 7,721, 257,000 (wgt'ed) examples reached here.  /* #neg=94 #pos=163 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202625;  // std dev = 9,31e-10, 226,000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.265145
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 2.035 seconds
Total inference time: 1.627 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.861644
   AUC PR    = 0.064427
   CLL	      = -0.301691
   Precision = 0.064427 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121055


Total scoring time: 2.755 seconds
Parameter learned model CLL: -0.301691


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 227, 0], 'false,true,false': [0.0, 0, 0], 'true': [7.721, 94, 163]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 234, 0], 'true': [7.615, 90, 163]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 244, 0], 'true': [7.747, 95, 163]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.46, 71, 163], 'false,true,true': [0.0, 230, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.482, 94, 163], 'false,true': [5.43e-09, 238, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.82e-09, 252, 0], 'false,true,false': [0.0, 0, 0], 'true': [7.325, 80, 163]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.96e-08, 256, 0], 'false,true,false': [0.0, 0, 0], 'true': [7.695, 93, 163]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [8.38e-09, 230, 0], 'true': [7.897, 101, 163]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [7.848, 99, 163], 'false': [0.0, 0, 0], 'true,false,false,false': [6.14e-08, 229, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 226, 0], 'true': [7.721, 94, 163]}]]
[{'': [0.23197928810429136, -2.2302277499078035e-16], 'false,true': [-2.2302277499078035e-16, nan], 'false': [-2.2302277499078035e-16, nan]}, {'': [0.229186520645537, -7.021923403612101e-17], 'false': [-7.021923403612101e-17, nan]}, {'': [0.23263325521302633, -8.736181177378281e-17], 'false': [-8.736181177378281e-17, nan]}, {'': [0.21135583315070222, -7.916372871240247e-17], 'false,true': [-7.916372871240247e-17, nan], 'false': [-7.916372871240247e-17, nan], 'true': [0.21135583315070222, nan]}, {'': [0.23197928810428725, 2.7988815746852685e-17], 'false': [2.7988815746852685e-17, nan], 'true': [0.23197928810428725, nan]}, {'': [0.22083354502193003, 3.348291661567932e-17], 'false,true': [3.348291661567932e-17, nan], 'false': [3.348291661567932e-17, nan]}, {'': [0.2313079833984363, 1.3877787807814457e-17], 'false,true': [1.3877787807814457e-17, nan], 'false': [1.3877787807814457e-17, nan]}, {'': [0.23621154729109367, 6.950961545479241e-17], 'false': [6.950961545479241e-17, nan]}, {'': [0.12870723783451718, nan], 'true,false': [nan, 1.6483660627622413e-17], 'true,false,false': [nan, 1.6483660627622413e-17], 'true': [0.2350824544024244, 1.6483660627622413e-17]}, {'': [0.23197928810428695, 1.4737473778210042e-18], 'false': [1.4737473778210042e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8,16e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.14185106490048827;  // std dev = 0,000, 247,000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109564;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.1254446385283918;  // std dev = 0,000, 230,000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1123163781936062;  // std dev = 7,74e-08, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0.5553664367462833;  // std dev = 5,53e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   else return -0.11231637819360682;  // std dev = 0,000, 241,000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415830914;  // std dev = 4,38e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else if ( actor(A) )
%   | | then return -0.10159632948783617;  // std dev = 5,58e-08, 84,000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( female(B) )
%   | | | then return -0.10159632948783633;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.22181885107629964;  // std dev = 0,416, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783655;  // std dev = 0,000, 218,000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601493;  // std dev = 3,63e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else if ( actor(A) )
%   | | then return -0.09269127618926108;  // std dev = 0,000, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.17392922174929212;  // std dev = 0,396, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926047;  // std dev = 9,42e-08, 245,000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694906;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else if ( actor(A) )
%   | | then return -0.0851847513883968;  // std dev = 5,37e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else if ( female(B) )
%   | | | then return -0.07906365488379535;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.17413468099158236;  // std dev = 0,358, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839678;  // std dev = 8,82e-08, 238,000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253515;  // std dev = 2,65e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else if ( actor(A) )
%   | | then return -0.07877675473109161;  // std dev = 5,37e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else if ( female(B) )
%   | | | then return -0.07349505297181667;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.13630253393702407;  // std dev = 0,341, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109144;  // std dev = 6,99e-08, 222,000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else if ( actor(A) )
%   | | then return -0.07324622576333707;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return -0.10581632243682423;  // std dev = 0,123, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07324622576333684;  // std dev = 1,13e-07, 264,000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.15274385809367147;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | | else return -0.06842697784420267;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.06805755125466896;  // std dev = 0,046, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080108;  // std dev = 9,42e-08, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else if ( actor(A) )
%   | | then return -0.06421403557141313;  // std dev = 0,000, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else return -0.12692823010931442;  // std dev = 0,138, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06421278260023763;  // std dev = 8,07e-05, 248,000 (wgt'ed) examples reached here.  /* #neg=248 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.074664
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.96 seconds
Total inference time: 1.392 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063758
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.255 seconds
Refined model CLL: -0.063758


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.074664
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.004999999999999 seconds
Total inference time: 1.392 seconds
AUC ROC: 1.0
Total revision time: 10.004999999999999
Best scored revision CLL: -0.063758


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:46:40
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.392, 'parameter_0.8': {'AUC PR': 0.183316, 'AUC ROC': 0.888089, 'Precision': [0.183316, 0.5], 'Inference time': 1.627, 'CLL': -0.265145, 'Recall': 1.0, 'F1': 0.309835, 'Learning time': 2.035}, 'CLL': -0.074664, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 10.004999999999999}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.1418510649004878;  // std dev = 1,23e-07, 329,000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109564;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.12544463852839205;  // std dev = 0,000, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 5,53e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.1123163781936067;  // std dev = 0,000, 332,000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830914;  // std dev = 4,38e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.10159632948783662;  // std dev = 0,000, 292,000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601493;  // std dev = 3,63e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.09269127618926049;  // std dev = 1,53e-07, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694906;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.08518475138839678;  // std dev = 1,05e-07, 331,000 (wgt'ed) examples reached here.  /* #neg=331 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253515;  // std dev = 2,65e-07, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07877675473109143;  // std dev = 2,11e-08, 318,000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527822;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.073246225763337;  // std dev = 9,31e-08, 313,000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367147;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.0684269778442029;  // std dev = 0,000, 281,000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080108;  // std dev = 9,42e-08, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.06419184008202622;  // std dev = 5,27e-09, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.06419184008202589;  // std dev = 1,36e-07, 341,000 (wgt'ed) examples reached here.  /* #neg=341 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.053 seconds
Total inference time: 1.571 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:46:45
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.571, 'CLL': -0.065435, 'Recall': 1.0, 'Learning time': 3.053, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995097;  // std dev = 1,02e-06, 163,000 (wgt'ed) examples reached here.  /* #pos=163 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.1418510649004879;  // std dev = 4,21e-08, 309,000 (wgt'ed) examples reached here.  /* #neg=309 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.075 seconds
Total inference time: 0.955 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:46:47
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.955, 'CLL': -0.188432, 'Recall': 0.0, 'Learning time': 1.075, 'F1': nan}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.503718555352673;  // std dev = 8,503, 316,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048774;  // std dev = 1,46e-07, 314,000 (wgt'ed) examples reached here.  /* #neg=314 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.40906170210300746;  // std dev = 8,760, 327,000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839197;  // std dev = 0,000, 287,000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3685102667451532;  // std dev = 8,326, 309,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360694;  // std dev = 0,000, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.27860313760871935;  // std dev = 0,476, 313,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783634;  // std dev = 8,16e-08, 344,000 (wgt'ed) examples reached here.  /* #neg=344 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.2156884075308398;  // std dev = 0,475, 311,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926046;  // std dev = 9,50e-09, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18160086811568463;  // std dev = 8,136, 302,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=204 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 6,11e-09, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07896678935465581;  // std dev = 8,826, 330,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=204 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109144;  // std dev = 5,16e-08, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10573052106963261;  // std dev = 8,273, 307,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=204 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333689;  // std dev = 6,59e-09, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.04498244442786544;  // std dev = 8,692, 324,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=204 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.068426977844203;  // std dev = 0,000, 296,000 (wgt'ed) examples reached here.  /* #neg=296 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.006242682748705953;  // std dev = 9,013, 339,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=204 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202601;  // std dev = 6,11e-09, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.264449
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 2.179 seconds
Total inference time: 1.833 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.861638
   AUC PR    = 0.064496
   CLL	      = -0.300708
   Precision = 0.064496 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.121176


Total scoring time: 2.812 seconds
Parameter learned model CLL: -0.300708


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [1.46e-07, 314, 0], 'false,true,false': [0.0, 0, 0], 'true': [8.503, 112, 204]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'true': [8.76, 123, 204]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 290, 0], 'true': [8.326, 105, 204]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.476, 109, 204], 'false,true,true': [8.16e-08, 344, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.475, 107, 204], 'false,true': [9.5e-09, 285, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [6.11e-09, 308, 0], 'false,true,false': [0.0, 0, 0], 'true': [8.136, 98, 204]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.16e-08, 274, 0], 'false,true,false': [0.0, 0, 0], 'true': [8.826, 126, 204]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [6.59e-09, 276, 0], 'true': [8.273, 103, 204]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [8.692, 120, 204], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 296, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [6.11e-09, 290, 0], 'true': [9.013, 135, 204]}]]
[{'': [0.22880948565935402, 6.788624863950002e-17], 'false,true': [6.788624863950002e-17, nan], 'false': [6.788624863950002e-17, nan]}, {'': [0.23466038212271526, -8.046215648851309e-17], 'false': [-8.046215648851309e-17, nan]}, {'': [0.22433782637382804, -9.341186827880628e-17], 'false': [-9.341186827880628e-17, nan]}, {'': [0.22696975573905792, 1.9364355080671336e-17], 'false,true': [1.9364355080671336e-17, nan], 'false': [1.9364355080671336e-17, nan], 'true': [0.22696975573905792, nan]}, {'': [0.22568004880015638, 8.881784197001253e-17], 'false': [8.881784197001253e-17, nan], 'true': [0.22568004880015638, nan]}, {'': [0.21920091224069074, 3.7488050182148143e-17], 'false,true': [3.7488050182148143e-17, nan], 'false': [3.7488050182148143e-17, nan]}, {'': [0.23603305785123838, 9.724581237592612e-18], 'false,true': [9.724581237592612e-18, nan], 'false': [9.724581237592612e-18, nan]}, {'': [0.22294135746798427, 4.1834490782976914e-17], 'false': [4.1834490782976914e-17, nan]}, {'': [0.1250726655548767, nan], 'true,false': [nan, -4.5759192231171994e-17], 'true,false,false': [nan, -4.5759192231171994e-17], 'true': [0.2331961591220858, -4.5759192231171994e-17]}, {'': [0.23964288511238083, 3.7517881521815636e-17], 'false': [3.7517881521815636e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8,56e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.1418510649004878;  // std dev = 1,26e-07, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12788687394981893;  // std dev = 0,218, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.12544463852839197;  // std dev = 0,000, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11207311432675622;  // std dev = 0,000, 136,000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.11231637819360696;  // std dev = 0,000, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1013957951895462;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783663;  // std dev = 0,000, 312,000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0925233451569197;  // std dev = 0,000, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.09269127618926044;  // std dev = 1,30e-07, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08504221140633089;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 1,01e-07, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08286421590843737;  // std dev = 0,537, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.07877675473109141;  // std dev = 3,94e-08, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07750036922684876;  // std dev = 0,523, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.0732462257633369;  // std dev = 1,06e-07, 279,000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | | else return -0.06842697784420265;  // std dev = 1,49e-08, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return -0.07083717530644727;  // std dev = 0,720, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06344860659107533;  // std dev = 0,000, 117,000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.06405540429136426;  // std dev = 0,000579, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.089151
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.175 seconds
Total inference time: 1.556 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064353
   Precision = 0.93578 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966825


Total scoring time: 2.091 seconds
Refined model CLL: -0.064353


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.089151
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 10.257000000000001 seconds
Total inference time: 1.556 seconds
AUC ROC: 1.0
Total revision time: 10.257000000000001
Best scored revision CLL: -0.064353


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:47:02
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [0.626761, 0.5], 'parameter_1.0': {'AUC PR': 0.183316, 'AUC ROC': 0.888089, 'Precision': [0.183316, 0.5], 'Inference time': 1.833, 'CLL': -0.264449, 'Recall': 1.0, 'F1': 0.309835, 'Learning time': 2.179}, 'Inference time': 1.556, 'CLL': -0.089151, 'Recall': 1.0, 'F1': 0.770563, 'Learning time': 10.257000000000001}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048735;  // std dev = 2,97e-07, 394,000 (wgt'ed) examples reached here.  /* #neg=394 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.12584744878621212;  // std dev = 0,155, 385,000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11227622371437267;  // std dev = 0,000, 414,000 (wgt'ed) examples reached here.  /* #neg=414 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2,53e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.10222604880319913;  // std dev = 0,273, 412,000 (wgt'ed) examples reached here.  /* #neg=412 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4,00e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.09329879348639253;  // std dev = 0,258, 374,000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4,46e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.08506014057151039;  // std dev = 4,41e-06, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07866975861419322;  // std dev = 0,000, 416,000 (wgt'ed) examples reached here.  /* #neg=416 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,04e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0731533991003409;  // std dev = 0,000, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07323080529263376;  // std dev = 0,000164, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06842796082443268;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.06834568427824471;  // std dev = 1,43e-05, 414,000 (wgt'ed) examples reached here.  /* #neg=414 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801098;  // std dev = 1,38e-07, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06419270736555019;  // std dev = 8,33e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.06488058484444549;  // std dev = 0,319, 420,000 (wgt'ed) examples reached here.  /* #neg=420 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.076659
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.468 seconds
Total inference time: 1.406 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:47:07
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.406, 'CLL': -0.076659, 'Recall': 1.0, 'Learning time': 3.468, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 204,000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.14185106490048754;  // std dev = 2,35e-07, 391,000 (wgt'ed) examples reached here.  /* #neg=391 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.188432
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.266 seconds
Total inference time: 0.94 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:47:09
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.94, 'CLL': -0.188432, 'Recall': 0.0, 'Learning time': 1.266, 'F1': nan}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.49022440679762647;  // std dev = 4,965, 106,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=67 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048763;  // std dev = 8,94e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3856898877914879;  // std dev = 5,188, 112,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=67 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839133;  // std dev = 0,000, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.34794933609926787;  // std dev = 4,965, 106,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=67 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360621;  // std dev = 7,68e-09, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2722533729597308;  // std dev = 0,482, 106,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783633;  // std dev = 0,000, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.21348671014202583;  // std dev = 0,481, 105,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926097;  // std dev = 4,37e-09, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.16681446434339622;  // std dev = 4,882, 104,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=67 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839682;  // std dev = 5,43e-09, 97,000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19367070461516134;  // std dev = 4,387, 94,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=67 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.0787767547310916;  // std dev = 5,77e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10288527457946132;  // std dev = 4,702, 100,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=67 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333707;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.08459023303150061;  // std dev = 4,654, 99,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=67 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4,41e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.02565901506352338;  // std dev = 4,924, 105,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=67 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202626;  // std dev = 0,000, 94,000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.328587
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.231 seconds
Total inference time: 1.133 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.872823
   AUC PR    = 0.096403
   CLL	      = -0.29659
   Precision = 0.096403 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.175853


Total scoring time: 1.4 seconds
Parameter learned model CLL: -0.29659


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [8.94e-08, 101, 0], 'false,true,false': [0.0, 0, 0], 'true': [4.965, 39, 67]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 113, 0], 'true': [5.188, 45, 67]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [7.68e-09, 87, 0], 'true': [4.965, 39, 67]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.482, 39, 67], 'false,true,true': [0.0, 110, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.481, 38, 67], 'false,true': [4.37e-09, 97, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.43e-09, 97, 0], 'false,true,false': [0.0, 0, 0], 'true': [4.882, 37, 67]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.77e-08, 100, 0], 'false,true,false': [0.0, 0, 0], 'true': [4.387, 27, 67]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 101, 0], 'true': [4.702, 33, 67]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [4.654, 32, 67], 'false': [0.0, 0, 0], 'true,false,false,false': [4.41e-08, 91, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 94, 0], 'true': [4.924, 38, 67]}]]
[{'': [0.2325560697757202, 7.91446116564468e-17], 'false,true': [7.91446116564468e-17, nan], 'false': [7.91446116564468e-17, nan]}, {'': [0.24035395408163343, -3.929993007522678e-18], 'false': [-3.929993007522678e-18, nan]}, {'': [0.23255606977572232, 5.870144727903127e-17], 'false': [5.870144727903127e-17, nan]}, {'': [0.23255606977572119, -6.0557619525008536e-18], 'false,true': [-6.0557619525008536e-18, nan], 'false': [-6.0557619525008536e-18, nan], 'true': [0.23255606977572119, nan]}, {'': [0.23092970521541895, 2.0602076745621462e-17], 'false': [2.0602076745621462e-17, nan], 'true': [0.23092970521541895, nan]}, {'': [0.22919748520710095, 3.0903115118432194e-17], 'false,true': [3.0903115118432194e-17, nan], 'false': [3.0903115118432194e-17, nan]}, {'': [0.20473064735174287, 3.3306690738754695e-17], 'false,true': [3.3306690738754695e-17, nan], 'false': [3.3306690738754695e-17, nan]}, {'': [0.22109999999999974, -5.4961535872532505e-18], 'false': [-5.4961535872532505e-18, nan]}, {'': [0.11982511369990341, nan], 'true,false': [nan, 2.1350442781253012e-17], 'true,false,false': [nan, 2.1350442781253012e-17], 'true': [0.2187531884501579, 2.1350442781253012e-17]}, {'': [0.23092970521541933, -1.4173059888831785e-17], 'false': [-1.4173059888831785e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004877;  // std dev = 2,98e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.14185106490048763;  // std dev = 8,69e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.12544463852839136;  // std dev = 0,000, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.11231637819360621;  // std dev = 7,30e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( actor(A) )
%   | | then return -0.10159632948783635;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.1694734931330296;  // std dev = 0,107, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.1015963294878363;  // std dev = 2,58e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09820665473731696;  // std dev = 0,207, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.09269127618926104;  // std dev = 2,36e-08, 89,000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08409539516390063;  // std dev = 0,010, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.08518475138839682;  // std dev = 5,58e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07792623254411807;  // std dev = 0,008, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.07877675473109158;  // std dev = 5,96e-08, 102,000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( actor(A) )
%   | | then return -0.07300388649915673;  // std dev = 1,75e-08, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.2792956103360024;  // std dev = 0,258, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333707;  // std dev = 0,000, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.06842697784420276;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return -0.07182331092692033;  // std dev = 0,356, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( actor(A) )
%   | | then return -0.06378877460222031;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.0919675864691996;  // std dev = 0,234, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06400663986949406;  // std dev = 0,000614, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063818
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.345 seconds
Total inference time: 1.221 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066137
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.414 seconds
Refined model CLL: -0.066137


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063818
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.390000000000001 seconds
Total inference time: 1.221 seconds
AUC ROC: 1.0
Total revision time: 6.390000000000001
Best scored revision CLL: -0.066137


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:47:19
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.221, 'CLL': -0.063818, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.390000000000001, 'parameter_0.2': {'AUC PR': 0.075503, 'AUC ROC': 0.85431, 'Precision': [0.075503, 0.5], 'Inference time': 1.133, 'CLL': -0.328587, 'Recall': 1.0, 'F1': 0.140406, 'Learning time': 1.231}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.14185106490048774;  // std dev = 3,65e-08, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.12544463852839113;  // std dev = 7,45e-08, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.11231637819360626;  // std dev = 6,50e-08, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.10159632948783638;  // std dev = 0,000, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.09269127618926101;  // std dev = 3,49e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.08518475138839683;  // std dev = 5,27e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07877675473109161;  // std dev = 6,05e-08, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07324622576333714;  // std dev = 0,000, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.06842697784420265;  // std dev = 4,83e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.06419184008202626;  // std dev = 0,000, 123,000 (wgt'ed) examples reached here.  /* #neg=123 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.41 seconds
Total inference time: 1.13 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:47:23
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.13, 'CLL': -0.063847, 'Recall': 1.0, 'Learning time': 2.41, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.14185106490048782;  // std dev = 0,000, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.805 seconds
Total inference time: 0.805 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:47:24
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.805, 'CLL': -0.160469, 'Recall': 0.0, 'Learning time': 0.805, 'F1': nan}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5118074716848751;  // std dev = 6,812, 205,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=134 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.1418510649004885;  // std dev = 0,000, 217,000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4745627482060005;  // std dev = 6,438, 194,000 (wgt'ed) examples reached here.  /* #neg=60 #pos=134 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839147;  // std dev = 0,000, 172,000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.31325281897648055;  // std dev = 7,132, 216,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=134 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360661;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.33912545448407344;  // std dev = 0,451, 187,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783652;  // std dev = 0,000, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.19388428833561713;  // std dev = 0,476, 205,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926057;  // std dev = 6,45e-09, 199,000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15194105063943675;  // std dev = 6,749, 203,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=134 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 5,51e-09, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10447253341595579;  // std dev = 6,844, 206,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=134 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109146;  // std dev = 6,99e-08, 213,000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11191081792433172;  // std dev = 6,511, 196,000 (wgt'ed) examples reached here.  /* #neg=62 #pos=134 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333664;  // std dev = 8,54e-09, 202,000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.04223071332413389;  // std dev = 6,934, 209,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=134 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 7,67e-08, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.04146705681693738;  // std dev = 6,844, 206,000 (wgt'ed) examples reached here.  /* #neg=72 #pos=134 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202626;  // std dev = 0,000, 204,000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.328826
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.719 seconds
Total inference time: 1.085 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.869785
   AUC PR    = 0.094366
   CLL	      = -0.302131
   Precision = 0.094366 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.172458


Total scoring time: 1.623 seconds
Parameter learned model CLL: -0.302131


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 217, 0], 'false,true,false': [0.0, 0, 0], 'true': [6.812, 71, 134]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 172, 0], 'true': [6.438, 60, 134]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 202, 0], 'true': [7.132, 82, 134]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.451, 53, 134], 'false,true,true': [0.0, 192, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.476, 71, 134], 'false,true': [6.45e-09, 199, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.51e-09, 206, 0], 'false,true,false': [0.0, 0, 0], 'true': [6.749, 69, 134]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [6.99e-08, 213, 0], 'false,true,false': [0.0, 0, 0], 'true': [6.844, 72, 134]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [8.54e-09, 202, 0], 'true': [6.511, 62, 134]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [6.934, 75, 134], 'false': [0.0, 0, 0], 'true,false,false,false': [7.67e-08, 181, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 204, 0], 'true': [6.844, 72, 134]}]]
[{'': [0.2263890541344482, -2.333003222253785e-16], 'false,true': [-2.333003222253785e-16, nan], 'false': [-2.333003222253785e-16, nan]}, {'': [0.2136252524178949, -3.0982968129074136e-17], 'false': [-3.0982968129074136e-17, nan]}, {'': [0.2355109739368947, -4.3969228698026004e-17], 'false': [-4.3969228698026004e-17, nan]}, {'': [0.20309416912122008, -9.483155002006545e-17], 'false,true': [-9.483155002006545e-17, nan], 'false': [-9.483155002006545e-17, nan], 'true': [0.20309416912122008, nan]}, {'': [0.22638905413444294, 4.2400477322367786e-17], 'false': [4.2400477322367786e-17, nan], 'true': [0.22638905413444294, nan]}, {'': [0.22436846319978554, 2.910293365522255e-17], 'false,true': [2.910293365522255e-17, nan], 'false': [2.910293365522255e-17, nan]}, {'': [0.22735413328306153, 2.2934184546247366e-17], 'false,true': [2.2934184546247366e-17, nan], 'false': [2.2934184546247366e-17, nan]}, {'': [0.21626405664306567, 7.25492273517429e-17], 'false': [7.25492273517429e-17, nan]}, {'': [0.12634325664560292, nan], 'true,false': [nan, 3.250929298626149e-17], 'true,false,false': [nan, 3.250929298626149e-17], 'true': [0.23007715024839176, 3.250929298626149e-17]}, {'': [0.22735413328306203, -1.6326809185664067e-18], 'false': [-1.6326809185664067e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048768;  // std dev = 5,77e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.1418510649004883;  // std dev = 0,000, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 76,000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.12544463852839163;  // std dev = 0,000, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360622;  // std dev = 6,83e-08, 90,000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.11231637819360664;  // std dev = 0,000, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1015963294878363;  // std dev = 2,11e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.10159632948783655;  // std dev = 0,000, 219,000 (wgt'ed) examples reached here.  /* #neg=219 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.09269127618926054;  // std dev = 9,54e-08, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 78,000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.08518475138839678;  // std dev = 7,88e-08, 207,000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109169;  // std dev = 3,33e-08, 77,000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.07877675473109148;  // std dev = 7,88e-08, 179,000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 79,000 (wgt'ed) examples reached here.  /* #neg=79 */
%   else return -0.07324622576333666;  // std dev = 1,18e-07, 199,000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.06842697784420271;  // std dev = 4,71e-08, 254,000 (wgt'ed) examples reached here.  /* #neg=254 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202625;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   else return -0.06419184008202626;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #neg=202 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063874
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.432 seconds
Total inference time: 1.249 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064171
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.832 seconds
Refined model CLL: -0.064171


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063874
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 7.606 seconds
Total inference time: 1.249 seconds
AUC ROC: 1.0
Total revision time: 7.606
Best scored revision CLL: -0.064171


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:47:35
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'parameter_0.4': {'AUC PR': 0.075503, 'AUC ROC': 0.85431, 'Precision': [0.075503, 0.5], 'Inference time': 1.085, 'CLL': -0.328826, 'Recall': 1.0, 'F1': 0.140406, 'Learning time': 1.719}, 'Inference time': 1.249, 'CLL': -0.063874, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 7.606}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1418510649004877;  // std dev = 2,11e-08, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.14185106490048835;  // std dev = 0,000, 247,000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.12544463852839174;  // std dev = 0,000, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.11231637819360671;  // std dev = 0,000, 232,000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.10159632948783648;  // std dev = 0,000, 233,000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.09269127618926054;  // std dev = 7,30e-08, 261,000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.08518475138839678;  // std dev = 8,30e-08, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109176;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.07877675473109144;  // std dev = 6,32e-08, 245,000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.0732462257633367;  // std dev = 1,20e-07, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420276;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.06842697784420261;  // std dev = 6,14e-08, 237,000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202619;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.06419184008202626;  // std dev = 0,000, 229,000 (wgt'ed) examples reached here.  /* #neg=229 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.957 seconds
Total inference time: 1.108 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:47:39
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.108, 'CLL': -0.063847, 'Recall': 1.0, 'Learning time': 2.957, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.1418510649004884;  // std dev = 0,000, 250,000 (wgt'ed) examples reached here.  /* #neg=250 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.129 seconds
Total inference time: 0.813 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:47:41
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.813, 'CLL': -0.160469, 'Recall': 0.0, 'Learning time': 1.129, 'F1': nan}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5226226193100348;  // std dev = 8,233, 304,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=202 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.1418510649004878;  // std dev = 1,26e-07, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.39785667644684797;  // std dev = 8,809, 328,000 (wgt'ed) examples reached here.  /* #neg=126 #pos=202 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839205;  // std dev = 0,000, 324,000 (wgt'ed) examples reached here.  /* #neg=324 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3733895560589056;  // std dev = 8,206, 303,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=202 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360658;  // std dev = 0,000, 332,000 (wgt'ed) examples reached here.  /* #neg=332 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2818795443080173;  // std dev = 0,474, 307,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783662;  // std dev = 0,000, 289,000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.17356613496990864;  // std dev = 0,486, 327,000 (wgt'ed) examples reached here.  /* #neg=125 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926046;  // std dev = 9,41e-09, 284,000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18600198851040056;  // std dev = 8,123, 300,000 (wgt'ed) examples reached here.  /* #neg=98 #pos=202 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 5,82e-09, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11158980709079333;  // std dev = 8,464, 313,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=202 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109143;  // std dev = 3,65e-08, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.04519171005208748;  // std dev = 8,914, 333,000 (wgt'ed) examples reached here.  /* #neg=131 #pos=202 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333698;  // std dev = 5,51e-09, 302,000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.08547076672335294;  // std dev = 8,312, 307,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=202 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420286;  // std dev = 0,000, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09145916838507932;  // std dev = 7,980, 295,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=202 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202597;  // std dev = 6,65e-09, 300,000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.326221
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.078 seconds
Total inference time: 1.178 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.86911
   AUC PR    = 0.094348
   CLL	      = -0.301042
   Precision = 0.094348 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.172429


Total scoring time: 2.56 seconds
Parameter learned model CLL: -0.301042


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [1.26e-07, 308, 0], 'false,true,false': [0.0, 0, 0], 'true': [8.233, 102, 202]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 324, 0], 'true': [8.809, 126, 202]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 332, 0], 'true': [8.206, 101, 202]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.474, 105, 202], 'false,true,true': [0.0, 289, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.486, 125, 202], 'false,true': [9.41e-09, 284, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.82e-09, 282, 0], 'false,true,false': [0.0, 0, 0], 'true': [8.123, 98, 202]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [3.65e-08, 300, 0], 'false,true,false': [0.0, 0, 0], 'true': [8.464, 111, 202]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [5.51e-09, 302, 0], 'true': [8.914, 131, 202]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [8.312, 105, 202], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 272, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [6.65e-09, 300, 0], 'true': [7.98, 93, 202]}]]
[{'': [0.22294840720222076, 5.190653102143589e-17], 'false,true': [5.190653102143589e-17, nan], 'false': [5.190653102143589e-17, nan]}, {'': [0.23657792980369347, -9.320390824013659e-17], 'false': [-9.320390824013659e-17, nan]}, {'': [0.2222222222222227, -4.5479015466572676e-17], 'false': [-4.5479015466572676e-17, nan]}, {'': [0.2250421755137968, -5.531907112319119e-17], 'false,true': [-5.531907112319119e-17, nan], 'false': [-5.531907112319119e-17, nan], 'true': [0.2250421755137968, nan]}, {'': [0.23613799811089364, 8.756688644930812e-17], 'false': [8.756688644930812e-17, nan], 'true': [0.23613799811089364, nan]}, {'': [0.21995555555555646, 3.4645257506033254e-17], 'false,true': [3.4645257506033254e-17, nan], 'false': [3.4645257506033254e-17, nan]}, {'': [0.22886831548755035, 4.440892098500626e-18], 'false,true': [4.440892098500626e-18, nan], 'false': [4.440892098500626e-18, nan]}, {'': [0.2386350314278234, 3.088037551937521e-17], 'false': [3.088037551937521e-17, nan]}, {'': [0.12522237324803956, nan], 'true,false': [nan, -3.102093745276173e-17], 'true,false,false': [nan, -3.102093745276173e-17], 'true': [0.22504217551379888, -3.102093745276173e-17]}, {'': [0.21586900316001106, 4.366877230192282e-17], 'false': [4.366877230192282e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.14185106490048766;  // std dev = 8,69e-08, 107,000 (wgt'ed) examples reached here.  /* #neg=107 */
%   else return -0.14185106490048774;  // std dev = 1,52e-07, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839136;  // std dev = 0,000, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
%   else return -0.12544463852839197;  // std dev = 0,000, 286,000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360622;  // std dev = 7,88e-08, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.11231637819360682;  // std dev = 0,000, 304,000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783621;  // std dev = 5,16e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return -0.10159632948783663;  // std dev = 0,000, 307,000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926108;  // std dev = 0,000, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.09269127618926044;  // std dev = 1,79e-07, 309,000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08518475138839682;  // std dev = 5,77e-08, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.08518475138839678;  // std dev = 1,07e-07, 311,000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109165;  // std dev = 5,05e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.07877675473109143;  // std dev = 2,11e-08, 320,000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333707;  // std dev = 0,000, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.07324622576333703;  // std dev = 8,82e-08, 316,000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then if ( movie(D, A), movie(D, B) )
%   | | | then return 0.1527438580936716;  // std dev = 0,000, 97,000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | | else return -0.0684269778442027;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.12192497111872193;  // std dev = 0,077, 122,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=105 */
%   | else return -0.0684269778442032;  // std dev = 0,000, 366,000 (wgt'ed) examples reached here.  /* #neg=366 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13588716279454877;  // std dev = 0,026, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 99,000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else return -0.06482378136445838;  // std dev = 0,047, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064466
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.357 seconds
Total inference time: 1.641 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064553
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.107 seconds
Refined model CLL: -0.064553


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064466
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 10.102 seconds
Total inference time: 1.641 seconds
AUC ROC: 1.0
Total revision time: 10.102
Best scored revision CLL: -0.064553


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:47:55
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.641, 'parameter_0.6': {'AUC PR': 0.075503, 'AUC ROC': 0.85431, 'Precision': [0.075503, 0.5], 'Inference time': 1.178, 'CLL': -0.326221, 'Recall': 1.0, 'F1': 0.140406, 'Learning time': 2.078}, 'CLL': -0.064466, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 10.102}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 2,58e-08, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048763;  // std dev = 2,04e-07, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.12544463852839222;  // std dev = 0,000, 388,000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360642;  // std dev = 0,000, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.1123163781936063;  // std dev = 0,000, 389,000 (wgt'ed) examples reached here.  /* #neg=389 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783635;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.10159632948783638;  // std dev = 5,96e-08, 394,000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926094;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.09269127618926057;  // std dev = 1,92e-07, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.0851847513883968;  // std dev = 2,24e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.08518475138839678;  // std dev = 1,12e-07, 372,000 (wgt'ed) examples reached here.  /* #neg=372 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109179;  // std dev = 5,27e-09, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.07877675473109147;  // std dev = 5,16e-08, 386,000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07324622576333709;  // std dev = 7,88e-08, 351,000 (wgt'ed) examples reached here.  /* #neg=351 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.06842697784420335;  // std dev = 0,000, 424,000 (wgt'ed) examples reached here.  /* #neg=424 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.06419184008202593;  // std dev = 1,33e-07, 381,000 (wgt'ed) examples reached here.  /* #neg=381 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.84 seconds
Total inference time: 1.186 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:48:00
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.186, 'CLL': -0.063847, 'Recall': 1.0, 'Learning time': 3.84, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.14185106490048763;  // std dev = 2,11e-07, 396,000 (wgt'ed) examples reached here.  /* #neg=396 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.163 seconds
Total inference time: 0.787 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:48:03
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.787, 'CLL': -0.160469, 'Recall': 0.0, 'Learning time': 1.163, 'F1': nan}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5047835504841235;  // std dev = 9,750, 416,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=269 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.1418510649004874;  // std dev = 2,73e-07, 379,000 (wgt'ed) examples reached here.  /* #neg=379 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.43166343397760654;  // std dev = 9,750, 416,000 (wgt'ed) examples reached here.  /* #neg=147 #pos=269 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839227;  // std dev = 0,000, 405,000 (wgt'ed) examples reached here.  /* #neg=405 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.36433610713847886;  // std dev = 9,550, 407,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=269 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360625;  // std dev = 0,000, 392,000 (wgt'ed) examples reached here.  /* #neg=392 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2848368604833562;  // std dev = 0,473, 406,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783608;  // std dev = 1,80e-07, 379,000 (wgt'ed) examples reached here.  /* #neg=379 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.21923227157896163;  // std dev = 0,472, 404,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926098;  // std dev = 6,32e-09, 415,000 (wgt'ed) examples reached here.  /* #neg=415 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1501186655927184;  // std dev = 9,685, 413,000 (wgt'ed) examples reached here.  /* #neg=144 #pos=269 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 6,25e-09, 414,000 (wgt'ed) examples reached here.  /* #neg=414 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1406275582435838;  // std dev = 9,288, 396,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=269 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109141;  // std dev = 1,23e-07, 407,000 (wgt'ed) examples reached here.  /* #neg=407 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1111122017238563;  // std dev = 9,213, 393,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=269 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333716;  // std dev = 3,09e-09, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.04324177725591478;  // std dev = 9,792, 418,000 (wgt'ed) examples reached here.  /* #neg=149 #pos=269 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420329;  // std dev = 0,000, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07911566688486767;  // std dev = 9,136, 390,000 (wgt'ed) examples reached here.  /* #neg=121 #pos=269 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202555;  // std dev = 1,01e-08, 419,000 (wgt'ed) examples reached here.  /* #neg=419 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.336326
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.369 seconds
Total inference time: 1.162 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.871152
   AUC PR    = 0.095593
   CLL	      = -0.306258
   Precision = 0.095593 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174505


Total scoring time: 2.827 seconds
Parameter learned model CLL: -0.306258


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [2.73e-07, 379, 0], 'false,true,false': [0.0, 0, 0], 'true': [9.75, 147, 269]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 405, 0], 'true': [9.75, 147, 269]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 392, 0], 'true': [9.55, 138, 269]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.473, 137, 269], 'false,true,true': [1.8e-07, 379, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.472, 135, 269], 'false,true': [6.32e-09, 415, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [6.25e-09, 414, 0], 'false,true,false': [0.0, 0, 0], 'true': [9.685, 144, 269]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [1.23e-07, 407, 0], 'false,true,false': [0.0, 0, 0], 'true': [9.288, 127, 269]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [3.09e-09, 369, 0], 'true': [9.213, 124, 269]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [9.792, 149, 269], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 376, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [1.01e-08, 419, 0], 'true': [9.136, 121, 269]}]]
[{'': [0.2284982895710093, 1.9685220911559503e-16], 'false,true': [1.9685220911559503e-16, nan], 'false': [1.9685220911559503e-16, nan]}, {'': [0.22849828957100746, -1.2938895496866022e-16], 'false': [-1.2938895496866022e-16, nan]}, {'': [0.22410035677848633, -2.2657612747452175e-17], 'false': [-2.2657612747452175e-17, nan]}, {'': [0.22357373389308122, 8.553697181808594e-17], 'false,true': [8.553697181808594e-17, nan], 'false': [8.553697181808594e-17, nan], 'true': [0.22357373389308122, nan]}, {'': [0.2224965689638269, 3.7453306854824555e-17], 'false': [3.7453306854824555e-17, nan], 'true': [0.2224965689638269, nan]}, {'': [0.2270987107856657, 3.9689132281285787e-17], 'false,true': [3.9689132281285787e-17, nan], 'false': [3.9689132281285787e-17, nan]}, {'': [0.2178540455055611, 3.709836151081604e-17], 'false,true': [3.709836151081604e-17, nan], 'false': [3.709836151081604e-17, nan]}, {'': [0.21596773044823678, 9.627950349052848e-18], 'false': [9.627950349052848e-18, nan]}, {'': [0.12387394349143001, nan], 'true,false': [nan, -1.0098305170792647e-16], 'true,false,false': [nan, -1.0098305170792647e-16], 'true': [0.22939607609715834, -1.0098305170792647e-16]}, {'': [0.21399737015121728, 1.0280824189846319e-16], 'false': [1.0280824189846319e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1418510649004879;  // std dev = 0,000, 133,000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else return -0.14185106490048735;  // std dev = 2,97e-07, 394,000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839113;  // std dev = 7,88e-08, 136,000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else return -0.12544463852839224;  // std dev = 0,000, 388,000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1123163781936062;  // std dev = 9,06e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.11231637819360626;  // std dev = 0,000, 390,000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783638;  // std dev = 0,000, 132,000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.10159632948783572;  // std dev = 2,72e-07, 434,000 (wgt'ed) examples reached here.  /* #neg=434 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926096;  // std dev = 5,16e-08, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
%   else return -0.0926912761892611;  // std dev = 1,05e-07, 432,000 (wgt'ed) examples reached here.  /* #neg=432 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08518475138839683;  // std dev = 5,96e-08, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.08518475138839678;  // std dev = 1,21e-07, 380,000 (wgt'ed) examples reached here.  /* #neg=380 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0787767547310916;  // std dev = 6,66e-08, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.07877675473109164;  // std dev = 7,30e-08, 434,000 (wgt'ed) examples reached here.  /* #neg=434 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333732;  // std dev = 0,000, 163,000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.07324622576333714;  // std dev = 6,14e-08, 365,000 (wgt'ed) examples reached here.  /* #neg=365 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.06842697784420274;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.06842697784420347;  // std dev = 0,000, 489,000 (wgt'ed) examples reached here.  /* #neg=489 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 152,000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.06419184008202557;  // std dev = 2,03e-07, 411,000 (wgt'ed) examples reached here.  /* #neg=411 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.679 seconds
Total inference time: 1.288 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064058
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.187 seconds
Refined model CLL: -0.064058


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.062 seconds
Total inference time: 1.288 seconds
AUC ROC: 1.0
Total revision time: 11.062
Best scored revision CLL: -0.064058


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:48:17
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.288, 'parameter_0.8': {'AUC PR': 0.075503, 'AUC ROC': 0.85431, 'Precision': [0.075503, 0.5], 'Inference time': 1.162, 'CLL': -0.336326, 'Recall': 1.0, 'F1': 0.140406, 'Learning time': 2.369}, 'CLL': -0.063847, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.062}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1418510649004876;  // std dev = 1,03e-07, 501,000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 42,000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.1254446385283923;  // std dev = 0,000, 479,000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360643;  // std dev = 0,000, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.1123163781936061;  // std dev = 0,000, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 39,000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.10159632948783594;  // std dev = 2,31e-07, 477,000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.09269127618926142;  // std dev = 0,000, 504,000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0851847513883968;  // std dev = 1,67e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.08518475138839678;  // std dev = 1,30e-07, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109176;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.07877675473109194;  // std dev = 0,000, 506,000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333704;  // std dev = 9,13e-09, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.07324622576333716;  // std dev = 4,71e-08, 527,000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06842697784420271;  // std dev = 7,45e-09, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.0684269778442035;  // std dev = 0,000, 513,000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06419184008202553;  // std dev = 2,32e-07, 538,000 (wgt'ed) examples reached here.  /* #neg=538 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.039 seconds
Total inference time: 1.103 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:48:22
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.103, 'CLL': -0.063847, 'Recall': 1.0, 'Learning time': 4.039, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1418510649004875;  // std dev = 1,88e-07, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.351 seconds
Total inference time: 0.809 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:48:25
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.809, 'CLL': -0.160469, 'Recall': 0.0, 'Learning time': 1.351, 'F1': nan}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5375844189704757;  // std dev = 10,394, 496,000 (wgt'ed) examples reached here.  /* #neg=159 #pos=337 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048757;  // std dev = 1,26e-07, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.428767282520337;  // std dev = 10,871, 519,000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839235;  // std dev = 0,000, 528,000 (wgt'ed) examples reached here.  /* #neg=528 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.355328915289448;  // std dev = 10,732, 512,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360583;  // std dev = 0,000, 495,000 (wgt'ed) examples reached here.  /* #neg=495 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2654278662116843;  // std dev = 0,478, 520,000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783548;  // std dev = 3,26e-07, 479,000 (wgt'ed) examples reached here.  /* #neg=479 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.2061235438701835;  // std dev = 0,476, 516,000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926135;  // std dev = 0,000, 477,000 (wgt'ed) examples reached here.  /* #neg=477 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12004061067916333;  // std dev = 11,341, 545,000 (wgt'ed) examples reached here.  /* #neg=208 #pos=337 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 6,45e-09, 529,000 (wgt'ed) examples reached here.  /* #neg=529 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1273541036233511;  // std dev = 10,773, 514,000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109232;  // std dev = 0,000, 547,000 (wgt'ed) examples reached here.  /* #neg=547 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11820031647302295;  // std dev = 10,416, 497,000 (wgt'ed) examples reached here.  /* #neg=160 #pos=337 */
%   else if ( movie(D, B) )
%   | then return -0.073246225763337;  // std dev = 5,82e-09, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.0681636098089292;  // std dev = 10,753, 513,000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420353;  // std dev = 0,000, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.03310273663545405;  // std dev = 11,041, 528,000 (wgt'ed) examples reached here.  /* #neg=191 #pos=337 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202533;  // std dev = 1,06e-08, 532,000 (wgt'ed) examples reached here.  /* #neg=532 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.32474
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.806 seconds
Total inference time: 1.157 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.870352
   AUC PR    = 0.095252
   CLL	      = -0.297595
   Precision = 0.095252 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173935


Total scoring time: 3.088 seconds
Parameter learned model CLL: -0.297595


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [1.26e-07, 485, 0], 'false,true,false': [0.0, 0, 0], 'true': [10.394, 159, 337]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 528, 0], 'true': [10.871, 182, 337]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 495, 0], 'true': [10.732, 175, 337]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.478, 183, 337], 'false,true,true': [3.26e-07, 479, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.476, 179, 337], 'false,true': [0.0, 477, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [6.45e-09, 529, 0], 'false,true,false': [0.0, 0, 0], 'true': [11.341, 208, 337]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 547, 0], 'false,true,false': [0.0, 0, 0], 'true': [10.773, 177, 337]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [5.82e-09, 483, 0], 'true': [10.416, 160, 337]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [10.753, 176, 337], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 483, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [1.06e-08, 532, 0], 'true': [11.041, 191, 337]}]]
[{'': [0.21780290712799438, 3.296332279299434e-17], 'false,true': [3.296332279299434e-17, nan], 'false': [3.296332279299434e-17, nan]}, {'': [0.22770185735871604, -1.74944234183358e-16], 'false': [-1.74944234183358e-16, nan]}, {'': [0.22497177124023243, -8.971499188890155e-18], 'false': [-8.971499188890155e-18, nan]}, {'': [0.22807322485206524, 2.225081635991963e-16], 'false,true': [2.225081635991963e-16, nan], 'false': [2.225081635991963e-16, nan], 'true': [0.22807322485206524, nan]}, {'': [0.22656015263505755, -1.3034064859330979e-17], 'false': [-1.3034064859330979e-17, nan], 'true': [0.22656015263505755, nan]}, {'': [0.23599360323205296, 4.197440546786981e-17], 'false,true': [4.197440546786981e-17, nan], 'false': [4.197440546786981e-17, nan]}, {'': [0.2257755605686672, -6.81965148581449e-17], 'false,true': [-6.81965148581449e-17, nan], 'false': [-6.81965148581449e-17, nan]}, {'': [0.21829164119526154, 3.493869559896973e-17], 'false': [3.493869559896973e-17, nan]}, {'': [0.12074227832554989, nan], 'true,false': [nan, -1.2688263138573217e-16], 'true,false,false': [nan, -1.2688263138573217e-16], 'true': [0.22537608912903814, -1.2688263138573217e-16]}, {'': [0.23088484274563936, 1.1185705661636916e-16], 'false': [1.1185705661636916e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048832;  // std dev = 0,000, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else return -0.14185106490048724;  // std dev = 2,73e-07, 457,000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 192,000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.12544463852839233;  // std dev = 0,000, 482,000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360647;  // std dev = 0,000, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else return -0.11231637819360589;  // std dev = 0,000, 480,000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1015963294878365;  // std dev = 0,000, 187,000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.10159632948783526;  // std dev = 3,85e-07, 535,000 (wgt'ed) examples reached here.  /* #neg=535 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0926912761892607;  // std dev = 7,45e-08, 181,000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.0926912761892616;  // std dev = 0,000, 531,000 (wgt'ed) examples reached here.  /* #neg=531 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 4,94e-08, 153,000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.08518475138839678;  // std dev = 1,50e-07, 506,000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109148;  // std dev = 8,16e-08, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else return 0.2047104654220922;  // std dev = 0,701, 343,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=337 */
%   else return -0.07877675473109205;  // std dev = 1,32e-07, 497,000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17783324949222543;  // std dev = 2,89e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07407278182162892;  // std dev = 0,056, 184,000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.07324622576333703;  // std dev = 1,19e-07, 476,000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1533025287518462;  // std dev = 3,50e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.0684269778442027;  // std dev = 1,39e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return -0.06864343304380124;  // std dev = 0,054, 619,000 (wgt'ed) examples reached here.  /* #neg=619 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13444302459175173;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06525585917662652;  // std dev = 0,059, 171,000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.06418036082405282;  // std dev = 9,54e-05, 521,000 (wgt'ed) examples reached here.  /* #neg=521 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063852
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.96 seconds
Total inference time: 1.267 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064211
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.571 seconds
Refined model CLL: -0.064211


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063852
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 12.424999999999999 seconds
Total inference time: 1.267 seconds
AUC ROC: 1.0
Total revision time: 12.424999999999999
Best scored revision CLL: -0.064211


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:48:40
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'parameter_1.0': {'AUC PR': 0.075503, 'AUC ROC': 0.85431, 'Precision': [0.075503, 0.5], 'Inference time': 1.157, 'CLL': -0.32474, 'Recall': 1.0, 'F1': 0.140406, 'Learning time': 2.806}, 'Inference time': 1.267, 'CLL': -0.063852, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 12.424999999999999}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048768;  // std dev = 4,71e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.14185106490048854;  // std dev = 0,000, 617,000 (wgt'ed) examples reached here.  /* #neg=617 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.12544463852839235;  // std dev = 0,000, 658,000 (wgt'ed) examples reached here.  /* #neg=658 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360632;  // std dev = 2,98e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.11231637819360626;  // std dev = 0,000, 654,000 (wgt'ed) examples reached here.  /* #neg=654 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.10159632948783538;  // std dev = 3,83e-07, 617,000 (wgt'ed) examples reached here.  /* #neg=617 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926103;  // std dev = 0,000, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.09269127618926182;  // std dev = 0,000, 618,000 (wgt'ed) examples reached here.  /* #neg=618 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0851847513883968;  // std dev = 1,29e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.08518475138839678;  // std dev = 1,55e-07, 639,000 (wgt'ed) examples reached here.  /* #neg=639 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.07877675473109236;  // std dev = 0,000, 588,000 (wgt'ed) examples reached here.  /* #neg=588 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 1,29e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.07324622576333675;  // std dev = 1,74e-07, 646,000 (wgt'ed) examples reached here.  /* #neg=646 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420267;  // std dev = 3,07e-08, 72,000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.06842697784420367;  // std dev = 0,000, 644,000 (wgt'ed) examples reached here.  /* #neg=644 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 44,000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.06419184008202544;  // std dev = 2,46e-07, 601,000 (wgt'ed) examples reached here.  /* #neg=601 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063847
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.515 seconds
Total inference time: 1.295 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:48:46
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.295, 'CLL': -0.063847, 'Recall': 1.0, 'Learning time': 4.515, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048768;  // std dev = 4,94e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.1418510649004886;  // std dev = 0,000, 622,000 (wgt'ed) examples reached here.  /* #neg=622 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160469
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.459 seconds
Total inference time: 0.805 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:48:49
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.805, 'CLL': -0.160469, 'Recall': 0.0, 'Learning time': 1.459, 'F1': nan}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5215152717331766;  // std dev = 4,749, 101,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=67 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048763;  // std dev = 8,94e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.45219173326051243;  // std dev = 4,702, 100,000 (wgt'ed) examples reached here.  /* #neg=33 #pos=67 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839133;  // std dev = 0,000, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26336714322527893;  // std dev = 5,381, 118,000 (wgt'ed) examples reached here.  /* #neg=51 #pos=67 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360618;  // std dev = 8,33e-09, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2813600245035748;  // std dev = 0,479, 104,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783633;  // std dev = 0,000, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.25360353486739406;  // std dev = 0,465, 98,000 (wgt'ed) examples reached here.  /* #neg=31 #pos=67 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926086;  // std dev = 6,59e-09, 114,000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17035645428364085;  // std dev = 4,749, 101,000 (wgt'ed) examples reached here.  /* #neg=34 #pos=67 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839682;  // std dev = 5,59e-09, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19272235734186954;  // std dev = 4,267, 92,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=67 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109158;  // std dev = 6,14e-08, 105,000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.0373665888653924;  // std dev = 5,043, 108,000 (wgt'ed) examples reached here.  /* #neg=41 #pos=67 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333707;  // std dev = 4,27e-09, 87,000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.006155437366741875;  // std dev = 5,188, 112,000 (wgt'ed) examples reached here.  /* #neg=45 #pos=67 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 4,77e-08, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.04455054336573689;  // std dev = 4,924, 105,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=67 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202626;  // std dev = 0,000, 88,000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.30178
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 1.655 seconds
Total inference time: 1.1 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.871558
   AUC PR    = 0.096821
   CLL	      = -0.29033
   Precision = 0.096821 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.176548


Total scoring time: 1.44 seconds
Parameter learned model CLL: -0.29033


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [8.94e-08, 100, 0], 'false,true,false': [0.0, 0, 0], 'true': [4.749, 34, 67]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 106, 0], 'true': [4.702, 33, 67]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 115, 0], 'true': [5.381, 51, 67]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.479, 37, 67], 'false,true,true': [0.0, 109, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.465, 31, 67], 'false,true': [6.59e-09, 114, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.59e-09, 104, 0], 'false,true,false': [0.0, 0, 0], 'true': [4.749, 34, 67]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [6.14e-08, 105, 0], 'false,true,false': [0.0, 0, 0], 'true': [4.267, 25, 67]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [4.27e-09, 87, 0], 'true': [5.043, 41, 67]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [5.188, 45, 67], 'false': [0.0, 0, 0], 'true,false,false,false': [4.77e-08, 96, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 88, 0], 'true': [4.924, 38, 67]}]]
[{'': [0.2233114400548958, 7.993605777301127e-17], 'false,true': [7.993605777301127e-17, nan], 'false': [7.993605777301127e-17, nan]}, {'': [0.22110000000000155, -8.3790416952842e-18], 'false': [-8.3790416952842e-18, nan]}, {'': [0.2454036196495259, 6.950961545479241e-17], 'false': [6.950961545479241e-17, nan]}, {'': [0.22919748520710065, -4.0742129344042444e-18], 'false,true': [-4.0742129344042444e-18, nan], 'false': [-4.0742129344042444e-18, nan], 'true': [0.22919748520710065, nan]}, {'': [0.2162640566430657, 4.1876833384983976e-17], 'false': [4.1876833384983976e-17, nan], 'true': [0.2162640566430657, nan]}, {'': [0.2233114400548969, 3.0958142032816866e-17], 'false,true': [3.0958142032816866e-17, nan], 'false': [3.0958142032816866e-17, nan]}, {'': [0.1978969754253302, 3.595007889262412e-17], 'false,true': [3.595007889262412e-17, nan], 'false': [3.595007889262412e-17, nan]}, {'': [0.23551097393689965, 1.850371707708594e-17], 'false': [1.850371707708594e-17, nan]}, {'': [0.13080376545025968, nan], 'true,false': [nan, 2.3707887505016363e-17], 'true,false,false': [nan, 2.3707887505016363e-17], 'true': [0.24035395408163227, 2.3707887505016363e-17]}, {'': [0.23092970521541956, -1.2616170734376778e-17], 'false': [-1.2616170734376778e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 27,000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.14185106490048763;  // std dev = 8,43e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 30,000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.12544463852839138;  // std dev = 0,000, 96,000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12054508679068254;  // std dev = 0,157, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.1123163781936062;  // std dev = 8,02e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1090155711107587;  // std dev = 0,144, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.10159632948783633;  // std dev = 0,000, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09138365067406228;  // std dev = 2,24e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.09269127618926103;  // std dev = 3,16e-08, 91,000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09767905041410006;  // std dev = 0,306, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.08518475138839682;  // std dev = 5,87e-08, 108,000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0768512204200254;  // std dev = 2,04e-08, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.0787767547310916;  // std dev = 5,77e-08, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( actor(B) )
%   | | then return -0.07157323693255922;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.26519343234772924;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333707;  // std dev = 0,000, 104,000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then if ( movie(D, A), movie(D, B) )
%   | | | then return 0.15274385809367083;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.06842697784420275;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.12297086094818788;  // std dev = 0,075, 52,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=45 */
%   | else return -0.06961191876237985;  // std dev = 0,148, 98,000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06274035774938501;  // std dev = 0,000, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return 0.13635303069616228;  // std dev = 0,013, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   else return -0.06488150001381769;  // std dev = 0,030, 100,000 (wgt'ed) examples reached here.  /* #neg=100 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063852
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.881 seconds
Total inference time: 1.23 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066326
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.298 seconds
Refined model CLL: -0.066326


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063852
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 6.274 seconds
Total inference time: 1.23 seconds
AUC ROC: 1.0
Total revision time: 6.274
Best scored revision CLL: -0.066326


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:48:58
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.23, 'CLL': -0.063852, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 6.274, 'parameter_0.2': {'AUC PR': 0.074013, 'AUC ROC': 0.864075, 'Precision': [0.074013, 0.5], 'Inference time': 1.1, 'CLL': -0.30178, 'Recall': 1.0, 'F1': 0.137825, 'Learning time': 1.655}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.14185106490048768;  // std dev = 6,66e-08, 121,000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109541;  // std dev = 1,46e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.12544463852839133;  // std dev = 0,000, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462837;  // std dev = 1,88e-07, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.11231637819360621;  // std dev = 9,06e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831036;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783634;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601499;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.09269127618926092;  // std dev = 6,14e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948967;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.08518475138839682;  // std dev = 6,23e-08, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325357;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.0787767547310916;  // std dev = 6,50e-08, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527725;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.07324622576333718;  // std dev = 0,000, 128,000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367066;  // std dev = 5,37e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.06842697784420267;  // std dev = 4,47e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801095;  // std dev = 4,71e-08, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.06419184008202626;  // std dev = 0,000, 113,000 (wgt'ed) examples reached here.  /* #neg=113 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.492 seconds
Total inference time: 1.234 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:49:02
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.234, 'CLL': -0.063719, 'Recall': 1.0, 'Learning time': 2.492, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995127;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.849 seconds
Total inference time: 0.883 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:49:04
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.883, 'CLL': -0.158221, 'Recall': 0.0, 'Learning time': 0.849, 'F1': nan}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.534916611867186;  // std dev = 6,581, 198,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=134 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048846;  // std dev = 0,000, 214,000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.439998465577444;  // std dev = 6,749, 203,000 (wgt'ed) examples reached here.  /* #neg=69 #pos=134 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839177;  // std dev = 0,000, 227,000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3099935597573083;  // std dev = 7,186, 218,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=134 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360665;  // std dev = 0,000, 209,000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2926659149205389;  // std dev = 0,471, 201,000 (wgt'ed) examples reached here.  /* #neg=67 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.1015963294878365;  // std dev = 0,000, 186,000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.18745371069676972;  // std dev = 0,482, 212,000 (wgt'ed) examples reached here.  /* #neg=78 #pos=134 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926054;  // std dev = 3,95e-09, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19592153051660074;  // std dev = 6,474, 195,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=134 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 5,43e-09, 202,000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1541497074159452;  // std dev = 6,400, 193,000 (wgt'ed) examples reached here.  /* #neg=59 #pos=134 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109146;  // std dev = 8,02e-08, 188,000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.04224086948384476;  // std dev = 7,132, 216,000 (wgt'ed) examples reached here.  /* #neg=82 #pos=134 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333666;  // std dev = 8,28e-09, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.06526207601674129;  // std dev = 6,812, 205,000 (wgt'ed) examples reached here.  /* #neg=71 #pos=134 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6,50e-08, 198,000 (wgt'ed) examples reached here.  /* #neg=198 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09381084228770493;  // std dev = 6,362, 192,000 (wgt'ed) examples reached here.  /* #neg=58 #pos=134 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202626;  // std dev = 0,000, 189,000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.31628
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 1.638 seconds
Total inference time: 1.146 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.868475
   AUC PR    = 0.094767
   CLL	      = -0.309242
   Precision = 0.094767 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173127


Total scoring time: 1.906 seconds
Parameter learned model CLL: -0.309242


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 214, 0], 'false,true,false': [0.0, 0, 0], 'true': [6.581, 64, 134]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 227, 0], 'true': [6.749, 69, 134]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 209, 0], 'true': [7.186, 84, 134]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.471, 67, 134], 'false,true,true': [0.0, 186, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.482, 78, 134], 'false,true': [3.95e-09, 189, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.43e-09, 202, 0], 'false,true,false': [0.0, 0, 0], 'true': [6.474, 61, 134]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [8.02e-08, 188, 0], 'false,true,false': [0.0, 0, 0], 'true': [6.4, 59, 134]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [8.28e-09, 196, 0], 'true': [7.132, 82, 134]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [6.812, 71, 134], 'false': [0.0, 0, 0], 'true,false,false,false': [6.5e-08, 198, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 189, 0], 'true': [6.362, 58, 134]}]]
[{'': [0.21875318845016267, -2.3657088749022025e-16], 'false,true': [-2.3657088749022025e-16, nan], 'false': [-2.3657088749022025e-16, nan]}, {'': [0.2243684631997858, -6.651556447093449e-17], 'false': [-6.651556447093449e-17, nan]}, {'': [0.23684875010521228, -5.312071888158644e-17], 'false': [-5.312071888158644e-17, nan]}, {'': [0.22222222222221893, -9.311547948469055e-17], 'false,true': [-9.311547948469055e-17, nan], 'false': [-9.311547948469055e-17, nan], 'true': [0.22222222222221893, nan]}, {'': [0.2325560697757217, 1.527290933346776e-17], 'false': [1.527290933346776e-17, nan], 'true': [0.2325560697757217, nan]}, {'': [0.21496383957922324, 2.967922937116755e-17], 'false,true': [2.967922937116755e-17, nan], 'false': [2.967922937116755e-17, nan]}, {'': [0.21224730865258182, 3.425156139801015e-17], 'false,true': [3.425156139801015e-17, nan], 'false': [3.425156139801015e-17, nan]}, {'': [0.23551097393689932, 6.910571887972913e-17], 'false': [6.910571887972913e-17, nan]}, {'': [0.11962752779986735, nan], 'true,false': [nan, 2.1307310573614114e-17], 'true,false,false': [nan, 2.1307310573614114e-17], 'true': [0.2263890541344443, 2.1307310573614114e-17]}, {'': [0.2108289930555558, -4.11193712824132e-18], 'false': [-4.11193712824132e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048768;  // std dev = 5,16e-08, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.1418510649004884;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.1254446385283917;  // std dev = 0,000, 205,000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.1123163781936063;  // std dev = 4,08e-08, 68,000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.11231637819360664;  // std dev = 0,000, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783619;  // std dev = 5,48e-08, 85,000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.1015963294878365;  // std dev = 0,000, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 80,000 (wgt'ed) examples reached here.  /* #neg=80 */
%   else return -0.09269127618926057;  // std dev = 9,19e-08, 197,000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839679;  // std dev = 3,16e-08, 93,000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return -0.08518475138839678;  // std dev = 7,60e-08, 196,000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253529;  // std dev = 2,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07877675473109179;  // std dev = 7,45e-09, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.07877675473109148;  // std dev = 8,02e-08, 173,000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527816;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.07324622576333664;  // std dev = 1,23e-07, 206,000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.15274385809367144;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.0684269778442027;  // std dev = 5,16e-08, 257,000 (wgt'ed) examples reached here.  /* #neg=257 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801104;  // std dev = 5,58e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 69,000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.06419184008202626;  // std dev = 0,000, 222,000 (wgt'ed) examples reached here.  /* #neg=222 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.9 seconds
Total inference time: 1.228 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064077
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.637 seconds
Refined model CLL: -0.064077


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.081 seconds
Total inference time: 1.228 seconds
AUC ROC: 1.0
Total revision time: 8.081
Best scored revision CLL: -0.064077


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:49:15
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'parameter_0.4': {'AUC PR': 0.074013, 'AUC ROC': 0.864075, 'Precision': [0.074013, 0.5], 'Inference time': 1.146, 'CLL': -0.31628, 'Recall': 1.0, 'F1': 0.137825, 'Learning time': 1.638}, 'Inference time': 1.228, 'CLL': -0.063719, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.081}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.14185106490048843;  // std dev = 0,000, 236,000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109557;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.1254446385283917;  // std dev = 0,000, 216,000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462834;  // std dev = 4,92e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.11231637819360638;  // std dev = 1,05e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.11231637819360689;  // std dev = 0,000, 273,000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583091;  // std dev = 4,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.1015963294878365;  // std dev = 0,000, 254,000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015005;  // std dev = 2,11e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.09269127618926054;  // std dev = 6,99e-08, 251,000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694896;  // std dev = 1,19e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.08518475138839678;  // std dev = 8,94e-08, 276,000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109143;  // std dev = 6,66e-08, 238,000 (wgt'ed) examples reached here.  /* #neg=238 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20551456165659962;  // std dev = 0,405, 136,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=134 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 28,000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17771571417389972;  // std dev = 1,33e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.07324622576333704;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.07350467343195774;  // std dev = 0,038, 253,000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1532134337628147;  // std dev = 0,000, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.06883220949775605;  // std dev = 0,045, 243,000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13437351380211965;  // std dev = 4,21e-08, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.0641918400820262;  // std dev = 6,45e-09, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.0643916535164392;  // std dev = 0,033, 242,000 (wgt'ed) examples reached here.  /* #neg=242 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063705
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.594 seconds
Total inference time: 1.179 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:49:19
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.179, 'CLL': -0.063705, 'Recall': 1.0, 'Learning time': 2.594, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995103;  // std dev = 8,00e-07, 134,000 (wgt'ed) examples reached here.  /* #pos=134 */
%   | else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.1418510649004884;  // std dev = 0,000, 240,000 (wgt'ed) examples reached here.  /* #neg=240 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.017 seconds
Total inference time: 1.06 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:49:21
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 1.06, 'CLL': -0.158221, 'Recall': 0.0, 'Learning time': 1.017, 'F1': nan}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5452237650314813;  // std dev = 7,951, 294,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=202 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048807;  // std dev = 0,000, 268,000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4015823452755173;  // std dev = 8,721, 324,000 (wgt'ed) examples reached here.  /* #neg=122 #pos=202 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839202;  // std dev = 0,000, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.36136742319693504;  // std dev = 8,286, 306,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=202 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360676;  // std dev = 0,000, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2916329522019044;  // std dev = 0,470, 301,000 (wgt'ed) examples reached here.  /* #neg=99 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783662;  // std dev = 0,000, 295,000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.19319399675611312;  // std dev = 0,479, 314,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=202 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926043;  // std dev = 8,54e-09, 288,000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12907906478677691;  // std dev = 8,676, 322,000 (wgt'ed) examples reached here.  /* #neg=120 #pos=202 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 5,89e-09, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17335071360965248;  // std dev = 7,735, 287,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=202 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109141;  // std dev = 4,94e-08, 285,000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07619265699716808;  // std dev = 8,414, 311,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=202 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333688;  // std dev = 6,65e-09, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.04137776580732542;  // std dev = 8,607, 319,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=202 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420287;  // std dev = 0,000, 274,000 (wgt'ed) examples reached here.  /* #neg=274 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10696476204800626;  // std dev = 7,670, 285,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=202 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202605;  // std dev = 5,59e-09, 282,000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.316844
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.187 seconds
Total inference time: 1.452 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.868338
   AUC PR    = 0.095104
   CLL	      = -0.310043
   Precision = 0.095104 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173689


Total scoring time: 2.258 seconds
Parameter learned model CLL: -0.310043


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 268, 0], 'false,true,false': [0.0, 0, 0], 'true': [7.951, 92, 202]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 308, 0], 'true': [8.721, 122, 202]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 308, 0], 'true': [8.286, 104, 202]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.47, 99, 202], 'false,true,true': [0.0, 295, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.479, 112, 202], 'false,true': [8.54e-09, 288, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [5.89e-09, 272, 0], 'false,true,false': [0.0, 0, 0], 'true': [8.676, 120, 202]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [4.94e-08, 285, 0], 'false,true,false': [0.0, 0, 0], 'true': [7.735, 85, 202]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [6.65e-09, 272, 0], 'true': [8.414, 109, 202]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [8.607, 117, 202], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 274, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 282, 0], 'true': [7.67, 83, 202]}]]
[{'': [0.21500300800592823, -6.296787303844171e-17], 'false,true': [-6.296787303844171e-17, nan], 'false': [-6.296787303844171e-17, nan]}, {'': [0.2347584209724185, -8.651088503572649e-17], 'false': [-8.651088503572649e-17, nan]}, {'': [0.22435815284719487, -6.632501186072363e-17], 'false': [-6.632501186072363e-17, nan]}, {'': [0.2207260405514243, -5.569932462526209e-17], 'false,true': [-5.569932462526209e-17, nan], 'false': [-5.569932462526209e-17, nan], 'true': [0.2207260405514243, nan]}, {'': [0.2294616414459027, 7.247289188525328e-17], 'false': [7.247289188525328e-17, nan], 'true': [0.2294616414459027, nan]}, {'': [0.23378727672543648, 3.428629928989454e-17], 'false,true': [3.428629928989454e-17, nan], 'false': [3.428629928989454e-17, nan]}, {'': [0.20845220896211034, 8.570142646229279e-18], 'false,true': [8.570142646229279e-18, nan], 'false': [8.570142646229279e-18, nan]}, {'': [0.22764446190589477, 4.408238480129298e-17], 'false': [4.408238480129298e-17, nan]}, {'': [0.1279341372854469, nan], 'true,false': [nan, -3.241527079197537e-17], 'true,false,false': [nan, -3.241527079197537e-17], 'true': [0.23225007615884224, -3.241527079197537e-17]}, {'': [0.20641428131732897, 3.1495688641848415e-17], 'false': [3.1495688641848415e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.14185106490048766;  // std dev = 8,16e-08, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.14185106490048804;  // std dev = 0,000, 271,000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.12544463852839136;  // std dev = 0,000, 122,000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.12544463852839202;  // std dev = 0,000, 308,000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360624;  // std dev = 7,30e-08, 106,000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.11231637819360694;  // std dev = 0,000, 275,000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 115,000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.10159632948783662;  // std dev = 0,000, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926104;  // std dev = 2,36e-08, 103,000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.09269127618926042;  // std dev = 1,55e-07, 299,000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.08518475138839683;  // std dev = 4,94e-08, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.08518475138839678;  // std dev = 9,54e-08, 264,000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109162;  // std dev = 5,48e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.07877675473109143;  // std dev = 5,37e-08, 272,000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333707;  // std dev = 0,000, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.07324622576333695;  // std dev = 1,02e-07, 290,000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | | else return -0.06842697784420262;  // std dev = 1,97e-08, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.06842697784420318;  // std dev = 0,000, 369,000 (wgt'ed) examples reached here.  /* #neg=369 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202626;  // std dev = 0,000, 101,000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else return -0.06419184008202596;  // std dev = 1,14e-07, 301,000 (wgt'ed) examples reached here.  /* #neg=301 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.962 seconds
Total inference time: 1.325 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064085
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.781 seconds
Refined model CLL: -0.064085


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.188 seconds
Total inference time: 1.325 seconds
AUC ROC: 1.0
Total revision time: 9.188
Best scored revision CLL: -0.064085


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:49:34
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.325, 'parameter_0.6': {'AUC PR': 0.074013, 'AUC ROC': 0.864075, 'Precision': [0.074013, 0.5], 'Inference time': 1.452, 'CLL': -0.316844, 'Recall': 1.0, 'F1': 0.137825, 'Learning time': 2.187}, 'CLL': -0.063719, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.188}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.14185106490048768;  // std dev = 4,08e-08, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.1418510649004877;  // std dev = 1,71e-07, 374,000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210957;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1254446385283915;  // std dev = 0,000, 40,000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.12544463852839208;  // std dev = 0,000, 366,000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6,36e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 26,000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.11231637819360638;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583101;  // std dev = 2,67e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 29,000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.10159632948783648;  // std dev = 0,000, 379,000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014906;  // std dev = 4,04e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.09269127618926101;  // std dev = 0,000, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.09269127618926065;  // std dev = 1,84e-07, 381,000 (wgt'ed) examples reached here.  /* #neg=381 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694885;  // std dev = 4,42e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.0851847513883968;  // std dev = 1,67e-08, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.08518475138839678;  // std dev = 1,12e-07, 384,000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3,01e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07877675473109176;  // std dev = 0,000, 36,000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.07877675473109147;  // std dev = 3,65e-08, 374,000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527794;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333713;  // std dev = 6,66e-08, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367166;  // std dev = 0,000, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06842697784420275;  // std dev = 0,000, 31,000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.06842697784420328;  // std dev = 0,000, 400,000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.134007030008011;  // std dev = 1,38e-07, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 37,000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.06419184008202589;  // std dev = 1,41e-07, 380,000 (wgt'ed) examples reached here.  /* #neg=380 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.297 seconds
Total inference time: 1.092 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:49:39
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.092, 'CLL': -0.063719, 'Recall': 1.0, 'Learning time': 3.297, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995092;  // std dev = 1,08e-06, 202,000 (wgt'ed) examples reached here.  /* #pos=202 */
%   | else return -0.1418510649004877;  // std dev = 2,98e-08, 32,000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.1418510649004877;  // std dev = 1,60e-07, 374,000 (wgt'ed) examples reached here.  /* #neg=374 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.227 seconds
Total inference time: 0.813 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:49:42
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.813, 'CLL': -0.158221, 'Recall': 0.0, 'Learning time': 1.227, 'F1': nan}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.523990519257924;  // std dev = 9,481, 404,000 (wgt'ed) examples reached here.  /* #neg=135 #pos=269 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.14185106490048727;  // std dev = 3,01e-07, 415,000 (wgt'ed) examples reached here.  /* #neg=415 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.41027440907176344;  // std dev = 9,997, 428,000 (wgt'ed) examples reached here.  /* #neg=159 #pos=269 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839222;  // std dev = 0,000, 376,000 (wgt'ed) examples reached here.  /* #neg=376 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3599550418347235;  // std dev = 9,618, 410,000 (wgt'ed) examples reached here.  /* #neg=141 #pos=269 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360621;  // std dev = 0,000, 402,000 (wgt'ed) examples reached here.  /* #neg=402 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.28637827147813305;  // std dev = 0,473, 406,000 (wgt'ed) examples reached here.  /* #neg=137 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783594;  // std dev = 2,15e-07, 397,000 (wgt'ed) examples reached here.  /* #neg=397 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.16738772927762874;  // std dev = 0,487, 439,000 (wgt'ed) examples reached here.  /* #neg=170 #pos=269 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926075;  // std dev = 8,84e-09, 382,000 (wgt'ed) examples reached here.  /* #neg=382 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15044133465185083;  // std dev = 9,876, 422,000 (wgt'ed) examples reached here.  /* #neg=153 #pos=269 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 6,65e-09, 432,000 (wgt'ed) examples reached here.  /* #neg=432 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1741143188581344;  // std dev = 9,003, 385,000 (wgt'ed) examples reached here.  /* #neg=116 #pos=269 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109153;  // std dev = 2,16e-07, 420,000 (wgt'ed) examples reached here.  /* #neg=420 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11676160816290472;  // std dev = 9,213, 393,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=269 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333768;  // std dev = 0,000, 363,000 (wgt'ed) examples reached here.  /* #neg=363 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.08317797381102417;  // std dev = 9,288, 396,000 (wgt'ed) examples reached here.  /* #neg=127 #pos=269 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420336;  // std dev = 0,000, 402,000 (wgt'ed) examples reached here.  /* #neg=402 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.06677026046285892;  // std dev = 9,238, 394,000 (wgt'ed) examples reached here.  /* #neg=125 #pos=269 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202562;  // std dev = 9,59e-09, 389,000 (wgt'ed) examples reached here.  /* #neg=389 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.319922
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.406 seconds
Total inference time: 1.993 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.869451
   AUC PR    = 0.09573
   CLL	      = -0.310928
   Precision = 0.09573 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174732


Total scoring time: 3.274 seconds
Parameter learned model CLL: -0.310928


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [3.01e-07, 415, 0], 'false,true,false': [0.0, 0, 0], 'true': [9.481, 135, 269]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 376, 0], 'true': [9.997, 159, 269]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 402, 0], 'true': [9.618, 141, 269]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.473, 137, 269], 'false,true,true': [2.15e-07, 397, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.487, 170, 269], 'false,true': [8.84e-09, 382, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [6.65e-09, 432, 0], 'false,true,false': [0.0, 0, 0], 'true': [9.876, 153, 269]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [2.16e-07, 420, 0], 'false,true,false': [0.0, 0, 0], 'true': [9.003, 116, 269]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 363, 0], 'true': [9.213, 124, 269]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [9.288, 127, 269], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 402, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [9.59e-09, 389, 0], 'true': [9.238, 125, 269]}]]
[{'': [0.22249656896383055, 2.1829927423954886e-16], 'false,true': [2.1829927423954886e-16, nan], 'false': [2.1829927423954886e-16, nan]}, {'': [0.23348654904357835, -1.2283318570320881e-16], 'false': [-1.2283318570320881e-16, nan]}, {'': [0.2256335514574617, -1.9884591485823698e-17], 'false': [-1.9884591485823698e-17, nan]}, {'': [0.2235737338930822, 1.1633571240404662e-16], 'false,true': [1.1633571240404662e-16, nan], 'false': [1.1633571240404662e-16, nan], 'true': [0.2235737338930822, nan]}, {'': [0.23728602487533493, 7.788999230354501e-17], 'false': [7.788999230354501e-17, nan], 'true': [0.23728602487533493, nan]}, {'': [0.23111003795961785, 4.4203324128594195e-17], 'false,true': [4.4203324128594195e-17, nan], 'false': [4.4203324128594195e-17, nan]}, {'': [0.2105177938944152, 1.1102230246251565e-16], 'false,true': [1.1102230246251565e-16, nan], 'false': [1.1102230246251565e-16, nan]}, {'': [0.2159677304482385, -5.933423327197806e-17], 'false': [-5.933423327197806e-17, nan]}, {'': [0.11385371308779137, nan], 'true,false': [nan, -1.1488875080698137e-16], 'true,false,false': [nan, -1.1488875080698137e-16], 'true': [0.2178540455055623, -1.1488875080698137e-16]}, {'': [0.21660568424849885, 9.247101798934466e-17], 'false': [9.247101798934466e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048802;  // std dev = 0,000, 147,000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.14185106490048738;  // std dev = 2,86e-07, 387,000 (wgt'ed) examples reached here.  /* #neg=387 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1254446385283911;  // std dev = 7,60e-08, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
%   else return -0.12544463852839224;  // std dev = 0,000, 384,000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1123163781936062;  // std dev = 9,77e-08, 146,000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.11231637819360624;  // std dev = 0,000, 395,000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783644;  // std dev = 0,000, 148,000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.10159632948783595;  // std dev = 2,11e-07, 395,000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926076;  // std dev = 8,30e-08, 160,000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.092691276189261;  // std dev = 1,23e-07, 417,000 (wgt'ed) examples reached here.  /* #neg=417 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.08518475138839682;  // std dev = 6,32e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.08518475138839678;  // std dev = 1,26e-07, 401,000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109161;  // std dev = 6,66e-08, 144,000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.07877675473109143;  // std dev = 8,43e-08, 361,000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333738;  // std dev = 0,000, 176,000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.07324622576333714;  // std dev = 6,32e-08, 364,000 (wgt'ed) examples reached here.  /* #neg=364 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | | else return -0.06842697784420271;  // std dev = 7,45e-09, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.0684269778442035;  // std dev = 0,000, 495,000 (wgt'ed) examples reached here.  /* #neg=495 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202623;  // std dev = 0,000, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.06419184008202555;  // std dev = 2,06e-07, 416,000 (wgt'ed) examples reached here.  /* #neg=416 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.29 seconds
Total inference time: 1.382 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064083
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.078 seconds
Refined model CLL: -0.064083


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.047999999999998 seconds
Total inference time: 1.382 seconds
AUC ROC: 1.0
Total revision time: 11.047999999999998
Best scored revision CLL: -0.064083


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:49:57
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.382, 'parameter_0.8': {'AUC PR': 0.074013, 'AUC ROC': 0.864075, 'Precision': [0.074013, 0.5], 'Inference time': 1.993, 'CLL': -0.319922, 'Recall': 1.0, 'F1': 0.137825, 'Learning time': 2.406}, 'CLL': -0.063719, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.047999999999998}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.14185106490048768;  // std dev = 4,34e-08, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.1418510649004874;  // std dev = 2,23e-07, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109576;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.12544463852839144;  // std dev = 0,000, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.1254446385283923;  // std dev = 0,000, 490,000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 3,58e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.11231637819360628;  // std dev = 4,47e-08, 60,000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.11231637819360583;  // std dev = 0,000, 526,000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831114;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.10159632948783626;  // std dev = 2,98e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.10159632948783591;  // std dev = 2,38e-07, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601504;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.09269127618926105;  // std dev = 0,000, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.09269127618926144;  // std dev = 0,000, 511,000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694879;  // std dev = 3,37e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0851847513883968;  // std dev = 1,97e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.08518475138839678;  // std dev = 1,32e-07, 495,000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325348;  // std dev = 2,86e-07, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07877675473109175;  // std dev = 1,97e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07877675473109218;  // std dev = 0,000, 541,000 (wgt'ed) examples reached here.  /* #neg=541 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527714;  // std dev = 9,42e-08, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.07324622576333704;  // std dev = 1,29e-08, 46,000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.07324622576333725;  // std dev = 0,000, 452,000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367158;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.0684269778442027;  // std dev = 1,05e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.06842697784420346;  // std dev = 0,000, 484,000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801129;  // std dev = 0,000, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 41,000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.06419184008202564;  // std dev = 2,04e-07, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.431 seconds
Total inference time: 1.627 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:50:03
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.627, 'CLL': -0.063719, 'Recall': 1.0, 'Learning time': 4.431, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995086;  // std dev = 1,07e-06, 269,000 (wgt'ed) examples reached here.  /* #pos=269 */
%   | else return -0.1418510649004877;  // std dev = 3,16e-08, 33,000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.14185106490048738;  // std dev = 2,38e-07, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.665 seconds
Total inference time: 0.85 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:50:06
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.85, 'CLL': -0.158221, 'Recall': 0.0, 'Learning time': 1.665, 'F1': nan}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
0;false,false,true;haswordtitle(J, H).;false;false
0;false,true;haswordtitle(F, D).;true;false
0;false,true,true;author(G, E), title(G, F).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false,true;title(L, K), venue(L, B).;false;false
1;false,true;title(F, E), venue(F, A).;true;true
1;false,true,true;samebib(F, G), venue(G, B).;false;false
1;false,true,false;haswordtitle(E, H), haswordauthor(I, H).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false,true;title(K, J), venue(K, B).;false;false
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;false;false
2;false,true,false;haswordauthor(H, D).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordauthor(H, G).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
3;true,true;haswordtitle(F, C).;true;false
3;false,true,true;author(J, H), venue(J, B).;false;false
3;false,true;haswordtitle(I, G).;true;true
3;false,true,false;author(K, H), venue(K, A).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false,false;haswordvenue(B, K), haswordauthor(L, K).;false;true
4;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;false;false
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
4;true,true,false;haswordtitle(G, D).;false;false
4;true,true;haswordauthor(F, C).;false;true
4;false,true;title(J, I), venue(J, A).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false,true;title(K, J), venue(K, A).;false;false
5;false,true;author(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true,false;haswordtitle(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
6;false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;false;false
6;false,false,true;author(L, K), venue(L, B).;false;false
6;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
6;false,true,true;author(H, G), title(H, E).;false;false
6;false,true,false;haswordtitle(E, I), haswordvenue(A, I).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
7;false,true;title(F, E), venue(F, A).;false;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;false
7;false,true,false;haswordauthor(G, D).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,false;title(G, D), venue(G, A).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true;venue(E, B), title(E, D).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;false
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,false,true;title(J, I), venue(J, B).;false;false
9;false,true;haswordauthor(F, D).;false;true
9;false,true,false;title(G, E), venue(G, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.48688027838309;  // std dev = 11,186, 536,000 (wgt'ed) examples reached here.  /* #neg=199 #pos=337 */
%   else if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return -0.141851064900488;  // std dev = 0,000, 526,000 (wgt'ed) examples reached here.  /* #neg=526 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4275034206391793;  // std dev = 11,023, 527,000 (wgt'ed) examples reached here.  /* #neg=190 #pos=337 */
%   else if ( movie(D, B) )
%   | then return -0.12544463852839227;  // std dev = 0,000, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.34025487213093136;  // std dev = 11,132, 533,000 (wgt'ed) examples reached here.  /* #neg=196 #pos=337 */
%   else if ( movie(D, B) )
%   | then return -0.11231637819360588;  // std dev = 0,000, 481,000 (wgt'ed) examples reached here.  /* #neg=481 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2990666441041545;  // std dev = 0,472, 506,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(F, G) )
%   | | then return -0.10159632948783533;  // std dev = 3,66e-07, 515,000 (wgt'ed) examples reached here.  /* #neg=515 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.23124443130734146;  // std dev = 0,470, 503,000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then return -0.09269127618926142;  // std dev = 0,000, 492,000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.16196564233746225;  // std dev = 10,732, 512,000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.08518475138839678;  // std dev = 6,45e-09, 526,000 (wgt'ed) examples reached here.  /* #neg=526 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11517462289242358;  // std dev = 10,832, 517,000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   else if ( movie(D, B) )
%   | then if ( genre(E, F) )
%   | | then return -0.07877675473109218;  // std dev = 0,000, 521,000 (wgt'ed) examples reached here.  /* #neg=521 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08668755534131395;  // std dev = 10,832, 517,000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   else if ( movie(D, B) )
%   | then return -0.07324622576333689;  // std dev = 7,09e-09, 503,000 (wgt'ed) examples reached here.  /* #neg=503 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( movie(C, B) )
%   | then return 0.06804784551587499;  // std dev = 10,792, 515,000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   | else if ( movie(C, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442036;  // std dev = 0,000, 532,000 (wgt'ed) examples reached here.  /* #neg=532 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.0712766739516348;  // std dev = 10,482, 500,000 (wgt'ed) examples reached here.  /* #neg=163 #pos=337 */
%   else if ( movie(D, B) )
%   | then return -0.06419184008202533;  // std dev = 1,06e-08, 533,000 (wgt'ed) examples reached here.  /* #neg=533 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.311814
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.739 seconds
Total inference time: 1.187 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.868927
   AUC PR    = 0.095576
   CLL	      = -0.304245
   Precision = 0.095576 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.174476


Total scoring time: 2.662 seconds
Parameter learned model CLL: -0.304245


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 526, 0], 'false,true,false': [0.0, 0, 0], 'true': [11.186, 199, 337]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 485, 0], 'true': [11.023, 190, 337]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [0.0, 481, 0], 'true': [11.132, 196, 337]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(F, G)', 'false': 'movie(E, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.472, 169, 337], 'false,true,true': [3.66e-07, 515, 0], 'false,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(E, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true': [0.47, 166, 337], 'false,true': [0.0, 492, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [6.45e-09, 526, 0], 'false,true,false': [0.0, 0, 0], 'true': [10.732, 175, 337]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(E, F)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 521, 0], 'false,true,false': [0.0, 0, 0], 'true': [10.832, 180, 337]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [7.09e-09, 503, 0], 'true': [10.832, 180, 337]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'movie(C, B)'}, {'true,false,true': [0.0, 0, 0], 'true,true': [10.792, 178, 337], 'false': [0.0, 0, 0], 'true,false,false,false': [0.0, 532, 0], 'true,false,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true': [1.06e-08, 533, 0], 'true': [10.482, 163, 337]}]]
[{'': [0.2334282412564071, -1.3170706603918206e-16], 'false,true': [-1.3170706603918206e-16, nan], 'false': [-1.3170706603918206e-16, nan]}, {'': [0.23054848431384128, -1.2452810832908972e-16], 'false': [-1.2452810832908972e-16, nan]}, {'': [0.23250460243092624, -1.107914868648805e-17], 'false': [-1.107914868648805e-17, nan]}, {'': [0.22244137543157494, 2.604173618926581e-16], 'false,true': [2.604173618926581e-16, nan], 'false': [2.604173618926581e-16, nan], 'true': [0.22244137543157494, nan]}, {'': [0.22110675904809884, -2.3468128975816318e-17], 'false': [-2.3468128975816318e-17, nan], 'true': [0.22110675904809884, nan]}, {'': [0.2249717712402331, 4.136952715333283e-17], 'false,true': [4.136952715333283e-17, nan], 'false': [4.136952715333283e-17, nan]}, {'': [0.22694536625150868, -5.2847468350679236e-17], 'false,true': [-5.2847468350679236e-17, nan], 'false': [-5.2847468350679236e-17, nan]}, {'': [0.2269453662515124, 5.0324224575454413e-17], 'false': [5.0324224575454413e-17, nan]}, {'': [0.11590408516209677, nan], 'true,false': [nan, -1.1770033569334366e-16], 'true,false,false': [nan, -1.1770033569334366e-16], 'true': [0.22617023282118923, -1.1770033569334366e-16]}, {'': [0.2197240000000019, 1.1164719347074744e-16], 'false': [1.1164719347074744e-16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048813;  // std dev = 0,000, 162,000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.1418510649004877;  // std dev = 0,000, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839152;  // std dev = 0,000, 183,000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.12544463852839227;  // std dev = 0,000, 470,000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360624;  // std dev = 9,31e-08, 157,000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.112316378193606;  // std dev = 0,000, 446,000 (wgt'ed) examples reached here.  /* #neg=446 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783646;  // std dev = 0,000, 161,000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.10159632948783537;  // std dev = 3,55e-07, 505,000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926074;  // std dev = 7,45e-08, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.09269127618926154;  // std dev = 0,000, 517,000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 7,30e-08, 199,000 (wgt'ed) examples reached here.  /* #neg=199 */
%   else return -0.08518475138839678;  // std dev = 1,41e-07, 485,000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 8,16e-08, 184,000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.07877675473109197;  // std dev = 0,000, 483,000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333684;  // std dev = 8,36e-08, 180,000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.07324622576333692;  // std dev = 1,53e-07, 499,000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( movie(D, A), movie(D, B) )
%   | | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | | else return -0.06842697784420262;  // std dev = 2,47e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return -0.0684269778442036;  // std dev = 0,000, 605,000 (wgt'ed) examples reached here.  /* #neg=605 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202622;  // std dev = 0,000, 168,000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.0641918400820254;  // std dev = 2,44e-07, 488,000 (wgt'ed) examples reached here.  /* #neg=488 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.719 seconds
Total inference time: 1.319 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064087
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.478 seconds
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 11.597999999999999 seconds
Total inference time: 1.319 seconds
AUC ROC: 1.0
Total revision time: 11.597999999999999
Best scored revision CLL: -0.064087


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:50:21
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'parameter_1.0': {'AUC PR': 0.074013, 'AUC ROC': 0.864075, 'Precision': [0.074013, 0.5], 'Inference time': 1.187, 'CLL': -0.311814, 'Recall': 1.0, 'F1': 0.137825, 'Learning time': 2.739}, 'Inference time': 1.319, 'CLL': -0.063719, 'Recall': 1.0, 'F1': 1.0, 'Learning time': 11.597999999999999}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048768;  // std dev = 5,05e-08, 48,000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.1418510649004883;  // std dev = 0,000, 581,000 (wgt'ed) examples reached here.  /* #neg=581 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839155;  // std dev = 0,000, 49,000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.12544463852839235;  // std dev = 0,000, 649,000 (wgt'ed) examples reached here.  /* #neg=649 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360629;  // std dev = 3,94e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.11231637819360601;  // std dev = 0,000, 630,000 (wgt'ed) examples reached here.  /* #neg=630 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783624;  // std dev = 3,33e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.10159632948783533;  // std dev = 4,05e-07, 648,000 (wgt'ed) examples reached here.  /* #neg=648 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 62,000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.09269127618926182;  // std dev = 0,000, 620,000 (wgt'ed) examples reached here.  /* #neg=620 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4,00e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0851847513883968;  // std dev = 1,83e-08, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.08518475138839678;  // std dev = 1,49e-07, 599,000 (wgt'ed) examples reached here.  /* #neg=599 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2,49e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109173;  // std dev = 2,24e-08, 59,000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07877675473109244;  // std dev = 0,000, 600,000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2,92e-07, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07324622576333688;  // std dev = 1,63e-07, 608,000 (wgt'ed) examples reached here.  /* #neg=608 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936716;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0684269778442027;  // std dev = 1,39e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.06842697784420368;  // std dev = 0,000, 640,000 (wgt'ed) examples reached here.  /* #neg=640 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1340070300080119;  // std dev = 0,000, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.06419184008202547;  // std dev = 2,44e-07, 563,000 (wgt'ed) examples reached here.  /* #neg=563 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.445 seconds
Total inference time: 1.066 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:50:27
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.066, 'CLL': -0.063719, 'Recall': 1.0, 'Learning time': 4.445, 'F1': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995084;  // std dev = 1,04e-06, 337,000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048766;  // std dev = 5,77e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.14185106490048835;  // std dev = 0,000, 595,000 (wgt'ed) examples reached here.  /* #neg=595 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158221
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.503 seconds
Total inference time: 0.736 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:50:29
{'AUC PR': 1.0, 'AUC ROC': 1.0, 'Precision': [nan, 0.5], 'Inference time': 0.736, 'CLL': -0.158221, 'Recall': 0.0, 'Learning time': 1.503, 'F1': nan}


