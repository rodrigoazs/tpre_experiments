Starting experiment #5 for 7_imdb_cora

Start learning from source dataset

Source train facts examples: 1078
Source train pos examples: 382
Source train neg examples: 14236

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 6,66e-08, 65,000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.14185106490048885;  // std dev = 0,000, 658,000 (wgt'ed) examples reached here.  /* #neg=658 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.12544463852839235;  // std dev = 0,000, 663,000 (wgt'ed) examples reached here.  /* #neg=663 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.11231637819360651;  // std dev = 0,000, 701,000 (wgt'ed) examples reached here.  /* #neg=701 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783621;  // std dev = 4,08e-08, 58,000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.10159632948783516;  // std dev = 4,37e-07, 708,000 (wgt'ed) examples reached here.  /* #neg=708 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 67,000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.09269127618926194;  // std dev = 0,000, 667,000 (wgt'ed) examples reached here.  /* #neg=667 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.08518475138839675;  // std dev = 1,37e-07, 693,000 (wgt'ed) examples reached here.  /* #neg=693 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109169;  // std dev = 3,16e-08, 66,000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.07877675473109268;  // std dev = 0,000, 672,000 (wgt'ed) examples reached here.  /* #neg=672 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.0732462257633365;  // std dev = 2,45e-07, 702,000 (wgt'ed) examples reached here.  /* #neg=702 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 1,83e-08, 57,000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.0684269778442026;  // std dev = 1,81e-07, 720,000 (wgt'ed) examples reached here.  /* #neg=720 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 51,000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.06419184008202532;  // std dev = 2,51e-07, 716,000 (wgt'ed) examples reached here.  /* #neg=716 */


Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 218007

Target test facts examples: 7463
Target test pos	 examples: 368
Target test neg examples: 31946

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.008827
   CLL	      = -0.638656
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.335 seconds
Total inference time: 3.743 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.981 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.28672036367094084;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.24811816884741303;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.20848477447886868;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.2807538536965855;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.17062637354018514;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.21248070121827137;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.13664585375352217;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1594898822817116;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.10762034996184422;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.11975529938157474;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.08372807955323866;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09028081829440963;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.06457405393631663;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06840311429118533;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.04949778322519479;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.052078905701252655;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.03777940363354092;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */


Results
   AUC ROC   = 0.363884
   AUC PR    = 0.008518
   CLL	      = -0.528884
   Precision = 0.002747 at threshold = 0.5
   Recall    = 0.005435
   F1        = 0.00365


Total learning time: 1.924 seconds
Total inference time: 4.522 seconds
AUC ROC: 0.363884


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.600181
   CLL	      = -0.67122
   Precision = 0.666667 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.5


Total scoring time: 1.09 seconds
Refined model CLL: -0.67122


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.363884
   AUC PR    = 0.008518
   CLL	      = -0.528884
   Precision = 0.002747 at threshold = 0.5
   Recall    = 0.005435
   F1        = 0.00365


Total learning time: 5.33 seconds
Total inference time: 4.522 seconds
AUC ROC: 0.363884
Total revision time: 5.33
Best scored revision CLL: -0.67122


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 01:02:24
{'CLL': -0.528884, 'AUC ROC': 0.363884, 'F1': 0.00365, 'Recall': 0.005435, 'Precision': [0.002747, 0.5], 'parameter_5': {'CLL': -0.638656, 'AUC ROC': 0.369565, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.743, 'Learning time': 1.335, 'AUC PR': 0.008827}, 'Inference time': 4.522, 'Learning time': 5.33, 'AUC PR': 0.008518}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.28672036367094084;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.24811816884741303;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.20848477447886868;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.2807538536965855;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.17062637354018514;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.21248070121827137;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.13664585375352217;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.1594898822817116;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.10762034996184422;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.11975529938157474;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.08372807955323866;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.09028081829440963;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.06457405393631663;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.06840311429118533;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.04949778322519479;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.052078905701252655;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.03777940363354092;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */


Results
   AUC ROC   = 0.494072
   AUC PR    = 0.010935
   CLL	      = -0.525777
   Precision = 0.005479 at threshold = 0.5
   Recall    = 0.01087
   F1        = 0.007286


Total learning time: 1.952 seconds
Total inference time: 3.45 seconds
AUC ROC: 0.494072


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 01:02:30
{'CLL': -0.525777, 'AUC ROC': 0.494072, 'F1': 0.007286, 'Recall': 0.01087, 'Precision': [0.005479, 0.5], 'Inference time': 3.45, 'Learning time': 1.952, 'AUC PR': 0.010935}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.28672036367094084;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */


Results
   AUC ROC   = 0.494072
   AUC PR    = 0.010935
   CLL	      = -0.217278
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.242 seconds
Total inference time: 2.988 seconds
AUC ROC: 0.494072


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 01:02:35
{'CLL': -0.217278, 'AUC ROC': 0.494072, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.988, 'Learning time': 1.242, 'AUC PR': 0.010935}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.596196
   AUC PR    = 0.014182
   CLL	      = -0.609125
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.455 seconds
Total inference time: 3.686 seconds
AUC ROC: 0.596196


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.999 seconds
Parameter learned model CLL: -0.685109


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}]]
[{'': [0.24913494809688577, 0.22222222222222224]}, {'': [0.24913494809688555, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222218]}, {'': [0.24913494809688566, 0.22222222222222224]}, {'': [0.24913494809688586, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222224]}, {'': [0.2491349480968859, 0.22222222222222224]}, {'': [0.24913494809688577, 0.2222222222222222]}, {'': [0.24913494809688572, 0.22222222222222218]}, {'': [0.24913494809688583, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.596196
   AUC PR    = 0.014182
   CLL	      = -0.609125
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.08 seconds
Total inference time: 3.896 seconds
AUC ROC: 0.596196


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.03 seconds
Refined model CLL: -0.685109


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.596196
   AUC PR    = 0.014182
   CLL	      = -0.609125
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.564000000000001 seconds
Total inference time: 3.686 seconds
AUC ROC: 0.596196
Total revision time: 5.564000000000001
Best scored revision CLL: -0.685109


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 01:02:48
{'CLL': -0.609125, 'AUC ROC': 0.596196, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.686, 'Learning time': 5.564000000000001, 'AUC PR': 0.014182, 'parameter_10': {'CLL': -0.609125, 'AUC ROC': 0.596196, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.686, 'Learning time': 1.455, 'AUC PR': 0.014182}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.4805020972413761;  // std dev = 0,829, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.27815688153867346;  // std dev = 0,496, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2814330203396899;  // std dev = 0,500, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11242438008194161;  // std dev = 0,788, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.3494536934115779;  // std dev = 0,850, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.18005107706381526;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18125532913703382;  // std dev = 0,501, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.045840442022194616;  // std dev = 0,753, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.23670405711879763;  // std dev = 0,870, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.10388418322279894;  // std dev = 0,488, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11043510085269365;  // std dev = 0,502, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.003920120063744277;  // std dev = 0,724, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.16020309975825184;  // std dev = 0,884, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.055787185395746446;  // std dev = 0,486, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06680154466003442;  // std dev = 0,503, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return -0.017765356937587223;  // std dev = 0,701, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.11189562261318993;  // std dev = 0,894, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.02813383058662074;  // std dev = 0,484, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */


Results
   AUC ROC   = 0.584918
   AUC PR    = 0.013301
   CLL	      = -0.574395
   Precision = 0.008824 at threshold = 0.5
   Recall    = 0.008152
   F1        = 0.008475


Total learning time: 3.215 seconds
Total inference time: 3.571 seconds
AUC ROC: 0.584918


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 01:02:56
{'CLL': -0.574395, 'AUC ROC': 0.584918, 'F1': 0.008475, 'Recall': 0.008152, 'Precision': [0.008824, 0.5], 'Inference time': 3.571, 'Learning time': 3.215, 'AUC PR': 0.013301}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.596196
   AUC PR    = 0.014182
   CLL	      = -0.225315
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.672 seconds
Total inference time: 2.657 seconds
AUC ROC: 0.596196


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 01:03:00
{'CLL': -0.225315, 'AUC ROC': 0.596196, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.657, 'Learning time': 1.672, 'AUC PR': 0.014182}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951234;  // std dev = 2,550, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3087411357856347;  // std dev = 2,550, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25641236875858664;  // std dev = 2,550, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2061374073445397;  // std dev = 2,550, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.20613740734453975;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16162857548414683;  // std dev = 2,550, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.16162857548414666;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12455597792081982;  // std dev = 2,550, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.12455597792081964;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0949280093673066;  // std dev = 2,550, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.09492800936730683;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0718608885005585;  // std dev = 2,550, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.0718608885005586;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.054183073759549435;  // std dev = 2,550, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.05418307375954945;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04076025323305631;  // std dev = 2,550, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.04076025323305622;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.596196
   AUC PR    = 0.014182
   CLL	      = -0.635101
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.456 seconds
Total inference time: 3.852 seconds
AUC ROC: 0.596196


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.044 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.55, 13, 13], 'false': [1.0, 2, 2]}]]
[{'': [0.24999999999999956, 0.25]}, {'': [0.25000000000000017, 0.25]}, {'': [0.24999999999999994, 0.25]}, {'': [0.25000000000000017, 0.25]}, {'': [0.24999999999999972, 0.24999999999999997]}, {'': [0.24999999999999986, 0.24999999999999997]}, {'': [0.2500000000000003, 0.25]}, {'': [0.25000000000000006, 0.24999999999999997]}, {'': [0.24999999999999983, 0.24999999999999997]}, {'': [0.25000000000000006, 0.25]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951234;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3087411357856347;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25641236875858664;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2061374073445397;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.20613740734453975;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16162857548414683;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.16162857548414666;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12455597792081982;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.12455597792081964;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0949280093673066;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.09492800936730683;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0718608885005585;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.0718608885005586;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.054183073759549435;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.05418307375954945;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04076025323305631;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.04076025323305622;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.596196
   AUC PR    = 0.014182
   CLL	      = -0.635101
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.221 seconds
Total inference time: 3.798 seconds
AUC ROC: 0.596196


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.1 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.596196
   AUC PR    = 0.014182
   CLL	      = -0.635101
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.821 seconds
Total inference time: 3.852 seconds
AUC ROC: 0.596196
Total revision time: 5.821
Best scored revision CLL: -0.695026


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 01:03:15
{'CLL': -0.635101, 'AUC ROC': 0.596196, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'parameter_15': {'CLL': -0.635101, 'AUC ROC': 0.596196, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.852, 'Learning time': 1.456, 'AUC PR': 0.014182}, 'Inference time': 3.852, 'Learning time': 5.821, 'AUC PR': 0.014182}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.35814893509951234;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.30665558223099326;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.32031135331748506;  // std dev = 0,975, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.254337180597636;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.26840611651347634;  // std dev = 0,970, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.33594463607669783;  // std dev = 0,814, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.20700005079183847;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0.06826702438142951;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.25788156324338285;  // std dev = 0,814, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.16236654714628693;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0.05475675321263292;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.19441793195410473;  // std dev = 0,814, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.1251560995835597;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0.0436199522725396;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08663834274003762;  // std dev = 0,501, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.14456606830792373;  // std dev = 0,901, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.1195169235784889;  // std dev = 0,808, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.07436850827754529;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0.0034229623413487196;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04642641480988215;  // std dev = 0,501, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.1043847876978738;  // std dev = 0,889, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.034949222942302884;  // std dev = 0,501, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.08051608403821355;  // std dev = 0,889, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.584847
   AUC PR    = 0.013251
   CLL	      = -0.59557
   Precision = 0.005479 at threshold = 0.5
   Recall    = 0.01087
   F1        = 0.007286


Total learning time: 3.522 seconds
Total inference time: 4.117 seconds
AUC ROC: 0.584847


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 01:03:22
{'CLL': -0.59557, 'AUC ROC': 0.584847, 'F1': 0.007286, 'Recall': 0.01087, 'Precision': [0.005479, 0.5], 'Inference time': 4.117, 'Learning time': 3.522, 'AUC PR': 0.013251}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.35814893509951234;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.584883
   AUC PR    = 0.013269
   CLL	      = -0.222464
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.711 seconds
Total inference time: 2.606 seconds
AUC ROC: 0.584883


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 01:03:27
{'CLL': -0.222464, 'AUC ROC': 0.584883, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.606, 'Learning time': 1.711, 'AUC PR': 0.013269}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951234;  // std dev = 3,000, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3087411357856347;  // std dev = 3,000, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2564123687585867;  // std dev = 3,000, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20613740734454003;  // std dev = 3,000, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.20613740734453975;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16162857548414641;  // std dev = 3,000, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.16162857548414666;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1245559779208195;  // std dev = 3,000, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.12455597792081964;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09492800936730651;  // std dev = 3,000, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.09492800936730683;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07186088850055877;  // std dev = 3,000, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.0718608885005586;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.054183073759549616;  // std dev = 3,000, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.05418307375954945;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04076025323305632;  // std dev = 3,000, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.04076025323305622;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.596196
   AUC PR    = 0.014182
   CLL	      = -0.635101
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.552 seconds
Total inference time: 3.751 seconds
AUC ROC: 0.596196


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.12 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.0, 18, 18], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.0, 18, 18], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.0, 18, 18], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.0, 18, 18], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.0, 18, 18], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.0, 18, 18], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.0, 18, 18], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.0, 18, 18], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.0, 18, 18], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.0, 18, 18], 'false': [1.0, 2, 2]}]]
[{'': [0.2499999999999995, 0.25]}, {'': [0.25000000000000006, 0.25]}, {'': [0.2499999999999999, 0.25]}, {'': [0.2499999999999996, 0.25]}, {'': [0.2499999999999999, 0.24999999999999997]}, {'': [0.24999999999999994, 0.24999999999999997]}, {'': [0.2500000000000001, 0.25]}, {'': [0.24999999999999994, 0.24999999999999997]}, {'': [0.2500000000000001, 0.24999999999999997]}, {'': [0.25000000000000006, 0.25]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951234;  // std dev = 0,500, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3087411357856347;  // std dev = 0,500, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2564123687585867;  // std dev = 0,500, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20613740734454003;  // std dev = 0,500, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.20613740734453975;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16162857548414641;  // std dev = 0,500, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.16162857548414666;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1245559779208195;  // std dev = 0,500, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.12455597792081964;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09492800936730651;  // std dev = 0,500, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.09492800936730683;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07186088850055877;  // std dev = 0,500, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.0718608885005586;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.054183073759549616;  // std dev = 0,500, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.05418307375954945;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04076025323305632;  // std dev = 0,500, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.04076025323305622;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.596196
   AUC PR    = 0.014182
   CLL	      = -0.635101
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.27 seconds
Total inference time: 3.531 seconds
AUC ROC: 0.596196


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.08 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.596196
   AUC PR    = 0.014182
   CLL	      = -0.635101
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 6.022 seconds
Total inference time: 3.751 seconds
AUC ROC: 0.596196
Total revision time: 6.022
Best scored revision CLL: -0.695026


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 01:03:41
{'CLL': -0.635101, 'AUC ROC': 0.596196, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.751, 'Learning time': 6.022, 'AUC PR': 0.014182, 'parameter_20': {'CLL': -0.635101, 'AUC ROC': 0.596196, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.751, 'Learning time': 1.552, 'AUC PR': 0.014182}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951234;  // std dev = 0,500, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.47540780245230163;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.3087411357856347;  // std dev = 0,500, 34,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return 0.14207446911896834;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.391076663875155;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.25641236875858675;  // std dev = 0,500, 34,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return 0.11913071541083436;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.30666723199191825;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.20613740734453997;  // std dev = 0,500, 34,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return 0.09839724823310976;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.23344024020308365;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.16162857548414647;  // std dev = 0,500, 34,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return 0.08025261351681952;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11812586073034338;  // std dev = 0,501, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.1757915961258189;  // std dev = 0,903, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08996656188239961;  // std dev = 0,501, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.13789498048809223;  // std dev = 0,900, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06810604631361811;  // std dev = 0,501, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.10690289860714773;  // std dev = 0,898, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.09498389426917668;  // std dev = 0,803, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.05792206857565746;  // std dev = 0,500, 34,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return -0.025275678971575715;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03654782356238148;  // std dev = 0,501, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return 0.08093218189876338;  // std dev = 0,888, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.584847
   AUC PR    = 0.013251
   CLL	      = -0.59713
   Precision = 0.005479 at threshold = 0.5
   Recall    = 0.01087
   F1        = 0.007286


Total learning time: 4.091 seconds
Total inference time: 4.145 seconds
AUC ROC: 0.584847


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 01:03:50
{'CLL': -0.59713, 'AUC ROC': 0.584847, 'F1': 0.007286, 'Recall': 0.01087, 'Precision': [0.005479, 0.5], 'Inference time': 4.145, 'Learning time': 4.091, 'AUC PR': 0.013251}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.35814893509951234;  // std dev = 0,500, 34,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=17 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.584883
   AUC PR    = 0.013269
   CLL	      = -0.222464
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.785 seconds
Total inference time: 2.83 seconds
AUC ROC: 0.584883


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 01:03:55
{'CLL': -0.222464, 'AUC ROC': 0.584883, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.83, 'Learning time': 1.785, 'AUC PR': 0.013269}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951135;  // std dev = 3,391, 46,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3087411357856347;  // std dev = 3,391, 46,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   else return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25641236875858686;  // std dev = 3,391, 46,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   else return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.20613740734454022;  // std dev = 3,391, 46,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   else return 0.20613740734453975;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16162857548414628;  // std dev = 3,391, 46,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   else return 0.16162857548414666;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12455597792082038;  // std dev = 3,391, 46,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   else return 0.12455597792081964;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09492800936730647;  // std dev = 3,391, 46,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   else return 0.09492800936730683;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07186088850055894;  // std dev = 3,391, 46,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   else return 0.0718608885005586;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05418307375954963;  // std dev = 3,391, 46,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   else return 0.05418307375954945;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04076025323305635;  // std dev = 3,391, 46,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   else return 0.04076025323305622;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.596196
   AUC PR    = 0.014182
   CLL	      = -0.635101
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.493 seconds
Total inference time: 3.598 seconds
AUC ROC: 0.596196


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.123 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.391, 23, 23], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.391, 23, 23], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.391, 23, 23], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.391, 23, 23], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.391, 23, 23], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.391, 23, 23], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.391, 23, 23], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.391, 23, 23], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.391, 23, 23], 'false': [1.0, 2, 2]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.391, 23, 23], 'false': [1.0, 2, 2]}]]
[{'': [0.2500000000000012, 0.25]}, {'': [0.2500000000000004, 0.25]}, {'': [0.24999999999999992, 0.25]}, {'': [0.2499999999999997, 0.25]}, {'': [0.2499999999999999, 0.24999999999999997]}, {'': [0.24999999999999983, 0.24999999999999997]}, {'': [0.24999999999999992, 0.25]}, {'': [0.2499999999999997, 0.24999999999999997]}, {'': [0.2500000000000003, 0.24999999999999997]}, {'': [0.25, 0.25]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951135;  // std dev = 0,500, 46,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.8087411357856351;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2738574148554022;  // std dev = 0,499, 43,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=20 */
%   else return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.6531942943559136;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.09611550042638735;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.23778216709305372;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   else return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.4949790774676339;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.18417649592317012;  // std dev = 0,498, 43,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=20 */
%   else return 0.20613740734453975;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.04174898029202023;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.374007288537418;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1533141296015831;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   else return 0.16162857548414666;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.29130163310202706;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.03305076808874874;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.11898919292032448;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   else return 0.12455597792081964;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.23498525074089682;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.026060871090164677;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.09126661017581648;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   else return 0.09492800936730683;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07448542054372431;  // std dev = 0,482, 46,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=23 */
%   else return 0.0718608885005586;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.004254788568782549;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.18394528808060884;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.05139203620933251;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   else return 0.05418307375954945;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0033147091918334093;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.1579197502888462;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.038797263457603925;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   else return 0.04076025323305622;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.411494
   AUC PR    = 0.00891
   CLL	      = -0.604855
   Precision = 0.036585 at threshold = 0.5
   Recall    = 0.008152
   F1        = 0.013333


Total learning time: 2.984 seconds
Total inference time: 5.771 seconds
AUC ROC: 0.411494


Results scoring model
   AUC ROC   = 0.5784
   AUC PR    = 0.628333
   CLL	      = -0.657602
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.12
   F1        = 0.214286


Total scoring time: 1.198 seconds
Refined model CLL: -0.657602


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.411494
   AUC PR    = 0.00891
   CLL	      = -0.604855
   Precision = 0.036585 at threshold = 0.5
   Recall    = 0.008152
   F1        = 0.013333


Total learning time: 6.798 seconds
Total inference time: 5.771 seconds
AUC ROC: 0.411494
Total revision time: 6.798
Best scored revision CLL: -0.657602


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 01:04:12
{'CLL': -0.604855, 'AUC ROC': 0.411494, 'F1': 0.013333, 'Recall': 0.008152, 'parameter_25': {'CLL': -0.635101, 'AUC ROC': 0.596196, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.598, 'Learning time': 1.493, 'AUC PR': 0.014182}, 'Precision': [0.036585, 0.5], 'Inference time': 5.771, 'Learning time': 6.798, 'AUC PR': 0.00891}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.33314893509951227;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then return 0.32708940237007;  // std dev = 0,988, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.2875782915172319;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | | else return 0.14207446911896834;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.11602614489656511;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.23981702128969618;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | else return 0.2776019781510222;  // std dev = 0,984, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.18712853841119237;  // std dev = 0,498, 43,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=20 */
%   else return 0.22601364801623397;  // std dev = 0,982, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then return 0.20712469779195186;  // std dev = 0,962, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.15468557579640527;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | | else return 0.022486010289108276;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.01710271519324132;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.12011656498429413;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | else return 0.1631498547495273;  // std dev = 0,960, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.1500268852411416;  // std dev = 0,944, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.0921632867141596;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | else return -0.018606090440718964;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.02009133631245989;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.07016564689666052;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   else return 0.11989321376302232;  // std dev = 0,940, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.11154925010602958;  // std dev = 0,928, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | | then return 0.053153070440515426;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | | else return -0.04203884416299867;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.041259924529191104;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.040138456891184275;  // std dev = 0,499, 40,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=19 */
%   | else return 0.09205091053239324;  // std dev = 0,923, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.586549
   AUC PR    = 0.013531
   CLL	      = -0.583313
   Precision = 0.006649 at threshold = 0.5
   Recall    = 0.013587
   F1        = 0.008929


Total learning time: 5.846 seconds
Total inference time: 5.885 seconds
AUC ROC: 0.586549


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 01:04:24
{'CLL': -0.583313, 'AUC ROC': 0.586549, 'F1': 0.008929, 'Recall': 0.013587, 'Precision': [0.006649, 0.5], 'Inference time': 5.885, 'Learning time': 5.846, 'AUC PR': 0.013531}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.32326521416927945;  // std dev = 0,499, 43,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=20 */
%   else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.407597
   AUC PR    = 0.008986
   CLL	      = -0.2244
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.202 seconds
Total inference time: 2.92 seconds
AUC ROC: 0.407597


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 01:04:29
{'CLL': -0.2244, 'AUC ROC': 0.407597, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.92, 'Learning time': 2.202, 'AUC PR': 0.008986}


Starting fold 2

Target train facts examples: 33542
Target train pos examples: 2246
Target train neg examples: 185871

Target test facts examples: 9016
Target test pos	 examples: 771
Target test neg examples: 64082

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.539543
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.239 seconds
Total inference time: 5.244 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.939 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}]]
[{'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691365]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.539543
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.885 seconds
Total inference time: 5.196 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.956 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.539543
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 5.019 seconds
Total inference time: 5.244 seconds
AUC ROC: 0.566796
Total revision time: 5.019
Best scored revision CLL: -0.632522


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 01:04:46
{'CLL': -0.539543, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'parameter_5': {'CLL': -0.539543, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 5.244, 'Learning time': 1.239, 'AUC PR': 0.151416}, 'Inference time': 5.244, 'Learning time': 5.019, 'AUC PR': 0.151416}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011888
   CLL	      = -0.174377
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.784 seconds
Total inference time: 3.112 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 01:04:51
{'CLL': -0.174377, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.112, 'Learning time': 1.784, 'AUC PR': 0.011888}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011888
   CLL	      = -0.174377
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.996 seconds
Total inference time: 2.941 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 01:04:55
{'CLL': -0.174377, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.941, 'Learning time': 0.996, 'AUC PR': 0.011888}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.3025933795439568;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2616318086752123;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2192721473492705;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1787352457468729;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1424392447767627;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11159559999632984;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.08637026299843614;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06628370899125427;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.05057564362187417;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.03843884907512937;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.539543
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.348 seconds
Total inference time: 5.257 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.673962
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.081 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}]]
[{'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469138]}, {'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691384]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.24691358024691368]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.24691358024691365]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.3025933795439568;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2616318086752123;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2192721473492705;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1787352457468729;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1424392447767627;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11159559999632984;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.08637026299843614;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06628370899125427;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.05057564362187417;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.03843884907512937;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.539543
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.984 seconds
Total inference time: 5.302 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.673962
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.06 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.539543
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 5.473000000000001 seconds
Total inference time: 5.257 seconds
AUC ROC: 0.566796
Total revision time: 5.473000000000001
Best scored revision CLL: -0.632522


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 01:05:12
{'CLL': -0.539543, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 5.257, 'Learning time': 5.473000000000001, 'AUC PR': 0.151416, 'parameter_10': {'CLL': -0.539543, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 5.257, 'Learning time': 1.348, 'AUC PR': 0.151416}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011888
   CLL	      = -0.174377
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.81 seconds
Total inference time: 3.217 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 01:05:17
{'CLL': -0.174377, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.217, 'Learning time': 1.81, 'AUC PR': 0.011888}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011888
   CLL	      = -0.174377
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.158 seconds
Total inference time: 2.943 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 01:05:22
{'CLL': -0.174377, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.943, 'Learning time': 1.158, 'AUC PR': 0.011888}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2812258581764354;  // std dev = 2,519, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.24343481888732565;  // std dev = 2,519, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2047323048430412;  // std dev = 2,519, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.16778925982029097;  // std dev = 2,519, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.1346051315246625;  // std dev = 2,519, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.1062110453196897;  // std dev = 2,519, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08278679559835075;  // std dev = 2,519, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06396363163531019;  // std dev = 2,519, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.04911358160877256;  // std dev = 2,519, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03754608823819938;  // std dev = 2,519, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.505459
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.628 seconds
Total inference time: 5.32 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.633333
   AUC PR    = 0.709873
   CLL	      = -0.608828
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.266667
   F1        = 0.421053


Total scoring time: 1.112 seconds
Parameter learned model CLL: -0.608828


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.519, 15, 11]}]]
[{'': [0.0, 0.24408284023668594]}, {'': [0.0, 0.24408284023668642]}, {'': [0.0, 0.24408284023668653]}, {'': [0.0, 0.24408284023668647]}, {'': [0.0, 0.2440828402366864]}, {'': [0.0, 0.24408284023668617]}, {'': [0.0, 0.24408284023668625]}, {'': [0.0, 0.24408284023668653]}, {'': [0.0, 0.24408284023668647]}, {'': [0.0, 0.2440828402366862]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2812258581764354;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.24343481888732565;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2047323048430412;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.16778925982029097;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.1346051315246625;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.1062110453196897;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08278679559835075;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06396363163531019;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.04911358160877256;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03754608823819938;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.505459
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.997 seconds
Total inference time: 5.397 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.633333
   AUC PR    = 0.709873
   CLL	      = -0.608828
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.266667
   F1        = 0.421053


Total scoring time: 1.079 seconds
Refined model CLL: -0.608828


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.505459
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 5.816 seconds
Total inference time: 5.32 seconds
AUC ROC: 0.566796
Total revision time: 5.816
Best scored revision CLL: -0.608828


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 01:05:39
{'CLL': -0.505459, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'parameter_15': {'CLL': -0.505459, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 5.32, 'Learning time': 1.628, 'AUC PR': 0.151416}, 'Inference time': 5.32, 'Learning time': 5.816, 'AUC PR': 0.151416}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.261631808675212;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2192721473492705;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,477, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1787352457468729;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14243924477676276;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11159559999632997;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08637026299843599;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,473, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06628370899125427;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */


Results
   AUC ROC   = 0.497889
   AUC PR    = 0.011717
   CLL	      = -0.548382
   Precision = 0.010309 at threshold = 0.5
   Recall    = 0.027237
   F1        = 0.014957


Total learning time: 2.255 seconds
Total inference time: 5.091 seconds
AUC ROC: 0.497889


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 01:05:47
{'CLL': -0.548382, 'AUC ROC': 0.497889, 'F1': 0.014957, 'Recall': 0.027237, 'Precision': [0.010309, 0.5], 'Inference time': 5.091, 'Learning time': 2.255, 'AUC PR': 0.011717}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */


Results
   AUC ROC   = 0.497889
   AUC PR    = 0.011717
   CLL	      = -0.223509
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.193 seconds
Total inference time: 3.527 seconds
AUC ROC: 0.497889


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 01:05:52
{'CLL': -0.223509, 'AUC ROC': 0.497889, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.527, 'Learning time': 1.193, 'AUC PR': 0.011717}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.28672036367094095;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.24811816884741356;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.20848477447886862;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.17062637354018517;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1366458537535223;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.10762034996184425;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08372807955323847;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06457405393631668;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.04949778322519463;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.037779403633540945;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.514105
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.481 seconds
Total inference time: 5.215 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.625
   AUC PR    = 0.699813
   CLL	      = -0.614907
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.25
   F1        = 0.4


Total scoring time: 1.086 seconds
Parameter learned model CLL: -0.614907


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}]]
[{'': [0.0, 0.244897959183673]}, {'': [0.0, 0.24489795918367285]}, {'': [-4.4408920985006264e-17, 0.2448979591836731]}, {'': [4.4408920985006264e-17, 0.24489795918367346]}, {'': [-2.2204460492503132e-17, 0.24489795918367316]}, {'': [0.0, 0.24489795918367335]}, {'': [-5.551115123125783e-18, 0.24489795918367357]}, {'': [0.0, 0.2448979591836733]}, {'': [0.0, 0.24489795918367366]}, {'': [0.0, 0.24489795918367346]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.29564893509951234;  // std dev = 0,496, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2557225255975429;  // std dev = 0,496, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2145623644786988;  // std dev = 0,496, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.17520344886901457;  // std dev = 0,496, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.13992299045211237;  // std dev = 0,496, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10987349688258455;  // std dev = 0,496, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08522776907319887;  // std dev = 0,496, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06554488992775381;  // std dev = 0,496, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.050109287809112016;  // std dev = 0,496, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03815242627986143;  // std dev = 0,496, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.599814
   AUC PR    = 0.152782
   CLL	      = -0.509142
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 4.252 seconds
Total inference time: 6.409 seconds
AUC ROC: 0.599814


Results scoring model
   AUC ROC   = 0.6375
   AUC PR    = 0.705757
   CLL	      = -0.613351
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.25
   F1        = 0.4


Total scoring time: 1.137 seconds
Refined model CLL: -0.613351


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.599814
   AUC PR    = 0.152782
   CLL	      = -0.509142
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 7.9559999999999995 seconds
Total inference time: 6.409 seconds
AUC ROC: 0.599814
Total revision time: 7.9559999999999995
Best scored revision CLL: -0.613351


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 01:06:12
{'CLL': -0.509142, 'AUC ROC': 0.599814, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 6.409, 'Learning time': 7.9559999999999995, 'AUC PR': 0.152782, 'parameter_20': {'CLL': -0.514105, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 5.215, 'Learning time': 1.481, 'AUC PR': 0.151416}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.32873717039363;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.2838374893261067;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.2368685074770855;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1918153831027405;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1516686618471827;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.11786101189670178;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.0905089646246743;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.06896419203032808;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.05228401282685906;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.0395103119478826;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.537297
   AUC PR    = 0.012664
   CLL	      = -0.604401
   Precision = 0.010309 at threshold = 0.5
   Recall    = 0.027237
   F1        = 0.014957


Total learning time: 5.185 seconds
Total inference time: 7.473 seconds
AUC ROC: 0.537297


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 01:06:25
{'CLL': -0.604401, 'AUC ROC': 0.537297, 'F1': 0.014957, 'Recall': 0.027237, 'Precision': [0.010309, 0.5], 'Inference time': 7.473, 'Learning time': 5.185, 'AUC PR': 0.012664}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.32873717039363;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.537272
   AUC PR    = 0.012647
   CLL	      = -0.225012
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.731 seconds
Total inference time: 4.184 seconds
AUC ROC: 0.537272


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 01:06:32
{'CLL': -0.225012, 'AUC ROC': 0.537272, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 4.184, 'Learning time': 1.731, 'AUC PR': 0.012647}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.30259337954395643;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.26163180867521296;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2192721473492705;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1787352457468729;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.14243924477676323;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.11159559999632924;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08637026299843586;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06628370899125421;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.05057564362187412;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.03843884907512935;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.539543
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.478 seconds
Total inference time: 5.191 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670073
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.076 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}]]
[{'': [0.0, 0.2469135802469133]}, {'': [0.0, 0.24691358024691287]}, {'': [-4.4408920985006264e-17, 0.24691358024691334]}, {'': [4.4408920985006264e-17, 0.24691358024691293]}, {'': [-2.2204460492503132e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691348]}, {'': [-5.551115123125783e-18, 0.24691358024691382]}, {'': [0.0, 0.2469135802469139]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691348]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.30814893509951236;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2663559447484889;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.22302914248953237;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.1888683221574974;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1815431429223906;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.15570029437174368;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.14443219718841727;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.12582628229372092;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11295499454068592;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.10008916917880559;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0872702245099298;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.07866279780602592;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06686562079518894;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.06127260860742232;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05094395286945288;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.04741549148811439;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03866658631014822;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.036517889972878734;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.599814
   AUC PR    = 0.152782
   CLL	      = -0.53876
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 4.093 seconds
Total inference time: 6.985 seconds
AUC ROC: 0.599814


Results scoring model
   AUC ROC   = 0.608
   AUC PR    = 0.673985
   CLL	      = -0.63207
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.16 seconds
Refined model CLL: -0.63207


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.599814
   AUC PR    = 0.152782
   CLL	      = -0.53876
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 7.807 seconds
Total inference time: 6.985 seconds
AUC ROC: 0.599814
Total revision time: 7.807
Best scored revision CLL: -0.63207


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 01:06:52
{'CLL': -0.53876, 'AUC ROC': 0.599814, 'F1': 0.235698, 'Recall': 0.133593, 'parameter_25': {'CLL': -0.539543, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 5.191, 'Learning time': 1.478, 'AUC PR': 0.151416}, 'Precision': [1.0, 0.5], 'Inference time': 6.985, 'Learning time': 7.807, 'AUC PR': 0.152782}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3692600462106225;  // std dev = 0,500, 45,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.8070165829559879;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.28320705914646443;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   else return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.6510648967826478;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.23525047780482553;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.1888683221574974;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.49316504430179114;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.1896574648720152;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.15570029437174368;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.3727337882511204;  // std dev = 7,45e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.14937526346634994;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.12582628229372092;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.2904415840938315;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1157031613597591;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   else return 0.10008916917880559;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.23439081909431747;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.08862245923386422;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.07866279780602592;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.19496389155953509;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.06738944593637905;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.06127260860742232;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.1661674409534709;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.05100810117154163;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.04741549148811439;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.14440144015639966;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.03849656754455059;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.036517889972878734;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.537297
   AUC PR    = 0.012664
   CLL	      = -0.624034
   Precision = 0.010309 at threshold = 0.5
   Recall    = 0.027237
   F1        = 0.014957


Total learning time: 4.811 seconds
Total inference time: 7.057 seconds
AUC ROC: 0.537297


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 01:07:05
{'CLL': -0.624034, 'AUC ROC': 0.537297, 'F1': 0.014957, 'Recall': 0.027237, 'Precision': [0.010309, 0.5], 'Inference time': 7.057, 'Learning time': 4.811, 'AUC PR': 0.012664}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.3343394112899882;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.537272
   AUC PR    = 0.012647
   CLL	      = -0.227192
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.093 seconds
Total inference time: 4.114 seconds
AUC ROC: 0.537272


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 01:07:11
{'CLL': -0.227192, 'AUC ROC': 0.537272, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 4.114, 'Learning time': 2.093, 'AUC PR': 0.012647}


Starting fold 3

Target train facts examples: 33252
Target train pos examples: 2436
Target train neg examples: 199372

Target test facts examples: 9306
Target test pos	 examples: 581
Target test neg examples: 50581

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.23314893509951226;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.202334239218108;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.17149281961528945;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.14228146899184052;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11591746118730598;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.09305316265470472;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.07383827012230793;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.058073729831299666;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.045370205025705;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.035268216809254856;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.18832
   CLL	      = -0.432578
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.409 seconds
Total inference time: 4.591 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.787662
   CLL	      = -0.555937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total scoring time: 0.894 seconds
Parameter learned model CLL: -0.555937


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [1.369, 5, 3]}]]
[{'': [0.0, 0.2343749999999999]}, {'': [0.0, 0.23437500000000008]}, {'': [0.0, 0.23437499999999992]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.23437499999999997]}, {'': [0.0, 0.23437499999999994]}, {'': [0.0, 0.2343749999999999]}, {'': [0.0, 0.234375]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.23314893509951226;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.202334239218108;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.17149281961528945;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.14228146899184052;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11591746118730598;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.09305316265470472;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.07383827012230793;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.058073729831299666;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.045370205025705;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.035268216809254856;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.18832
   CLL	      = -0.432578
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.707 seconds
Total inference time: 4.438 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.787662
   CLL	      = -0.555937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total scoring time: 1.046 seconds
Refined model CLL: -0.555937


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.585198
   AUC PR    = 0.18832
   CLL	      = -0.432578
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 5.056 seconds
Total inference time: 4.591 seconds
AUC ROC: 0.585198
Total revision time: 5.056
Best scored revision CLL: -0.555937


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 01:07:26
{'CLL': -0.432578, 'AUC ROC': 0.585198, 'F1': 0.291176, 'Recall': 0.170396, 'Precision': [1.0, 0.5], 'parameter_5': {'CLL': -0.432578, 'AUC ROC': 0.585198, 'F1': 0.291176, 'Recall': 0.170396, 'Precision': [1.0, 0.5], 'Inference time': 4.591, 'Learning time': 1.409, 'AUC PR': 0.18832}, 'Inference time': 4.591, 'Learning time': 5.056, 'AUC PR': 0.18832}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011356
   CLL	      = -0.173419
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.863 seconds
Total inference time: 2.689 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 01:07:31
{'CLL': -0.173419, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.689, 'Learning time': 1.863, 'AUC PR': 0.011356}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011356
   CLL	      = -0.173419
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.062 seconds
Total inference time: 2.477 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 01:07:35
{'CLL': -0.173419, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.477, 'Learning time': 1.062, 'AUC PR': 0.011356}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.3025933795439568;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2616318086752123;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2192721473492705;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1787352457468729;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1424392447767627;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11159559999632984;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.08637026299843614;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06628370899125427;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.05057564362187417;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.03843884907512937;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.18832
   CLL	      = -0.5391
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.397 seconds
Total inference time: 4.698 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.673962
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.971 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 2], 'false': [2.108, 10, 8]}]]
[{'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469138]}, {'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691384]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.24691358024691368]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.24691358024691365]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.3025933795439568;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2616318086752123;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.2192721473492705;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1787352457468729;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.1424392447767627;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.11159559999632984;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.08637026299843614;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.06628370899125427;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.05057564362187417;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return 0.03843884907512937;  // std dev = 0,497, 18,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.18832
   CLL	      = -0.5391
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.925 seconds
Total inference time: 4.671 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.673962
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.998 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.585198
   AUC PR    = 0.18832
   CLL	      = -0.5391
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 5.291 seconds
Total inference time: 4.698 seconds
AUC ROC: 0.585198
Total revision time: 5.291
Best scored revision CLL: -0.632522


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 01:07:51
{'CLL': -0.5391, 'AUC ROC': 0.585198, 'F1': 0.291176, 'Recall': 0.170396, 'Precision': [1.0, 0.5], 'Inference time': 4.698, 'Learning time': 5.291, 'AUC PR': 0.18832, 'parameter_10': {'CLL': -0.5391, 'AUC ROC': 0.585198, 'F1': 0.291176, 'Recall': 0.170396, 'Precision': [1.0, 0.5], 'Inference time': 4.698, 'Learning time': 1.397, 'AUC PR': 0.18832}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011356
   CLL	      = -0.173419
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.854 seconds
Total inference time: 2.834 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 01:07:55
{'CLL': -0.173419, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.834, 'Learning time': 1.854, 'AUC PR': 0.011356}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011356
   CLL	      = -0.173419
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.128 seconds
Total inference time: 2.645 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 01:08:00
{'CLL': -0.173419, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.645, 'Learning time': 1.128, 'AUC PR': 0.011356}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.261631808675212;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2192721473492705;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1787352457468729;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14243924477676276;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11159559999632997;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08637026299843599;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06628370899125427;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.050575643621874215;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.038438849075129344;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.18832
   CLL	      = -0.5391
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.328 seconds
Total inference time: 4.346 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.671449
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.1 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}]]
[{'': [1.4802973661668753e-16, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [3.700743415417188e-17, 0.24691358024691332]}, {'': [-3.700743415417188e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691382]}, {'': [0.0, 0.24691358024691357]}, {'': [0.0, 0.24691358024691337]}, {'': [0.0, 0.24691358024691382]}, {'': [-4.625929269271485e-18, 0.24691358024691362]}, {'': [-2.3129646346357427e-18, 0.24691358024691384]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.35814893509951234;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.3087411357856347;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.2564123687585866;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.20613740734453956;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.16162857548414686;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.12455597792081981;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.09492800936730662;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.0718608885005585;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.054183073759549394;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.04076025323305629;  // std dev = 0,500, 24,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=12 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.611042
   AUC PR    = 0.189408
   CLL	      = -0.572653
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 10.429 seconds
Total inference time: 7.457 seconds
AUC ROC: 0.611042


Results scoring model
   AUC ROC   = 0.68
   AUC PR    = 0.71162
   CLL	      = -0.574948
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.112 seconds
Refined model CLL: -0.574948


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.611042
   AUC PR    = 0.189408
   CLL	      = -0.572653
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 13.969 seconds
Total inference time: 7.457 seconds
AUC ROC: 0.611042
Total revision time: 13.969
Best scored revision CLL: -0.574948


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 01:08:26
{'CLL': -0.572653, 'AUC ROC': 0.611042, 'F1': 0.291176, 'Recall': 0.170396, 'Precision': [1.0, 0.5], 'parameter_15': {'CLL': -0.5391, 'AUC ROC': 0.585198, 'F1': 0.291176, 'Recall': 0.170396, 'Precision': [1.0, 0.5], 'Inference time': 4.346, 'Learning time': 1.328, 'AUC PR': 0.18832}, 'Inference time': 7.457, 'Learning time': 13.969, 'AUC PR': 0.189408}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.41370449065506787;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.3555557392714985;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.29261484610968785;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.23214124828648158;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.17942003892665268;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.13647857812921962;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.10293424750437853;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.07732947852152011;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.05801086896812466;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.04351050232227124;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.526611
   AUC PR    = 0.012007
   CLL	      = -0.666683
   Precision = 0.012027 at threshold = 0.5
   Recall    = 0.943201
   F1        = 0.023751


Total learning time: 12.931 seconds
Total inference time: 6.707 seconds
AUC ROC: 0.526611


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 01:08:46
{'CLL': -0.666683, 'AUC ROC': 0.526611, 'F1': 0.023751, 'Recall': 0.943201, 'Precision': [0.012027, 0.5], 'Inference time': 6.707, 'Learning time': 12.931, 'AUC PR': 0.012007}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.41370449065506787;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=15 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.526611
   AUC PR    = 0.012007
   CLL	      = -0.229495
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.024 seconds
Total inference time: 3.427 seconds
AUC ROC: 0.526611


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 01:08:53
{'CLL': -0.229495, 'AUC ROC': 0.526611, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.427, 'Learning time': 3.024, 'AUC PR': 0.012007}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.28672036367094095;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.24811816884741356;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.20848477447886862;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.17062637354018517;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1366458537535223;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.10762034996184425;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08372807955323847;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06457405393631668;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.04949778322519463;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.037779403633540945;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.18832
   CLL	      = -0.513614
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.317 seconds
Total inference time: 4.347 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.625
   AUC PR    = 0.699813
   CLL	      = -0.614907
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.25
   F1        = 0.4


Total scoring time: 0.924 seconds
Parameter learned model CLL: -0.614907


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}]]
[{'': [0.0, 0.244897959183673]}, {'': [0.0, 0.24489795918367285]}, {'': [-4.4408920985006264e-17, 0.2448979591836731]}, {'': [4.4408920985006264e-17, 0.24489795918367346]}, {'': [-2.2204460492503132e-17, 0.24489795918367316]}, {'': [0.0, 0.24489795918367335]}, {'': [-5.551115123125783e-18, 0.24489795918367357]}, {'': [0.0, 0.2448979591836733]}, {'': [0.0, 0.24489795918367366]}, {'': [0.0, 0.24489795918367346]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.30642479716847787;  // std dev = 0,497, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.2648901467342408;  // std dev = 0,497, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | | else return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.2218642075389276;  // std dev = 0,497, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | | else return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.18067338553138623;  // std dev = 0,497, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | | else return 0.2807538536965855;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15721552610294465;  // std dev = 0,494, 30,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return -0.03728915189291471;  // std dev = 0,723, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.10953982284304524;  // std dev = 0,497, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | | else return 0.205573690631582;  // std dev = 0,797, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.08960254347416378;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09694697081253736;  // std dev = 0,493, 30,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return -0.04798558844962301;  // std dev = 0,713, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.061869933621944026;  // std dev = 0,497, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | | else return 0.15438968528706423;  // std dev = 0,784, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.07899465156858325;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05866638200199444;  // std dev = 0,493, 30,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return -0.05314657725018131;  // std dev = 0,709, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04450313122225877;  // std dev = 0,493, 30,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return -0.04571657950127093;  // std dev = 0,710, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.607018
   AUC PR    = 0.191517
   CLL	      = -0.512435
   Precision = 0.761194 at threshold = 0.5
   Recall    = 0.175559
   F1        = 0.285315


Total learning time: 15.894 seconds
Total inference time: 8.055 seconds
AUC ROC: 0.607018


Results scoring model
   AUC ROC   = 0.70625
   AUC PR    = 0.755906
   CLL	      = -0.566628
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.461538


Total scoring time: 1.177 seconds
Refined model CLL: -0.566628


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.607018
   AUC PR    = 0.191517
   CLL	      = -0.512435
   Precision = 0.761194 at threshold = 0.5
   Recall    = 0.175559
   F1        = 0.285315


Total learning time: 19.312 seconds
Total inference time: 8.055 seconds
AUC ROC: 0.607018
Total revision time: 19.312
Best scored revision CLL: -0.566628


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 01:09:25
{'CLL': -0.512435, 'AUC ROC': 0.607018, 'F1': 0.285315, 'Recall': 0.175559, 'Precision': [0.761194, 0.5], 'Inference time': 8.055, 'Learning time': 19.312, 'AUC PR': 0.191517, 'parameter_20': {'CLL': -0.513614, 'AUC ROC': 0.585198, 'F1': 0.291176, 'Recall': 0.170396, 'Precision': [1.0, 0.5], 'Inference time': 4.347, 'Learning time': 1.317, 'AUC PR': 0.18832}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.3875606998053947;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.33356216495217195;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | else return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.27569319750537197;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | else return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.2200669087030997;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | else return 0.2807538536965855;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18189945359373969;  // std dev = 0,496, 35,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return -0.03728915189291471;  // std dev = 0,723, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.12839192521871118;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | else return 0.20351682667477644;  // std dev = 0,795, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.08960254347416378;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10727139409934994;  // std dev = 0,495, 35,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return -0.0477799160972487;  // std dev = 0,713, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.07070605490522835;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | else return 0.15200987996547966;  // std dev = 0,781, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07900961645278713;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06263920102015513;  // std dev = 0,495, 35,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return -0.052732097089469264;  // std dev = 0,709, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.047022051244519046;  // std dev = 0,495, 35,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   else return -0.04535866415815633;  // std dev = 0,710, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.540475
   AUC PR    = 0.01305
   CLL	      = -0.632488
   Precision = 0.012346 at threshold = 0.5
   Recall    = 0.91222
   F1        = 0.024362


Total learning time: 16.759 seconds
Total inference time: 6.604 seconds
AUC ROC: 0.540475


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 01:09:49
{'CLL': -0.632488, 'AUC ROC': 0.540475, 'F1': 0.024362, 'Recall': 0.91222, 'Precision': [0.012346, 0.5], 'Inference time': 6.604, 'Learning time': 16.759, 'AUC PR': 0.01305}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.3875606998053947;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.518006
   AUC PR    = 0.011384
   CLL	      = -0.226592
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 4.046 seconds
Total inference time: 3.474 seconds
AUC ROC: 0.518006


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 01:09:57
{'CLL': -0.226592, 'AUC ROC': 0.518006, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.474, 'Learning time': 4.046, 'AUC PR': 0.011384}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.27675358626230306;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.2396206853161997;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.2016709747053186;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830986;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.16546837522188929;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.1329302916561602;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694894;  // std dev = 1,29e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.10505067669786712;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.08200969000439053;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.06345882477747422;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.152743858093671;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.04879579179800376;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.03735349941138274;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */


Results
   AUC ROC   = 0.585198
   AUC PR    = 0.18832
   CLL	      = -0.497961
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total learning time: 1.489 seconds
Total inference time: 4.715 seconds
AUC ROC: 0.585198


Results scoring model
   AUC ROC   = 0.64
   AUC PR    = 0.716017
   CLL	      = -0.603887
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.28
   F1        = 0.4375


Total scoring time: 1.077 seconds
Parameter learned model CLL: -0.603887


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.58e-08, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.29e-08, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.27e-09, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 7], 'false': [3.235, 25, 18]}]]
[{'': [-2.5376526277146434e-16, 0.24337479718766852]}, {'': [6.344131569286608e-17, 0.24337479718766883]}, {'': [-6.344131569286608e-17, 0.24337479718766875]}, {'': [9.516197353929913e-17, 0.24337479718766966]}, {'': [-3.172065784643304e-17, 0.24337479718766852]}, {'': [2.3790493384824782e-17, 0.24337479718766877]}, {'': [-1.586032892321652e-17, 0.24337479718766936]}, {'': [3.96508223080413e-18, 0.24337479718766875]}, {'': [-7.93016446160826e-18, 0.24337479718766927]}, {'': [0.0, 0.2433747971876691]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.2905813675319448;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.2514074646610238;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.21111598384169464;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830986;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.17261067615767667;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else return 0.2807538536965855;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.13806886463848314;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else return 0.21248070121827137;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694894;  // std dev = 1,29e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11871133232981253;  // std dev = 0,493, 38,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=17 */
%   | else return -0.05398156458702015;  // std dev = 0,712, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.09211285575887947;  // std dev = 0,493, 38,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=17 */
%   | else return -0.0461155915829871;  // std dev = 0,714, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.060840034579838526;  // std dev = 0,495, 37,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=16 */
%   | | else return 0.1586934126132451;  // std dev = 0,787, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.07770132214419406;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.152743858093671;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0558734774684241;  // std dev = 0,492, 38,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=17 */
%   | else return -0.0521124856143053;  // std dev = 0,709, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.042550187881291744;  // std dev = 0,492, 38,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=17 */
%   | else return -0.044855070186845494;  // std dev = 0,710, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */


Results
   AUC ROC   = 0.607018
   AUC PR    = 0.191517
   CLL	      = -0.488839
   Precision = 0.761194 at threshold = 0.5
   Recall    = 0.175559
   F1        = 0.285315


Total learning time: 17.977 seconds
Total inference time: 8.103 seconds
AUC ROC: 0.607018


Results scoring model
   AUC ROC   = 0.7048
   AUC PR    = 0.760261
   CLL	      = -0.566058
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.32
   F1        = 0.484848


Total scoring time: 1.057 seconds
Refined model CLL: -0.566058


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.607018
   AUC PR    = 0.191517
   CLL	      = -0.488839
   Precision = 0.761194 at threshold = 0.5
   Recall    = 0.175559
   F1        = 0.285315


Total learning time: 21.599999999999998 seconds
Total inference time: 8.103 seconds
AUC ROC: 0.607018
Total revision time: 21.599999999999998
Best scored revision CLL: -0.566058


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 01:10:32
{'CLL': -0.488839, 'AUC ROC': 0.607018, 'F1': 0.285315, 'Recall': 0.175559, 'parameter_25': {'CLL': -0.497961, 'AUC ROC': 0.585198, 'F1': 0.291176, 'Recall': 0.170396, 'Precision': [1.0, 0.5], 'Inference time': 4.715, 'Learning time': 1.489, 'AUC PR': 0.18832}, 'Precision': [0.761194, 0.5], 'Inference time': 8.103, 'Learning time': 21.599999999999998, 'AUC PR': 0.191517}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.8126943896449667;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.09639651944594235;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.683100856113155;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.08506231566734805;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.5300155353258624;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.07570886566219236;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.3983314217012668;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.06787558065369831;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.30338541379378164;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.06123192350737716;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.23797203113877655;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.05553522311077814;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.19221486175035574;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.05060367989740748;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.15915746001677739;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.046298627560120084;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.13446805427235065;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.042512590451322115;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.11547337831910905;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.03916106334532628;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.747566
   AUC PR    = 0.022849
   CLL	      = -0.562789
   Precision = 0.042374 at threshold = 0.5
   Recall    = 0.915663
   F1        = 0.080999


Total learning time: 297.91700000000003 seconds
Total inference time: 121.413 seconds
AUC ROC: 0.747566


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 01:17:32
{'CLL': -0.562789, 'AUC ROC': 0.747566, 'F1': 0.080999, 'Recall': 0.915663, 'Precision': [0.042374, 0.5], 'Inference time': 121.413, 'Learning time': 297.91700000000003, 'AUC PR': 0.022849}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.8126943896449667;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.09639651944594235;  // std dev = 0,208, 22,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.747566
   AUC PR    = 0.022849
   CLL	      = -0.197408
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 33.44 seconds
Total inference time: 14.782 seconds
AUC ROC: 0.747566


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 01:18:20
{'CLL': -0.197408, 'AUC ROC': 0.747566, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 14.782, 'Learning time': 33.44, 'AUC PR': 0.022849}


Starting fold 4

Target train facts examples: 34429
Target train pos examples: 2270
Target train neg examples: 182149

Target test facts examples: 8129
Target test pos	 examples: 747
Target test neg examples: 67804

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4295775065280837;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.36887697659770574;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3027909085849406;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2393401664098931;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1843038277162846;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13977569193759043;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1052107561348137;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07895904348963037;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0592222778258641;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04444053765471761;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.729922
   Precision = 0.011674 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.023069


Total learning time: 1.436 seconds
Total inference time: 5.724 seconds
AUC ROC: 0.532398


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.564286
   CLL	      = -0.671025
   Precision = 0.571429 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.666667


Total scoring time: 1.086 seconds
Parameter learned model CLL: -0.671025


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 3, 4], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 3, 4], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 3, 4], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 3, 4], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 3, 4], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 3, 4], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 3, 4], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 3, 4], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 3, 4], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [1.309, 3, 4], 'false': [0.816, 2, 1]}]]
[{'': [0.24489795918367332, 0.22222222222222224]}, {'': [0.24489795918367355, 0.2222222222222222]}, {'': [0.2448979591836735, 0.22222222222222218]}, {'': [0.24489795918367344, 0.22222222222222224]}, {'': [0.24489795918367346, 0.2222222222222222]}, {'': [0.2448979591836735, 0.22222222222222224]}, {'': [0.24489795918367344, 0.22222222222222224]}, {'': [0.2448979591836735, 0.2222222222222222]}, {'': [0.24489795918367344, 0.22222222222222218]}, {'': [0.24489795918367352, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4295775065280837;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.36887697659770574;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3027909085849406;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2393401664098931;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1843038277162846;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13977569193759043;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1052107561348137;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07895904348963037;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0592222778258641;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04444053765471761;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.729922
   Precision = 0.011674 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.023069


Total learning time: 2.008 seconds
Total inference time: 5.551 seconds
AUC ROC: 0.532398


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.564286
   CLL	      = -0.671025
   Precision = 0.571429 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.666667


Total scoring time: 0.936 seconds
Refined model CLL: -0.671025


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.729922
   Precision = 0.011674 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.023069


Total learning time: 5.466 seconds
Total inference time: 5.724 seconds
AUC ROC: 0.532398
Total revision time: 5.466
Best scored revision CLL: -0.671025


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 01:18:38
{'CLL': -0.729922, 'AUC ROC': 0.532398, 'F1': 0.023069, 'Recall': 0.962517, 'Precision': [0.011674, 0.5], 'parameter_5': {'CLL': -0.729922, 'AUC ROC': 0.532398, 'F1': 0.023069, 'Recall': 0.962517, 'Precision': [0.011674, 0.5], 'Inference time': 5.724, 'Learning time': 1.436, 'AUC PR': 0.011659}, 'Inference time': 5.724, 'Learning time': 5.466, 'AUC PR': 0.011659}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4295775065280837;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.36887697659770574;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3027909085849406;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2393401664098931;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1843038277162846;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13977569193759043;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1052107561348137;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07895904348963037;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0592222778258641;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04444053765471761;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.729922
   Precision = 0.011674 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.023069


Total learning time: 2.796 seconds
Total inference time: 5.655 seconds
AUC ROC: 0.532398


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 01:18:47
{'CLL': -0.729922, 'AUC ROC': 0.532398, 'F1': 0.023069, 'Recall': 0.962517, 'Precision': [0.011674, 0.5], 'Inference time': 5.655, 'Learning time': 2.796, 'AUC PR': 0.011659}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4295775065280837;  // std dev = 0,495, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.236914
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.576 seconds
Total inference time: 4.023 seconds
AUC ROC: 0.532398


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 01:18:53
{'CLL': -0.236914, 'AUC ROC': 0.532398, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 4.023, 'Learning time': 1.576, 'AUC PR': 0.011659}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.656573
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.444 seconds
Total inference time: 5.847 seconds
AUC ROC: 0.532398


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.051 seconds
Parameter learned model CLL: -0.685109


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}]]
[{'': [0.24913494809688577, 0.22222222222222224]}, {'': [0.24913494809688555, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222218]}, {'': [0.24913494809688566, 0.22222222222222224]}, {'': [0.24913494809688586, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222224]}, {'': [0.2491349480968859, 0.22222222222222224]}, {'': [0.24913494809688577, 0.2222222222222222]}, {'': [0.24913494809688572, 0.22222222222222218]}, {'': [0.24913494809688583, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.656573
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.992 seconds
Total inference time: 5.702 seconds
AUC ROC: 0.532398


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.95 seconds
Refined model CLL: -0.685109


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.656573
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.437 seconds
Total inference time: 5.847 seconds
AUC ROC: 0.532398
Total revision time: 5.437
Best scored revision CLL: -0.685109


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 01:19:11
{'CLL': -0.656573, 'AUC ROC': 0.532398, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 5.847, 'Learning time': 5.437, 'AUC PR': 0.011659, 'parameter_10': {'CLL': -0.656573, 'AUC ROC': 0.532398, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 5.847, 'Learning time': 1.444, 'AUC PR': 0.011659}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.80415040024629;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1916988724701017;  // std dev = 0,027, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.13748373357962326;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.4901871275697956;  // std dev = 0,805, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.6475503782891522;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.16374985073317833;  // std dev = 0,024, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.11492321223452225;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.40761954592189803;  // std dev = 0,801, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.490185891056779;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.14255277856149665;  // std dev = 0,021, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.09467192708610113;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.32233611934978273;  // std dev = 0,799, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.37064578956733074;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1260075471079067;  // std dev = 0,019, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.07704692989365762;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.24656980262362496;  // std dev = 0,798, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11784383782295649;  // std dev = 0,281, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return -0.008694456450798657;  // std dev = 0,715, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.26542944329776996;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.12345899588802335;  // std dev = 0,030, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.03817674832189718;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.17739490383400228;  // std dev = 0,786, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0784542804078353;  // std dev = 0,259, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return -0.033117602011646353;  // std dev = 0,710, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.20394454684357077;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.11740037695661262;  // std dev = 0,037, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.013347875033831058;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.13257439865142387;  // std dev = 0,777, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05522001786511285;  // std dev = 0,246, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return -0.04596390382441403;  // std dev = 0,708, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.980477
   AUC PR    = 0.45116
   CLL	      = -0.175564
   Precision = 0.14444 at threshold = 0.5
   Recall    = 0.959839
   F1        = 0.251094


Total learning time: 38.177 seconds
Total inference time: 150.859 seconds
AUC ROC: 0.980477


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 01:22:20
{'CLL': -0.175564, 'AUC ROC': 0.980477, 'F1': 0.251094, 'Recall': 0.959839, 'Precision': [0.14444, 0.5], 'Inference time': 150.859, 'Learning time': 38.177, 'AUC PR': 0.45116}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.229835
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.498 seconds
Total inference time: 4.138 seconds
AUC ROC: 0.532398


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 01:22:26
{'CLL': -0.229835, 'AUC ROC': 0.532398, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 4.138, 'Learning time': 1.498, 'AUC PR': 0.011659}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.261631808675212;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2192721473492705;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1787352457468729;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14243924477676276;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11159559999632997;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08637026299843599;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06628370899125427;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.050575643621874215;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.038438849075129344;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.170861
   CLL	      = -0.539137
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 1.346 seconds
Total inference time: 5.523 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.671449
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.052 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}]]
[{'': [1.4802973661668753e-16, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [3.700743415417188e-17, 0.24691358024691332]}, {'': [-3.700743415417188e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691382]}, {'': [0.0, 0.24691358024691357]}, {'': [0.0, 0.24691358024691337]}, {'': [0.0, 0.24691358024691382]}, {'': [-4.625929269271485e-18, 0.24691358024691362]}, {'': [-2.3129646346357427e-18, 0.24691358024691384]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.41257245288266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.41751358415830986;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.3151786576185065;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.23676009386434207;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2551722425694894;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.1780694542720751;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2097577156325356;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.13513671764223453;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.17709649774527736;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.103671751136855;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.040148279628097173;  // std dev = 0,207, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | else return -0.01934549468828131;  // std dev = 0,818, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.14762026191109845;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0707120773397396;  // std dev = 0,004, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.03289941637538807;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.08136341611777731;  // std dev = 0,862, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.981464
   AUC PR    = 0.595388
   CLL	      = -0.150485
   Precision = 0.144612 at threshold = 0.5
   Recall    = 0.961178
   F1        = 0.251401


Total learning time: 69.882 seconds
Total inference time: 225.977 seconds
AUC ROC: 0.981464


Results scoring model
   AUC ROC   = 0.986667
   AUC PR    = 0.987531
   CLL	      = -0.21683
   Precision = 0.933333 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.933333


Total scoring time: 1.968 seconds
Refined model CLL: -0.21683


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.981464
   AUC PR    = 0.595388
   CLL	      = -0.150485
   Precision = 0.144612 at threshold = 0.5
   Recall    = 0.961178
   F1        = 0.251401


Total learning time: 74.248 seconds
Total inference time: 225.977 seconds
AUC ROC: 0.981464
Total revision time: 74.248
Best scored revision CLL: -0.21683


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 01:27:33
{'CLL': -0.150485, 'AUC ROC': 0.981464, 'F1': 0.251401, 'Recall': 0.961178, 'Precision': [0.144612, 0.5], 'parameter_15': {'CLL': -0.539137, 'AUC ROC': 0.576975, 'F1': 0.266821, 'Recall': 0.153949, 'Precision': [1.0, 0.5], 'Inference time': 5.523, 'Learning time': 1.346, 'AUC PR': 0.170861}, 'Inference time': 225.977, 'Learning time': 74.248, 'AUC PR': 0.595388}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.06492798797741087;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.05720661123539926;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.13292500070612276;  // std dev = 0,061, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.34056859483403823;  // std dev = 1,002, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.41257245288266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11837349182293039;  // std dev = 0,056, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.28997522520035957;  // std dev = 1,003, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.3151786576185065;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.10659367150346927;  // std dev = 0,051, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.2384157758224945;  // std dev = 1,004, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.23676009386434207;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.09688037180660496;  // std dev = 0,047, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.19042184693797304;  // std dev = 1,005, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.1780694542720751;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.08874450414766609;  // std dev = 0,044, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.14886748657150636;  // std dev = 1,006, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.13513671764223453;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06460545888746588;  // std dev = 0,238, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return -0.0043215573977821164;  // std dev = 0,821, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.16787686946542504;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.08639016738936739;  // std dev = 0,043, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.09951443884668713;  // std dev = 1,007, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.10075693781610562;  // std dev = 0,862, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.045809824375257796;  // std dev = 0,229, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return -0.01903670401427554;  // std dev = 0,819, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.980476
   AUC PR    = 0.451159
   CLL	      = -0.162322
   Precision = 0.14444 at threshold = 0.5
   Recall    = 0.959839
   F1        = 0.251094


Total learning time: 79.906 seconds
Total inference time: 200.594 seconds
AUC ROC: 0.980476


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 01:32:14
{'CLL': -0.162322, 'AUC ROC': 0.980476, 'F1': 0.251094, 'Recall': 0.959839, 'Precision': [0.14444, 0.5], 'Inference time': 200.594, 'Learning time': 79.906, 'AUC PR': 0.451159}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.06492798797741087;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.978993
   AUC PR    = 0.432486
   CLL	      = -0.165276
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 13.427 seconds
Total inference time: 26.36 seconds
AUC ROC: 0.978993


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 01:32:54
{'CLL': -0.165276, 'AUC ROC': 0.978993, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 26.36, 'Learning time': 13.427, 'AUC PR': 0.432486}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.3025933795439568;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2616318086752119;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2192721473492705;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.1787352457468729;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14243924477676304;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11159559999632974;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08637026299843592;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06628370899125449;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05057564362187414;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.038438849075129365;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.170861
   CLL	      = -0.539137
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 1.56 seconds
Total inference time: 5.652 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670516
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.99 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}]]
[{'': [0.0, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691334]}, {'': [0.0, 0.24691358024691315]}, {'': [0.0, 0.24691358024691373]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.24691358024691384]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691373]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7194734122109542;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.41257245288266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4175135841583098;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.3151786576185065;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3207118471601497;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.23676009386434207;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2551722425694894;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.1780694542720751;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.13513671764223453;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.17709649774527736;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.103671751136855;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.037257842956247025;  // std dev = 0,185, 32,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | else return -0.01934549468828131;  // std dev = 0,818, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.14798433184335957;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.07062658929018385;  // std dev = 0,004, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.03350655857361381;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.08152113294419536;  // std dev = 0,862, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.981464
   AUC PR    = 0.595388
   CLL	      = -0.150302
   Precision = 0.144612 at threshold = 0.5
   Recall    = 0.961178
   F1        = 0.251401


Total learning time: 93.238 seconds
Total inference time: 227.97 seconds
AUC ROC: 0.981464


Results scoring model
   AUC ROC   = 0.9925
   AUC PR    = 0.992888
   CLL	      = -0.188374
   Precision = 0.95 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.95


Total scoring time: 2.024 seconds
Refined model CLL: -0.188374


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.981464
   AUC PR    = 0.595388
   CLL	      = -0.150302
   Precision = 0.144612 at threshold = 0.5
   Recall    = 0.961178
   F1        = 0.251401


Total learning time: 97.812 seconds
Total inference time: 227.97 seconds
AUC ROC: 0.981464
Total revision time: 97.812
Best scored revision CLL: -0.188374


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 01:38:26
{'CLL': -0.150302, 'AUC ROC': 0.981464, 'F1': 0.251401, 'Recall': 0.961178, 'Precision': [0.144612, 0.5], 'Inference time': 227.97, 'Learning time': 97.812, 'AUC PR': 0.595388, 'parameter_20': {'CLL': -0.539137, 'AUC ROC': 0.576975, 'F1': 0.266821, 'Recall': 0.153949, 'Precision': [1.0, 0.5], 'Inference time': 5.652, 'Learning time': 1.56, 'AUC PR': 0.170861}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08629550934493224;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07611187483440301;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12720865187262478;  // std dev = 0,066, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.3427770800124641;  // std dev = 1,002, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.41257245288266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.11377031242661026;  // std dev = 0,060, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.292427330033988;  // std dev = 1,004, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.3151786576185065;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.10281488753360486;  // std dev = 0,056, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.2408996705598173;  // std dev = 1,005, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.23676009386434207;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09372721319002353;  // std dev = 0,051, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.19274786982435832;  // std dev = 1,006, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.1780694542720751;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08607628014976028;  // std dev = 0,048, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.15091884436339525;  // std dev = 1,007, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.13513671764223453;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.061121407004014486;  // std dev = 0,213, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return -0.00395747239493055;  // std dev = 0,821, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.16836413473562256;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08385834555333717;  // std dev = 0,047, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.10213080212770563;  // std dev = 1,008, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0.10088974151974439;  // std dev = 0,862, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04364010112698136;  // std dev = 0,204, 36,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=18 */
%   else return -0.01882990404762297;  // std dev = 0,819, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.980476
   AUC PR    = 0.451159
   CLL	      = -0.160676
   Precision = 0.14444 at threshold = 0.5
   Recall    = 0.959839
   F1        = 0.251094


Total learning time: 90.944 seconds
Total inference time: 202.37 seconds
AUC ROC: 0.980476


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 01:43:20
{'CLL': -0.160676, 'AUC ROC': 0.980476, 'F1': 0.251094, 'Recall': 0.959839, 'Precision': [0.14444, 0.5], 'Inference time': 202.37, 'Learning time': 90.944, 'AUC PR': 0.451159}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08629550934493224;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.978993
   AUC PR    = 0.432486
   CLL	      = -0.162673
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 16.117 seconds
Total inference time: 27.513 seconds
AUC ROC: 0.978993


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 01:44:04
{'CLL': -0.162673, 'AUC ROC': 0.978993, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 27.513, 'Learning time': 16.117, 'AUC PR': 0.432486}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.31467067422994655;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2718979338779211;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.22742727023532366;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.18481967858369794;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14674952708917505;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11453090292473048;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08831182757523444;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06753946269031201;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05137193645873037;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03893324925844389;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.170861
   CLL	      = -0.559007
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 1.464 seconds
Total inference time: 5.468 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.58
   AUC PR    = 0.644703
   CLL	      = -0.645987
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.275862


Total scoring time: 1.069 seconds
Parameter learned model CLL: -0.645987


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}]]
[{'': [0.0, 0.2481096408317579]}, {'': [0.0, 0.2481096408317583]}, {'': [0.0, 0.24810964083175807]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.24810964083175846]}, {'': [0.0, 0.24810964083175827]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.2481096408317585]}, {'': [0.0, 0.248109640831758]}, {'': [0.0, 0.24810964083175827]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7194734122109542;  // std dev = 7,30e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11231637819360636;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.08165239320886175;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.41257245288266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4175135841583098;  // std dev = 5,16e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10159632948783634;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.06990902274840138;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.3151786576185065;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.32071184716014967;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09269127618926103;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.059354635365447495;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.23676009386434207;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2551722425694894;  // std dev = 2,11e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08518475138839683;  // std dev = 1,49e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.05002771289938789;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.1780694542720751;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.07877675473109179;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.04190386852605735;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.13513671764223453;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05151926287795568;  // std dev = 0,185, 41,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | else return -0.01709543962322182;  // std dev = 0,823, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.16971288904960674;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.07637103239871383;  // std dev = 0,006, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.026088683483458053;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.10368838797142654;  // std dev = 0,862, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03771224710905128;  // std dev = 0,175, 41,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | else return -0.026377276989836274;  // std dev = 0,820, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.981464
   AUC PR    = 0.595388
   CLL	      = -0.152396
   Precision = 0.144612 at threshold = 0.5
   Recall    = 0.961178
   F1        = 0.251401


Total learning time: 109.205 seconds
Total inference time: 199.163 seconds
AUC ROC: 0.981464


Results scoring model
   AUC ROC   = 0.9944
   AUC PR    = 0.99479
   CLL	      = -0.18506
   Precision = 0.96 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.96


Total scoring time: 2.355 seconds
Refined model CLL: -0.18506


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.981464
   AUC PR    = 0.595388
   CLL	      = -0.152396
   Precision = 0.144612 at threshold = 0.5
   Recall    = 0.961178
   F1        = 0.251401


Total learning time: 114.093 seconds
Total inference time: 199.163 seconds
AUC ROC: 0.981464
Total revision time: 114.093
Best scored revision CLL: -0.18506


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 01:49:23
{'CLL': -0.152396, 'AUC ROC': 0.981464, 'F1': 0.251401, 'Recall': 0.961178, 'parameter_25': {'CLL': -0.559007, 'AUC ROC': 0.576975, 'F1': 0.266821, 'Recall': 0.153949, 'Precision': [1.0, 0.5], 'Inference time': 5.468, 'Learning time': 1.464, 'AUC PR': 0.170861}, 'Precision': [0.144612, 0.5], 'Inference time': 199.163, 'Learning time': 114.093, 'AUC PR': 0.595388}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.09837280403092258;  // std dev = 0,204, 23,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.08681449082837045;  // std dev = 0,204, 23,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.07728869371360647;  // std dev = 0,204, 23,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.41257245288266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.11762574344050411;  // std dev = 0,099, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.24664754311491083;  // std dev = 1,082, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return 0.3151786576185065;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.10600405151961288;  // std dev = 0,091, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.21259730441649113;  // std dev = 1,081, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return 0.23676009386434207;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.09640710369419937;  // std dev = 0,085, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.17892167905666034;  // std dev = 1,081, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return 0.1780694542720751;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08069156379484935;  // std dev = 0,219, 45,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   else return -0.0027243426248619667;  // std dev = 0,830, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06995185399513867;  // std dev = 0,217, 45,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   else return -0.002252915761886054;  // std dev = 0,830, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.1858764582299814;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.09999826104765006;  // std dev = 0,091, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.11884515299786777;  // std dev = 1,080, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return 0.12727082725759822;  // std dev = 0,856, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.049297091910265205;  // std dev = 0,205, 45,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   else return -0.016728165683380928;  // std dev = 0,824, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.980476
   AUC PR    = 0.451159
   CLL	      = -0.168805
   Precision = 0.14444 at threshold = 0.5
   Recall    = 0.959839
   F1        = 0.251094


Total learning time: 107.97200000000001 seconds
Total inference time: 170.809 seconds
AUC ROC: 0.980476


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 01:54:02
{'CLL': -0.168805, 'AUC ROC': 0.980476, 'F1': 0.251094, 'Recall': 0.959839, 'Precision': [0.14444, 0.5], 'Inference time': 170.809, 'Learning time': 107.97200000000001, 'AUC PR': 0.451159}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.09837280403092258;  // std dev = 0,204, 23,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.978993
   AUC PR    = 0.432486
   CLL	      = -0.161223
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 19.08 seconds
Total inference time: 26.838 seconds
AUC ROC: 0.978993


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 01:54:49
{'CLL': -0.161223, 'AUC ROC': 0.978993, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 26.838, 'Learning time': 19.08, 'AUC PR': 0.432486}


Starting fold 5

Target train facts examples: 33914
Target train pos examples: 2467
Target train neg examples: 214413

Target test facts examples: 8644
Target test pos	 examples: 550
Target test neg examples: 35540

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.540175
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.345 seconds
Total inference time: 3.564 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.019 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [1.491, 5, 4]}]]
[{'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691365]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.2469135802469136]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.30259337954395676;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2616318086752123;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.2192721473492705;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.17873524574687283;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.1424392447767628;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11159559999632969;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.08637026299843623;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06628370899125427;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.05057564362187433;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.038438849075129386;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.540175
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.859 seconds
Total inference time: 3.805 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.685394
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.949 seconds
Refined model CLL: -0.632522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.540175
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 5.172 seconds
Total inference time: 3.564 seconds
AUC ROC: 0.574545
Total revision time: 5.172
Best scored revision CLL: -0.632522


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:55:02
{'CLL': -0.540175, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'parameter_5': {'CLL': -0.540175, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'Inference time': 3.564, 'Learning time': 1.345, 'AUC PR': 0.171923}, 'Inference time': 3.564, 'Learning time': 5.172, 'AUC PR': 0.171923}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.01524
   CLL	      = -0.180409
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.836 seconds
Total inference time: 2.475 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 01:55:07
{'CLL': -0.180409, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.475, 'Learning time': 1.836, 'AUC PR': 0.01524}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.01524
   CLL	      = -0.180409
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.158 seconds
Total inference time: 2.172 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 01:55:11
{'CLL': -0.180409, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.172, 'Learning time': 1.158, 'AUC PR': 0.01524}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.588523
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.379 seconds
Total inference time: 3.673 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 1.006 seconds
Parameter learned model CLL: -0.665231


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}]]
[{'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.249307479224377]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.24930747922437663]}, {'': [0.0, 0.24930747922437657]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.2493074792243768]}, {'': [0.0, 0.2493074792243768]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.588523
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 2.054 seconds
Total inference time: 4.006 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.945 seconds
Refined model CLL: -0.665231


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.588523
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 5.384 seconds
Total inference time: 3.673 seconds
AUC ROC: 0.574545
Total revision time: 5.384
Best scored revision CLL: -0.665231


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:55:24
{'CLL': -0.588523, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'Inference time': 3.673, 'Learning time': 5.384, 'AUC PR': 0.171923, 'parameter_10': {'CLL': -0.588523, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'Inference time': 3.673, 'Learning time': 1.379, 'AUC PR': 0.171923}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.01524
   CLL	      = -0.180409
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.865 seconds
Total inference time: 2.222 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 01:55:29
{'CLL': -0.180409, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.222, 'Learning time': 1.865, 'AUC PR': 0.01524}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.01524
   CLL	      = -0.180409
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.142 seconds
Total inference time: 2.086 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 01:55:32
{'CLL': -0.180409, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.086, 'Learning time': 1.142, 'AUC PR': 0.01524}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.261631808675212;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2192721473492705;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1787352457468729;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14243924477676276;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11159559999632997;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08637026299843599;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06628370899125427;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.050575643621874215;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.038438849075129344;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.540175
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.466 seconds
Total inference time: 3.922 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.671449
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.086 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}]]
[{'': [1.4802973661668753e-16, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [3.700743415417188e-17, 0.24691358024691332]}, {'': [-3.700743415417188e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691382]}, {'': [0.0, 0.24691358024691357]}, {'': [0.0, 0.24691358024691337]}, {'': [0.0, 0.24691358024691382]}, {'': [-4.625929269271485e-18, 0.24691358024691362]}, {'': [-2.3129646346357427e-18, 0.24691358024691384]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.31648226843284566;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2734366587491455;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.22864662696661894;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.18572608234333768;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.14738904413680162;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1149649585880258;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08859845631213437;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06772501561009063;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.051490123639326;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03900731574306549;  // std dev = 0,498, 24,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.629123
   AUC PR    = 0.175175
   CLL	      = -0.517928
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 3.852 seconds
Total inference time: 4.606 seconds
AUC ROC: 0.629123


Results scoring model
   AUC ROC   = 0.62
   AUC PR    = 0.681226
   CLL	      = -0.629647
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.038 seconds
Refined model CLL: -0.629647


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.629123
   AUC PR    = 0.175175
   CLL	      = -0.517928
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 7.442 seconds
Total inference time: 4.606 seconds
AUC ROC: 0.629123
Total revision time: 7.442
Best scored revision CLL: -0.629647


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:55:49
{'CLL': -0.517928, 'AUC ROC': 0.629123, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'parameter_15': {'CLL': -0.540175, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'Inference time': 3.922, 'Learning time': 1.466, 'AUC PR': 0.171923}, 'Inference time': 4.606, 'Learning time': 7.442, 'AUC PR': 0.175175}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37666745361803083;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32437884151130014;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2685825285923573;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21495192589405884;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16769453154858402;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1286166480029106;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09762538532838719;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07366394600228472;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05540606060826155;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04160526031693688;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.572423
   AUC PR    = 0.017943
   CLL	      = -0.598662
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.727 seconds
Total inference time: 4.199 seconds
AUC ROC: 0.572423


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 01:55:57
{'CLL': -0.598662, 'AUC ROC': 0.572423, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 4.199, 'Learning time': 3.727, 'AUC PR': 0.017943}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37666745361803083;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.572423
   AUC PR    = 0.017943
   CLL	      = -0.229888
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.63 seconds
Total inference time: 3.028 seconds
AUC ROC: 0.572423


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 01:56:02
{'CLL': -0.229888, 'AUC ROC': 0.572423, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.028, 'Learning time': 1.63, 'AUC PR': 0.017943}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.3025933795439568;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2616318086752119;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2192721473492705;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.1787352457468729;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14243924477676304;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11159559999632974;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08637026299843592;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06628370899125449;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05057564362187414;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.038438849075129365;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.540175
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.358 seconds
Total inference time: 3.761 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670516
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.079 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}]]
[{'': [0.0, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691334]}, {'': [0.0, 0.24691358024691315]}, {'': [0.0, 0.24691358024691373]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.24691358024691384]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691373]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.324815601766179;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.28051077705998734;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.16653882456488173;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2342425620659102;  // std dev = 0,499, 30,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=14 */
%   | else return 0.1420942428155648;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7232081020380142;  // std dev = 5,16e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.2694263133106777;  // std dev = 0,083, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.41074392521671993;  // std dev = 0,843, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.2701637041901018;  // std dev = 0,970, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5590291776276889;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.21986618394526622;  // std dev = 0,072, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.32561294023458237;  // std dev = 0,849, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.2191529455354892;  // std dev = 0,966, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4202356212399329;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.18452994059539685;  // std dev = 0,062, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.24961302501101526;  // std dev = 0,852, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.17308477069966288;  // std dev = 0,963, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.32255781063736394;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.15839471435568903;  // std dev = 0,055, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.18835726752584522;  // std dev = 0,853, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.13412843606695818;  // std dev = 0,962, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2564314368134894;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.13842685447100256;  // std dev = 0,049, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.14160201709194165;  // std dev = 0,853, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.10265650365204061;  // std dev = 0,961, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2106467982466349;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12274477777859033;  // std dev = 0,044, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.10669617296539517;  // std dev = 0,853, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.07796816535282464;  // std dev = 0,960, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.006927794999170954;  // std dev = 0,195, 29,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=13 */
%   | | else return 0.10065971820399429;  // std dev = 0,452, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.05894690525481118;  // std dev = 0,960, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.98462
   AUC PR    = 0.74983
   CLL	      = -0.220721
   Precision = 0.198846 at threshold = 0.5
   Recall    = 0.94
   F1        = 0.328254


Total learning time: 57.027 seconds
Total inference time: 91.905 seconds
AUC ROC: 0.98462


Results scoring model
   AUC ROC   = 0.98875
   AUC PR    = 0.98883
   CLL	      = -0.237845
   Precision = 0.95 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.95


Total scoring time: 1.857 seconds
Refined model CLL: -0.237845


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.98462
   AUC PR    = 0.74983
   CLL	      = -0.220721
   Precision = 0.198846 at threshold = 0.5
   Recall    = 0.94
   F1        = 0.328254


Total learning time: 61.321 seconds
Total inference time: 91.905 seconds
AUC ROC: 0.98462
Total revision time: 61.321
Best scored revision CLL: -0.237845


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:58:40
{'CLL': -0.220721, 'AUC ROC': 0.98462, 'F1': 0.328254, 'Recall': 0.94, 'Precision': [0.198846, 0.5], 'Inference time': 91.905, 'Learning time': 61.321, 'AUC PR': 0.74983, 'parameter_20': {'CLL': -0.540175, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'Inference time': 3.761, 'Learning time': 1.358, 'AUC PR': 0.171923}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   else return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.33356216495217195;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   else return 0.16653882456488173;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.27569319750537197;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   else return 0.1420942428155648;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2200669087030997;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   else return 0.11914890490746428;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   else return 0.09841340278401867;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.6015483959693881;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.33051635980536964;  // std dev = 0,224, 19,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | else return 0.6500100026826551;  // std dev = 0,119, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.21058701107423883;  // std dev = 0,933, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.4527346853259579;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.25650459176847096;  // std dev = 0,224, 19,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | else return 0.4959801180203813;  // std dev = 0,135, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.16637103075299098;  // std dev = 0,929, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.34471277072893075;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.2561333013835219;  // std dev = 0,147, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.31887884788916027;  // std dev = 0,737, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.12921698506077373;  // std dev = 0,927, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.27149022538150636;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.21069686514328423;  // std dev = 0,126, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.2500674346991459;  // std dev = 0,734, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.09924879664540676;  // std dev = 0,925, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.040415835505212175;  // std dev = 0,241, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   else return -0.002216153407581238;  // std dev = 0,904, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */


Results
   AUC ROC   = 0.979029
   AUC PR    = 0.570564
   CLL	      = -0.298906
   Precision = 0.177358 at threshold = 0.5
   Recall    = 0.94
   F1        = 0.298413


Total learning time: 48.838 seconds
Total inference time: 62.650999999999996 seconds
AUC ROC: 0.979029


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 02:00:32
{'CLL': -0.298906, 'AUC ROC': 0.979029, 'F1': 0.298413, 'Recall': 0.94, 'Precision': [0.177358, 0.5], 'Inference time': 62.650999999999996, 'Learning time': 48.838, 'AUC PR': 0.570564}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 34,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=18 */
%   else return 0.19148226843284552;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */


Results
   AUC ROC   = 0.572423
   AUC PR    = 0.017943
   CLL	      = -0.231358
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.716 seconds
Total inference time: 2.725 seconds
AUC ROC: 0.572423


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 02:00:37
{'CLL': -0.231358, 'AUC ROC': 0.572423, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.725, 'Learning time': 1.716, 'AUC PR': 0.017943}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.31467067422994655;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2718979338779211;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.22742727023532366;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.18481967858369794;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14674952708917505;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11453090292473048;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08831182757523444;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06753946269031201;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05137193645873037;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03893324925844389;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.559853
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.319 seconds
Total inference time: 3.641 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.58
   AUC PR    = 0.644703
   CLL	      = -0.645987
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.275862


Total scoring time: 0.993 seconds
Parameter learned model CLL: -0.645987


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}]]
[{'': [0.0, 0.2481096408317579]}, {'': [0.0, 0.2481096408317583]}, {'': [0.0, 0.24810964083175807]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.24810964083175846]}, {'': [0.0, 0.24810964083175827]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.2481096408317585]}, {'': [0.0, 0.248109640831758]}, {'': [0.0, 0.24810964083175827]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.33183314562582816;  // std dev = 0,499, 38,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.28646280754165054;  // std dev = 0,499, 38,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.23893826810287477;  // std dev = 0,499, 38,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1888683221574974;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7217781285016087;  // std dev = 0,035, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.2769094067474634;  // std dev = 0,048, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.2376791437532345;  // std dev = 1,001, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.26927617696427963;  // std dev = 0,968, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.55769717879687;  // std dev = 0,044, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.22502666958748177;  // std dev = 0,042, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.1892643129606879;  // std dev = 1,001, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.2183464097000534;  // std dev = 0,964, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4193092823649437;  // std dev = 0,045, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.18823255945649717;  // std dev = 0,037, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.14743456485284745;  // std dev = 1,001, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.17240884124067718;  // std dev = 0,961, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.32197199962226764;  // std dev = 0,041, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.16115019932618257;  // std dev = 0,032, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.11316716095731925;  // std dev = 1,001, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.1335943274355894;  // std dev = 0,960, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2560577433088627;  // std dev = 0,036, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.14054272880341093;  // std dev = 0,029, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.08606300503099851;  // std dev = 1,001, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.10225081232668004;  // std dev = 0,959, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04035260513289314;  // std dev = 0,212, 38,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.04055600231744623;  // std dev = 0,767, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.06701640034269492;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.20377355146538795;  // std dev = 0,031, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12887625231781344;  // std dev = 0,027, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.055141369754340586;  // std dev = 1,001, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.08712819569846315;  // std dev = 0,946, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.984844
   AUC PR    = 0.75369
   CLL	      = -0.205159
   Precision = 0.671429 at threshold = 0.5
   Recall    = 0.94
   F1        = 0.783333


Total learning time: 60.335 seconds
Total inference time: 91.988 seconds
AUC ROC: 0.984844


Results scoring model
   AUC ROC   = 0.992
   AUC PR    = 0.992498
   CLL	      = -0.233725
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.88
   F1        = 0.93617


Total scoring time: 1.933 seconds
Refined model CLL: -0.233725


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.984844
   AUC PR    = 0.75369
   CLL	      = -0.205159
   Precision = 0.671429 at threshold = 0.5
   Recall    = 0.94
   F1        = 0.783333


Total learning time: 64.58 seconds
Total inference time: 91.988 seconds
AUC ROC: 0.984844
Total revision time: 64.58
Best scored revision CLL: -0.233725


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 02:03:18
{'CLL': -0.205159, 'AUC ROC': 0.984844, 'F1': 0.783333, 'Recall': 0.94, 'parameter_25': {'CLL': -0.559853, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'Inference time': 3.641, 'Learning time': 1.319, 'AUC PR': 0.171923}, 'Precision': [0.671429, 0.5], 'Inference time': 91.988, 'Learning time': 64.58, 'AUC PR': 0.75369}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3819584589090352;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32884073203744923;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2720407226789254;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.1888683221574974;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21744269676868916;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.15570029437174368;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.6498145223146199;  // std dev = 0,078, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return -0.3067893056207269;  // std dev = 0,976, 21,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return -0.274173717706279;  // std dev = 5,27e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.6723365252713905;  // std dev = 0,066, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.23520796377807038;  // std dev = 0,944, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.4923602153625078;  // std dev = 0,090, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return -0.24009615939646087;  // std dev = 0,976, 21,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return -0.22309463194131998;  // std dev = 5,27e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5128150731965924;  // std dev = 0,076, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1876940693326158;  // std dev = 0,939, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.3723701783475201;  // std dev = 0,088, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return -0.19349108482640473;  // std dev = 0,976, 21,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return -0.18681844394798267;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.387554031462334;  // std dev = 0,073, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1466846791041269;  // std dev = 0,937, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06778451691117857;  // std dev = 0,275, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.04845071392992361;  // std dev = 0,571, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return -0.01846379599468262;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.27681527742691214;  // std dev = 0,082, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return -0.17124312574013056;  // std dev = 0,976, 21,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return -0.16670181392008934;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2885102358761627;  // std dev = 0,067, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1119481658053818;  // std dev = 0,926, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.044038517402978664;  // std dev = 0,243, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.02865650131207693;  // std dev = 0,475, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return -0.040065138864568715;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.966934
   AUC PR    = 0.235259
   CLL	      = -0.323173
   Precision = 0.174485 at threshold = 0.5
   Recall    = 0.94
   F1        = 0.294335


Total learning time: 70.655 seconds
Total inference time: 66.406 seconds
AUC ROC: 0.966934


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 02:05:35
{'CLL': -0.323173, 'AUC ROC': 0.966934, 'F1': 0.294335, 'Recall': 0.94, 'Precision': [0.174485, 0.5], 'Inference time': 66.406, 'Learning time': 70.655, 'AUC PR': 0.235259}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3819584589090352;  // std dev = 0,499, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.572497
   AUC PR    = 0.017944
   CLL	      = -0.231891
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.856 seconds
Total inference time: 2.926 seconds
AUC ROC: 0.572497


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 02:05:40
{'CLL': -0.231891, 'AUC ROC': 0.572497, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.926, 'Learning time': 1.856, 'AUC PR': 0.017944}


