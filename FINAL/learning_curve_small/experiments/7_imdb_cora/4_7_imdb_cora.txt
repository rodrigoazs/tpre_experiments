Starting experiment #4 for 7_imdb_cora

Start learning from source dataset

Source train facts examples: 1078
Source train pos examples: 382
Source train neg examples: 14236

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1,43e-06, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4,94e-08, 47,000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.14185106490048907;  // std dev = 0,000, 701,000 (wgt'ed) examples reached here.  /* #neg=701 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839158;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.12544463852839235;  // std dev = 0,000, 709,000 (wgt'ed) examples reached here.  /* #neg=709 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360629;  // std dev = 3,80e-08, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.11231637819360647;  // std dev = 0,000, 678,000 (wgt'ed) examples reached here.  /* #neg=678 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783619;  // std dev = 4,34e-08, 64,000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.10159632948783509;  // std dev = 4,61e-07, 730,000 (wgt'ed) examples reached here.  /* #neg=730 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0,000, 53,000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.09269127618926203;  // std dev = 0,000, 712,000 (wgt'ed) examples reached here.  /* #neg=712 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4,42e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1,67e-08, 61,000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.08518475138839675;  // std dev = 1,37e-07, 736,000 (wgt'ed) examples reached here.  /* #neg=736 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2,53e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109176;  // std dev = 1,83e-08, 56,000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.07877675473109268;  // std dev = 0,000, 666,000 (wgt'ed) examples reached here.  /* #neg=666 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2,60e-07, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1,05e-08, 50,000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.07324622576333643;  // std dev = 2,71e-07, 744,000 (wgt'ed) examples reached here.  /* #neg=744 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0684269778442027;  // std dev = 1,49e-08, 52,000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.06842697784420251;  // std dev = 1,88e-07, 687,000 (wgt'ed) examples reached here.  /* #neg=687 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0,000, 382,000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0,000, 54,000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.06419184008202534;  // std dev = 2,44e-07, 706,000 (wgt'ed) examples reached here.  /* #neg=706 */


Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 218007

Target test facts examples: 7463
Target test pos	 examples: 368
Target test neg examples: 31946

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.008827
   CLL	      = -0.638656
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.332 seconds
Total inference time: 3.753 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.1 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.369565
   AUC PR    = 0.008827
   CLL	      = -0.638656
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.832 seconds
Total inference time: 3.846 seconds
AUC ROC: 0.369565


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.097 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.369565
   AUC PR    = 0.008827
   CLL	      = -0.638656
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.361000000000001 seconds
Total inference time: 3.753 seconds
AUC ROC: 0.369565
Total revision time: 5.361000000000001
Best scored revision CLL: -0.695026


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:48:25
{'CLL': -0.638656, 'AUC ROC': 0.369565, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'parameter_5': {'CLL': -0.638656, 'AUC ROC': 0.369565, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.753, 'Learning time': 1.332, 'AUC PR': 0.008827}, 'Inference time': 3.753, 'Learning time': 5.361000000000001, 'AUC PR': 0.008827}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011388
   CLL	      = -0.173476
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.829 seconds
Total inference time: 2.377 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 00:48:30
{'CLL': -0.173476, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.377, 'Learning time': 1.829, 'AUC PR': 0.011388}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011388
   CLL	      = -0.173476
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.174 seconds
Total inference time: 2.168 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 00:48:33
{'CLL': -0.173476, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.168, 'Learning time': 1.174, 'AUC PR': 0.011388}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.280066
   CLL	      = -0.587175
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 1.456 seconds
Total inference time: 3.707 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.971 seconds
Parameter learned model CLL: -0.665231


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}]]
[{'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.249307479224377]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.24930747922437663]}, {'': [0.0, 0.24930747922437657]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.2493074792243768]}, {'': [0.0, 0.2493074792243768]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.280066
   CLL	      = -0.587175
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 2.076 seconds
Total inference time: 3.778 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 1.108 seconds
Refined model CLL: -0.665231


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.630435
   AUC PR    = 0.280066
   CLL	      = -0.587175
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 5.611000000000001 seconds
Total inference time: 3.707 seconds
AUC ROC: 0.630435
Total revision time: 5.611000000000001
Best scored revision CLL: -0.665231


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:48:47
{'CLL': -0.587175, 'AUC ROC': 0.630435, 'F1': 0.413793, 'Recall': 0.26087, 'Precision': [1.0, 0.5], 'Inference time': 3.707, 'Learning time': 5.611000000000001, 'AUC PR': 0.280066, 'parameter_10': {'CLL': -0.587175, 'AUC ROC': 0.630435, 'F1': 0.413793, 'Recall': 0.26087, 'Precision': [1.0, 0.5], 'Inference time': 3.707, 'Learning time': 1.456, 'AUC PR': 0.280066}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011388
   CLL	      = -0.173476
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.96 seconds
Total inference time: 2.295 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 00:48:51
{'CLL': -0.173476, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.295, 'Learning time': 1.96, 'AUC PR': 0.011388}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011388
   CLL	      = -0.173476
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.077 seconds
Total inference time: 1.962 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 00:48:55
{'CLL': -0.173476, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 1.962, 'Learning time': 1.077, 'AUC PR': 0.011388}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.261631808675212;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2192721473492705;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1787352457468729;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14243924477676276;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11159559999632997;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08637026299843599;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06628370899125427;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.050575643621874215;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.038438849075129344;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.280066
   CLL	      = -0.538332
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 1.482 seconds
Total inference time: 3.981 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.671449
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.119 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}]]
[{'': [1.4802973661668753e-16, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [3.700743415417188e-17, 0.24691358024691332]}, {'': [-3.700743415417188e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691382]}, {'': [0.0, 0.24691358024691357]}, {'': [0.0, 0.24691358024691337]}, {'': [0.0, 0.24691358024691382]}, {'': [-4.625929269271485e-18, 0.24691358024691362]}, {'': [-2.3129646346357427e-18, 0.24691358024691384]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.23314893509951237;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.202334239218108;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1714928196152892;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.14228146899184058;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.11591746118730585;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.09305316265470505;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.07383827012230793;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.05807372983129966;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.04537020502570499;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.03526821680925496;  // std dev = 0,484, 24,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */


Results
   AUC ROC   = 0.621789
   AUC PR    = 0.04574
   CLL	      = -0.469765
   Precision = 0.118932 at threshold = 0.5
   Recall    = 0.266304
   F1        = 0.16443


Total learning time: 2.374 seconds
Total inference time: 4.68 seconds
AUC ROC: 0.621789


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.777338
   CLL	      = -0.555937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.4
   F1        = 0.571429


Total scoring time: 1.056 seconds
Refined model CLL: -0.555937


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.621789
   AUC PR    = 0.04574
   CLL	      = -0.469765
   Precision = 0.118932 at threshold = 0.5
   Recall    = 0.266304
   F1        = 0.16443


Total learning time: 6.031 seconds
Total inference time: 4.68 seconds
AUC ROC: 0.621789
Total revision time: 6.031
Best scored revision CLL: -0.555937


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:49:10
{'CLL': -0.469765, 'AUC ROC': 0.621789, 'F1': 0.16443, 'Recall': 0.266304, 'Precision': [0.118932, 0.5], 'parameter_15': {'CLL': -0.538332, 'AUC ROC': 0.630435, 'F1': 0.413793, 'Recall': 0.26087, 'Precision': [1.0, 0.5], 'Inference time': 3.981, 'Learning time': 1.482, 'AUC PR': 0.280066}, 'Inference time': 4.68, 'Learning time': 6.031, 'AUC PR': 0.04574}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.261631808675212;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,482, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2192721473492705;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1787352457468729;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,474, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14243924477676276;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11159559999632997;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08637026299843599;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,473, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */


Results
   AUC ROC   = 0.494072
   AUC PR    = 0.010935
   CLL	      = -0.50886
   Precision = 0.005479 at threshold = 0.5
   Recall    = 0.01087
   F1        = 0.007286


Total learning time: 2.258 seconds
Total inference time: 3.601 seconds
AUC ROC: 0.494072


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 00:49:16
{'CLL': -0.50886, 'AUC ROC': 0.494072, 'F1': 0.007286, 'Recall': 0.01087, 'Precision': [0.005479, 0.5], 'Inference time': 3.601, 'Learning time': 2.258, 'AUC PR': 0.010935}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 0,497, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */


Results
   AUC ROC   = 0.494072
   AUC PR    = 0.010935
   CLL	      = -0.221748
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.343 seconds
Total inference time: 2.532 seconds
AUC ROC: 0.494072


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 00:49:21
{'CLL': -0.221748, 'AUC ROC': 0.494072, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.532, 'Learning time': 1.343, 'AUC PR': 0.010935}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.3025933795439568;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2616318086752119;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2192721473492705;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.1787352457468729;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14243924477676304;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11159559999632974;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08637026299843592;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06628370899125449;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05057564362187414;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.038438849075129365;  // std dev = 2,981, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.280066
   CLL	      = -0.538332
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 1.507 seconds
Total inference time: 3.71 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670516
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.067 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [2.981, 20, 16]}]]
[{'': [0.0, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [0.0, 0.24691358024691334]}, {'': [0.0, 0.24691358024691315]}, {'': [0.0, 0.24691358024691373]}, {'': [0.0, 0.24691358024691348]}, {'': [0.0, 0.2469135802469136]}, {'': [0.0, 0.24691358024691384]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691373]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.3025933795439568;  // std dev = 0,497, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.8171873642307679;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.21112675817016147;  // std dev = 0,489, 33,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.21798386110882897;  // std dev = 0,487, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.613544339839247;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.13821212126740492;  // std dev = 0,489, 33,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.46224476828667366;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.11103169653769158;  // std dev = 0,489, 33,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.10991404126158383;  // std dev = 0,473, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.0860233975882927;  // std dev = 0,473, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06679375466224496;  // std dev = 0,473, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05157425342114181;  // std dev = 0,473, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.28335924631331544;  // std dev = 5,27e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.017513575689167667;  // std dev = 0,489, 33,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */


Results
   AUC ROC   = 0.624753
   AUC PR    = 0.277031
   CLL	      = -0.504238
   Precision = 0.118932 at threshold = 0.5
   Recall    = 0.266304
   F1        = 0.16443


Total learning time: 2.21 seconds
Total inference time: 4.254 seconds
AUC ROC: 0.624753


Results scoring model
   AUC ROC   = 0.675
   AUC PR    = 0.752585
   CLL	      = -0.585702
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.35
   F1        = 0.518519


Total scoring time: 1.076 seconds
Refined model CLL: -0.585702


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.624753
   AUC PR    = 0.277031
   CLL	      = -0.504238
   Precision = 0.118932 at threshold = 0.5
   Recall    = 0.266304
   F1        = 0.16443


Total learning time: 5.859999999999999 seconds
Total inference time: 4.254 seconds
AUC ROC: 0.624753
Total revision time: 5.859999999999999
Best scored revision CLL: -0.585702


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:49:35
{'CLL': -0.504238, 'AUC ROC': 0.624753, 'F1': 0.16443, 'Recall': 0.266304, 'Precision': [0.118932, 0.5], 'Inference time': 4.254, 'Learning time': 5.859999999999999, 'AUC PR': 0.277031, 'parameter_20': {'CLL': -0.538332, 'AUC ROC': 0.630435, 'F1': 0.413793, 'Recall': 0.26087, 'Precision': [1.0, 0.5], 'Inference time': 3.71, 'Learning time': 1.507, 'AUC PR': 0.280066}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 0,498, 37,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2743930062984994;  // std dev = 0,498, 37,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,487, 40,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.22940409212560184;  // std dev = 0,498, 37,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.18628870627050972;  // std dev = 0,498, 37,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,481, 40,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,481, 40,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14778567561990727;  // std dev = 0,498, 37,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11523398454885339;  // std dev = 0,498, 37,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08877605966596111;  // std dev = 0,498, 37,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.494072
   AUC PR    = 0.010935
   CLL	      = -0.529606
   Precision = 0.005479 at threshold = 0.5
   Recall    = 0.01087
   F1        = 0.007286


Total learning time: 2.389 seconds
Total inference time: 3.443 seconds
AUC ROC: 0.494072


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 00:49:41
{'CLL': -0.529606, 'AUC ROC': 0.494072, 'F1': 0.007286, 'Recall': 0.01087, 'Precision': [0.005479, 0.5], 'Inference time': 3.443, 'Learning time': 2.389, 'AUC PR': 0.010935}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.31760839455897183;  // std dev = 0,498, 37,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=17 */


Results
   AUC ROC   = 0.494072
   AUC PR    = 0.010935
   CLL	      = -0.224278
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.39 seconds
Total inference time: 2.503 seconds
AUC ROC: 0.494072


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 00:49:46
{'CLL': -0.224278, 'AUC ROC': 0.494072, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.503, 'Learning time': 1.39, 'AUC PR': 0.010935}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.30259337954395643;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.26163180867521296;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2192721473492705;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1787352457468729;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.14243924477676323;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.11159559999632924;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08637026299843586;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06628370899125421;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.05057564362187412;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.03843884907512935;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */


Results
   AUC ROC   = 0.630435
   AUC PR    = 0.280066
   CLL	      = -0.538332
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total learning time: 1.378 seconds
Total inference time: 3.64 seconds
AUC ROC: 0.630435


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670073
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.077 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}]]
[{'': [0.0, 0.2469135802469133]}, {'': [0.0, 0.24691358024691287]}, {'': [-4.4408920985006264e-17, 0.24691358024691334]}, {'': [4.4408920985006264e-17, 0.24691358024691293]}, {'': [-2.2204460492503132e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691348]}, {'': [-5.551115123125783e-18, 0.24691358024691382]}, {'': [0.0, 0.2469135802469139]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691348]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.27920156667845974;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.24170865544729092;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.20334742822531968;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.16674004885421964;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15164509143826277;  // std dev = 0,473, 42,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=20 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.28860939374813765;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.10183231211759976;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.2331236004710422;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.07930703497734125;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1940539715395876;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.06124930453983575;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1654899352035233;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordvenue(A, F), haswordvenue(B, F) )
%   | | then return 0.04702312774899328;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1438808097517038;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.035949983661140314;  // std dev = 0,494, 38,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.684915
   AUC PR    = 0.279431
   CLL	      = -0.419343
   Precision = 0.118932 at threshold = 0.5
   Recall    = 0.266304
   F1        = 0.16443


Total learning time: 5.409 seconds
Total inference time: 5.572 seconds
AUC ROC: 0.684915


Results scoring model
   AUC ROC   = 0.7184
   AUC PR    = 0.775015
   CLL	      = -0.545769
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.36
   F1        = 0.529412


Total scoring time: 1.151 seconds
Refined model CLL: -0.545769


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.684915
   AUC PR    = 0.279431
   CLL	      = -0.419343
   Precision = 0.118932 at threshold = 0.5
   Recall    = 0.266304
   F1        = 0.16443


Total learning time: 9.015 seconds
Total inference time: 5.572 seconds
AUC ROC: 0.684915
Total revision time: 9.015
Best scored revision CLL: -0.545769


Dataset: 7_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:50:05
{'CLL': -0.419343, 'AUC ROC': 0.684915, 'F1': 0.16443, 'Recall': 0.266304, 'parameter_25': {'CLL': -0.538332, 'AUC ROC': 0.630435, 'F1': 0.413793, 'Recall': 0.26087, 'Precision': [1.0, 0.5], 'Inference time': 3.64, 'Learning time': 1.378, 'AUC PR': 0.280066}, 'Precision': [0.118932, 0.5], 'Inference time': 5.572, 'Learning time': 9.015, 'AUC PR': 0.279431}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.39006382871653256;  // std dev = 0,499, 47,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=25 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.8037558759748266;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.29212796899808174;  // std dev = 0,500, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.6470689842059383;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.24195402721216752;  // std dev = 0,500, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.4897792517288726;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.19433446128567125;  // std dev = 0,500, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.3703611149641083;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.1524498903536749;  // std dev = 0,500, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.28883907204952763;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.11763822995705288;  // std dev = 0,500, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.23328252186781884;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.08980319140351428;  // std dev = 0,500, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1941681362587514;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.06809314789235331;  // std dev = 0,500, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1655749744057925;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.051418548323618536;  // std dev = 0,500, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then return 0.14394618099946022;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then return 0.03872995466012525;  // std dev = 0,500, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.584918
   AUC PR    = 0.013301
   CLL	      = -0.504182
   Precision = 0.005479 at threshold = 0.5
   Recall    = 0.01087
   F1        = 0.007286


Total learning time: 5.538 seconds
Total inference time: 4.901 seconds
AUC ROC: 0.584918


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 00:50:15
{'CLL': -0.504182, 'AUC ROC': 0.584918, 'F1': 0.007286, 'Recall': 0.01087, 'Precision': [0.005479, 0.5], 'Inference time': 4.901, 'Learning time': 5.538, 'AUC PR': 0.013301}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3465210281227675;  // std dev = 0,500, 43,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.594285
   AUC PR    = 0.013896
   CLL	      = -0.20915
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.967 seconds
Total inference time: 3.19 seconds
AUC ROC: 0.594285


Dataset: 7_imdb_cora, Fold: 1, Type: Scratch (RDN), Time: 00:50:21
{'CLL': -0.20915, 'AUC ROC': 0.594285, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.19, 'Learning time': 1.967, 'AUC PR': 0.013896}


Starting fold 2

Target train facts examples: 33542
Target train pos examples: 2246
Target train neg examples: 185871

Target test facts examples: 9016
Target test pos	 examples: 771
Target test neg examples: 64082

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.433204
   AUC PR    = 0.010422
   CLL	      = -0.637063
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.418 seconds
Total inference time: 5.371 seconds
AUC ROC: 0.433204


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.972 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.433204
   AUC PR    = 0.010422
   CLL	      = -0.637063
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.796 seconds
Total inference time: 5.113 seconds
AUC ROC: 0.433204


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.048 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.433204
   AUC PR    = 0.010422
   CLL	      = -0.637063
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.234 seconds
Total inference time: 5.371 seconds
AUC ROC: 0.433204
Total revision time: 5.234
Best scored revision CLL: -0.695026


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:50:38
{'CLL': -0.637063, 'AUC ROC': 0.433204, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'parameter_5': {'CLL': -0.637063, 'AUC ROC': 0.433204, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 5.371, 'Learning time': 1.418, 'AUC PR': 0.010422}, 'Inference time': 5.371, 'Learning time': 5.234, 'AUC PR': 0.010422}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011888
   CLL	      = -0.174377
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.757 seconds
Total inference time: 3.086 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 00:50:43
{'CLL': -0.174377, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.086, 'Learning time': 1.757, 'AUC PR': 0.011888}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011888
   CLL	      = -0.174377
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.011 seconds
Total inference time: 2.685 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 00:50:47
{'CLL': -0.174377, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.685, 'Learning time': 1.011, 'AUC PR': 0.011888}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 2,176, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.588235
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.409 seconds
Total inference time: 5.252 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 1.11 seconds
Parameter learned model CLL: -0.665231


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 1], 'false': [2.176, 10, 9]}]]
[{'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.249307479224377]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.24930747922437663]}, {'': [0.0, 0.24930747922437657]}, {'': [0.0, 0.24930747922437685]}, {'': [0.0, 0.2493074792243767]}, {'': [0.0, 0.2493074792243768]}, {'': [0.0, 0.2493074792243768]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.33183314562582816;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.28646280754165054;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.23893826810287416;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.19334220366104113;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.15273729662465255;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.11858202407945204;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.09098433275637943;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.06927339775071423;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.052483554573519914;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0.0396383789772704;  // std dev = 0,499, 19,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.588235
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.869 seconds
Total inference time: 5.289 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.608377
   CLL	      = -0.665231
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.1
   F1        = 0.181818


Total scoring time: 0.963 seconds
Refined model CLL: -0.665231


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.588235
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 5.351 seconds
Total inference time: 5.252 seconds
AUC ROC: 0.566796
Total revision time: 5.351
Best scored revision CLL: -0.665231


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:51:04
{'CLL': -0.588235, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 5.252, 'Learning time': 5.351, 'AUC PR': 0.151416, 'parameter_10': {'CLL': -0.588235, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 5.252, 'Learning time': 1.409, 'AUC PR': 0.151416}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011888
   CLL	      = -0.174377
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.946 seconds
Total inference time: 3.181 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 00:51:09
{'CLL': -0.174377, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.181, 'Learning time': 1.946, 'AUC PR': 0.011888}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011888
   CLL	      = -0.174377
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.154 seconds
Total inference time: 3.025 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 00:51:13
{'CLL': -0.174377, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.025, 'Learning time': 1.154, 'AUC PR': 0.011888}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.30259337954395676;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.261631808675212;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2192721473492705;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1787352457468729;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.14243924477676276;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.11159559999632997;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08637026299843599;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06628370899125427;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.050575643621874215;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.038438849075129344;  // std dev = 2,582, 27,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.539543
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.387 seconds
Total inference time: 5.408 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.671449
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.931 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.582, 15, 12]}]]
[{'': [1.4802973661668753e-16, 0.2469135802469131]}, {'': [0.0, 0.2469135802469134]}, {'': [3.700743415417188e-17, 0.24691358024691332]}, {'': [-3.700743415417188e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691382]}, {'': [0.0, 0.24691358024691357]}, {'': [0.0, 0.24691358024691337]}, {'': [0.0, 0.24691358024691382]}, {'': [-4.625929269271485e-18, 0.24691358024691362]}, {'': [-2.3129646346357427e-18, 0.24691358024691384]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2929315437951645;  // std dev = 0,496, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2534089544781908;  // std dev = 0,496, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | else return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2127153042437565;  // std dev = 0,496, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | else return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.17381475723059014;  // std dev = 0,496, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | else return 0.20613740734453975;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.13893065206832306;  // std dev = 0,496, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | else return 0.16162857548414666;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10919249335779624;  // std dev = 0,496, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | else return 0.12455597792081964;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0847751208192249;  // std dev = 0,496, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | else return 0.09492800936730683;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06525203298679284;  // std dev = 0,496, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | else return 0.0718608885005586;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.049924713013947644;  // std dev = 0,496, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | else return 0.05418307375954945;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.038039569361493865;  // std dev = 0,496, 23,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | else return 0.04076025323305622;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.533778
   AUC PR    = 0.14687
   CLL	      = -0.537767
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 3.872 seconds
Total inference time: 6.883 seconds
AUC ROC: 0.533778


Results scoring model
   AUC ROC   = 0.613333
   AUC PR    = 0.683339
   CLL	      = -0.631554
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.115 seconds
Refined model CLL: -0.631554


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.533778
   AUC PR    = 0.14687
   CLL	      = -0.537767
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 7.305 seconds
Total inference time: 6.883 seconds
AUC ROC: 0.533778
Total revision time: 7.305
Best scored revision CLL: -0.631554


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:51:34
{'CLL': -0.537767, 'AUC ROC': 0.533778, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'parameter_15': {'CLL': -0.539543, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 5.408, 'Learning time': 1.387, 'AUC PR': 0.151416}, 'Inference time': 6.883, 'Learning time': 7.305, 'AUC PR': 0.14687}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951234;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3087411357856347;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25641236875858664;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2061374073445397;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.20613740734453975;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16162857548414683;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.16162857548414666;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12455597792081982;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.12455597792081964;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0949280093673066;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.09492800936730683;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0718608885005585;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.0718608885005586;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.054183073759549435;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.05418307375954945;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04076025323305631;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.04076025323305622;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.541309
   AUC PR    = 0.012971
   CLL	      = -0.635163
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.943 seconds
Total inference time: 5.42 seconds
AUC ROC: 0.541309


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 00:51:44
{'CLL': -0.635163, 'AUC ROC': 0.541309, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 5.42, 'Learning time': 3.943, 'AUC PR': 0.012971}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35814893509951234;  // std dev = 0,500, 26,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=13 */
%   else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.541309
   AUC PR    = 0.012971
   CLL	      = -0.229418
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.653 seconds
Total inference time: 3.788 seconds
AUC ROC: 0.541309


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 00:51:49
{'CLL': -0.229418, 'AUC ROC': 0.541309, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.788, 'Learning time': 1.653, 'AUC PR': 0.012971}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.26991364098186527;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.2337836550996707;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.19697678246055098;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.16189848815690908;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.1303444240371668;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.10325226905662921;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.0808012545778974;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.06267194972365514;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.0482999690369091;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 0.037053398054008216;  // std dev = 2,870, 34,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=14 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.487914
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.384 seconds
Total inference time: 4.963 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.65
   AUC PR    = 0.727043
   CLL	      = -0.59634
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.461538


Total scoring time: 1.001 seconds
Parameter learned model CLL: -0.59634


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.45e-09, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.27e-09, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [2.87, 20, 14]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 6], 'false': [2.87, 20, 14]}]]
[{'': [-1.4802973661668753e-16, 0.2422145328719718]}, {'': [7.401486830834377e-17, 0.2422145328719724]}, {'': [-7.401486830834377e-17, 0.24221453287197275]}, {'': [7.401486830834377e-17, 0.2422145328719725]}, {'': [-3.700743415417188e-17, 0.24221453287197198]}, {'': [9.25185853854297e-18, 0.2422145328719724]}, {'': [-9.25185853854297e-18, 0.24221453287197234]}, {'': [4.625929269271485e-18, 0.2422145328719724]}, {'': [-4.625929269271485e-18, 0.24221453287197225]}, {'': [0.0, 0.2422145328719724]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2719420385477882;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.23551509653648506;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19837038789847317;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.1888683221574974;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.16295971511090174;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.15570029437174368;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.13111436725333273;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.12582628229372092;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10378863175281428;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.10008916917880559;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.08116219535881003;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.07866279780602592;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06290723914969637;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.06127260860742232;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04844831140301943;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.04741549148811439;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.037143158028550546;  // std dev = 0,493, 29,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else return 0.036517889972878734;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.599814
   AUC PR    = 0.152782
   CLL	      = -0.488399
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 4.019 seconds
Total inference time: 6.771 seconds
AUC ROC: 0.599814


Results scoring model
   AUC ROC   = 0.6525
   AUC PR    = 0.728244
   CLL	      = -0.596298
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.461538


Total scoring time: 1.137 seconds
Refined model CLL: -0.596298


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.599814
   AUC PR    = 0.152782
   CLL	      = -0.488399
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 7.541 seconds
Total inference time: 6.771 seconds
AUC ROC: 0.599814
Total revision time: 7.541
Best scored revision CLL: -0.596298


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:52:09
{'CLL': -0.488399, 'AUC ROC': 0.599814, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 6.771, 'Learning time': 7.541, 'AUC PR': 0.152782, 'parameter_20': {'CLL': -0.487914, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 4.963, 'Learning time': 1.384, 'AUC PR': 0.151416}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37243464938522663;  // std dev = 0,500, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32080740000829727;  // std dev = 0,500, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   else return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.265809913568365;  // std dev = 0,500, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   else return 0.1888683221574974;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21295056027011944;  // std dev = 0,500, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   else return 0.15570029437174368;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16632097186960948;  // std dev = 0,500, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   else return 0.12582628229372092;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12769752855389896;  // std dev = 0,500, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   else return 0.10008916917880559;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09701292123543054;  // std dev = 0,500, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   else return 0.07866279780602592;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07325156062358405;  // std dev = 0,500, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   else return 0.06127260860742232;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.055123166693421814;  // std dev = 0,500, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   else return 0.04741549148811439;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0414069002119469;  // std dev = 0,500, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   else return 0.036517889972878734;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.541309
   AUC PR    = 0.012971
   CLL	      = -0.637137
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 4.148 seconds
Total inference time: 5.419 seconds
AUC ROC: 0.541309


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 00:52:19
{'CLL': -0.637137, 'AUC ROC': 0.541309, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 5.419, 'Learning time': 4.148, 'AUC PR': 0.012971}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37243464938522663;  // std dev = 0,500, 35,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.541309
   AUC PR    = 0.012971
   CLL	      = -0.229452
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.566 seconds
Total inference time: 3.566 seconds
AUC ROC: 0.541309


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 00:52:25
{'CLL': -0.229452, 'AUC ROC': 0.541309, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.566, 'Learning time': 1.566, 'AUC PR': 0.012971}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.27675358626230306;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.2396206853161997;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.2016709747053186;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830986;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.16546837522188929;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.1329302916561602;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694894;  // std dev = 1,29e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.10505067669786712;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.08200969000439053;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.06345882477747422;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.152743858093671;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.04879579179800376;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.03735349941138274;  // std dev = 3,235, 43,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */


Results
   AUC ROC   = 0.566796
   AUC PR    = 0.151416
   CLL	      = -0.498481
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.133593
   F1        = 0.235698


Total learning time: 1.441 seconds
Total inference time: 5.403 seconds
AUC ROC: 0.566796


Results scoring model
   AUC ROC   = 0.64
   AUC PR    = 0.716017
   CLL	      = -0.603887
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.28
   F1        = 0.4375


Total scoring time: 1.12 seconds
Parameter learned model CLL: -0.603887


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.58e-08, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.29e-08, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.27e-09, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 7], 'false': [3.235, 25, 18]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 7], 'false': [3.235, 25, 18]}]]
[{'': [-2.5376526277146434e-16, 0.24337479718766852]}, {'': [6.344131569286608e-17, 0.24337479718766883]}, {'': [-6.344131569286608e-17, 0.24337479718766875]}, {'': [9.516197353929913e-17, 0.24337479718766966]}, {'': [-3.172065784643304e-17, 0.24337479718766852]}, {'': [2.3790493384824782e-17, 0.24337479718766877]}, {'': [-1.586032892321652e-17, 0.24337479718766936]}, {'': [3.96508223080413e-18, 0.24337479718766875]}, {'': [-7.93016446160826e-18, 0.24337479718766927]}, {'': [0.0, 0.2433747971876691]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.3126943896449669;  // std dev = 0,498, 33,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.27021896952830937;  // std dev = 0,498, 33,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.21909576239689313;  // std dev = 0,496, 36,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.08165239320886175;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830986;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( title(G, E), venue(G, B) )
%   | | | then return 0.7394068978913022;  // std dev = 0,093, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.2651459066478879;  // std dev = 0,056, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.04759761156755176;  // std dev = 0,789, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.272027523186849;  // std dev = 0,973, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.08337764080858408;  // std dev = 0,655, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.14433455734182046;  // std dev = 0,401, 33,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.030802001048285434;  // std dev = 0,755, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06983358039675665;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694894;  // std dev = 1,29e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.09527217356477362;  // std dev = 0,390, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | else return 0.025581387322129015;  // std dev = 0,754, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.20240496256508755;  // std dev = 0,961, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.050146824891063195;  // std dev = 0,644, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.09296389581367598;  // std dev = 0,393, 33,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return 0.02117989432891422;  // std dev = 0,752, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.013735062411051898;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( title(G, E), venue(G, B) )
%   | | | then return 0.49939293518738453;  // std dev = 0,191, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.27663948628341534;  // std dev = 0,083, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.012943254315680067;  // std dev = 0,735, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.1508257618386114;  // std dev = 0,950, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.152743858093671;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.02828426417759951;  // std dev = 0,503, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.052212096287352995;  // std dev = 0,314, 33,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=15 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then return -0.013623380200788335;  // std dev = 0,650, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.023058855369844793;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.02635901220603452;  // std dev = 0,304, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
%   | | else return -0.011144280951813385;  // std dev = 0,651, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.1168578461125126;  // std dev = 0,940, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */


Results
   AUC ROC   = 0.893319
   AUC PR    = 0.412589
   CLL	      = -0.299502
   Precision = 0.31787 at threshold = 0.5
   Recall    = 0.782101
   F1        = 0.452024


Total learning time: 24.505 seconds
Total inference time: 62.192 seconds
AUC ROC: 0.893319


Results scoring model
   AUC ROC   = 0.9952
   AUC PR    = 0.995442
   CLL	      = -0.34821
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.88
   F1        = 0.93617


Total scoring time: 1.588 seconds
Refined model CLL: -0.34821


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.893319
   AUC PR    = 0.412589
   CLL	      = -0.299502
   Precision = 0.31787 at threshold = 0.5
   Recall    = 0.782101
   F1        = 0.452024


Total learning time: 28.654 seconds
Total inference time: 62.192 seconds
AUC ROC: 0.893319
Total revision time: 28.654
Best scored revision CLL: -0.34821


Dataset: 7_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:54:02
{'CLL': -0.299502, 'AUC ROC': 0.893319, 'F1': 0.452024, 'Recall': 0.782101, 'parameter_25': {'CLL': -0.498481, 'AUC ROC': 0.566796, 'F1': 0.235698, 'Recall': 0.133593, 'Precision': [1.0, 0.5], 'Inference time': 5.403, 'Learning time': 1.441, 'AUC PR': 0.151416}, 'Precision': [0.31787, 0.5], 'Inference time': 62.192, 'Learning time': 28.654, 'AUC PR': 0.412589}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.40814893509951145;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=22 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.35088759069748027;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=22 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.28903586629606187;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=22 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then return 0.08165239320886175;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2218927795429148;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=23 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.06990902274840138;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07944711141340961;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.17949123509372705;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=22 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then return 0.059354635365447495;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.12084627181462078;  // std dev = 0,497, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else return 0.05002771289938789;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return 0.20688726024680926;  // std dev = 0,927, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03967840045987673;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.10664015742104167;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=22 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then return 0.04190386852605735;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03920870191357876;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.06648666102221863;  // std dev = 0,497, 42,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=22 */
%   | else return 0.03491396367325339;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return 0.15056563907960785;  // std dev = 0,916, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( title(F, D), venue(F, B) )
%   | | then return 0.5348310381473356;  // std dev = 0,065, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.4688897787818272;  // std dev = 0,051, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.0730321634913452;  // std dev = 0,805, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else return 0.11666148346030975;  // std dev = 0,914, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04946204634587466;  // std dev = 0,382, 43,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=23 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return -0.0069867543738877935;  // std dev = 0,786, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -0.028134436379274708;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.877837
   AUC PR    = 0.263929
   CLL	      = -0.466249
   Precision = 0.305252 at threshold = 0.5
   Recall    = 0.761349
   F1        = 0.435783


Total learning time: 32.369 seconds
Total inference time: 34.993 seconds
AUC ROC: 0.877837


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 00:55:09
{'CLL': -0.466249, 'AUC ROC': 0.877837, 'F1': 0.435783, 'Recall': 0.761349, 'Precision': [0.305252, 0.5], 'Inference time': 34.993, 'Learning time': 32.369, 'AUC PR': 0.263929}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3930326560297439;  // std dev = 0,499, 43,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=23 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.540636
   AUC PR    = 0.012962
   CLL	      = -0.230486
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.906 seconds
Total inference time: 3.946 seconds
AUC ROC: 0.540636


Dataset: 7_imdb_cora, Fold: 2, Type: Scratch (RDN), Time: 00:55:16
{'CLL': -0.230486, 'AUC ROC': 0.540636, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.946, 'Learning time': 1.906, 'AUC PR': 0.012962}


Starting fold 3

Target train facts examples: 33252
Target train pos examples: 2436
Target train neg examples: 199372

Target test facts examples: 9306
Target test pos	 examples: 581
Target test neg examples: 50581

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.414802
   AUC PR    = 0.009603
   CLL	      = -0.637413
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.212 seconds
Total inference time: 4.717 seconds
AUC ROC: 0.414802


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.069 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.414802
   AUC PR    = 0.009603
   CLL	      = -0.637413
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.718 seconds
Total inference time: 4.862 seconds
AUC ROC: 0.414802


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.065 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.414802
   AUC PR    = 0.009603
   CLL	      = -0.637413
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.064 seconds
Total inference time: 4.717 seconds
AUC ROC: 0.414802
Total revision time: 5.064
Best scored revision CLL: -0.695026


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:55:31
{'CLL': -0.637413, 'AUC ROC': 0.414802, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'parameter_5': {'CLL': -0.637413, 'AUC ROC': 0.414802, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 4.717, 'Learning time': 1.212, 'AUC PR': 0.009603}, 'Inference time': 4.717, 'Learning time': 5.064, 'AUC PR': 0.009603}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011356
   CLL	      = -0.173419
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.691 seconds
Total inference time: 2.881 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 00:55:36
{'CLL': -0.173419, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.881, 'Learning time': 1.691, 'AUC PR': 0.011356}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.011356
   CLL	      = -0.173419
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.007 seconds
Total inference time: 2.504 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 00:55:40
{'CLL': -0.173419, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.504, 'Learning time': 1.007, 'AUC PR': 0.011356}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.638266
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.304 seconds
Total inference time: 4.582 seconds
AUC ROC: 0.549237


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.109 seconds
Parameter learned model CLL: -0.685109


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}]]
[{'': [0.24913494809688577, 0.22222222222222224]}, {'': [0.24913494809688555, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222218]}, {'': [0.24913494809688566, 0.22222222222222224]}, {'': [0.24913494809688586, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222224]}, {'': [0.2491349480968859, 0.22222222222222224]}, {'': [0.24913494809688577, 0.2222222222222222]}, {'': [0.24913494809688572, 0.22222222222222218]}, {'': [0.24913494809688583, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.638266
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.012 seconds
Total inference time: 4.792 seconds
AUC ROC: 0.549237


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.096 seconds
Refined model CLL: -0.685109


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.638266
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.521000000000001 seconds
Total inference time: 4.582 seconds
AUC ROC: 0.549237
Total revision time: 5.521000000000001
Best scored revision CLL: -0.685109


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:55:56
{'CLL': -0.638266, 'AUC ROC': 0.549237, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 4.582, 'Learning time': 5.521000000000001, 'AUC PR': 0.012628, 'parameter_10': {'CLL': -0.638266, 'AUC ROC': 0.549237, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 4.582, 'Learning time': 1.304, 'AUC PR': 0.012628}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.638266
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.755 seconds
Total inference time: 4.7 seconds
AUC ROC: 0.549237


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 00:56:05
{'CLL': -0.638266, 'AUC ROC': 0.549237, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 4.7, 'Learning time': 3.755, 'AUC PR': 0.012628}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.228492
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.635 seconds
Total inference time: 3.288 seconds
AUC ROC: 0.549237


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 00:56:10
{'CLL': -0.228492, 'AUC ROC': 0.549237, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.288, 'Learning time': 1.635, 'AUC PR': 0.012628}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.46684458727342537;  // std dev = 2,341, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 0.0010060779566550668;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4000577502324245;  // std dev = 2,341, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 8.835646163369372E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32639896342793484;  // std dev = 2,341, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 7.758973011973702E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2558830155880355;  // std dev = 2,341, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 6.8129367991872E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19551101822473715;  // std dev = 2,341, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 5.981815657342761E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1474439671528358;  // std dev = 2,341, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 5.251750232105731E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11066081658002226;  // std dev = 2,341, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 4.6105298554669334E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0830182315304215;  // std dev = 2,341, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 4.0474016800403E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0623742718572355;  // std dev = 2,341, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 3.552900687252162E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046964058523006;  // std dev = 2,341, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 3.118698576379649E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.738531
   Precision = 0.012671 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.025005


Total learning time: 1.344 seconds
Total inference time: 4.865 seconds
AUC ROC: 0.549237


Results scoring model
   AUC ROC   = 0.666667
   AUC PR    = 0.605072
   CLL	      = -0.610829
   Precision = 0.608696 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.736842


Total scoring time: 1.103 seconds
Parameter learned model CLL: -0.610829


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.341, 9, 14], 'false': [0.926, 6, 1]}]]
[{'': [0.2381852551984873, 0.12244897959183677]}, {'': [0.23818525519848768, 0.12244897959183668]}, {'': [0.2381852551984875, 0.12244897959183672]}, {'': [0.23818525519848774, 0.12244897959183673]}, {'': [0.23818525519848768, 0.12244897959183672]}, {'': [0.23818525519848754, 0.12244897959183676]}, {'': [0.23818525519848785, 0.12244897959183675]}, {'': [0.23818525519848768, 0.12244897959183673]}, {'': [0.2381852551984878, 0.12244897959183675]}, {'': [0.23818525519848774, 0.12244897959183676]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.46684458727342537;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 0.0010060779566550668;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4000577502324245;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 8.835646163369372E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32639896342793484;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 7.758973011973702E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2558830155880355;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 6.8129367991872E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19551101822473715;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 5.981815657342761E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1474439671528358;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 5.251750232105731E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11066081658002226;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 4.6105298554669334E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0830182315304215;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 4.0474016800403E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0623742718572355;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 3.552900687252162E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046964058523006;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 3.118698576379649E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.738531
   Precision = 0.012671 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.025005


Total learning time: 2.368 seconds
Total inference time: 4.367 seconds
AUC ROC: 0.549237


Results scoring model
   AUC ROC   = 0.666667
   AUC PR    = 0.605072
   CLL	      = -0.610829
   Precision = 0.608696 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.736842


Total scoring time: 0.987 seconds
Refined model CLL: -0.610829


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.738531
   Precision = 0.012671 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.025005


Total learning time: 5.802 seconds
Total inference time: 4.865 seconds
AUC ROC: 0.549237
Total revision time: 5.802
Best scored revision CLL: -0.610829


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:56:26
{'CLL': -0.738531, 'AUC ROC': 0.549237, 'F1': 0.025005, 'Recall': 0.938038, 'Precision': [0.012671, 0.5], 'parameter_15': {'CLL': -0.738531, 'AUC ROC': 0.549237, 'F1': 0.025005, 'Recall': 0.938038, 'Precision': [0.012671, 0.5], 'Inference time': 4.865, 'Learning time': 1.344, 'AUC PR': 0.012628}, 'Inference time': 4.865, 'Learning time': 5.802, 'AUC PR': 0.012628}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.46684458727342537;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 0.0010060779566550668;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4000577502324245;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 8.835646163369372E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32639896342793484;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 7.758973011973702E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2558830155880355;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 6.8129367991872E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19551101822473715;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 5.981815657342761E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1474439671528358;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 5.251750232105731E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11066081658002226;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 4.6105298554669334E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0830182315304215;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 4.0474016800403E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0623742718572355;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 3.552900687252162E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046964058523006;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 3.118698576379649E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.738531
   Precision = 0.012671 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.025005


Total learning time: 3.925 seconds
Total inference time: 4.231 seconds
AUC ROC: 0.549237


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 00:56:34
{'CLL': -0.738531, 'AUC ROC': 0.549237, 'F1': 0.025005, 'Recall': 0.938038, 'Precision': [0.012671, 0.5], 'Inference time': 4.231, 'Learning time': 3.925, 'AUC PR': 0.012628}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.46684458727342537;  // std dev = 0,488, 23,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   else return 0.0010060779566550668;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.236581
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.708 seconds
Total inference time: 3.157 seconds
AUC ROC: 0.549237


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 00:56:39
{'CLL': -0.236581, 'AUC ROC': 0.549237, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.157, 'Learning time': 1.708, 'AUC PR': 0.012628}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.433906510857088;  // std dev = 2,839, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 0.0010060779566550668;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37250584045331747;  // std dev = 2,839, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 8.835646163369372E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3055535432051139;  // std dev = 2,839, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 7.758973011973702E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2412870368932542;  // std dev = 2,839, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 6.8129367991872E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18562311834768108;  // std dev = 2,839, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 5.981815657342761E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1406701393260527;  // std dev = 2,839, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 5.251750232105731E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1058346712608204;  // std dev = 2,839, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 4.6105298554669334E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07941229558164559;  // std dev = 2,839, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 4.0474016800403E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05956495130631857;  // std dev = 2,839, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 3.552900687252162E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.044708053553222556;  // std dev = 2,839, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 3.118698576379649E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.680752
   Precision = 0.012671 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.025005


Total learning time: 1.343 seconds
Total inference time: 4.608 seconds
AUC ROC: 0.549237


Results scoring model
   AUC ROC   = 0.625
   AUC PR    = 0.573864
   CLL	      = -0.635994
   Precision = 0.575758 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.716981


Total scoring time: 1.098 seconds
Parameter learned model CLL: -0.635994


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.839, 14, 19], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.839, 14, 19], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.839, 14, 19], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.839, 14, 19], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.839, 14, 19], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.839, 14, 19], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.839, 14, 19], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.839, 14, 19], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.839, 14, 19], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.839, 14, 19], 'false': [0.926, 6, 1]}]]
[{'': [0.2442607897153348, 0.12244897959183677]}, {'': [0.2442607897153347, 0.12244897959183668]}, {'': [0.24426078971533496, 0.12244897959183672]}, {'': [0.24426078971533505, 0.12244897959183673]}, {'': [0.24426078971533527, 0.12244897959183672]}, {'': [0.24426078971533505, 0.12244897959183676]}, {'': [0.24426078971533505, 0.12244897959183675]}, {'': [0.2442607897153352, 0.12244897959183673]}, {'': [0.2442607897153352, 0.12244897959183675]}, {'': [0.24426078971533532, 0.12244897959183676]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.433906510857088;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 0.0010060779566550668;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37250584045331747;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 8.835646163369372E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3055535432051139;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 7.758973011973702E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2412870368932542;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 6.8129367991872E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18562311834768108;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 5.981815657342761E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1406701393260527;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 5.251750232105731E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1058346712608204;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 4.6105298554669334E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07941229558164559;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 4.0474016800403E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05956495130631857;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 3.552900687252162E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.044708053553222556;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 3.118698576379649E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.680752
   Precision = 0.012671 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.025005


Total learning time: 2.35 seconds
Total inference time: 4.821 seconds
AUC ROC: 0.549237


Results scoring model
   AUC ROC   = 0.625
   AUC PR    = 0.573864
   CLL	      = -0.635994
   Precision = 0.575758 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.716981


Total scoring time: 0.951 seconds
Refined model CLL: -0.635994


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.680752
   Precision = 0.012671 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.025005


Total learning time: 5.742 seconds
Total inference time: 4.608 seconds
AUC ROC: 0.549237
Total revision time: 5.742
Best scored revision CLL: -0.635994


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:56:55
{'CLL': -0.680752, 'AUC ROC': 0.549237, 'F1': 0.025005, 'Recall': 0.938038, 'Precision': [0.012671, 0.5], 'Inference time': 4.608, 'Learning time': 5.742, 'AUC PR': 0.012628, 'parameter_20': {'CLL': -0.680752, 'AUC ROC': 0.549237, 'F1': 0.025005, 'Recall': 0.938038, 'Precision': [0.012671, 0.5], 'Inference time': 4.608, 'Learning time': 1.343, 'AUC PR': 0.012628}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.433906510857088;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 0.0010060779566550668;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37250584045331747;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 8.835646163369372E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3055535432051139;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 7.758973011973702E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2412870368932542;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 6.8129367991872E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18562311834768108;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 5.981815657342761E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1406701393260527;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 5.251750232105731E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1058346712608204;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 4.6105298554669334E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07941229558164559;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 4.0474016800403E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05956495130631857;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 3.552900687252162E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.044708053553222556;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 3.118698576379649E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.680752
   Precision = 0.012671 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.025005


Total learning time: 4.324 seconds
Total inference time: 4.891 seconds
AUC ROC: 0.549237


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 00:57:05
{'CLL': -0.680752, 'AUC ROC': 0.549237, 'F1': 0.025005, 'Recall': 0.938038, 'Precision': [0.012671, 0.5], 'Inference time': 4.891, 'Learning time': 4.324, 'AUC PR': 0.012628}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.433906510857088;  // std dev = 0,494, 33,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else return 0.0010060779566550668;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.23123
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.868 seconds
Total inference time: 2.962 seconds
AUC ROC: 0.549237


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 00:57:10
{'CLL': -0.23123, 'AUC ROC': 0.549237, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.962, 'Learning time': 1.868, 'AUC PR': 0.012628}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4162884699832323;  // std dev = 3,256, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 0.0010060779566550668;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35772596168021464;  // std dev = 3,256, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 8.835646163369372E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2942764095376131;  // std dev = 3,256, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 7.758973011973702E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23331975848439032;  // std dev = 3,256, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 6.8129367991872E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18022029459568398;  // std dev = 3,256, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 5.981815657342761E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13701751937726117;  // std dev = 3,256, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 5.251750232105731E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10330398962543011;  // std dev = 3,256, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 4.6105298554669334E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07759161135371906;  // std dev = 3,256, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 4.0474016800403E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05820353122398537;  // std dev = 3,256, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 3.552900687252162E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043656700872384706;  // std dev = 3,256, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 3.118698576379649E-4;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.651198
   Precision = 0.012671 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.025005


Total learning time: 1.438 seconds
Total inference time: 4.88 seconds
AUC ROC: 0.549237


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.556977
   CLL	      = -0.649552
   Precision = 0.55814 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.705882


Total scoring time: 1.105 seconds
Parameter learned model CLL: -0.649552


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.256, 19, 24], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.256, 19, 24], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.256, 19, 24], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.256, 19, 24], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.256, 19, 24], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.256, 19, 24], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.256, 19, 24], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.256, 19, 24], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.256, 19, 24], 'false': [0.926, 6, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [3.256, 19, 24], 'false': [0.926, 6, 1]}]]
[{'': [0.24661979448350585, 0.12244897959183677]}, {'': [0.24661979448350405, 0.12244897959183668]}, {'': [0.24661979448350438, 0.12244897959183672]}, {'': [0.2466197944835045, 0.12244897959183673]}, {'': [0.24661979448350482, 0.12244897959183672]}, {'': [0.24661979448350463, 0.12244897959183676]}, {'': [0.2466197944835048, 0.12244897959183675]}, {'': [0.24661979448350457, 0.12244897959183673]}, {'': [0.24661979448350455, 0.12244897959183675]}, {'': [0.24661979448350455, 0.12244897959183676]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4162884699832323;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 0.0010060779566550668;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35772596168021464;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 8.835646163369372E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2942764095376131;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 7.758973011973702E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23331975848439032;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 6.8129367991872E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18022029459568398;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 5.981815657342761E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13701751937726117;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 5.251750232105731E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10330398962543011;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 4.6105298554669334E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07759161135371906;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 4.0474016800403E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05820353122398537;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 3.552900687252162E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043656700872384706;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 3.118698576379649E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.651198
   Precision = 0.012671 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.025005


Total learning time: 2.375 seconds
Total inference time: 4.319 seconds
AUC ROC: 0.549237


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.556977
   CLL	      = -0.649552
   Precision = 0.55814 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.705882


Total scoring time: 1.249 seconds
Refined model CLL: -0.649552


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.651198
   Precision = 0.012671 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.025005


Total learning time: 6.167 seconds
Total inference time: 4.88 seconds
AUC ROC: 0.549237
Total revision time: 6.167
Best scored revision CLL: -0.649552


Dataset: 7_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:57:26
{'CLL': -0.651198, 'AUC ROC': 0.549237, 'F1': 0.025005, 'Recall': 0.938038, 'parameter_25': {'CLL': -0.651198, 'AUC ROC': 0.549237, 'F1': 0.025005, 'Recall': 0.938038, 'Precision': [0.012671, 0.5], 'Inference time': 4.88, 'Learning time': 1.438, 'AUC PR': 0.012628}, 'Precision': [0.012671, 0.5], 'Inference time': 4.88, 'Learning time': 6.167, 'AUC PR': 0.012628}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4162884699832323;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 0.0010060779566550668;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.35772596168021464;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 8.835646163369372E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2942764095376131;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 7.758973011973702E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23331975848439032;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 6.8129367991872E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18022029459568398;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 5.981815657342761E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13701751937726117;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 5.251750232105731E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10330398962543011;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 4.6105298554669334E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07759161135371906;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 4.0474016800403E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05820353122398537;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 3.552900687252162E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043656700872384706;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 3.118698576379649E-4;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.651198
   Precision = 0.012671 at threshold = 0.5
   Recall    = 0.938038
   F1        = 0.025005


Total learning time: 5.034 seconds
Total inference time: 4.625 seconds
AUC ROC: 0.549237


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 00:57:36
{'CLL': -0.651198, 'AUC ROC': 0.549237, 'F1': 0.025005, 'Recall': 0.938038, 'Precision': [0.012671, 0.5], 'Inference time': 4.625, 'Learning time': 5.034, 'AUC PR': 0.012628}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.4162884699832323;  // std dev = 0,497, 43,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=24 */
%   else return 0.0010060779566550668;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */


Results
   AUC ROC   = 0.549237
   AUC PR    = 0.012628
   CLL	      = -0.228428
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.799 seconds
Total inference time: 3.034 seconds
AUC ROC: 0.549237


Dataset: 7_imdb_cora, Fold: 3, Type: Scratch (RDN), Time: 00:57:41
{'CLL': -0.228428, 'AUC ROC': 0.549237, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.034, 'Learning time': 1.799, 'AUC PR': 0.012628}


Starting fold 4

Target train facts examples: 34429
Target train pos examples: 2270
Target train neg examples: 182149

Target test facts examples: 8129
Target test pos	 examples: 747
Target test neg examples: 67804

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.423025
   AUC PR    = 0.009363
   CLL	      = -0.637048
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.312 seconds
Total inference time: 5.629 seconds
AUC ROC: 0.423025


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.099 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.423025
   AUC PR    = 0.009363
   CLL	      = -0.637048
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.944 seconds
Total inference time: 5.551 seconds
AUC ROC: 0.423025


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 0.991 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.423025
   AUC PR    = 0.009363
   CLL	      = -0.637048
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.346 seconds
Total inference time: 5.629 seconds
AUC ROC: 0.423025
Total revision time: 5.346
Best scored revision CLL: -0.695026


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:57:59
{'CLL': -0.637048, 'AUC ROC': 0.423025, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'parameter_5': {'CLL': -0.637048, 'AUC ROC': 0.423025, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 5.629, 'Learning time': 1.312, 'AUC PR': 0.009363}, 'Inference time': 5.629, 'Learning time': 5.346, 'AUC PR': 0.009363}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.010897
   CLL	      = -0.172592
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.749 seconds
Total inference time: 3.392 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 00:58:04
{'CLL': -0.172592, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.392, 'Learning time': 1.749, 'AUC PR': 0.010897}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.010897
   CLL	      = -0.172592
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.135 seconds
Total inference time: 3.16 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 00:58:09
{'CLL': -0.172592, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.16, 'Learning time': 1.135, 'AUC PR': 0.010897}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.656573
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.319 seconds
Total inference time: 5.688 seconds
AUC ROC: 0.532398


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.069 seconds
Parameter learned model CLL: -0.685109


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.058, 8, 9], 'false': [0.816, 2, 1]}]]
[{'': [0.24913494809688577, 0.22222222222222224]}, {'': [0.24913494809688555, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222218]}, {'': [0.24913494809688566, 0.22222222222222224]}, {'': [0.24913494809688586, 0.2222222222222222]}, {'': [0.24913494809688586, 0.22222222222222224]}, {'': [0.2491349480968859, 0.22222222222222224]}, {'': [0.24913494809688577, 0.2222222222222222]}, {'': [0.24913494809688572, 0.22222222222222218]}, {'': [0.24913494809688583, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.656573
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.986 seconds
Total inference time: 5.776 seconds
AUC ROC: 0.532398


Results scoring model
   AUC ROC   = 0.55
   AUC PR    = 0.527941
   CLL	      = -0.685109
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.09 seconds
Refined model CLL: -0.685109


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.656573
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.4639999999999995 seconds
Total inference time: 5.688 seconds
AUC ROC: 0.532398
Total revision time: 5.4639999999999995
Best scored revision CLL: -0.685109


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:58:27
{'CLL': -0.656573, 'AUC ROC': 0.532398, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 5.688, 'Learning time': 5.4639999999999995, 'AUC PR': 0.011659, 'parameter_10': {'CLL': -0.656573, 'AUC ROC': 0.532398, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 5.688, 'Learning time': 1.319, 'AUC PR': 0.011659}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3335621649521725;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2756931975053717;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22006690870309975;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1711960835655672;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13096016067527044;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09919352208121096;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07472887841652442;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05614584081272424;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04213215515674406;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.656573
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.517 seconds
Total inference time: 5.574 seconds
AUC ROC: 0.532398


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 00:58:36
{'CLL': -0.656573, 'AUC ROC': 0.532398, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 5.574, 'Learning time': 3.517, 'AUC PR': 0.011659}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3875606998053947;  // std dev = 0,499, 17,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.229835
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.441 seconds
Total inference time: 3.631 seconds
AUC ROC: 0.532398


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 00:58:42
{'CLL': -0.229835, 'AUC ROC': 0.532398, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.631, 'Learning time': 1.441, 'AUC PR': 0.011659}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37666745361803083;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32437884151130014;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2685825285923573;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21495192589405884;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16769453154858402;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1286166480029106;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09762538532838719;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07366394600228472;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05540606060826155;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04160526031693688;  // std dev = 2,596, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.638407
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.436 seconds
Total inference time: 5.279 seconds
AUC ROC: 0.532398


Results scoring model
   AUC ROC   = 0.533333
   AUC PR    = 0.517901
   CLL	      = -0.688774
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.035 seconds
Parameter learned model CLL: -0.688774


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.596, 13, 14], 'false': [0.816, 2, 1]}]]
[{'': [0.24965706447187883, 0.22222222222222224]}, {'': [0.24965706447187902, 0.2222222222222222]}, {'': [0.24965706447187944, 0.22222222222222218]}, {'': [0.24965706447187924, 0.22222222222222224]}, {'': [0.24965706447187955, 0.2222222222222222]}, {'': [0.24965706447187944, 0.22222222222222224]}, {'': [0.24965706447187916, 0.22222222222222224]}, {'': [0.2496570644718794, 0.2222222222222222]}, {'': [0.2496570644718793, 0.22222222222222218]}, {'': [0.24965706447187927, 0.2222222222222222]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37666745361803083;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32437884151130014;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2685825285923573;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21495192589405884;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16769453154858402;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1286166480029106;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09762538532838719;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07366394600228472;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05540606060826155;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04160526031693688;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.638407
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.178 seconds
Total inference time: 5.64 seconds
AUC ROC: 0.532398


Results scoring model
   AUC ROC   = 0.533333
   AUC PR    = 0.517901
   CLL	      = -0.688774
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.083 seconds
Refined model CLL: -0.688774


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.638407
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.732 seconds
Total inference time: 5.279 seconds
AUC ROC: 0.532398
Total revision time: 5.732
Best scored revision CLL: -0.688774


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:58:59
{'CLL': -0.638407, 'AUC ROC': 0.532398, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'parameter_15': {'CLL': -0.638407, 'AUC ROC': 0.532398, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 5.279, 'Learning time': 1.436, 'AUC PR': 0.011659}, 'Inference time': 5.279, 'Learning time': 5.732, 'AUC PR': 0.011659}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37666745361803083;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.32437884151130014;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2685825285923573;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21495192589405884;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16769453154858402;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1286166480029106;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09762538532838719;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07366394600228472;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05540606060826155;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04160526031693688;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.638407
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.75 seconds
Total inference time: 5.708 seconds
AUC ROC: 0.532398


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 00:59:09
{'CLL': -0.638407, 'AUC ROC': 0.532398, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 5.708, 'Learning time': 3.75, 'AUC PR': 0.011659}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.37666745361803083;  // std dev = 0,500, 27,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.228041
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.602 seconds
Total inference time: 3.813 seconds
AUC ROC: 0.532398


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 00:59:14
{'CLL': -0.228041, 'AUC ROC': 0.532398, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.813, 'Learning time': 1.602, 'AUC PR': 0.011659}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41697246451127695;  // std dev = 2,895, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3583003250108236;  // std dev = 2,895, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.02176788419240575;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29471590880166004;  // std dev = 2,895, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.01904987294481035;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23363128206423614;  // std dev = 2,895, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.01663677639228948;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18043177542736205;  // std dev = 2,895, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.014502864105143046;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1371600215023839;  // std dev = 2,895, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.01262239661487466;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10340190180828672;  // std dev = 2,895, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.010970321301480393;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07766118912062178;  // std dev = 2,895, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.009522764707203951;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05825481259536227;  // std dev = 2,895, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.00825735549633603;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043695727742500565;  // std dev = 2,895, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.007153411981729964;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.68813
   Precision = 0.011674 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.023069


Total learning time: 1.344 seconds
Total inference time: 5.654 seconds
AUC ROC: 0.532398


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.557353
   CLL	      = -0.652723
   Precision = 0.558824 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.703704


Total scoring time: 1.044 seconds
Parameter learned model CLL: -0.652723


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)'}, {'true': [2.895, 15, 19], 'false': [0.913, 5, 1]}]]
[{'': [0.24653979238754284, 0.13888888888888892]}, {'': [0.24653979238754278, 0.13888888888888887]}, {'': [0.24653979238754384, 0.13888888888888892]}, {'': [0.2465397923875433, 0.13888888888888887]}, {'': [0.2465397923875436, 0.1388888888888889]}, {'': [0.24653979238754348, 0.13888888888888892]}, {'': [0.2465397923875432, 0.1388888888888889]}, {'': [0.2465397923875432, 0.13888888888888892]}, {'': [0.24653979238754342, 0.13888888888888892]}, {'': [0.2465397923875432, 0.1388888888888889]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.41697246451127695;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3583003250108236;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.02176788419240575;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.29471590880166004;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.01904987294481035;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.23363128206423614;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.01663677639228948;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18043177542736205;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.014502864105143046;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1371600215023839;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.01262239661487466;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10340190180828672;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.010970321301480393;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07766118912062178;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.009522764707203951;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05825481259536227;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.00825735549633603;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.043695727742500565;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   else return 0.007153411981729964;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */


Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.68813
   Precision = 0.011674 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.023069


Total learning time: 2.157 seconds
Total inference time: 5.609 seconds
AUC ROC: 0.532398


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.557353
   CLL	      = -0.652723
   Precision = 0.558824 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.703704


Total scoring time: 0.942 seconds
Refined model CLL: -0.652723


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.532398
   AUC PR    = 0.011659
   CLL	      = -0.68813
   Precision = 0.011674 at threshold = 0.5
   Recall    = 0.962517
   F1        = 0.023069


Total learning time: 5.487 seconds
Total inference time: 5.654 seconds
AUC ROC: 0.532398
Total revision time: 5.487
Best scored revision CLL: -0.652723


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:59:32
{'CLL': -0.68813, 'AUC ROC': 0.532398, 'F1': 0.023069, 'Recall': 0.962517, 'Precision': [0.011674, 0.5], 'Inference time': 5.654, 'Learning time': 5.487, 'AUC PR': 0.011659, 'parameter_20': {'CLL': -0.68813, 'AUC ROC': 0.532398, 'F1': 0.023069, 'Recall': 0.962517, 'Precision': [0.011674, 0.5], 'Inference time': 5.654, 'Learning time': 1.344, 'AUC PR': 0.011659}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.41697246451127695;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.3583003250108236;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.29471590880166004;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.23363128206423614;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.18043177542736205;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.1371600215023839;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.10340190180828672;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | else return 0.06479591611329232;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.07766118912062178;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.05825481259536227;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | else return 0.04126932998424626;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.043695727742500565;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | else return 0.032663748734830134;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.507259
   AUC PR    = 0.011068
   CLL	      = -0.693759
   Precision = 0.01108 at threshold = 0.5
   Recall    = 0.904953
   F1        = 0.021892


Total learning time: 24.74 seconds
Total inference time: 12.764 seconds
AUC ROC: 0.507259


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 01:00:10
{'CLL': -0.693759, 'AUC ROC': 0.507259, 'F1': 0.021892, 'Recall': 0.904953, 'Precision': [0.01108, 0.5], 'Inference time': 12.764, 'Learning time': 24.74, 'AUC PR': 0.011068}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.41697246451127695;  // std dev = 0,497, 34,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=19 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.507259
   AUC PR    = 0.011068
   CLL	      = -0.232826
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3.743 seconds
Total inference time: 4.979 seconds
AUC ROC: 0.507259


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 01:00:19
{'CLL': -0.232826, 'AUC ROC': 0.507259, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 4.979, 'Learning time': 3.743, 'AUC PR': 0.011068}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.31467067422994655;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.2718979338779211;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.22742727023532366;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.18481967858369794;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.14674952708917505;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.11453090292473048;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.08831182757523444;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.06753946269031201;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.05137193645873037;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.03893324925844389;  // std dev = 3,378, 46,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=21 */


Results
   AUC ROC   = 0.576975
   AUC PR    = 0.170861
   CLL	      = -0.559007
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.153949
   F1        = 0.266821


Total learning time: 1.477 seconds
Total inference time: 5.705 seconds
AUC ROC: 0.576975


Results scoring model
   AUC ROC   = 0.58
   AUC PR    = 0.644703
   CLL	      = -0.645987
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.16
   F1        = 0.275862


Total scoring time: 0.998 seconds
Parameter learned model CLL: -0.645987


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 4], 'false': [3.378, 25, 21]}]]
[{'': [0.0, 0.2481096408317579]}, {'': [0.0, 0.2481096408317583]}, {'': [0.0, 0.24810964083175807]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.24810964083175846]}, {'': [0.0, 0.24810964083175827]}, {'': [0.0, 0.24810964083175777]}, {'': [0.0, 0.2481096408317585]}, {'': [0.0, 0.248109640831758]}, {'': [0.0, 0.24810964083175827]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7194734122109542;  // std dev = 7,30e-08, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.12986970623773963;  // std dev = 0,091, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.4792710802073998;  // std dev = 0,741, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.1159302050461362;  // std dev = 0,083, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.3967087346871993;  // std dev = 0,716, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4175135841583098;  // std dev = 5,58e-08, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.1082613164169943;  // std dev = 0,152, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.33922548496091914;  // std dev = 0,635, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3207118471601496;  // std dev = 2,58e-08, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09835000978379889;  // std dev = 0,141, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.265081486514787;  // std dev = 0,612, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.25517224256948945;  // std dev = 1,49e-08, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.0932314685516674;  // std dev = 0,197, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.22632474316976117;  // std dev = 0,545, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.20975771563253562;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08579948748323944;  // std dev = 0,186, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.17586920335577017;  // std dev = 0,534, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.17709649774527744;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.0815588923447759;  // std dev = 0,219, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.15160249323016664;  // std dev = 0,493, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.1527438580936708;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.07589920540036346;  // std dev = 0,209, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.11975245281495867;  // std dev = 0,488, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.13400703000801117;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.07270771811653748;  // std dev = 0,236, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.10729608795488876;  // std dev = 0,456, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.977953
   AUC PR    = 0.374884
   CLL	      = -0.10803
   Precision = 0.26454 at threshold = 0.5
   Recall    = 0.943775
   F1        = 0.413247


Total learning time: 107.092 seconds
Total inference time: 258.677 seconds
AUC ROC: 0.977953


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.11189
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.242 seconds
Refined model CLL: -0.11189


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.977953
   AUC PR    = 0.374884
   CLL	      = -0.10803
   Precision = 0.26454 at threshold = 0.5
   Recall    = 0.943775
   F1        = 0.413247


Total learning time: 111.809 seconds
Total inference time: 258.677 seconds
AUC ROC: 0.977953
Total revision time: 111.809
Best scored revision CLL: -0.11189


Dataset: 7_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 01:06:36
{'CLL': -0.10803, 'AUC ROC': 0.977953, 'F1': 0.413247, 'Recall': 0.943775, 'parameter_25': {'CLL': -0.559007, 'AUC ROC': 0.576975, 'F1': 0.266821, 'Recall': 0.153949, 'Precision': [1.0, 0.5], 'Inference time': 5.705, 'Learning time': 1.477, 'AUC PR': 0.170861}, 'Precision': [0.26454, 0.5], 'Inference time': 258.677, 'Learning time': 111.809, 'AUC PR': 0.374884}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.8581489350995121;  // std dev = 5,96e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.7194734122109542;  // std dev = 7,30e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.13033550283872367;  // std dev = 0,090, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0.4792710802073998;  // std dev = 0,741, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( title(F, D), haswordvenue(B, C) )
%   | | | then return 0.5553664367462846;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.6060453312934738;  // std dev = 0,227, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12344542834719936;  // std dev = 0,130, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.3967087346871993;  // std dev = 0,716, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( title(F, D), haswordvenue(B, C) )
%   | | | then return 0.4175135841583098;  // std dev = 5,58e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.4637157003251378;  // std dev = 0,261, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11450047674592763;  // std dev = 0,038, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.3396159848532709;  // std dev = 0,634, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( title(F, D), haswordvenue(B, C) )
%   | | | then return 0.3207118471601496;  // std dev = 2,11e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.35838459041307164;  // std dev = 0,261, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1035412836649294;  // std dev = 0,035, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.265470053687401;  // std dev = 0,611, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( title(F, D) )
%   | | | then return 0.26823992801820434;  // std dev = 0,242, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.23045071645101523;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09763648528221694;  // std dev = 0,045, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.22684549091967568;  // std dev = 0,543, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( title(F, D), haswordvenue(B, C) )
%   | | | then return 0.2075998388107577;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.24105310642203678;  // std dev = 0,219, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08954763431571776;  // std dev = 0,043, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.17636014882829634;  // std dev = 0,532, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( title(F, D) )
%   | | | then return 0.18620143856362248;  // std dev = 0,198, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.15745706661970849;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08481749866918485;  // std dev = 0,049, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.15228741829963;  // std dev = 0,490, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( title(F, D), haswordvenue(B, C) )
%   | | | then return 0.15017164923019008;  // std dev = 1,29e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.17731884443282317;  // std dev = 0,177, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07871219955856101;  // std dev = 0,047, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.12030748304489135;  // std dev = 0,485, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( title(F, D), haswordvenue(B, C) )
%   | | | then return 0.13199572890317166;  // std dev = 1,29e-08, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.153865523855775;  // std dev = 0,161, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07519527021954911;  // std dev = 0,052, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.10800791959402632;  // std dev = 0,453, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.976689
   AUC PR    = 0.424989
   CLL	      = -0.100999
   Precision = 0.263158 at threshold = 0.5
   Recall    = 0.937082
   F1        = 0.410919


Total learning time: 254.341 seconds
Total inference time: 415.845 seconds
AUC ROC: 0.976689


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 01:17:47
{'CLL': -0.100999, 'AUC ROC': 0.976689, 'F1': 0.410919, 'Recall': 0.937082, 'Precision': [0.263158, 0.5], 'Inference time': 415.845, 'Learning time': 254.341, 'AUC PR': 0.424989}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.8581489350995121;  // std dev = 5,96e-08, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.958352
   AUC PR    = 0.422863
   CLL	      = -0.152934
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 12.944 seconds
Total inference time: 31.804 seconds
AUC ROC: 0.958352


Dataset: 7_imdb_cora, Fold: 4, Type: Scratch (RDN), Time: 01:18:32
{'CLL': -0.152934, 'AUC ROC': 0.958352, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 31.804, 'Learning time': 12.944, 'AUC PR': 0.422863}


Starting fold 5

Target train facts examples: 33914
Target train pos examples: 2467
Target train neg examples: 214413

Target test facts examples: 8644
Target test pos	 examples: 550
Target test neg examples: 35540

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.425455
   AUC PR    = 0.013164
   CLL	      = -0.638292
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.449 seconds
Total inference time: 3.68 seconds
AUC ROC: 0.425455


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.038 seconds
Parameter learned model CLL: -0.695026


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 0], 'false': [1.581, 5, 5]}]]
[{'': [nan, 0.24999999999999983]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.24999999999999992]}, {'': [nan, 0.24999999999999994]}, {'': [nan, 0.24999999999999986]}, {'': [nan, 0.25]}, {'': [nan, 0.25000000000000006]}, {'': [nan, 0.25]}, {'': [nan, 0.24999999999999994]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.3581489350995123;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.30874113578563506;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.2564123687585864;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.20613740734453975;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.16162857548414675;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.1245559779208197;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.09492800936730683;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.07186088850055855;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.05418307375954949;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0.04076025323305626;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.425455
   AUC PR    = 0.013164
   CLL	      = -0.638292
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.942 seconds
Total inference time: 4.047 seconds
AUC ROC: 0.425455


Results scoring model
   AUC ROC   = 0.5
   AUC PR    = 0.5
   CLL	      = -0.695026
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 1.048 seconds
Refined model CLL: -0.695026


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.425455
   AUC PR    = 0.013164
   CLL	      = -0.638292
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 5.477 seconds
Total inference time: 3.68 seconds
AUC ROC: 0.425455
Total revision time: 5.477
Best scored revision CLL: -0.695026


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:18:46
{'CLL': -0.638292, 'AUC ROC': 0.425455, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'parameter_5': {'CLL': -0.638292, 'AUC ROC': 0.425455, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.68, 'Learning time': 1.449, 'AUC PR': 0.013164}, 'Inference time': 3.68, 'Learning time': 5.477, 'AUC PR': 0.013164}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.01524
   CLL	      = -0.180409
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.817 seconds
Total inference time: 2.394 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 01:18:51
{'CLL': -0.180409, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.394, 'Learning time': 1.817, 'AUC PR': 0.01524}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.01524
   CLL	      = -0.180409
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.096 seconds
Total inference time: 2.098 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 01:18:54
{'CLL': -0.180409, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.098, 'Learning time': 1.096, 'AUC PR': 0.01524}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.26991364098186527;  // std dev = 2,029, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2337836550996701;  // std dev = 2,029, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.19697678246055136;  // std dev = 2,029, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.16189848815690908;  // std dev = 2,029, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1303444240371668;  // std dev = 2,029, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.10325226905662939;  // std dev = 2,029, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08080125457789766;  // std dev = 2,029, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06267194972365497;  // std dev = 2,029, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04829996903690906;  // std dev = 2,029, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.0370533980540081;  // std dev = 2,029, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.488937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.295 seconds
Total inference time: 3.874 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.65
   AUC PR    = 0.72976
   CLL	      = -0.59634
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.461538


Total scoring time: 0.928 seconds
Parameter learned model CLL: -0.59634


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.11e-08, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.05e-08, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 3], 'false': [2.029, 10, 7]}]]
[{'': [1.4802973661668753e-16, 0.24221453287197234]}, {'': [0.0, 0.2422145328719722]}, {'': [3.700743415417188e-17, 0.2422145328719721]}, {'': [-3.700743415417188e-17, 0.2422145328719721]}, {'': [0.0, 0.2422145328719724]}, {'': [0.0, 0.24221453287197225]}, {'': [0.0, 0.24221453287197228]}, {'': [0.0, 0.24221453287197228]}, {'': [-4.625929269271485e-18, 0.2422145328719724]}, {'': [-2.3129646346357427e-18, 0.24221453287197245]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.26991364098186527;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.2337836550996701;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.19697678246055136;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.16189848815690908;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.1303444240371668;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.10325226905662939;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.08080125457789766;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.06267194972365497;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04829996903690906;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.0370533980540081;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.488937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.969 seconds
Total inference time: 3.898 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.65
   AUC PR    = 0.72976
   CLL	      = -0.59634
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.3
   F1        = 0.461538


Total scoring time: 1.04 seconds
Refined model CLL: -0.59634


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.488937
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 5.232 seconds
Total inference time: 3.874 seconds
AUC ROC: 0.574545
Total revision time: 5.232
Best scored revision CLL: -0.59634


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:19:08
{'CLL': -0.488937, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'Inference time': 3.874, 'Learning time': 5.232, 'AUC PR': 0.171923, 'parameter_10': {'CLL': -0.488937, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'Inference time': 3.874, 'Learning time': 1.295, 'AUC PR': 0.171923}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.01524
   CLL	      = -0.180409
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.874 seconds
Total inference time: 2.504 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 01:19:12
{'CLL': -0.180409, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.504, 'Learning time': 1.874, 'AUC PR': 0.01524}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 20,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.01524
   CLL	      = -0.180409
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.193 seconds
Total inference time: 2.172 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 01:19:16
{'CLL': -0.180409, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.172, 'Learning time': 1.193, 'AUC PR': 0.01524}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2581489350995123;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.22373365448410582;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1888683221574971;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.15570029437174387;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1258262822937211;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1000891691788054;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.07866279780602582;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06127260860742249;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.04741549148811444;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.036517889972878886;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.471195
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.413 seconds
Total inference time: 3.88 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.666667
   AUC PR    = 0.744924
   CLL	      = -0.583386
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.5


Total scoring time: 1.061 seconds
Parameter learned model CLL: -0.583386


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.449, 15, 10]}]]
[{'': [0.0, 0.24000000000000005]}, {'': [0.0, 0.24000000000000024]}, {'': [-4.4408920985006264e-17, 0.24000000000000005]}, {'': [4.4408920985006264e-17, 0.24000000000000013]}, {'': [-2.2204460492503132e-17, 0.23999999999999982]}, {'': [0.0, 0.2399999999999998]}, {'': [-5.551115123125783e-18, 0.23999999999999996]}, {'': [0.0, 0.23999999999999988]}, {'': [0.0, 0.23999999999999988]}, {'': [0.0, 0.24]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2581489350995123;  // std dev = 0,490, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.22373365448410582;  // std dev = 0,490, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1888683221574971;  // std dev = 0,490, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.15570029437174387;  // std dev = 0,490, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1258262822937211;  // std dev = 0,490, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1000891691788054;  // std dev = 0,490, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.07866279780602582;  // std dev = 0,490, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06127260860742249;  // std dev = 0,490, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.04741549148811444;  // std dev = 0,490, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.036517889972878886;  // std dev = 0,490, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.471195
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 2.032 seconds
Total inference time: 4.031 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.666667
   AUC PR    = 0.744924
   CLL	      = -0.583386
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.333333
   F1        = 0.5


Total scoring time: 1.118 seconds
Refined model CLL: -0.583386


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.471195
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 5.6240000000000006 seconds
Total inference time: 3.88 seconds
AUC ROC: 0.574545
Total revision time: 5.6240000000000006
Best scored revision CLL: -0.583386


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:19:30
{'CLL': -0.471195, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'parameter_15': {'CLL': -0.471195, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'Inference time': 3.88, 'Learning time': 1.413, 'AUC PR': 0.171923}, 'Inference time': 3.88, 'Learning time': 5.6240000000000006, 'AUC PR': 0.171923}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.01524
   CLL	      = -0.180409
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 2.099 seconds
Total inference time: 2.397 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 01:19:35
{'CLL': -0.180409, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.397, 'Learning time': 2.099, 'AUC PR': 0.01524}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   return 0;  // std dev = 0,500, 30,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */


Results
   AUC ROC   = 0.5
   AUC PR    = 0.01524
   CLL	      = -0.180409
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.101 seconds
Total inference time: 2.13 seconds
AUC ROC: 0.5


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 01:19:39
{'CLL': -0.180409, 'AUC ROC': 0.5, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.13, 'Learning time': 1.101, 'AUC PR': 0.01524}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.28672036367094095;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.24811816884741356;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.20848477447886862;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.17062637354018517;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1366458537535223;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.10762034996184425;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08372807955323847;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06457405393631668;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.04949778322519463;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.037779403633540945;  // std dev = 2,928, 35,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=15 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.514926
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.502 seconds
Total inference time: 3.518 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.625
   AUC PR    = 0.699813
   CLL	      = -0.614907
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.25
   F1        = 0.4


Total scoring time: 1.042 seconds
Parameter learned model CLL: -0.614907


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [2.928, 20, 15]}]]
[{'': [0.0, 0.244897959183673]}, {'': [0.0, 0.24489795918367285]}, {'': [-4.4408920985006264e-17, 0.2448979591836731]}, {'': [4.4408920985006264e-17, 0.24489795918367346]}, {'': [-2.2204460492503132e-17, 0.24489795918367316]}, {'': [0.0, 0.24489795918367335]}, {'': [-5.551115123125783e-18, 0.24489795918367357]}, {'': [0.0, 0.2448979591836733]}, {'': [0.0, 0.24489795918367366]}, {'': [0.0, 0.24489795918367346]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.26439893509951234;  // std dev = 0,491, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.22907433933868016;  // std dev = 0,491, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.19318137099027535;  // std dev = 0,491, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else return 0.36236334632262296;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.15900226275534546;  // std dev = 0,491, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else return 0.2807538536965855;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.12823776952905488;  // std dev = 0,491, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else return 0.21248070121827137;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.10178079149236219;  // std dev = 0,491, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else return 0.1594898822817116;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.07980859644788119;  // std dev = 0,491, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else return 0.11975529938157474;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06202357908608322;  // std dev = 0,491, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else return 0.09028081829440963;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.04789069538808753;  // std dev = 0,491, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else return 0.06840311429118533;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03680573507389526;  // std dev = 0,491, 32,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=13 */
%   | else return 0.052078905701252655;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */


Results
   AUC ROC   = 0.519968
   AUC PR    = 0.165685
   CLL	      = -0.600278
   Precision = 0.015506 at threshold = 0.5
   Recall    = 0.243636
   F1        = 0.029156


Total learning time: 4.048 seconds
Total inference time: 4.636 seconds
AUC ROC: 0.519968


Results scoring model
   AUC ROC   = 0.65625
   AUC PR    = 0.730257
   CLL	      = -0.605574
   Precision = 0.875 at threshold = 0.5
   Recall    = 0.35
   F1        = 0.5


Total scoring time: 1.091 seconds
Refined model CLL: -0.605574


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.519968
   AUC PR    = 0.165685
   CLL	      = -0.600278
   Precision = 0.015506 at threshold = 0.5
   Recall    = 0.243636
   F1        = 0.029156


Total learning time: 7.683000000000001 seconds
Total inference time: 4.636 seconds
AUC ROC: 0.519968
Total revision time: 7.683000000000001
Best scored revision CLL: -0.605574


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:19:55
{'CLL': -0.600278, 'AUC ROC': 0.519968, 'F1': 0.029156, 'Recall': 0.243636, 'Precision': [0.015506, 0.5], 'Inference time': 4.636, 'Learning time': 7.683000000000001, 'AUC PR': 0.165685, 'parameter_20': {'CLL': -0.514926, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'Inference time': 3.518, 'Learning time': 1.502, 'AUC PR': 0.171923}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.34463542158599886;  // std dev = 0,500, 37,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.2965201417196174;  // std dev = 0,499, 37,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   else return 0.45802685142103533;  // std dev = 0,829, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.2466826907976355;  // std dev = 0,499, 37,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   else return 0.3726000295616938;  // std dev = 0,832, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19824915626568163;  // std dev = 0,498, 37,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   else return 0.2979762932455586;  // std dev = 0,845, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1559616012077356;  // std dev = 0,498, 37,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   else return 0.22666311666791286;  // std dev = 0,847, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.12018566621049823;  // std dev = 0,498, 37,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   else return 0.17573423408315467;  // std dev = 0,854, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.09188990737079418;  // std dev = 0,498, 37,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   else return 0.13215513144620786;  // std dev = 0,854, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06953711518697267;  // std dev = 0,497, 37,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   else return 0.1024093987478882;  // std dev = 0,858, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then return 0.052556162972931905;  // std dev = 0,497, 37,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   else return 0.07763611103117081;  // std dev = 0,857, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.039450612801503596;  // std dev = 0,497, 37,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   else return 0.06118301136969628;  // std dev = 0,860, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */


Results
   AUC ROC   = 0.444188
   AUC PR    = 0.012578
   CLL	      = -0.685398
   Precision = 0.00824 at threshold = 0.5
   Recall    = 0.129091
   F1        = 0.01549


Total learning time: 9.165 seconds
Total inference time: 5.01 seconds
AUC ROC: 0.444188


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 01:20:10
{'CLL': -0.685398, 'AUC ROC': 0.444188, 'F1': 0.01549, 'Recall': 0.129091, 'Precision': [0.00824, 0.5], 'Inference time': 5.01, 'Learning time': 9.165, 'AUC PR': 0.012578}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.34463542158599886;  // std dev = 0,500, 37,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=18 */
%   else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */


Results
   AUC ROC   = 0.427577
   AUC PR    = 0.012086
   CLL	      = -0.240323
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.751 seconds
Total inference time: 2.947 seconds
AUC ROC: 0.427577


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 01:20:15
{'CLL': -0.240323, 'AUC ROC': 0.427577, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.947, 'Learning time': 1.751, 'AUC PR': 0.012086}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.30259337954395643;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.26163180867521296;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.2192721473492705;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.1787352457468729;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.14243924477676323;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.11159559999632924;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.08637026299843586;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.06628370899125421;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.05057564362187412;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return 0.03843884907512935;  // std dev = 3,333, 45,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=20 */


Results
   AUC ROC   = 0.574545
   AUC PR    = 0.171923
   CLL	      = -0.540175
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 1.42 seconds
Total inference time: 3.909 seconds
AUC ROC: 0.574545


Results scoring model
   AUC ROC   = 0.6
   AUC PR    = 0.670073
   CLL	      = -0.632522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 1.043 seconds
Parameter learned model CLL: -0.632522


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.49e-08, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 5], 'false': [3.333, 25, 20]}]]
[{'': [0.0, 0.2469135802469133]}, {'': [0.0, 0.24691358024691287]}, {'': [-4.4408920985006264e-17, 0.24691358024691334]}, {'': [4.4408920985006264e-17, 0.24691358024691293]}, {'': [-2.2204460492503132e-17, 0.24691358024691365]}, {'': [0.0, 0.24691358024691348]}, {'': [-5.551115123125783e-18, 0.24691358024691382]}, {'': [0.0, 0.2469135802469139]}, {'': [0.0, 0.24691358024691354]}, {'': [0.0, 0.24691358024691348]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.30814893509951236;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.2663559447484889;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.22302914248953237;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.1888683221574974;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.1815431429223906;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.15570029437174368;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.14443219718841727;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.12582628229372092;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.11295499454068592;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.10008916917880559;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.0872702245099298;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.07866279780602592;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.06686562079518894;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.06127260860742232;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.05094395286945288;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.04741549148811439;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then return 0.03866658631014822;  // std dev = 0,497, 40,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | else return 0.036517889972878734;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.629123
   AUC PR    = 0.175175
   CLL	      = -0.530303
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 4.254 seconds
Total inference time: 5.079 seconds
AUC ROC: 0.629123


Results scoring model
   AUC ROC   = 0.608
   AUC PR    = 0.673985
   CLL	      = -0.63207
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.2
   F1        = 0.333333


Total scoring time: 0.986 seconds
Refined model CLL: -0.63207


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.629123
   AUC PR    = 0.175175
   CLL	      = -0.530303
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.149091
   F1        = 0.259494


Total learning time: 7.702999999999999 seconds
Total inference time: 5.079 seconds
AUC ROC: 0.629123
Total revision time: 7.702999999999999
Best scored revision CLL: -0.63207


Dataset: 7_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:20:32
{'CLL': -0.530303, 'AUC ROC': 0.629123, 'F1': 0.259494, 'Recall': 0.149091, 'parameter_25': {'CLL': -0.540175, 'AUC ROC': 0.574545, 'F1': 0.259494, 'Recall': 0.149091, 'Precision': [1.0, 0.5], 'Inference time': 3.909, 'Learning time': 1.42, 'AUC PR': 0.171923}, 'Precision': [1.0, 0.5], 'Inference time': 5.079, 'Learning time': 7.702999999999999, 'AUC PR': 0.175175}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( title(F, D), haswordvenue(A, C) )
%   | | | then return 0.7956489350995123;  // std dev = 0,968, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.09837280403092258;  // std dev = 0,204, 23,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.3125989102287141;  // std dev = 0,440, 45,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   else return 0.18681349584778098;  // std dev = 1,033, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( title(F, D), haswordvenue(A, C) )
%   | | | then return 0.6038565888696007;  // std dev = 0,968, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.6579109705730063;  // std dev = 0,025, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1257611490731864;  // std dev = 0,204, 23,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else return 0.39845105203420284;  // std dev = 0,797, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.40659627324592784;  // std dev = 0,807, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19706259273933305;  // std dev = 0,364, 45,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   else return 0.07622249847019438;  // std dev = 0,964, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4169498575858207;  // std dev = 0,970, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.1326578742470629;  // std dev = 0,976, 21,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | else return 0.33374185504092774;  // std dev = 0,630, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.0024522363820474458;  // std dev = 0,633, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return 0.2942105359353784;  // std dev = 0,794, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( title(F, D), haswordvenue(A, C) )
%   | | | then return 0.30892301752956364;  // std dev = 0,968, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.3766369237180134;  // std dev = 0,143, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12057919562492636;  // std dev = 0,205, 23,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else return 0.22162940964479425;  // std dev = 0,702, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.22353292263493843;  // std dev = 0,793, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08871383426242328;  // std dev = 0,283, 45,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   else return -0.01620252220309708;  // std dev = 0,922, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07355157835179356;  // std dev = 0,281, 45,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   else return -0.01265107783577632;  // std dev = 0,922, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( title(F, D), haswordvenue(A, C) )
%   | | | then return 0.20697155842136764;  // std dev = 0,968, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.2714961606469457;  // std dev = 0,164, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.12536334098655277;  // std dev = 0,205, 23,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else return 0.14320260808203547;  // std dev = 0,661, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.15955902881422693;  // std dev = 0,776, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04909531390621839;  // std dev = 0,262, 45,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   else return -0.04292830389699025;  // std dev = 0,903, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */


Results
   AUC ROC   = 0.986106
   AUC PR    = 0.652359
   CLL	      = -0.269566
   Precision = 0.401398 at threshold = 0.5
   Recall    = 0.94
   F1        = 0.562568


Total learning time: 132.477 seconds
Total inference time: 121.643 seconds
AUC ROC: 0.986106


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 01:24:47
{'CLL': -0.269566, 'AUC ROC': 0.986106, 'F1': 0.562568, 'Recall': 0.94, 'Precision': [0.401398, 0.5], 'Inference time': 121.643, 'Learning time': 132.477, 'AUC PR': 0.652359}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( title(F, D), haswordvenue(A, C) )
%   | | | then return 0.7956489350995123;  // std dev = 0,968, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.09837280403092258;  // std dev = 0,204, 23,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */


Results
   AUC ROC   = 0.980954
   AUC PR    = 0.633191
   CLL	      = -0.178291
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 28.728 seconds
Total inference time: 30.214 seconds
AUC ROC: 0.980954


Dataset: 7_imdb_cora, Fold: 5, Type: Scratch (RDN), Time: 01:25:46
{'CLL': -0.178291, 'AUC ROC': 0.980954, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 30.214, 'Learning time': 28.728, 'AUC PR': 0.633191}


