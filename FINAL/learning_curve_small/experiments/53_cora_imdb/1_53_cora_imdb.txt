Starting experiment #1 for 53_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 3017
Source train neg examples: 249953

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.858148935099512;  // std dev = 2,38e-07, 44,000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return -0.1418510649004877;  // std dev = 3,49e-08, 35,000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.07074736029636197;  // std dev = 4,611, 127,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=27 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.4402384873383177;  // std dev = 4,037, 67,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=39 */
%   | | | else return 0.04308044194882675;  // std dev = 4,691, 146,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=27 */
%   | | else return 0.21525391919282633;  // std dev = 0,479, 7.544,000 (wgt'ed) examples reached here.  /* #neg=4.850 #pos=2.694 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then return 0.038745950024883465;  // std dev = 0,385, 670,000 (wgt'ed) examples reached here.  /* #neg=549 #pos=121 */
%   | else return -0.0278975765283948;  // std dev = 0,318, 430,000 (wgt'ed) examples reached here.  /* #neg=381 #pos=49 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.7194734122109542;  // std dev = 5,16e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.15863981131394003;  // std dev = 6,033, 198,000 (wgt'ed) examples reached here.  /* #neg=132 #pos=66 */
%   | | else return 0.8006255294010751;  // std dev = 0,063, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.18353799050934946;  // std dev = 0,478, 7.809,000 (wgt'ed) examples reached here.  /* #neg=5.049 #pos=2.760 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.7866999848739303;  // std dev = 2,366, 90,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=84 */
%   | | | else return -0.1431611262371807;  // std dev = 0,998, 288,000 (wgt'ed) examples reached here.  /* #neg=287 #pos=1 */
%   | | else if ( haswordauthor(L, H) )
%   | | | then return 0.20220386084292263;  // std dev = 3,125, 43,000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | | else return -0.06586411769017197;  // std dev = 4,394, 260,000 (wgt'ed) examples reached here.  /* #neg=239 #pos=21 */
%   | else return -0.026871610100705337;  // std dev = 0,315, 439,000 (wgt'ed) examples reached here.  /* #neg=390 #pos=49 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7481457021821557;  // std dev = 0,436, 46,000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.20542788252983973;  // std dev = 0,197, 38,000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.5250008024499643;  // std dev = 1,027, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.017540929028074522;  // std dev = 4,618, 153,000 (wgt'ed) examples reached here.  /* #neg=128 #pos=25 */
%   | else return 0.16245068035710425;  // std dev = 0,479, 7.664,000 (wgt'ed) examples reached here.  /* #neg=4.904 #pos=2.760 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), venue(L, A) )
%   | | | then return 0.28716500415032215;  // std dev = 0,878, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2056343592354791;  // std dev = 3,041, 40,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   | | else return -0.009957390883598767;  // std dev = 0,331, 16,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else return -0.001633065745774009;  // std dev = 0,326, 1.047,000 (wgt'ed) examples reached here.  /* #neg=896 #pos=151 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordtitle(F, D) )
%   | | | then return 0.14716579676383376;  // std dev = 5,325, 171,000 (wgt'ed) examples reached here.  /* #neg=102 #pos=69 */
%   | | | else return -0.06060980775663099;  // std dev = 2,429, 71,000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
%   | | else return 0.6646155843943249;  // std dev = 0,215, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.2828460382728751;  // std dev = 3,419, 71,000 (wgt'ed) examples reached here.  /* #neg=32 #pos=39 */
%   | | | else return 0.025291757009192267;  // std dev = 4,473, 119,000 (wgt'ed) examples reached here.  /* #neg=92 #pos=27 */
%   | | else return 0.13174399814899634;  // std dev = 0,479, 7.559,000 (wgt'ed) examples reached here.  /* #neg=4.865 #pos=2.694 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then return 0.05288259303384728;  // std dev = 0,354, 394,000 (wgt'ed) examples reached here.  /* #neg=309 #pos=85 */
%   | | else return -0.030061177897184557;  // std dev = 0,316, 307,000 (wgt'ed) examples reached here.  /* #neg=271 #pos=36 */
%   | else return -0.01896553897166922;  // std dev = 0,320, 422,000 (wgt'ed) examples reached here.  /* #neg=373 #pos=49 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11246918812404257;  // std dev = 0,477, 7.876,000 (wgt'ed) examples reached here.  /* #neg=5.029 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6688466683439654;  // std dev = 1,953, 88,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=84 */
%   | | | else return -0.13273305685690287;  // std dev = 1,001, 315,000 (wgt'ed) examples reached here.  /* #neg=314 #pos=1 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.13954521935708125;  // std dev = 3,149, 44,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return -0.045097945397984285;  // std dev = 4,372, 234,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.0017897513936795115;  // std dev = 6,377, 349,000 (wgt'ed) examples reached here.  /* #neg=302 #pos=47 */
%   | | | else return -0.0958848081504658;  // std dev = 1,388, 54,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=2 */
%   | | else return -0.13284213848287593;  // std dev = 0,000916, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0836923348771955;  // std dev = 0,474, 8.041,000 (wgt'ed) examples reached here.  /* #neg=5.194 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.17347178398842644;  // std dev = 0,636, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.06872222301986182;  // std dev = 3,242, 53,000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.3709194118770187;  // std dev = 0,994, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13086949416376503;  // std dev = 0,017, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return -0.046828709181836604;  // std dev = 0,954, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.03680831953664829;  // std dev = 2,403, 69,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=16 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.015500592104988026;  // std dev = 8,211, 704,000 (wgt'ed) examples reached here.  /* #neg=616 #pos=88 */
%   | | | else return -0.0011875973916598602;  // std dev = 4,407, 254,000 (wgt'ed) examples reached here.  /* #neg=208 #pos=46 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordtitle(F, C) )
%   | | | then return 0.12511268891575386;  // std dev = 4,958, 153,000 (wgt'ed) examples reached here.  /* #neg=84 #pos=69 */
%   | | | else return 0.674837176424975;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.0985521495335822;  // std dev = 0,256, 96,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=13 */
%   | else return 0.07229727436378613;  // std dev = 0,478, 7.685,000 (wgt'ed) examples reached here.  /* #neg=4.925 #pos=2.760 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.7317616454355659;  // std dev = 3,075, 94,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=83 */
%   | | | else return -0.13364923140090015;  // std dev = 0,514, 541,000 (wgt'ed) examples reached here.  /* #neg=541 */
%   | | else if ( haswordauthor(K, G) )
%   | | | then return 0.10486790909378056;  // std dev = 2,113, 44,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return -0.002102663889960271;  // std dev = 3,186, 135,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=23 */
%   | else return -0.01543683549049328;  // std dev = 0,276, 286,000 (wgt'ed) examples reached here.  /* #neg=237 #pos=49 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.35132215974267306;  // std dev = 0,113, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.15328886360678884;  // std dev = 3,308, 74,000 (wgt'ed) examples reached here.  /* #neg=35 #pos=39 */
%   | | | else return -0.023559387183368773;  // std dev = 4,464, 117,000 (wgt'ed) examples reached here.  /* #neg=90 #pos=27 */
%   | else return 0.05870420932906034;  // std dev = 0,478, 7.669,000 (wgt'ed) examples reached here.  /* #neg=4.909 #pos=2.760 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then return 0.02418968771819688;  // std dev = 0,286, 387,000 (wgt'ed) examples reached here.  /* #neg=302 #pos=85 */
%   | | else return -0.023752770392674045;  // std dev = 0,276, 294,000 (wgt'ed) examples reached here.  /* #neg=258 #pos=36 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 2.0592079728419443E-4;  // std dev = 5,601, 343,000 (wgt'ed) examples reached here.  /* #neg=296 #pos=47 */
%   | | | else return -0.06982657704308279;  // std dev = 1,374, 46,000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   | | else return -0.11692554810102208;  // std dev = 0,004, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04455916276313101;  // std dev = 0,475, 7.922,000 (wgt'ed) examples reached here.  /* #neg=5.075 #pos=2.847 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.09138742870147572;  // std dev = 0,984, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.013217577879249457;  // std dev = 2,220, 65,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=15 */
%   | | else return 0.013764484946787028;  // std dev = 0,269, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return -0.01677537977115236;  // std dev = 7,395, 673,000 (wgt'ed) examples reached here.  /* #neg=590 #pos=83 */
%   | | | else return 0.028343353660314544;  // std dev = 2,771, 95,000 (wgt'ed) examples reached here.  /* #neg=74 #pos=21 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.008477338136418336;  // std dev = 4,461, 271,000 (wgt'ed) examples reached here.  /* #neg=224 #pos=47 */
%   | | | else return -0.10510374260752366;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( venue(E, B), title(E, D) )
%   | then if ( haswordvenue(B, C) )
%   | | then return 0.03162635243042671;  // std dev = 0,474, 7.338,000 (wgt'ed) examples reached here.  /* #neg=4.729 #pos=2.609 */
%   | | else if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6474902338674254;  // std dev = 2,833, 139,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=131 */
%   | | | else return -0.12030021730750348;  // std dev = 1,601, 572,000 (wgt'ed) examples reached here.  /* #neg=569 #pos=3 */
%   | else if ( title(G, D), venue(G, A) )
%   | | then return -0.1772859521076723;  // std dev = 0,303, 287,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=30 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.4277724531427895;  // std dev = 4,277, 102,000 (wgt'ed) examples reached here.  /* #neg=24 #pos=78 */
%   | | | else return 0.025552626580814034;  // std dev = 4,455, 222,000 (wgt'ed) examples reached here.  /* #neg=173 #pos=49 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.4962901639139844;  // std dev = 0,367, 44,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=37 */
%   | | else return 0.6290995922358381;  // std dev = 0,192, 32,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0.009983421187803541;  // std dev = 0,278, 255,000 (wgt'ed) examples reached here.  /* #neg=206 #pos=49 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(D, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.47806825485685567;  // std dev = 0,382, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6139111792801373;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.18788943599477587;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.28441786772924477;  // std dev = 0,282, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22272552446520985;  // std dev = 0,712, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926094;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17482629076607478;  // std dev = 0,697, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.1380183673198955;  // std dev = 0,261, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.2748572979391659;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.30328907365167623;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09019545501340745;  // std dev = 0,558, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2083056089201274;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return -0.2602291639902117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.2602291639902117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.116333
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.833 seconds
Total inference time: 1.535 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.163502
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.488 seconds
Parameter learned model CLL: -0.163502


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 5], 'true,true,false,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,true': [0.382, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 2, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 3, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.282, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 3, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.712, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.697, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)'}, {'true,true': [0.261, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 3, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.558, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)'}, {'true,true,true': [5.27e-09, 0, 5], 'true,false,false,false': [1.32e-09, 3, 0], 'true,false,true': [0.0, 1, 0], 'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'false': [0.0, 0, 0]}]]
[{'': [0.20408163265306106, 0.0], 'true,true': [0.0, 0.0], 'true,true,true': [nan, 0.0], 'true': [0.20408163265306106, nan], 'true,true,false': [0.0, nan], 'false': [0.0, nan]}, {'': [0.1456911249928931, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.1456911249928931, nan]}, {'': [0.1312008625826999, 2.3129646346357427e-18], 'true,true': [0.0, 0.0], 'true,true,true': [nan, 0.0], 'true': [0.1312008625826999, nan], 'false,true': [nan, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan]}, {'': [0.07931716963309329, -1.1564823173178713e-18], 'false,true': [nan, -1.1564823173178713e-18], 'false': [-1.1564823173178713e-18, nan], 'true': [0.07931716963309329, nan]}, {'': [0.07251862127939808, 2.3129646346357427e-18], 'false,true': [nan, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan]}, {'': [0.06932764450586802, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.06821377642967705, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.06821377642967705, nan]}, {'': [0.06821494428237881, 1.1564823173178713e-18], 'true,true': [0.0, 0.0], 'false,true': [nan, 1.1564823173178713e-18], 'false': [1.1564823173178713e-18, nan], 'true': [0.06821494428237881, nan]}, {'': [0.044472873389841995, -5.782411586589357e-19], 'false,true': [nan, -5.782411586589357e-19], 'false': [-5.782411586589357e-19, nan]}, {'': [0.03539655024142146, nan], 'true,true': [5.551115123125783e-18, nan], 'true,false,false': [0.0, 5.782411586589357e-19], 'true': [5.551115123125783e-18, 0.00922335176761988], 'true,false': [0.0, 0.00720574356845303]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.47806825485685567;  // std dev = 0,382, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6139111792801373;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.18788943599477587;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.28441786772924477;  // std dev = 0,282, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22272552446520985;  // std dev = 0,269, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17482629076607478;  // std dev = 0,263, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1380183673198955;  // std dev = 0,261, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2748572979391659;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.30328907365167623;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09019545501340745;  // std dev = 0,211, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.2083056089201274;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.2602291639902117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return -0.11320117105907257;  // std dev = 0,170, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.122766
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.868 seconds
Total inference time: 1.443 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.165957
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.474 seconds
Refined model CLL: -0.165957


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.116333
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.6630000000000003 seconds
Total inference time: 1.535 seconds
AUC ROC: 1.0
Total revision time: 2.6630000000000003
Best scored revision CLL: -0.163502


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:41:09
{'Inference time': 1.535, 'AUC ROC': 1.0, 'parameter_5': {'Inference time': 1.535, 'AUC ROC': 1.0, 'F1': 0.973913, 'Learning time': 0.833, 'Precision': [0.949153, 0.5], 'CLL': -0.116333, 'AUC PR': 1.0, 'Recall': 1.0}, 'F1': 0.973913, 'Learning time': 2.6630000000000003, 'Precision': [0.949153, 0.5], 'CLL': -0.116333, 'AUC PR': 1.0, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.982164
   AUC PR    = 0.321839
   CLL	      = -0.13584
   Precision = 0.321839 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.486957


Total learning time: 0.977 seconds
Total inference time: 1.084 seconds
AUC ROC: 0.982164


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:41:11
{'Inference time': 1.084, 'AUC ROC': 0.982164, 'F1': 0.486957, 'Learning time': 0.977, 'Precision': [0.321839, 0.5], 'CLL': -0.13584, 'AUC PR': 0.321839, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.982164
   AUC PR    = 0.321839
   CLL	      = -0.159815
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.51 seconds
Total inference time: 0.797 seconds
AUC ROC: 0.982164


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:41:12
{'Inference time': 0.797, 'AUC ROC': 0.982164, 'F1': nan, 'Learning time': 0.51, 'Precision': [nan, 0.5], 'CLL': -0.159815, 'AUC PR': 0.321839, 'Recall': 0.0}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(D, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4807050623190257;  // std dev = 0,400, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6132860045704529;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.020776677341602788;  // std dev = 0,400, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.2908734401875947;  // std dev = 0,331, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783628;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2261202881635088;  // std dev = 1,219, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1757380060698553;  // std dev = 1,212, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.13717750325592323;  // std dev = 0,324, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.27248535900865717;  // std dev = 1,83e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1888821588954336;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09085892207846244;  // std dev = 1,110, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.20662449521271103;  // std dev = 1,29e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return -0.21502386964504813;  // std dev = 0,213, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.11585589920807005;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.162798
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.903 seconds
Total inference time: 1.56 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.985
   AUC PR    = 0.988462
   CLL	      = -0.240059
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.513 seconds
Parameter learned model CLL: -0.240059


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 9], 'true,true,false,true': [0.894, 4, 1], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 6, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.4, 4, 10], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 9], 'false,false': [0.0, 0, 0], 'true,true,false': [0.4, 4, 1], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.331, 4, 10], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true,false': [0.0, 1, 0], 'true': [1.219, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true': [0.0, 1, 0], 'true': [1.212, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.324, 4, 10], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [1.83e-08, 0, 9], 'false,false': [0.0, 0, 0], 'true,true,false': [0.894, 4, 1], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 5, 0], 'false,true,true': [0.0, 1, 0], 'true': [1.11, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)'}, {'true,true,true': [1.29e-08, 0, 9], 'true,false,false,false': [0.0, 5, 0], 'true,false,true': [0.213, 2, 0], 'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'false': [0.0, 0, 0]}]]
[{'': [0.20408163265306115, -6.938893903907228e-18], 'true,true': [-2.9605947323337506e-16, 0.16000000000000003], 'true,true,true': [nan, -2.9605947323337506e-16], 'true': [0.20408163265306115, nan], 'true,true,false': [0.16000000000000003, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.15976144198106318, -2.3129646346357427e-18], 'false,true': [0.0, 0.0], 'false': [-2.3129646346357427e-18, nan], 'true': [0.15976144198106318, nan], 'false,true,true': [nan, 0.0]}, {'': [0.1494469224832037, 0.0], 'true,true': [0.0, 0.15999999999999998], 'true,true,true': [nan, 0.0], 'true': [0.1494469224832037, nan], 'false,true': [0.0, 0.0], 'false': [0.0, nan]}, {'': [0.10987812912673316, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'true': [0.10987812912673316, nan]}, {'': [0.10609018060056404, 1.1564823173178713e-18], 'false,true': [0.0, 0.0], 'false,true,true': [nan, 0.0], 'false': [1.1564823173178713e-18, nan]}, {'': [0.10493938421217526, 1.1564823173178713e-18], 'false,true': [0.0, 0.0], 'false': [1.1564823173178713e-18, nan]}, {'': [0.10516220830532887, -1.1564823173178713e-18], 'false,true': [0.0, -6.938893903907229e-19], 'false': [-1.1564823173178713e-18, nan], 'true': [0.10516220830532887, nan], 'false,true,true': [nan, 0.0]}, {'': [0.10601377242838862, 0.0], 'true,true': [3.700743415417188e-17, 0.15999999999999998], 'false,true': [0.0, -6.938893903907229e-19], 'false': [0.0, nan], 'true': [0.10601377242838862, nan]}, {'': [0.08805965891302019, 5.782411586589357e-19], 'false,true': [0.0, 6.938893903907229e-19], 'false': [5.782411586589357e-19, nan]}, {'': [0.06628470435191677, nan], 'true,true': [1.850371707708594e-17, nan], 'true,false,false': [0.18749999999999997, 0.0], 'true': [1.850371707708594e-17, 0.07528981345073978], 'true,false': [0.022750301142100325, 0.08399238889021712]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1490779674864458;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.7326182742412143;  // std dev = 0,125, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5521181988099739;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.04166313322236764;  // std dev = 0,773, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( genre(A, E) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1359591118966196;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.44606135427620197;  // std dev = 0,093, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12076294984749177;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.3439054172423022;  // std dev = 0,095, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10851618394280284;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2737000506938883;  // std dev = 0,090, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09845555230758243;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.22470000474122945;  // std dev = 0,084, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16365888977463483;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.012052043313445582;  // std dev = 0,457, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( genre(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1699792468196369;  // std dev = 0,083, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.09104781740874965;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.122938770997157;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( genre(A, D) )
%   | then return -0.07399001632860265;  // std dev = 0,014, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return 0.031377905787671134;  // std dev = 0,399, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.073191
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.166 seconds
Total inference time: 1.513 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.111926
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.497 seconds
Refined model CLL: -0.111926


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.073191
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 3.0789999999999997 seconds
Total inference time: 1.513 seconds
AUC ROC: 0.999547
Total revision time: 3.0789999999999997
Best scored revision CLL: -0.111926


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:41:19
{'Inference time': 1.513, 'AUC ROC': 0.999547, 'F1': 0.973913, 'Learning time': 3.0789999999999997, 'parameter_10': {'Inference time': 1.56, 'AUC ROC': 1.0, 'F1': 0.973913, 'Learning time': 0.903, 'Precision': [0.949153, 0.5], 'CLL': -0.162798, 'AUC PR': 1.0, 'Recall': 1.0}, 'Precision': [0.949153, 0.5], 'CLL': -0.073191, 'AUC PR': 0.949153, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0.6465415686654066;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0.5044629797645588;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0.37956420580342304;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.3780557943351663;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1809000977685231;  // std dev = 0,483, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2940355107599187;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.16189308627828242;  // std dev = 0,456, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2368730776591903;  // std dev = 1,05e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.14612074092674995;  // std dev = 0,430, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1967435409324434;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.13283746346152822;  // std dev = 0,405, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1674907060679336;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12151518752035566;  // std dev = 0,381, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1454171149974417;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11176724522595617;  // std dev = 0,358, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.068109
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.501 seconds
Total inference time: 1.419 seconds
AUC ROC: 0.999547


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:41:22
{'Inference time': 1.419, 'AUC ROC': 0.999547, 'F1': 0.973913, 'Learning time': 1.501, 'Precision': [0.949153, 0.5], 'CLL': -0.068109, 'AUC PR': 0.949153, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */


Results
   AUC ROC   = 0.982164
   AUC PR    = 0.321839
   CLL	      = -0.160052
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.563 seconds
Total inference time: 0.806 seconds
AUC ROC: 0.982164


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:41:24
{'Inference time': 0.806, 'AUC ROC': 0.982164, 'F1': nan, 'Learning time': 0.563, 'Precision': [nan, 0.5], 'CLL': -0.160052, 'AUC PR': 0.321839, 'Recall': 0.0}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(D, B) )
%   | | | then return 0.0010060779566550668;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4799434630127483;  // std dev = 0,394, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6134666146541585;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.06811917287289511;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.2891207886863906;  // std dev = 0,317, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22530315938598885;  // std dev = 1,421, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17565588358991574;  // std dev = 1,408, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.1375929480701766;  // std dev = 0,307, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.27304423940950745;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.2208067435512137;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.0910718253019359;  // std dev = 1,257, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.20696004376240681;  // std dev = 1,49e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return -0.19919791580459648;  // std dev = 0,191, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.16753732486050008;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.146248
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.951 seconds
Total inference time: 1.881 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.988889
   AUC PR    = 0.991667
   CLL	      = -0.219057
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.57 seconds
Parameter learned model CLL: -0.219057


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 14], 'true,true,false,true': [0.926, 6, 1], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.394, 6, 15], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 14], 'false,false': [0.0, 0, 0], 'true,true,false': [0.35, 6, 1], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.317, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 8, 0], 'false,true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'false,true,true,false': [0.0, 1, 0], 'true': [1.421, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 8, 0], 'false,true,true': [0.0, 1, 0], 'true': [1.408, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.307, 6, 15], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [2.11e-08, 0, 14], 'false,false': [0.0, 0, 0], 'true,true,false': [0.926, 6, 1], 'true,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 8, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'false,true,true': [0.0, 1, 0], 'true': [1.257, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)'}, {'true,true,true': [1.49e-08, 0, 14], 'true,false,false,false': [0.0, 8, 0], 'true,false,true': [0.191, 2, 0], 'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.913, 5, 1], 'false': [0.0, 0, 0]}]]
[{'': [0.20408163265306084, -9.25185853854297e-18], 'true,true': [-2.5376526277146434e-16, 0.12244897959183677], 'true,true,true': [nan, -2.5376526277146434e-16], 'true': [0.20408163265306084, nan], 'true,true,false': [0.12244897959183677, nan], 'false': [-9.25185853854297e-18, nan]}, {'': [0.15556551965640236, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'true': [0.15556551965640236, nan], 'false,true,true': [nan, 0.0]}, {'': [0.14405170114369542, -1.5419764230904951e-18], 'true,true': [-6.344131569286608e-17, 0.12244897959183675], 'true,true,true': [nan, -6.344131569286608e-17], 'true': [0.14405170114369542, nan], 'false,true': [0.0, -1.734723475976807e-18], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.10071711336341001, 3.0839528461809902e-18], 'false,true': [0.0, 1.734723475976807e-18], 'false': [3.0839528461809902e-18, nan], 'true': [0.10071711336341001, nan]}, {'': [0.09611163561191564, 0.0], 'false,true': [0.0, 0.0], 'false,true,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.09443857123186314, 1.5419764230904951e-18], 'false,true': [0.0, 1.734723475976807e-18], 'false': [1.5419764230904951e-18, nan]}, {'': [0.0943441450463322, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'true': [0.0943441450463322, nan], 'false,true,true': [nan, 0.0]}, {'': [0.09501383616867233, 7.709882115452476e-19], 'true,true': [3.172065784643304e-17, 0.12244897959183675], 'false,true': [0.0, 8.673617379884035e-19], 'false': [7.709882115452476e-19, nan], 'true': [0.09501383616867233, nan]}, {'': [0.07526135135292016, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan]}, {'': [0.05727153036490416, nan], 'true,true': [1.586032892321652e-17, nan], 'true,false,false': [0.1388888888888889, 0.0], 'true': [1.586032892321652e-17, 0.05755036982599058], 'true,false': [0.018226640482008373, 0.06213939055828247]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( female(B) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14048860034631788;  // std dev = 0,037, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.7278063472526077;  // std dev = 0,121, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5533078092512704;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( female(B) )
%   | | then return -0.11082519912141268;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.07751288219539806;  // std dev = 0,746, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( genre(A, E) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12390270061516045;  // std dev = 0,058, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.4159884920226068;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4425508061103542;  // std dev = 0,084, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.10159632948783627;  // std dev = 1,32e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11112706917227405;  // std dev = 0,052, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.31967808540419906;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.34077254850089866;  // std dev = 0,085, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10065993342216258;  // std dev = 0,048, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.2544667283714733;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.27100887605049784;  // std dev = 0,081, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.08518475138839687;  // std dev = 1,32e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.2092592256878527;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.22240837281755219;  // std dev = 0,075, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.09194097630120374;  // std dev = 0,044, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17673079261210078;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.165756747123413;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( female(B) )
%   | | then return -0.06781198715292379;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.024914076534896735;  // std dev = 0,437, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( genre(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.07324622576333704;  // std dev = 9,31e-10, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08363868957598496;  // std dev = 0,049, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.15246637737117563;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.16714030090467605;  // std dev = 0,073, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( female(A) )
%   | then return 0.13379036781673637;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.12467327043700438;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.06151716719366572;  // std dev = 0,004, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return -0.007935229560989255;  // std dev = 0,403, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999328
   AUC PR    = 0.918673
   CLL	      = -0.070548
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.515 seconds
Total inference time: 1.532 seconds
AUC ROC: 0.999328


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.10592
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.52 seconds
Refined model CLL: -0.10592


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999328
   AUC PR    = 0.918673
   CLL	      = -0.070548
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 3.5559999999999996 seconds
Total inference time: 1.532 seconds
AUC ROC: 0.999328
Total revision time: 3.5559999999999996
Best scored revision CLL: -0.10592


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:41:31
{'parameter_15': {'Inference time': 1.881, 'AUC ROC': 1.0, 'F1': 0.973913, 'Learning time': 0.951, 'Precision': [0.949153, 0.5], 'CLL': -0.146248, 'AUC PR': 1.0, 'Recall': 1.0}, 'Inference time': 1.532, 'AUC ROC': 0.999328, 'F1': 0.973913, 'Learning time': 3.5559999999999996, 'Precision': [0.949153, 0.5], 'CLL': -0.070548, 'AUC PR': 0.918673, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7748156017661789;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.6526478931012827;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.508738411682717;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.38266873164552506;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2897830208139342;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.22484413364919764;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.24836685810216858;  // std dev = 0,090, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.15197861017508776;  // std dev = 0,207, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.20504814284800957;  // std dev = 0,078, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.13939726491812365;  // std dev = 0,201, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.17370344554868922;  // std dev = 0,069, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12866055066264506;  // std dev = 0,194, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.15021059688910687;  // std dev = 0,061, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11936590663120697;  // std dev = 0,187, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.090023
   Precision = 0.321839 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.486957


Total learning time: 1.685 seconds
Total inference time: 1.234 seconds
AUC ROC: 0.999765


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:41:35
{'Inference time': 1.234, 'AUC ROC': 0.999765, 'F1': 0.486957, 'Learning time': 1.685, 'Precision': [0.321839, 0.5], 'CLL': -0.090023, 'AUC PR': 0.983476, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7748156017661789;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.159886
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.634 seconds
Total inference time: 0.841 seconds
AUC ROC: 0.983055


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:41:36
{'Inference time': 0.841, 'AUC ROC': 0.983055, 'F1': nan, 'Learning time': 0.634, 'Precision': [nan, 0.5], 'CLL': -0.159886, 'AUC PR': 0.338212, 'Recall': 0.0}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(D, B) )
%   | | | then return -0.016851064900487787;  // std dev = 0,935, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5019073198881361;  // std dev = 0,381, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 1,86e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.608245626227424;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.08666075257379426;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.30081313939389315;  // std dev = 0,302, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.23388724631037386;  // std dev = 1,528, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1823926051086642;  // std dev = 1,515, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.14322664688606423;  // std dev = 0,292, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07877675473109172;  // std dev = 1,32e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.2633514387427462;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.24288874176041195;  // std dev = 0,935, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09583308954400847;  // std dev = 1,339, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.19975823991269767;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return -0.19929708814671748;  // std dev = 0,191, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.19154519335426592;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.144371
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 0.952 seconds
Total inference time: 1.709 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9925
   AUC PR    = 0.994231
   CLL	      = -0.199763
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.533 seconds
Parameter learned model CLL: -0.199763


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 19], 'true,true,false,true': [0.935, 7, 1], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 13, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.381, 7, 20], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 12, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 19], 'false,false': [0.0, 0, 0], 'true,true,false': [0.331, 7, 1], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [9.13e-09, 12, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.302, 7, 20], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0], 'false,true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0], 'false,true,true,false': [0.0, 1, 0], 'true': [1.528, 7, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [5.27e-09, 12, 0], 'false,true,true': [0.0, 1, 0], 'true': [1.515, 7, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.292, 7, 20], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 12, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [0.0, 0, 19], 'false,false': [0.0, 0, 0], 'true,true,false': [0.935, 7, 1], 'true,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 12, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 12, 0], 'false,true,true': [0.0, 1, 0], 'true': [1.339, 7, 20]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)'}, {'true,true,true': [0.0, 0, 19], 'true,false,false,false': [5.89e-09, 12, 0], 'true,false,true': [0.191, 2, 0], 'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.926, 6, 1], 'false': [0.0, 0, 0]}]]
[{'': [0.19204389574759964, -1.2810265668751807e-17], 'true,true': [-2.8047739569477637e-16, 0.10937500000000004], 'true,true,true': [nan, -2.8047739569477637e-16], 'true': [0.19204389574759964, nan], 'true,true,false': [0.10937500000000004, nan], 'false': [-1.2810265668751807e-17, nan]}, {'': [0.14482804316288245, 4.270088556250602e-18], 'false,true': [0.0, 2.3129646346357427e-18], 'false': [4.270088556250602e-18, nan], 'true': [0.14482804316288245, nan], 'false,true,true': [nan, 0.0]}, {'': [0.13309330733249722, 8.540177112501205e-18], 'true,true': [0.0, 0.10937500000000004], 'true,true,true': [nan, 0.0], 'true': [0.13309330733249722, nan], 'false,true': [0.0, 6.938893903907228e-18], 'false': [8.540177112501205e-18, nan]}, {'': [0.09110581370094312, -2.135044278125301e-18], 'false,true': [0.0, 0.0], 'false': [-2.135044278125301e-18, nan], 'true': [0.09110581370094312, nan]}, {'': [0.08651566720052306, 2.135044278125301e-18], 'false,true': [0.0, 2.3129646346357427e-18], 'false,true,true': [nan, 0.0], 'false': [2.135044278125301e-18, nan]}, {'': [0.08496104428357809, 4.270088556250602e-18], 'false,true': [0.0, 2.3129646346357427e-18], 'false': [4.270088556250602e-18, nan]}, {'': [0.08501766583536548, 1.0675221390626506e-18], 'false,true': [0.0, 1.1564823173178713e-18], 'false': [1.0675221390626506e-18, nan], 'true': [0.08501766583536548, nan], 'false,true,true': [nan, 0.0]}, {'': [0.0858428344226231, 0.0], 'true,true': [0.0, 0.10937499999999999], 'false,true': [0.0, 1.1564823173178713e-18], 'false': [0.0, nan], 'true': [0.0858428344226231, nan]}, {'': [0.06642864164180666, 5.337610695313253e-19], 'false,true': [0.0, 5.782411586589357e-19], 'false': [5.337610695313253e-19, nan]}, {'': [0.04990502295732273, nan], 'true,true': [-2.921639538487254e-17, nan], 'true,false,false': [0.12244897959183672, 2.8912057932946786e-18], 'true': [-2.921639538487254e-17, 0.046639349594917716], 'true,false': [0.018253428054621768, 0.04888670337741755]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7260458432260842;  // std dev = 0,128, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1389493979329939;  // std dev = 0,031, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.5537428914497156;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5537428914497156;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(B) )
%   | | then return -0.1251902943853523;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.04952137035779237;  // std dev = 0,766, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( genre(A, E) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(A) )
%   | | then return -0.11037642580871064;  // std dev = 0,014, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12833066590222106;  // std dev = 0,020, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return 0.41631052855238465;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4383153601705933;  // std dev = 0,079, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.3198963451314907;  // std dev = 1,05e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3375480884102502;  // std dev = 0,081, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( female(A) )
%   | | then return -0.10000120088400823;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11465736443259308;  // std dev = 0,018, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.2546157059342237;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.26861283994621143;  // std dev = 0,077, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( female(B) )
%   | | then return -0.0909360630572984;  // std dev = 0,011, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10384738350914333;  // std dev = 0,016, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(A) )
%   | | then return -0.08339842789362022;  // std dev = 0,010, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09480192039711097;  // std dev = 0,014, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return 0.20936450844185214;  // std dev = 1,05e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.22061017707304448;  // std dev = 0,072, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1768080451800642;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.16755937451873587;  // std dev = 4,17e-09, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( female(A) )
%   | | then return -0.07724313634655049;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.015588292743021512;  // std dev = 0,459, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( genre(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.15252500261640012;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.16522503257306823;  // std dev = 0,071, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( female(A) )
%   | | then return -0.07191614309782351;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08822243157072983;  // std dev = 0,013, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( female(A) )
%   | then return 0.13383614973254443;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.1261090550036974;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( genre(A, D) )
%   | then return -0.06976814900716637;  // std dev = 0,008, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return -0.009947293109780736;  // std dev = 0,424, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999328
   AUC PR    = 0.918673
   CLL	      = -0.069478
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.686 seconds
Total inference time: 1.823 seconds
AUC ROC: 0.999328


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.103803
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.564 seconds
Refined model CLL: -0.103803


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999328
   AUC PR    = 0.918673
   CLL	      = -0.069478
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 3.735 seconds
Total inference time: 1.823 seconds
AUC ROC: 0.999328
Total revision time: 3.735
Best scored revision CLL: -0.103803


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:41:44
{'Inference time': 1.823, 'AUC ROC': 0.999328, 'parameter_20': {'Inference time': 1.709, 'AUC ROC': 1.0, 'F1': 0.973913, 'Learning time': 0.952, 'Precision': [0.949153, 0.5], 'CLL': -0.144371, 'AUC PR': 1.0, 'Recall': 1.0}, 'F1': 0.973913, 'Learning time': 3.735, 'Precision': [0.949153, 0.5], 'CLL': -0.069478, 'AUC PR': 0.918673, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7914822684328456;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.6660633000779167;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5181199435476403;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.38952954024068537;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2956796123843447;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839683;  // std dev = 1,29e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.23048996886792547;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109179;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.18469472944075366;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.205884176943744;  // std dev = 0,084, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( female(A) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.14409942781269466;  // std dev = 0,213, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.17431047083408419;  // std dev = 0,074, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.13326166468440567;  // std dev = 0,208, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15066696234000593;  // std dev = 0,066, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( female(A) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.12393665907286917;  // std dev = 0,202, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.106062
   Precision = 0.321839 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.486957


Total learning time: 1.639 seconds
Total inference time: 1.375 seconds
AUC ROC: 0.999765


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:41:47
{'Inference time': 1.375, 'AUC ROC': 0.999765, 'F1': 0.486957, 'Learning time': 1.639, 'Precision': [0.321839, 0.5], 'CLL': -0.106062, 'AUC PR': 0.983476, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7914822684328456;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.159869
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.634 seconds
Total inference time: 0.817 seconds
AUC ROC: 0.983055


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:41:49
{'Inference time': 0.817, 'AUC ROC': 0.983055, 'F1': nan, 'Learning time': 0.634, 'Precision': [nan, 0.5], 'CLL': -0.159869, 'AUC PR': 0.338212, 'Recall': 0.0}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( movie(D, B) )
%   | | | then return -0.030739953789376676;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5158791081246896;  // std dev = 0,371, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 1,86e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6049113998318699;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.10056347441813612;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.30820605408684093;  // std dev = 0,291, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.23933579446392206;  // std dev = 1,626, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926094;  // std dev = 2,28e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18672607992250081;  // std dev = 1,611, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.14691593004422365;  // std dev = 0,281, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.2572858923115247;  // std dev = 3,33e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.25841730080610736;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09895779650467126;  // std dev = 1,414, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.19523175674680218;  // std dev = 3,33e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return -0.1987011717778081;  // std dev = 0,190, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.20821050347358996;  // std dev = 0,935, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.142613
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.004 seconds
Total inference time: 1.435 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9928
   AUC PR    = 0.994352
   CLL	      = -0.187788
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.979592


Total scoring time: 0.559 seconds
Parameter learned model CLL: -0.187788


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [1.03e-07, 0, 24], 'true,true,false,true': [0.943, 8, 1], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 17, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.371, 8, 25], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 16, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 24], 'false,false': [0.0, 0, 0], 'true,true,false': [0.314, 8, 1], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [1.39e-08, 16, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.291, 8, 25], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [2.28e-09, 16, 0], 'false,true,true,false': [0.0, 1, 0], 'true': [1.626, 8, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 16, 0], 'false,true,true': [0.0, 1, 0], 'true': [1.611, 8, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.281, 8, 25], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [3.33e-08, 0, 24], 'false,false': [0.0, 0, 0], 'true,true,false': [0.943, 8, 1], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,true,true': [0.0, 1, 0], 'true': [1.414, 8, 25]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)'}, {'true,true,true': [3.33e-08, 0, 24], 'true,false,false,false': [7.45e-09, 16, 0], 'true,false,true': [0.19, 2, 0], 'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.935, 7, 1], 'false': [0.0, 0, 0]}]]
[{'': [0.1836547291092757, -3.2653618371328133e-18], 'true,true': [4.440892098500626e-16, 0.09876543209876548], 'true,true,true': [nan, 4.440892098500626e-16], 'false': [-3.2653618371328133e-18, nan], 'true,true,false': [0.09876543209876548, nan], 'true': [0.1836547291092757, nan]}, {'': [0.1374710686863481, 0.0], 'false,true': [0.0, 3.469446951953614e-18], 'false': [0.0, nan], 'true': [0.1374710686863481, nan], 'false,true,true': [nan, 0.0]}, {'': [0.12565235054555945, 1.3061447348531253e-17], 'true,true': [-2.220446049250313e-16, 0.09876543209876544], 'true,true,true': [nan, -2.220446049250313e-16], 'true': [0.12565235054555945, nan], 'false,true': [0.0, 1.214306433183765e-17], 'false': [1.3061447348531253e-17, nan]}, {'': [0.08469971773416043, -8.163404592832034e-18], 'false,true': [0.0, -6.938893903907228e-18], 'false': [-8.163404592832034e-18, nan], 'true': [0.08469971773416043, nan]}, {'': [0.08012546792391097, 4.89804275569922e-18], 'false,true': [0.0, 5.204170427930421e-18], 'false,true,true': [nan, 0.0], 'false': [4.89804275569922e-18, nan]}, {'': [0.07863771646813962, 8.163404592832034e-18], 'false,true': [0.0, 6.938893903907228e-18], 'false': [8.163404592832034e-18, nan]}, {'': [0.07877649389497422, -2.44902137784961e-18], 'false,true': [0.0, -1.734723475976807e-18], 'false': [-2.44902137784961e-18, nan], 'true': [0.07877649389497422, nan], 'false,true,true': [nan, 0.0]}, {'': [0.07968639719554203, 0.0], 'true,true': [4.625929269271486e-17, 0.09876543209876547], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'true': [0.07968639719554203, nan]}, {'': [0.06056125998293223, -8.163404592832033e-19], 'false,true': [0.0, 0.0], 'false': [-8.163404592832033e-19, nan]}, {'': [0.045335126463498646, nan], 'true,true': [4.625929269271486e-17, nan], 'true,false,false': [0.10937500000000001, 3.469446951953614e-18], 'true': [4.625929269271486e-17, 0.039831560290522657], 'true,false': [0.018092760313245873, 0.04106752786779836]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( female(A) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1372613030074186;  // std dev = 0,033, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.7247313570230584;  // std dev = 0,129, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.5540676933799299;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.55406769337993;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( female(A) )
%   | | then return -0.11114362626296807;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.040889545127747076;  // std dev = 0,775, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( genre(A, E) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(A) )
%   | | then return -0.10062892302073075;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.13726161179554267;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return 0.4165510378443917;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4347750684502497;  // std dev = 0,073, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.3200593596310198;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.33469733723275263;  // std dev = 0,074, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( female(A) )
%   | | then return -0.09188068698519279;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.12180102347206226;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(A) )
%   | | then return -0.0844963816124709;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10936094040012725;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return 0.2547269673087183;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.26636044302786616;  // std dev = 0,071, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(A) )
%   | | then return -0.07818534260117692;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09915522607273457;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return 0.20944312982118718;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.218814038576445;  // std dev = 0,067, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.176865729585849;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.16915962781127725;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( female(A) )
%   | | then return -0.07273293389416897;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.013653506824938558;  // std dev = 0,466, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( genre(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.152568774719968;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1632135895088795;  // std dev = 0,066, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( female(A) )
%   | | then return -0.06797749529076737;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09177534159373951;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( female(A) )
%   | then return 0.13387033028731943;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.1274197257778329;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( genre(A, D) )
%   | then return -0.07429934843687985;  // std dev = 0,014, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, B) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return -0.015036974475564326;  // std dev = 0,432, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999328
   AUC PR    = 0.918673
   CLL	      = -0.069527
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.955 seconds
Total inference time: 1.484 seconds
AUC ROC: 0.999328


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102171
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.596 seconds
Refined model CLL: -0.102171


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999328
   AUC PR    = 0.918673
   CLL	      = -0.069527
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 4.114 seconds
Total inference time: 1.484 seconds
AUC ROC: 0.999328
Total revision time: 4.114
Best scored revision CLL: -0.102171


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:41:57
{'Inference time': 1.484, 'AUC ROC': 0.999328, 'F1': 0.973913, 'Learning time': 4.114, 'Precision': [0.949153, 0.5], 'CLL': -0.069527, 'AUC PR': 0.918673, 'parameter_25': {'Inference time': 1.435, 'AUC ROC': 1.0, 'F1': 0.973913, 'Learning time': 1.004, 'Precision': [0.949153, 0.5], 'CLL': -0.142613, 'AUC PR': 1.0, 'Recall': 1.0}, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8025933795439567;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.6749928282743806;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5243568433454531;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.41751358415830986;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.3941295564832444;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.29968717683406026;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 1,67e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2343670862132291;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109176;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.18858213257239667;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20017342935629417;  // std dev = 0,079, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( female(A) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.16271130230802924;  // std dev = 0,237, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1700757860994292;  // std dev = 0,070, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( female(A) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.15014772446162963;  // std dev = 0,231, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202618;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.14742447281408239;  // std dev = 0,062, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( female(B) )
%   | then return -0.06419184008202618;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return -0.06419184008202618;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.13933948729625195;  // std dev = 0,224, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.107706
   Precision = 0.321839 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.486957


Total learning time: 1.821 seconds
Total inference time: 1.205 seconds
AUC ROC: 0.999765


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:42:00
{'Inference time': 1.205, 'AUC ROC': 0.999765, 'F1': 0.486957, 'Learning time': 1.821, 'Precision': [0.321839, 0.5], 'CLL': -0.107706, 'AUC PR': 0.983476, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.8025933795439567;  // std dev = 0,229, 18,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.159858
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.664 seconds
Total inference time: 0.867 seconds
AUC ROC: 0.983055


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:42:02
{'Inference time': 0.867, 'AUC ROC': 0.983055, 'F1': nan, 'Learning time': 0.664, 'Precision': [nan, 0.5], 'CLL': -0.159858, 'AUC PR': 0.338212, 'Recall': 0.0}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.4175135841583099;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.269211
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.847 seconds
Total inference time: 1.537 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.48 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(G, B)'}, {'true,true,true,false': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,true': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [5.27e-09, 0, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)'}, {'true,true': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 5, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)'}, {'true,true,true': [0.0, 0, 5], 'true,false,false,false': [0.0, 5, 0], 'true,false,true': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0]}]]
[{'': [0.0, -2.7755575615628915e-18], 'true,true': [0.0, nan], 'true,true,true': [nan, 0.0], 'false': [-2.7755575615628915e-18, nan], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'true,true': [-4.4408920985006264e-17, nan], 'true,true,true': [nan, -4.4408920985006264e-17], 'false': [0.0, nan], 'false,true': [nan, 0.0], 'true': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [4.4408920985006264e-17, nan]}, {'': [-2.2204460492503132e-17, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.0, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [-5.551115123125783e-18, -1.3877787807814458e-18], 'false,true': [nan, -1.3877787807814458e-18], 'true': [-5.551115123125783e-18, nan], 'false': [-1.3877787807814458e-18, nan]}, {'': [0.0, -6.938893903907229e-19], 'true,true': [0.0, nan], 'false,true': [nan, -6.938893903907229e-19], 'false': [-6.938893903907229e-19, nan], 'true': [0.0, nan]}, {'': [0.0, 6.938893903907229e-19], 'false,true': [nan, 6.938893903907229e-19], 'false': [6.938893903907229e-19, nan]}, {'': [0.009820698026241881, nan], 'true,true': [0.0, nan], 'true,false,false': [nan, 0.0], 'true': [0.0, 0.0], 'true,false': [nan, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.555122
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.627 seconds
Total inference time: 1.213 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.471 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.269211
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.425 seconds
Total inference time: 1.537 seconds
AUC ROC: 1.0
Total revision time: 2.425
Best scored revision CLL: -0.094637


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:42:07
{'Inference time': 1.537, 'AUC ROC': 1.0, 'parameter_5': {'Inference time': 1.537, 'AUC ROC': 1.0, 'F1': 0.113837, 'Learning time': 0.847, 'Precision': [0.060354, 0.5], 'CLL': -0.269211, 'AUC PR': 1.0, 'Recall': 1.0}, 'F1': 0.113837, 'Learning time': 2.425, 'Precision': [0.060354, 0.5], 'CLL': -0.269211, 'AUC PR': 1.0, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.598989
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.03 seconds
Total inference time: 1.265 seconds
AUC ROC: 0.868098


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:42:10
{'Inference time': 1.265, 'AUC ROC': 0.868098, 'F1': 0.113837, 'Learning time': 1.03, 'Precision': [0.060354, 0.5], 'CLL': -0.598989, 'AUC PR': 0.060354, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.20362
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.48 seconds
Total inference time: 0.854 seconds
AUC ROC: 0.868098


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:42:11
{'Inference time': 0.854, 'AUC ROC': 0.868098, 'F1': nan, 'Learning time': 0.48, 'Precision': [nan, 0.5], 'CLL': -0.20362, 'AUC PR': 0.060354, 'Recall': 0.0}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(D, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.7194734122109543;  // std dev = 1,05e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.41751358415830986;  // std dev = 1,18e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.17709649774527736;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return 0.13400703000801117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.877155
   AUC PR    = 0.064516
   CLL	      = -0.594944
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.911 seconds
Total inference time: 1.877 seconds
AUC ROC: 0.877155


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.503 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 9], 'true,true,false,true': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [1.05e-08, 0, 10], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 9], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 1], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [1.18e-08, 0, 10], 'false,false': [0.0, 0, 0], 'false,true,false': [5.27e-09, 9, 0], 'false,true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true,false': [0.0, 1, 0], 'true': [0.0, 0, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 9, 0], 'false,true,true': [0.0, 1, 0], 'true': [1.83e-08, 0, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.0, 0, 10], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [7.45e-09, 0, 9], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 1], 'true,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 9, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true': [0.0, 1, 0], 'true': [0.0, 0, 10]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 1, 0], 'true,true,true': [0.0, 0, 9], 'true,false,false,false': [0.0, 8, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 0, 1], 'false': [0.0, 0, 0]}]]
[{'': [-8.881784197001253e-17, -1.1102230246251566e-17], 'true,true': [-2.9605947323337506e-16, 0.0], 'true,true,true': [nan, -2.9605947323337506e-16], 'false': [-1.1102230246251566e-17, nan], 'true,true,false': [0.0, nan], 'true': [-8.881784197001253e-17, nan]}, {'': [1.7763568394002506e-16, 2.7755575615628915e-18], 'false,true': [0.0, 0.0], 'false': [2.7755575615628915e-18, nan], 'true': [1.7763568394002506e-16, nan], 'false,true,true': [nan, 0.0]}, {'': [-1.7763568394002506e-16, 0.0], 'true,true': [-1.4802973661668753e-16, 0.0], 'true,true,true': [nan, -1.4802973661668753e-16], 'false': [0.0, nan], 'false,true': [0.0, -1.5419764230904951e-18], 'true': [-1.7763568394002506e-16, nan]}, {'': [1.3322676295501878e-16, 1.3877787807814458e-18], 'false,true': [0.0, 3.0839528461809902e-18], 'false': [1.3877787807814458e-18, nan], 'true': [1.3322676295501878e-16, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'false,true': [0.0, 0.0], 'false,true,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [3.3306690738754695e-17, 1.3877787807814458e-18], 'false,true': [0.0, 1.5419764230904951e-18], 'false': [1.3877787807814458e-18, nan]}, {'': [-2.7755575615628914e-17, 0.0], 'true': [-2.7755575615628914e-17, nan], 'false,true': [0.0, 0.0], 'false,true,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [5.551115123125783e-18, 6.938893903907229e-19], 'true,true': [6.1679056923619804e-18, 0.0], 'false,true': [0.0, 7.709882115452476e-19], 'false': [6.938893903907229e-19, nan], 'true': [5.551115123125783e-18, nan]}, {'': [0.0, 6.938893903907229e-19], 'false,true': [0.0, 0.0], 'false': [6.938893903907229e-19, nan]}, {'': [0.009820698026241881, nan], 'true,true': [0.0, 0.0], 'true,false': [0.0, 0.0038797819362930887], 'true,true,false': [nan, 0.0], 'true,false,false': [0.0, 0.0], 'true': [0.003535451289447078, 0.003535451289447078]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.5553664367462845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( genre(A, E) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.20975771563253556;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17709649774527736;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.17709649774527736;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( genre(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.15274385809367097;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.10569290570943442;  // std dev = 0,069, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then if ( actor(B) )
%   | | | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.0018744499479862546;  // std dev = 0,162, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.555057
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.341 seconds
Total inference time: 1.492 seconds
AUC ROC: 0.999617


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097466
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.523 seconds
Refined model CLL: -0.097466


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.877155
   AUC PR    = 0.064516
   CLL	      = -0.594944
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 3.278 seconds
Total inference time: 1.877 seconds
AUC ROC: 0.877155
Total revision time: 3.278
Best scored revision CLL: -0.094637


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:42:19
{'Inference time': 1.877, 'AUC ROC': 0.877155, 'F1': 0.113837, 'Learning time': 3.278, 'parameter_10': {'Inference time': 1.877, 'AUC ROC': 0.877155, 'F1': 0.113837, 'Learning time': 0.911, 'Precision': [0.060354, 0.5], 'CLL': -0.594944, 'AUC PR': 0.064516, 'Recall': 1.0}, 'Precision': [0.060354, 0.5], 'CLL': -0.594944, 'AUC PR': 0.064516, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.598989
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.071 seconds
Total inference time: 1.361 seconds
AUC ROC: 0.868098


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:42:21
{'Inference time': 1.361, 'AUC ROC': 0.868098, 'F1': 0.113837, 'Learning time': 1.071, 'Precision': [0.060354, 0.5], 'CLL': -0.598989, 'AUC PR': 0.060354, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.20362
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.518 seconds
Total inference time: 0.924 seconds
AUC ROC: 0.868098


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:42:23
{'Inference time': 0.924, 'AUC ROC': 0.868098, 'F1': nan, 'Learning time': 0.518, 'Precision': [nan, 0.5], 'CLL': -0.20362, 'AUC PR': 0.060354, 'Recall': 0.0}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( movie(D, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6228305236402908;  // std dev = 0,299, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.12544463852839138;  // std dev = 1,86e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5790855320200106;  // std dev = 2,98e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.19402838865784244;  // std dev = 0,500, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.36852546162267297;  // std dev = 0,271, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2809919374787922;  // std dev = 1,117, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.21809322900755268;  // std dev = 1,124, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.17283757286589255;  // std dev = 0,275, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.07877675473109172;  // std dev = 1,32e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.21407866029824874;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.1023954124955544;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11957894144154903;  // std dev = 1,097, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.16325980513431132;  // std dev = 1,29e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.10650379865930337;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.273757
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.962 seconds
Total inference time: 1.431 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.991111
   AUC PR    = 0.991634
   CLL	      = -0.187649
   Precision = 0.882353 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9375


Total scoring time: 0.561 seconds
Parameter learned model CLL: -0.187649


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 13], 'true,true,false,true': [1.0, 2, 2], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 13, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.299, 2, 15], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 11, 0], 'false,true,true,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [2.98e-08, 0, 13], 'false,false': [0.0, 0, 0], 'true,true,false': [0.5, 2, 2], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 11, 0], 'false,true,true': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.271, 2, 15], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 11, 0], 'false,true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 11, 0], 'false,true,true,false': [0.0, 2, 0], 'true': [1.117, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [5.27e-09, 11, 0], 'false,true,true': [0.0, 2, 0], 'true': [1.124, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.275, 2, 15], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 11, 0], 'false,true,true,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [0.0, 0, 13], 'false,false': [0.0, 0, 0], 'true,true,false': [1.0, 2, 2], 'true,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 11, 0], 'false,true,true': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 11, 0], 'false,true,true': [0.0, 2, 0], 'true': [1.097, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 1, 0], 'true,true,true': [1.29e-08, 0, 13], 'true,false,false,false': [3.73e-09, 10, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.0, 2, 2], 'false': [0.0, 0, 0]}]]
[{'': [0.10380622837370206, -1.2810265668751807e-17], 'true,true': [-2.7328566760003855e-16, 0.25], 'true,true,true': [nan, -2.7328566760003855e-16], 'true': [0.10380622837370206, nan], 'true,true,false': [0.25, nan], 'false': [-1.2810265668751807e-17, nan]}, {'': [0.0891780351234304, 4.270088556250602e-18], 'false,true': [0.0, 2.523234146875356e-18], 'false': [4.270088556250602e-18, nan], 'true': [0.0891780351234304, nan], 'false,true,true': [nan, 0.0]}, {'': [0.08550168923882391, 8.540177112501205e-18], 'true,true': [6.832141690000964e-17, 0.25], 'true,true,true': [nan, 6.832141690000964e-17], 'true': [0.08550168923882391, nan], 'false,true': [0.0, 5.046468293750712e-18], 'false': [8.540177112501205e-18, nan]}, {'': [0.07333548086310966, -2.135044278125301e-18], 'false,true': [0.0, 0.0], 'false': [-2.135044278125301e-18, nan], 'true': [0.07333548086310966, nan]}, {'': [0.07334243518967065, 2.135044278125301e-18], 'false,true': [0.0, 0.0], 'false,true,true': [nan, 0.0], 'false': [2.135044278125301e-18, nan]}, {'': [0.07429322381491144, 4.270088556250602e-18], 'false,true': [0.0, 2.523234146875356e-18], 'false': [4.270088556250602e-18, nan]}, {'': [0.07555601014326205, 1.0675221390626506e-18], 'false,true': [0.0, 0.0], 'false': [1.0675221390626506e-18, nan], 'true': [0.07555601014326205, nan], 'false,true,true': [nan, 0.0]}, {'': [0.07684464918697671, 0.0], 'true,true': [0.0, 0.24999999999999997], 'false,true': [0.0, 6.30808536718839e-19], 'false': [0.0, nan], 'true': [0.07684464918697671, nan]}, {'': [0.07079036482628619, 5.337610695313253e-19], 'false,true': [0.0, 6.30808536718839e-19], 'false': [5.337610695313253e-19, nan]}, {'': [0.047355943333469416, nan], 'true,true': [1.2810265668751807e-17, 0.0], 'true,false': [0.0, 0.0717939391507439], 'true,true,false': [nan, 0.0], 'true,false,false': [0.24999999999999997, 1.3877787807814458e-18], 'true': [0.0034313533767910487, 0.06283568159474597]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.7449784760894345;  // std dev = 0,107, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5373269569258905;  // std dev = 0,364, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.5490597911834425;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5997741387310618;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.18968617035006463;  // std dev = 0,956, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( genre(A, E) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.4732220003484974;  // std dev = 0,095, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.29536743686615635;  // std dev = 0,312, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.3628662568275188;  // std dev = 0,092, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.22446980276600453;  // std dev = 0,311, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.2864076064297269;  // std dev = 0,084, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.17249982863437846;  // std dev = 0,312, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.233265323135697;  // std dev = 0,074, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.13441140908681368;  // std dev = 0,314, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1534300085112421;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2646382982304689;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.11410827718019834;  // std dev = 0,828, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( genre(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.18873472183140141;  // std dev = 0,086, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.07324797501180501;  // std dev = 0,286, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.11404095168716322;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1744311546321071;  // std dev = 0,084, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(D, B) )
%   | | then if ( actor(B) )
%   | | | then return -0.15490449023401473;  // std dev = 0,574, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.11005711714175624;  // std dev = 0,348, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.216478
   Precision = 0.483333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.651685


Total learning time: 1.724 seconds
Total inference time: 1.533 seconds
AUC ROC: 0.999617


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.160868
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.557 seconds
Refined model CLL: -0.160868


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.216478
   Precision = 0.483333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.651685


Total learning time: 3.804 seconds
Total inference time: 1.533 seconds
AUC ROC: 0.999617
Total revision time: 3.804
Best scored revision CLL: -0.160868


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:42:30
{'parameter_15': {'Inference time': 1.431, 'AUC ROC': 1.0, 'F1': 0.113837, 'Learning time': 0.962, 'Precision': [0.060354, 0.5], 'CLL': -0.273757, 'AUC PR': 1.0, 'Recall': 1.0}, 'Inference time': 1.533, 'AUC ROC': 0.999617, 'F1': 0.651685, 'Learning time': 3.804, 'Precision': [0.483333, 0.5], 'CLL': -0.216478, 'AUC PR': 0.971227, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.6581489350995123;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5580193346218546;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.19422804878759067;  // std dev = 0,201, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.16146338054999693;  // std dev = 0,220, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.6015435958279679;  // std dev = 0,167, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.16781944908142077;  // std dev = 0,180, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.14212744882691855;  // std dev = 0,201, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( female(A) )
%   | | then return 0.4063280771790266;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.49557214936721306;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.14721298201197677;  // std dev = 0,162, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(B) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.12666428545736536;  // std dev = 0,184, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( female(A) )
%   | | then return 0.31313700856071375;  // std dev = 1,49e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.37442399187085007;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.13078718079985197;  // std dev = 0,147, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11406020630615483;  // std dev = 0,170, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( female(A) )
%   | | then return 0.24999648622707532;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.29158304072985525;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B), actor(A) )
%   | then return -0.1158961836655006;  // std dev = 0,129, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.09024279517866551;  // std dev = 0,058, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2216067641232246;  // std dev = 0,015, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B), actor(A) )
%   | then return -0.1049613064774814;  // std dev = 0,118, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.08338216957781294;  // std dev = 0,055, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( female(A) )
%   | | then return 0.1721829959423237;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.19767368094483984;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.09900591250309985;  // std dev = 0,112, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(B) )
%   | | then return -0.06489120684088555;  // std dev = 0,003, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08927517140317978;  // std dev = 0,139, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( female(A) )
%   | | then return 0.14900615587391078;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1681813631839627;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( actor(A), female(B) )
%   | then return -0.08928229986429337;  // std dev = 0,100, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07159319165139527;  // std dev = 0,048, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( female(A) )
%   | | then return 0.1310822559166337;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.14594660797222592;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.09532
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 2.343 seconds
Total inference time: 1.215 seconds
AUC ROC: 0.999617


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:42:34
{'Inference time': 1.215, 'AUC ROC': 0.999617, 'F1': 0.966667, 'Learning time': 2.343, 'Precision': [0.935484, 0.5], 'CLL': -0.09532, 'AUC PR': 0.971227, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.6581489350995123;  // std dev = 0,400, 10,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.913582
   AUC PR    = 0.424563
   CLL	      = -0.191696
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.726 seconds
Total inference time: 0.912 seconds
AUC ROC: 0.913582


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:42:36
{'Inference time': 0.912, 'AUC ROC': 0.913582, 'F1': nan, 'Learning time': 0.726, 'Precision': [nan, 0.5], 'CLL': -0.191696, 'AUC PR': 0.424563, 'Recall': 0.0}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( movie(D, B) )
%   | | | then return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6123258618391317;  // std dev = 0,313, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.12544463852839138;  // std dev = 1,86e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5816438469501541;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.1962545271493348;  // std dev = 0,500, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.3631965175624018;  // std dev = 0,284, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2768294542938823;  // std dev = 1,363, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926096;  // std dev = 1,32e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.21440059934962538;  // std dev = 1,371, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.16932068020526456;  // std dev = 0,288, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.2182547613279957;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.09639741987976004;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1164435592339999;  // std dev = 1,338, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06842697784420272;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.16651029435910436;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( genre(A, E) )
%   | | | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.10121320943913559;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.271131
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.992 seconds
Total inference time: 1.478 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.98875
   AUC PR    = 0.989346
   CLL	      = -0.198667
   Precision = 0.869565 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.930233


Total scoring time: 0.58 seconds
Parameter learned model CLL: -0.198667


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 17], 'true,true,false,true': [1.225, 3, 3], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 17, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.313, 3, 20], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 14, 0], 'false,true,true,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 17], 'false,false': [0.0, 0, 0], 'true,true,false': [0.5, 3, 3], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [1.18e-08, 14, 0], 'false,true,true': [2.63e-09, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.284, 3, 20], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0], 'false,true,true': [0.0, 3, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 14, 0], 'false,true,true,false': [0.0, 2, 0], 'true': [1.363, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [8.33e-09, 14, 0], 'false,true,true': [0.0, 3, 0], 'true': [1.371, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.288, 3, 20], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0], 'false,true,true,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [0.0, 0, 17], 'false,false': [0.0, 0, 0], 'true,true,false': [1.225, 3, 3], 'true,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 14, 0], 'false,true,true': [1.86e-09, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 14, 0], 'false,true,true': [0.0, 3, 0], 'true': [1.338, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 1, 0], 'true,true,true': [0.0, 0, 17], 'true,false,false,false': [6.97e-09, 13, 0], 'true,true,false,true': [0.0, 1, 0], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.225, 3, 3], 'false': [0.0, 0, 0]}]]
[{'': [0.11342155009451807, -3.2653618371328133e-18], 'true,true': [-2.0898315757650005e-16, 0.24999999999999992], 'true,true,true': [nan, -2.0898315757650005e-16], 'true': [0.11342155009451807, nan], 'true,true,false': [0.24999999999999992, nan], 'false': [-3.2653618371328133e-18, nan]}, {'': [0.09774575103128105, 0.0], 'false,true': [0.0, 3.96508223080413e-18], 'false': [0.0, nan], 'true': [0.09774575103128105, nan], 'false,true,true': [0.0, 0.0]}, {'': [0.09385546812341555, 1.3061447348531253e-17], 'true,true': [0.0, 0.24999999999999997], 'true,true,true': [nan, 0.0], 'true': [0.09385546812341555, nan], 'false,true': [2.3129646346357427e-18, 9.912705577010326e-18], 'false': [1.3061447348531253e-17, nan]}, {'': [0.08077702941809627, -8.163404592832034e-18], 'false,true': [-1.1564823173178713e-18, -3.96508223080413e-18], 'false': [-8.163404592832034e-18, nan], 'true': [0.08077702941809627, nan]}, {'': [0.08074037377408845, 4.89804275569922e-18], 'false,true': [2.3129646346357427e-18, 3.96508223080413e-18], 'false,true,true': [0.0, 0.0], 'false': [4.89804275569922e-18, nan]}, {'': [0.0816978511050444, 8.163404592832034e-18], 'false,true': [0.0, 4.956352788505163e-18], 'false': [8.163404592832034e-18, nan]}, {'': [0.08298755912885661, -2.44902137784961e-18], 'false,true': [0.0, -9.912705577010326e-19], 'false': [-2.44902137784961e-18, nan], 'true': [0.08298755912885661, nan], 'false,true,true': [0.0, 0.0]}, {'': [0.0843073941477456, 0.0], 'true,true': [-6.530723674265627e-18, 0.24999999999999997], 'false,true': [1.1564823173178713e-18, 9.912705577010326e-19], 'false': [0.0, nan], 'true': [0.0843073941477456, nan]}, {'': [0.07788331080352605, -8.163404592832033e-19], 'false,true': [-5.782411586589357e-19, 9.912705577010326e-19], 'false': [-8.163404592832033e-19, nan]}, {'': [0.0517702017297336, nan], 'true,true': [-6.530723674265627e-18, 0.0], 'true,false': [0.0, 0.07924350520650385], 'true,true,false': [0.0, 0.0], 'true,false,false': [0.24999999999999997, 3.736327486719277e-18], 'true': [0.005012737242142868, 0.07170828199777052]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false,true;genre(B, G).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false,true;genre(B, F).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false,true;genre(B, G).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.35814893509951223;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7328635707471562;  // std dev = 0,143, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.191258864214365;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then if ( genre(B, E) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5520575402088375;  // std dev = 1,67e-08, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.2533863085256026;  // std dev = 1,021, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( genre(A, E) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A) )
%   | | | then return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.4445998522068876;  // std dev = 0,070, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.20105339116292656;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.3760295727290112;  // std dev = 0,090, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3126692062853697;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.17068546635764592;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then if ( genre(B, E) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.29524478744017546;  // std dev = 0,081, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.24967636181887395;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.1478628317313307;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 9,31e-10, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.23931199501097794;  // std dev = 0,072, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2058678432507852;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.13018485502892507;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then if ( genre(B, E) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( female(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16733991908755655;  // std dev = 0,009, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.08649829418607202;  // std dev = 0,496, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( genre(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12531734388131083;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.16426964138180583;  // std dev = 0,046, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.11610269191934663;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.10141945127819273;  // std dev = 0,071, 13,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(D, B) )
%   | | then if ( actor(B) )
%   | | | then return -0.07448216941214517;  // std dev = 0,074, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.11857803588250633;  // std dev = 0,334, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.078438
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.694 seconds
Total inference time: 1.698 seconds
AUC ROC: 0.999617


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.106233
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.582 seconds
Refined model CLL: -0.106233


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.078438
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.848 seconds
Total inference time: 1.698 seconds
AUC ROC: 0.999617
Total revision time: 3.848
Best scored revision CLL: -0.106233


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:42:44
{'Inference time': 1.698, 'AUC ROC': 0.999617, 'parameter_20': {'Inference time': 1.478, 'AUC ROC': 1.0, 'F1': 0.113837, 'Learning time': 0.992, 'Precision': [0.060354, 0.5], 'CLL': -0.271131, 'AUC PR': 1.0, 'Recall': 1.0}, 'F1': 0.966667, 'Learning time': 3.848, 'Precision': [0.935484, 0.5], 'CLL': -0.078438, 'AUC PR': 0.971227, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.678 seconds
Total inference time: 1.435 seconds
AUC ROC: 0.999416


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:42:47
{'Inference time': 1.435, 'AUC ROC': 0.999416, 'F1': 0.966667, 'Learning time': 1.678, 'Precision': [0.935484, 0.5], 'CLL': -0.065794, 'AUC PR': 0.935484, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.153209
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.698 seconds
Total inference time: 0.965 seconds
AUC ROC: 0.999416


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:42:49
{'Inference time': 0.965, 'AUC ROC': 0.999416, 'F1': nan, 'Learning time': 0.698, 'Precision': [nan, 0.5], 'CLL': -0.153209, 'AUC PR': 0.935484, 'Recall': 0.0}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( movie(D, B) )
%   | | | then return 0.3581489350995123;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5825626534025145;  // std dev = 0,348, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.12544463852839138;  // std dev = 1,86e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.588868167640779;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20251196167627183;  // std dev = 0,500, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.34808251815794883;  // std dev = 0,318, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10159632948783635;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26516926524645057;  // std dev = 1,742, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926094;  // std dev = 2,28e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20425232597338533;  // std dev = 1,750, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.15982510286429083;  // std dev = 0,321, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.23024843028429887;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.07945895867645483;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10799622432139223;  // std dev = 1,710, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.17578733813669384;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( genre(A, E) )
%   | | | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, F) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.08639689571469819;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return -0.06419184008202619;  // std dev = 6,97e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.264205
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.998 seconds
Total inference time: 1.426 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.981185
   CLL	      = -0.23112
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.57 seconds
Parameter learned model CLL: -0.23112


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 20], 'true,true,false,true': [1.581, 5, 5], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [7.45e-09, 20, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.348, 5, 25], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 17, 0], 'false,true,true,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 20], 'false,false': [0.0, 0, 0], 'true,true,false': [0.5, 5, 5], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 17, 0], 'false,true,true': [2.63e-09, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.318, 5, 25], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true': [0.0, 3, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [2.28e-09, 17, 0], 'false,true,true,false': [0.0, 2, 0], 'true': [1.742, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [1.18e-08, 17, 0], 'false,true,true': [0.0, 3, 0], 'true': [1.75, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.321, 5, 25], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [0.0, 0, 20], 'false,false': [0.0, 0, 0], 'true,true,false': [1.581, 5, 5], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true': [1.86e-09, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true': [0.0, 3, 0], 'true': [1.71, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [1.32e-09, 3, 0], 'true,true,true': [0.0, 0, 20], 'true,false,false,false': [6.97e-09, 14, 0], 'true,true,false,true': [0.0, 1, 0], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.581, 5, 5], 'false': [0.0, 0, 0]}]]
[{'': [0.13888888888888987, 2.7755575615628915e-18], 'true,true': [-8.881784197001253e-17, 0.24999999999999983], 'true,true,true': [nan, -8.881784197001253e-17], 'true': [0.13888888888888987, nan], 'true,true,false': [0.24999999999999983, nan], 'false': [2.7755575615628915e-18, nan]}, {'': [0.12082244508833893, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'true': [0.12082244508833893, nan], 'false,true,true': [0.0, 0.0]}, {'': [0.11650469286384141, 1.1102230246251566e-17], 'true,true': [-4.884981308350689e-16, 0.24999999999999994], 'true,true,true': [nan, -4.884981308350689e-16], 'true': [0.11650469286384141, nan], 'false,true': [2.3129646346357427e-18, 1.3061447348531253e-17], 'false': [1.1102230246251566e-17, nan]}, {'': [0.10129729520975911, -2.7755575615628915e-18], 'false,true': [-1.1564823173178713e-18, -4.89804275569922e-18], 'false': [-2.7755575615628915e-18, nan], 'true': [0.10129729520975911, nan]}, {'': [0.10111884755639866, 6.938893903907228e-18], 'false,true': [2.3129646346357427e-18, 4.89804275569922e-18], 'false,true,true': [0.0, 0.0], 'false': [6.938893903907228e-18, nan]}, {'': [0.1020298680770167, 9.714451465470119e-18], 'false,true': [0.0, 8.163404592832034e-18], 'false': [9.714451465470119e-18, nan]}, {'': [0.1033174840236563, -4.8572257327350596e-18], 'false,true': [0.0, -2.44902137784961e-18], 'false': [-4.8572257327350596e-18, nan], 'true': [0.1033174840236563, nan], 'false,true,true': [0.0, 0.0]}, {'': [0.1046485926170861, -1.3877787807814458e-18], 'true,true': [0.0, 0.24999999999999994], 'false,true': [1.1564823173178713e-18, 0.0], 'false': [-1.3877787807814458e-18, nan], 'true': [0.1046485926170861, nan]}, {'': [0.09744187387019393, -2.7755575615628915e-18], 'false,true': [-5.782411586589357e-19, -8.163404592832033e-19], 'false': [-2.7755575615628915e-18, nan]}, {'': [0.06475309191463645, nan], 'true,true': [-2.7755575615628914e-17, 0.0], 'true,false': [0.0, 0.10428650873158161], 'true,true,false': [0.0, 5.782411586589357e-19], 'true,false,false': [0.25, 3.469446951953614e-18], 'true': [0.007998611941462792, 0.09627054780962133]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false,true;genre(B, G).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false,true;genre(B, F).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false,true;genre(B, G).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( genre(A, D) )
%   | then if ( genre(B, E) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( genre(A, E) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014955;  // std dev = 5,27e-09, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(A, D) )
%   | then if ( genre(B, E) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2551722425694894;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then if ( actor(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.20975771563253567;  // std dev = 5,89e-09, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.20975771563253567;  // std dev = 6,45e-09, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(A, D) )
%   | then if ( genre(B, E) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.07877675473109176;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( director(B) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1527438580936709;  // std dev = 5,59e-09, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then return 0.10097388499300493;  // std dev = 0,074, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(D, B) )
%   | | then if ( actor(B) )
%   | | | then return -0.06419184008202618;  // std dev = 6,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.07737878141085765;  // std dev = 0,237, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.066367
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.842 seconds
Total inference time: 1.76 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098157
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.581 seconds
Refined model CLL: -0.098157


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.066367
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.991 seconds
Total inference time: 1.76 seconds
AUC ROC: 0.999416
Total revision time: 3.991
Best scored revision CLL: -0.098157


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:42:57
{'Inference time': 1.76, 'AUC ROC': 0.999416, 'F1': 0.966667, 'Learning time': 3.991, 'Precision': [0.935484, 0.5], 'CLL': -0.066367, 'AUC PR': 0.935484, 'parameter_25': {'Inference time': 1.426, 'AUC ROC': 1.0, 'F1': 0.113837, 'Learning time': 0.998, 'Precision': [0.060354, 0.5], 'CLL': -0.264205, 'AUC PR': 1.0, 'Recall': 1.0}, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109179;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.888 seconds
Total inference time: 1.365 seconds
AUC ROC: 0.999416


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:43:00
{'Inference time': 1.365, 'AUC ROC': 0.999416, 'F1': 0.966667, 'Learning time': 1.888, 'Precision': [0.935484, 0.5], 'CLL': -0.065794, 'AUC PR': 0.935484, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.153209
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.721 seconds
Total inference time: 0.989 seconds
AUC ROC: 0.999416


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:43:02
{'Inference time': 0.989, 'AUC ROC': 0.999416, 'F1': nan, 'Learning time': 0.721, 'Precision': [nan, 0.5], 'CLL': -0.153209, 'AUC PR': 0.935484, 'Recall': 0.0}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( movie(D, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.47806825485685567;  // std dev = 0,382, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6139111792801373;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.18788943599477587;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.28441786772924477;  // std dev = 0,282, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22272552446520985;  // std dev = 0,712, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926094;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17482629076607478;  // std dev = 0,697, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.1380183673198955;  // std dev = 0,261, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.2748572979391659;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.30328907365167623;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09019545501340745;  // std dev = 0,558, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2083056089201274;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return -0.2602291639902117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.2602291639902117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.966979
   AUC PR    = 0.809957
   CLL	      = -0.137812
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.84 seconds
Total inference time: 1.663 seconds
AUC ROC: 0.966979


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.163502
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.498 seconds
Parameter learned model CLL: -0.163502


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 5], 'true,true,false,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,true': [0.382, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 2, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 3, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.282, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 3, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.712, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.697, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)'}, {'true,true': [0.261, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 3, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.558, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 1, 0], 'true,true,true': [5.27e-09, 0, 5], 'true,false,false,false': [0.0, 2, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'false': [0.0, 0, 0]}]]
[{'': [0.20408163265306106, 0.0], 'true,true': [0.0, 0.0], 'true,true,true': [nan, 0.0], 'true': [0.20408163265306106, nan], 'true,true,false': [0.0, nan], 'false': [0.0, nan]}, {'': [0.1456911249928931, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.1456911249928931, nan]}, {'': [0.1312008625826999, 2.3129646346357427e-18], 'true,true': [0.0, 0.0], 'true,true,true': [nan, 0.0], 'true': [0.1312008625826999, nan], 'false,true': [nan, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan]}, {'': [0.07931716963309329, -1.1564823173178713e-18], 'false,true': [nan, -1.1564823173178713e-18], 'false': [-1.1564823173178713e-18, nan], 'true': [0.07931716963309329, nan]}, {'': [0.07251862127939808, 2.3129646346357427e-18], 'false,true': [nan, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan]}, {'': [0.06932764450586802, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.06821377642967705, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.06821377642967705, nan]}, {'': [0.06821494428237881, 1.1564823173178713e-18], 'true,true': [0.0, 0.0], 'false,true': [nan, 1.1564823173178713e-18], 'false': [1.1564823173178713e-18, nan], 'true': [0.06821494428237881, nan]}, {'': [0.044472873389841995, -5.782411586589357e-19], 'false,true': [nan, -5.782411586589357e-19], 'false': [-5.782411586589357e-19, nan]}, {'': [0.03539655024142147, nan], 'true,true': [5.551115123125783e-18, 0.0], 'true,false': [0.0, 0.00854014052557396], 'true,true,false': [nan, 0.0], 'true,false,false': [0.0, 0.0], 'true': [0.010313174960094623, 0.009607658091270704]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.47806825485685567;  // std dev = 0,382, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6139111792801373;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.18788943599477587;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.28441786772924477;  // std dev = 0,282, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22272552446520985;  // std dev = 0,269, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17482629076607478;  // std dev = 0,263, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1380183673198955;  // std dev = 0,261, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2748572979391659;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.30328907365167623;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09019545501340745;  // std dev = 0,211, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then return 0.16288936741976848;  // std dev = 0,249, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.2602291639902117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then return -0.12953761471808803;  // std dev = 0,160, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.966161
   AUC PR    = 0.596149
   CLL	      = -0.149237
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.818 seconds
Total inference time: 1.42 seconds
AUC ROC: 0.966161


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.171273
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.491 seconds
Refined model CLL: -0.171273


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.966979
   AUC PR    = 0.809957
   CLL	      = -0.137812
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.6470000000000002 seconds
Total inference time: 1.663 seconds
AUC ROC: 0.966979
Total revision time: 2.6470000000000002
Best scored revision CLL: -0.163502


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:43:08
{'Inference time': 1.663, 'AUC ROC': 0.966979, 'parameter_5': {'Inference time': 1.663, 'AUC ROC': 0.966979, 'F1': 0.708791, 'Learning time': 0.84, 'Precision': [0.693548, 0.5], 'CLL': -0.137812, 'AUC PR': 0.809957, 'Recall': 0.724719}, 'F1': 0.708791, 'Learning time': 2.6470000000000002, 'Precision': [0.693548, 0.5], 'CLL': -0.137812, 'AUC PR': 0.809957, 'Recall': 0.724719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.41642853892569953;  // std dev = 0,334, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.19890208353793024;  // std dev = 0,212, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12747659482650645;  // std dev = 0,067, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.3844334334677746;  // std dev = 0,779, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2666116194443467;  // std dev = 0,260, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.19455218326305354;  // std dev = 0,272, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12529111250474018;  // std dev = 0,111, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.24435911290272652;  // std dev = 0,673, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17667315962243427;  // std dev = 0,215, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.18428532830377678;  // std dev = 0,299, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.14319852135366565;  // std dev = 0,210, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1628671932017418;  // std dev = 0,271, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1280258138125977;  // std dev = 0,167, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.14908789676106404;  // std dev = 0,543, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10365242961323504;  // std dev = 0,186, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1533364308462902;  // std dev = 0,279, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.209846
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.121 seconds
Total inference time: 1.159 seconds
AUC ROC: 0.985041


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:43:11
{'Inference time': 1.159, 'AUC ROC': 0.985041, 'F1': 0.770563, 'Learning time': 1.121, 'Precision': [0.626761, 0.5], 'CLL': -0.209846, 'AUC PR': 0.626761, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.231676
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.489 seconds
Total inference time: 0.863 seconds
AUC ROC: 0.870167


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:43:13
{'Inference time': 0.863, 'AUC ROC': 0.870167, 'F1': nan, 'Learning time': 0.489, 'Precision': [nan, 0.5], 'CLL': -0.231676, 'AUC PR': 0.162113, 'Recall': 0.0}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( movie(D, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4780682548568557;  // std dev = 0,382, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6139111792801373;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.18788943599477587;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.2844178677292449;  // std dev = 0,282, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2227255244652098;  // std dev = 1,008, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926097;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17482629076607484;  // std dev = 0,985, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.13801836731989542;  // std dev = 0,261, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.27485729793916586;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.30328907365167623;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09019545501340742;  // std dev = 0,789, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2083056089201274;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return -0.2602291639902117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.2602291639902117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.966979
   AUC PR    = 0.809957
   CLL	      = -0.137812
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.875 seconds
Total inference time: 1.485 seconds
AUC ROC: 0.966979


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.163502
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.54 seconds
Parameter learned model CLL: -0.163502


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 10], 'true,true,false,true': [0.0, 4, 0], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 6, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,true': [0.382, 4, 10], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 10], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 4, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.282, 4, 10], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.008, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 6, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.985, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)'}, {'true,true': [0.261, 4, 10], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [1.83e-08, 0, 10], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 4, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 6, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.789, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 1, 0], 'true,true,true': [7.45e-09, 0, 10], 'true,false,false,false': [0.0, 5, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 3, 0], 'false': [0.0, 0, 0]}]]
[{'': [0.20408163265306115, -6.938893903907228e-18], 'true,true': [-8.881784197001253e-17, 0.0], 'true,true,true': [nan, -8.881784197001253e-17], 'true': [0.20408163265306115, nan], 'true,true,false': [0.0, nan], 'false': [-6.938893903907228e-18, nan]}, {'': [0.14569112499289297, -2.3129646346357427e-18], 'false,true': [nan, -2.3129646346357427e-18], 'false': [-2.3129646346357427e-18, nan], 'true': [0.14569112499289297, nan]}, {'': [0.13120086258269975, 0.0], 'true,true': [0.0, 0.0], 'true,true,true': [nan, 0.0], 'true': [0.13120086258269975, nan], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.07931716963309321, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.07931716963309321, nan]}, {'': [0.07251862127939813, 1.1564823173178713e-18], 'false,true': [nan, 1.1564823173178713e-18], 'false': [1.1564823173178713e-18, nan]}, {'': [0.06932764450586801, 1.1564823173178713e-18], 'false,true': [nan, 1.1564823173178713e-18], 'false': [1.1564823173178713e-18, nan]}, {'': [0.06821377642967708, -1.1564823173178713e-18], 'false,true': [nan, -1.1564823173178713e-18], 'false': [-1.1564823173178713e-18, nan], 'true': [0.06821377642967708, nan]}, {'': [0.06821494428237881, 0.0], 'true,true': [3.3306690738754695e-17, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.06821494428237881, nan]}, {'': [0.044472873389842, 5.782411586589357e-19], 'false,true': [nan, 5.782411586589357e-19], 'false': [5.782411586589357e-19, nan]}, {'': [0.03539655024142147, nan], 'true,true': [5.551115123125783e-18, 0.0], 'true,false': [0.0, 0.00900717946056629], 'true,true,false': [nan, 0.0], 'true,false,false': [0.0, 0.0], 'true': [0.006136765265510849, 0.009489045028415513]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then return 0.11598895090891687;  // std dev = 0,057, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.987838
   AUC PR    = 0.683067
   CLL	      = -0.114247
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 1.036 seconds
Total inference time: 1.314 seconds
AUC ROC: 0.987838


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096313
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.522 seconds
Refined model CLL: -0.096313


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.987838
   AUC PR    = 0.683067
   CLL	      = -0.114247
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 2.973 seconds
Total inference time: 1.314 seconds
AUC ROC: 0.987838
Total revision time: 2.973
Best scored revision CLL: -0.096313


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:43:19
{'Inference time': 1.314, 'AUC ROC': 0.987838, 'F1': 0.708791, 'Learning time': 2.973, 'parameter_10': {'Inference time': 1.485, 'AUC ROC': 0.966979, 'F1': 0.708791, 'Learning time': 0.875, 'Precision': [0.693548, 0.5], 'CLL': -0.137812, 'AUC PR': 0.809957, 'Recall': 0.724719}, 'Precision': [0.693548, 0.5], 'CLL': -0.114247, 'AUC PR': 0.683067, 'Recall': 0.724719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0.6465415686654066;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0.5044629797645588;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0.37956420580342304;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.3780557943351663;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.18090009776852312;  // std dev = 0,483, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2940355107599187;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.16189308627828242;  // std dev = 0,456, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2368730776591903;  // std dev = 1,05e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14612074092674993;  // std dev = 0,430, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1967435409324434;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1328374634615282;  // std dev = 0,405, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1674907060679336;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12151518752035566;  // std dev = 0,381, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1454171149974417;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11176724522595614;  // std dev = 0,358, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.214737
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.468 seconds
Total inference time: 1.44 seconds
AUC ROC: 0.985041


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:43:22
{'Inference time': 1.44, 'AUC ROC': 0.985041, 'F1': 0.770563, 'Learning time': 1.468, 'Precision': [0.626761, 0.5], 'CLL': -0.214737, 'AUC PR': 0.626761, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.23376
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.56 seconds
Total inference time: 0.858 seconds
AUC ROC: 0.870167


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:43:24
{'Inference time': 0.858, 'AUC ROC': 0.870167, 'F1': nan, 'Learning time': 0.56, 'Precision': [nan, 0.5], 'CLL': -0.23376, 'AUC PR': 0.162113, 'Recall': 0.0}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(D, B) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.47806825485685556;  // std dev = 0,382, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6139111792801373;  // std dev = 4,21e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.18788943599477584;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.2844178677292448;  // std dev = 0,282, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2227255244652098;  // std dev = 1,234, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17482629076607487;  // std dev = 1,207, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.13801836731989547;  // std dev = 0,261, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.2748572979391658;  // std dev = 2,98e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.30328907365167623;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09019545501340732;  // std dev = 0,966, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2083056089201274;  // std dev = 1,49e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return -0.2602291639902117;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.2602291639902117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.966979
   AUC PR    = 0.809957
   CLL	      = -0.137812
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.94 seconds
Total inference time: 1.502 seconds
AUC ROC: 0.966979


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.163502
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.534 seconds
Parameter learned model CLL: -0.163502


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 15], 'true,true,false,true': [0.0, 6, 0], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,true': [0.382, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [4.21e-08, 0, 15], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 6, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.282, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,false': [5.27e-09, 9, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.234, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 9, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.207, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)'}, {'true,true': [0.261, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [2.98e-08, 0, 15], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 6, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 9, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.966, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 1, 0], 'true,true,true': [1.49e-08, 0, 15], 'true,false,false,false': [0.0, 8, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 5, 0], 'false': [0.0, 0, 0]}]]
[{'': [0.20408163265306084, -9.25185853854297e-18], 'true,true': [-2.3684757858670006e-16, -6.938893903907228e-18], 'true,true,true': [nan, -2.3684757858670006e-16], 'true': [0.20408163265306084, nan], 'true,true,false': [-6.938893903907228e-18, nan], 'false': [-9.25185853854297e-18, nan]}, {'': [0.14569112499289297, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.14569112499289297, nan]}, {'': [0.1312008625827, -1.5419764230904951e-18], 'true,true': [1.1842378929335003e-16, -4.625929269271485e-18], 'true,true,true': [nan, 1.1842378929335003e-16], 'true': [0.1312008625827, nan], 'false,true': [nan, -1.5419764230904951e-18], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.07931716963309318, 3.0839528461809902e-18], 'false,true': [nan, 3.0839528461809902e-18], 'false': [3.0839528461809902e-18, nan], 'true': [0.07931716963309318, nan]}, {'': [0.07251862127939808, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.069327644505868, 1.5419764230904951e-18], 'false,true': [nan, 1.5419764230904951e-18], 'false': [1.5419764230904951e-18, nan]}, {'': [0.06821377642967705, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.06821377642967705, nan]}, {'': [0.06821494428237883, 7.709882115452476e-19], 'true,true': [5.921189464667501e-17, 0.0], 'false,true': [nan, 7.709882115452476e-19], 'false': [7.709882115452476e-19, nan], 'true': [0.06821494428237883, nan]}, {'': [0.044472873389842016, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.035396550241421486, nan], 'true,true': [1.4802973661668754e-17, 0.0], 'true,false': [0.0, 0.009096007660374626], 'true,true,false': [nan, 0.0], 'true,false,false': [0.0, 0.0], 'true': [0.004350870686289934, 0.009411583436346809]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then return 0.12161960062738383;  // std dev = 0,192, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.987838
   AUC PR    = 0.683067
   CLL	      = -0.114352
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 1.109 seconds
Total inference time: 1.433 seconds
AUC ROC: 0.987838


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095789
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.512 seconds
Refined model CLL: -0.095789


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.987838
   AUC PR    = 0.683067
   CLL	      = -0.114352
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 3.095 seconds
Total inference time: 1.433 seconds
AUC ROC: 0.987838
Total revision time: 3.095
Best scored revision CLL: -0.095789


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:43:30
{'parameter_15': {'Inference time': 1.502, 'AUC ROC': 0.966979, 'F1': 0.708791, 'Learning time': 0.94, 'Precision': [0.693548, 0.5], 'CLL': -0.137812, 'AUC PR': 0.809957, 'Recall': 0.724719}, 'Inference time': 1.433, 'AUC ROC': 0.987838, 'F1': 0.708791, 'Learning time': 3.095, 'Precision': [0.693548, 0.5], 'CLL': -0.114352, 'AUC PR': 0.683067, 'Recall': 0.724719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.2484547095258196;  // std dev = 0,075, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( female(A) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.2445503265485336;  // std dev = 0,574, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.20507659424535196;  // std dev = 0,065, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( female(A) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.2201588816833227;  // std dev = 0,545, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17370293764408148;  // std dev = 0,057, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(A) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.1991413973231672;  // std dev = 0,513, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.15019596748857061;  // std dev = 0,050, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( female(A) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.18081122018708282;  // std dev = 0,480, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.99252
   AUC PR    = 0.872151
   CLL	      = -0.318443
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.654 seconds
Total inference time: 1.455 seconds
AUC ROC: 0.99252


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:43:34
{'Inference time': 1.455, 'AUC ROC': 0.99252, 'F1': 0.278997, 'Learning time': 1.654, 'Precision': [0.162113, 0.5], 'CLL': -0.318443, 'AUC PR': 0.872151, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.891758
   AUC PR    = 0.203944
   CLL	      = -0.234574
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.651 seconds
Total inference time: 0.863 seconds
AUC ROC: 0.891758


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:43:35
{'Inference time': 0.863, 'AUC ROC': 0.891758, 'F1': nan, 'Learning time': 0.651, 'Precision': [nan, 0.5], 'CLL': -0.234574, 'AUC PR': 0.203944, 'Recall': 0.0}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( movie(D, B) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.43783406196450586;  // std dev = 0,398, 30,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 1,86e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6234028763866881;  // std dev = 5,96e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.18182716619847167;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.2613515693702067;  // std dev = 0,295, 30,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20597994753905144;  // std dev = 1,549, 30,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.16219282686620026;  // std dev = 1,512, 30,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.12803474734075;  // std dev = 0,273, 30,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109172;  // std dev = 9,31e-10, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.293811257076895;  // std dev = 2,98e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.2832727644806329;  // std dev = 1,05e-08, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.0813370389896127;  // std dev = 1,204, 30,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.22233799573137522;  // std dev = 3,80e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return -0.2441203547016418;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.2441203547016418;  // std dev = 1,05e-08, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.966979
   AUC PR    = 0.809957
   CLL	      = -0.135694
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.993 seconds
Total inference time: 1.507 seconds
AUC ROC: 0.966979


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.175036
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.564 seconds
Parameter learned model CLL: -0.175036


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 20], 'true,true,false,true': [0.0, 10, 0], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,true': [0.398, 10, 20], 'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 10, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [5.96e-08, 0, 20], 'false,false': [0.0, 0, 0], 'true,true,false': [3.73e-09, 10, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 10, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.295, 10, 20], 'false,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 10, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 10, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.549, 10, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 10, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.512, 10, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)'}, {'true,true': [0.273, 10, 20], 'false,false': [0.0, 0, 0], 'false,true,false': [9.31e-10, 10, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [2.98e-08, 0, 20], 'false,false': [0.0, 0, 0], 'true,true,false': [1.05e-08, 10, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 10, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 10, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.204, 10, 20]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 1, 0], 'true,true,true': [3.8e-08, 0, 20], 'true,false,false,false': [2.63e-09, 9, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.05e-08, 9, 0], 'false': [0.0, 0, 0]}]]
[{'': [0.22222222222222232, -1.1102230246251566e-17], 'true,true': [-8.881784197001253e-17, -1.1102230246251566e-17], 'true,true,true': [nan, -8.881784197001253e-17], 'true': [0.22222222222222232, nan], 'true,true,false': [-1.1102230246251566e-17, nan], 'false': [-1.1102230246251566e-17, nan]}, {'': [0.1586414472144832, 2.7755575615628915e-18], 'false,true': [nan, 2.7755575615628915e-18], 'false': [2.7755575615628915e-18, nan], 'true': [0.1586414472144832, nan]}, {'': [0.14408787144037755, 0.0], 'true,true': [1.7763568394002506e-16, 1.6653345369377347e-17], 'true,true,true': [nan, 1.7763568394002506e-16], 'true': [0.14408787144037755, nan], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.08722608746975442, 1.3877787807814458e-18], 'false,true': [nan, 1.3877787807814458e-18], 'false': [1.3877787807814458e-18, nan], 'true': [0.08722608746975442, nan]}, {'': [0.07997528159383739, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.07620261677407113, 1.3877787807814458e-18], 'false,true': [nan, 1.3877787807814458e-18], 'false': [1.3877787807814458e-18, nan]}, {'': [0.07451657397031951, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.07451657397031951, nan]}, {'': [0.07400577065266879, 6.938893903907229e-19], 'true,true': [4.4408920985006264e-17, 1.1102230246251566e-17], 'false,true': [nan, 6.938893903907229e-19], 'false': [6.938893903907229e-19, nan], 'true': [0.07400577065266879, nan]}, {'': [0.04828668551027315, 6.938893903907229e-19], 'false,true': [nan, 6.938893903907229e-19], 'false': [6.938893903907229e-19, nan]}, {'': [0.03948373433581964, nan], 'true,true': [7.216449660063518e-17, 0.0], 'true,false': [0.0, 0.00809356759330531], 'true,true,false': [nan, 0.0], 'true,false,false': [1.2335811384723961e-17, 7.709882115452476e-19], 'true': [0.003723326385998017, 0.008071147738476208]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then return 0.12456898857515225;  // std dev = 0,193, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then return -0.0641918400820262;  // std dev = 6,45e-09, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.987838
   AUC PR    = 0.683067
   CLL	      = -0.114407
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 1.074 seconds
Total inference time: 1.374 seconds
AUC ROC: 0.987838


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095514
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.558 seconds
Refined model CLL: -0.095514


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.987838
   AUC PR    = 0.683067
   CLL	      = -0.114407
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 3.189 seconds
Total inference time: 1.374 seconds
AUC ROC: 0.987838
Total revision time: 3.189
Best scored revision CLL: -0.095514


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:43:42
{'Inference time': 1.374, 'AUC ROC': 0.987838, 'parameter_20': {'Inference time': 1.507, 'AUC ROC': 0.966979, 'F1': 0.840391, 'Learning time': 0.993, 'Precision': [1.0, 0.5], 'CLL': -0.135694, 'AUC PR': 0.809957, 'Recall': 0.724719}, 'F1': 0.708791, 'Learning time': 3.189, 'Precision': [0.693548, 0.5], 'CLL': -0.114407, 'AUC PR': 0.683067, 'Recall': 0.724719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7914822684328456;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.6660633000779167;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5181199435476403;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.38952954024068537;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2956796123843447;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839683;  // std dev = 1,29e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.23048996886792547;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109179;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.18469472944075366;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.17709649774527736;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.15155508707642015;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.1812526143147167;  // std dev = 0,083, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.25295257020936085;  // std dev = 0,639, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.15594207521110773;  // std dev = 0,074, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.23146596398247407;  // std dev = 0,615, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.99252
   AUC PR    = 0.872151
   CLL	      = -0.418571
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.634 seconds
Total inference time: 1.385 seconds
AUC ROC: 0.99252


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:43:45
{'Inference time': 1.385, 'AUC ROC': 0.99252, 'F1': 0.278997, 'Learning time': 1.634, 'Precision': [0.162113, 0.5], 'CLL': -0.418571, 'AUC PR': 0.872151, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7914822684328456;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */


Results
   AUC ROC   = 0.891758
   AUC PR    = 0.203944
   CLL	      = -0.234844
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.63 seconds
Total inference time: 0.857 seconds
AUC ROC: 0.891758


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:43:47
{'Inference time': 0.857, 'AUC ROC': 0.891758, 'F1': nan, 'Learning time': 0.63, 'Precision': [nan, 0.5], 'CLL': -0.234844, 'AUC PR': 0.203944, 'Recall': 0.0}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( movie(D, B) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4304225001159146;  // std dev = 0,401, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 1,86e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6251413036472292;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.18072717641861621;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.257069922854646;  // std dev = 0,298, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20286317163736947;  // std dev = 1,757, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926097;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15985777468861312;  // std dev = 1,714, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.12621741996518243;  // std dev = 0,275, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109172;  // std dev = 1,32e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.29739763419446885;  // std dev = 2,98e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.27966026009261974;  // std dev = 2,58e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07973349008072536;  // std dev = 1,363, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2249843894389639;  // std dev = 4,94e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return -0.24120687277229982;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.24120687277229982;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.966979
   AUC PR    = 0.809957
   CLL	      = -0.135322
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total learning time: 0.956 seconds
Total inference time: 1.584 seconds
AUC ROC: 0.966979


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.177171
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.561 seconds
Parameter learned model CLL: -0.177171


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [1.33e-07, 0, 25], 'true,true,false,true': [0.0, 13, 0], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 12, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,true': [0.401, 13, 25], 'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 12, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 25], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 13, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [9.13e-09, 12, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.298, 13, 25], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.757, 13, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [5.27e-09, 12, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.714, 13, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)'}, {'true,true': [0.275, 13, 25], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 12, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [2.98e-08, 0, 25], 'false,false': [0.0, 0, 0], 'true,true,false': [2.58e-08, 13, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 12, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 12, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.363, 13, 25]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 1, 0], 'true,true,true': [4.94e-08, 0, 25], 'true,false,false,false': [5.27e-09, 11, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 11, 0], 'false': [0.0, 0, 0]}]]
[{'': [0.2250692520775636, -1.1564823173178714e-17], 'true,true': [7.105427357601002e-16, -1.2810265668751807e-17], 'true,true,true': [nan, 7.105427357601002e-16], 'true': [0.2250692520775636, nan], 'true,true,false': [-1.2810265668751807e-17, nan], 'false': [-1.1564823173178714e-17, nan]}, {'': [0.16067390342879656, 2.3129646346357427e-18], 'false,true': [nan, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan], 'true': [0.16067390342879656, nan]}, {'': [0.14616537557353296, 6.938893903907228e-18], 'true,true': [-7.105427357601002e-17, -4.270088556250602e-18], 'true,true,true': [nan, -7.105427357601002e-17], 'true': [0.14616537557353296, nan], 'false,true': [nan, 6.938893903907228e-18], 'false': [6.938893903907228e-18, nan]}, {'': [0.08850805267510227, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.08850805267510227, nan]}, {'': [0.081203123547004, 2.3129646346357427e-18], 'false,true': [nan, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan]}, {'': [0.07733764896696892, 2.3129646346357427e-18], 'false,true': [nan, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan]}, {'': [0.07555150456340991, 1.1564823173178713e-18], 'false,true': [nan, 1.1564823173178713e-18], 'false': [1.1564823173178713e-18, nan], 'true': [0.07555150456340991, nan]}, {'': [0.07494711865768072, 1.1564823173178713e-18], 'true,true': [3.552713678800501e-17, 5.124106267500723e-17], 'false,true': [nan, 1.1564823173178713e-18], 'false': [1.1564823173178713e-18, nan], 'true': [0.07494711865768072, nan]}, {'': [0.04889763828824072, 5.782411586589357e-19], 'false,true': [nan, 5.782411586589357e-19], 'false': [5.782411586589357e-19, nan]}, {'': [0.0402434667716906, nan], 'true,true': [9.769962616701378e-17, 0.0], 'true,false': [0.0, 0.007833580449584649], 'true,true,false': [nan, 0.0], 'true,false,false': [-2.0185873175002847e-17, 2.523234146875356e-18], 'true': [0.0030925625636086893, 0.007779180585351421]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then return 0.12638399654300975;  // std dev = 0,194, 26,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(D, B) )
%   | | then return -0.06419184008202622;  // std dev = 5,27e-09, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.987838
   AUC PR    = 0.683067
   CLL	      = -0.114441
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 1.211 seconds
Total inference time: 1.815 seconds
AUC ROC: 0.987838


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095345
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.552 seconds
Refined model CLL: -0.095345


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.987838
   AUC PR    = 0.683067
   CLL	      = -0.114441
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 3.28 seconds
Total inference time: 1.815 seconds
AUC ROC: 0.987838
Total revision time: 3.28
Best scored revision CLL: -0.095345


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:43:54
{'Inference time': 1.815, 'AUC ROC': 0.987838, 'F1': 0.708791, 'Learning time': 3.28, 'Precision': [0.693548, 0.5], 'CLL': -0.114441, 'AUC PR': 0.683067, 'parameter_25': {'Inference time': 1.584, 'AUC ROC': 0.966979, 'F1': 0.840391, 'Learning time': 0.956, 'Precision': [1.0, 0.5], 'CLL': -0.135322, 'AUC PR': 0.809957, 'Recall': 0.724719}, 'Recall': 0.724719}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.8055173561521439;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.6773408397065112;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.525995951478812;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.41751358415830986;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.3953438564084147;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.3007522660526577;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 1,67e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 1,29e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.23540269973125594;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109176;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.18962398231281402;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.17709649774527736;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.15653159872672676;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.152743858093671;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.1318147743472161;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.11280465504816395;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */


Results
   AUC ROC   = 0.891758
   AUC PR    = 0.203944
   CLL	      = -0.538412
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.592 seconds
Total inference time: 1.188 seconds
AUC ROC: 0.891758


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:43:57
{'Inference time': 1.188, 'AUC ROC': 0.891758, 'F1': 0.278997, 'Learning time': 1.592, 'Precision': [0.162113, 0.5], 'CLL': -0.538412, 'AUC PR': 0.203944, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.8055173561521439;  // std dev = 0,223, 19,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */


Results
   AUC ROC   = 0.891758
   AUC PR    = 0.203944
   CLL	      = -0.235219
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.681 seconds
Total inference time: 0.945 seconds
AUC ROC: 0.891758


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:43:59
{'Inference time': 0.945, 'AUC ROC': 0.891758, 'F1': nan, 'Learning time': 0.681, 'Precision': [nan, 0.5], 'CLL': -0.235219, 'AUC PR': 0.203944, 'Recall': 0.0}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.4175135841583099;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.285205
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.838 seconds
Total inference time: 1.367 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.485 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(G, B)'}, {'true,true,true,false': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [5.27e-09, 0, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true,false': [0.0, 1, 0], 'true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 1, 0], 'true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.0, 0, 5], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 1, 0], 'true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)'}, {'true,true,true': [0.0, 0, 5], 'true,false,false,false': [0.0, 4, 0], 'true,false,true': [0.0, 1, 0], 'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0]}]]
[{'': [0.0, -2.7755575615628915e-18], 'true,true': [0.0, nan], 'true,true,true': [nan, 0.0], 'false': [-2.7755575615628915e-18, nan], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'true': [0.0, nan], 'false,true,true': [nan, 0.0]}, {'': [-4.4408920985006264e-17, 0.0], 'true,true': [-4.4408920985006264e-17, nan], 'true,true,true': [nan, -4.4408920985006264e-17], 'false': [0.0, nan], 'false,true': [0.0, 0.0], 'true': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'true': [4.4408920985006264e-17, nan]}, {'': [-2.2204460492503132e-17, 0.0], 'false,true': [0.0, 0.0], 'false,true,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.0, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan]}, {'': [-5.551115123125783e-18, -6.938893903907229e-19], 'true': [-5.551115123125783e-18, nan], 'false,true': [0.0, 0.0], 'false,true,true': [nan, 0.0], 'false': [-6.938893903907229e-19, nan]}, {'': [0.0, -6.938893903907229e-19], 'true,true': [0.0, nan], 'false,true': [0.0, 0.0], 'false': [-6.938893903907229e-19, nan], 'true': [0.0, nan]}, {'': [0.0, 6.938893903907229e-19], 'false,true': [0.0, 0.0], 'false': [6.938893903907229e-19, nan]}, {'': [0.009820698026241881, nan], 'true,true': [0.0, nan], 'true,false,false': [nan, 0.0], 'true': [0.0, 0.0], 'true,false': [0.0, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.603592
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.718 seconds
Total inference time: 1.11 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.457 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.285205
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.4979999999999998 seconds
Total inference time: 1.367 seconds
AUC ROC: 1.0
Total revision time: 2.4979999999999998
Best scored revision CLL: -0.094637


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:44:05
{'Inference time': 1.367, 'AUC ROC': 1.0, 'parameter_5': {'Inference time': 1.367, 'AUC ROC': 1.0, 'F1': 0.140406, 'Learning time': 0.838, 'Precision': [0.075503, 0.5], 'CLL': -0.285205, 'AUC PR': 1.0, 'Recall': 1.0}, 'F1': 0.140406, 'Learning time': 2.4979999999999998, 'Precision': [0.075503, 0.5], 'CLL': -0.285205, 'AUC PR': 1.0, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.203547
   Precision = 0.255682 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.40724


Total learning time: 1.029 seconds
Total inference time: 0.922 seconds
AUC ROC: 0.965362


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:44:07
{'Inference time': 0.922, 'AUC ROC': 0.965362, 'F1': 0.40724, 'Learning time': 1.029, 'Precision': [0.255682, 0.5], 'CLL': -0.203547, 'AUC PR': 0.255682, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.173677
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.494 seconds
Total inference time: 0.703 seconds
AUC ROC: 0.965362


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:44:08
{'Inference time': 0.703, 'AUC ROC': 0.965362, 'F1': nan, 'Learning time': 0.494, 'Precision': [nan, 0.5], 'CLL': -0.173677, 'AUC PR': 0.255682, 'Recall': 0.0}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( movie(D, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6426626803255594;  // std dev = 0,243, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5742440986978322;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.21430164219236184;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.37602193943229145;  // std dev = 0,176, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.28951652638465203;  // std dev = 0,558, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2279946023162214;  // std dev = 0,554, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.18375549016005877;  // std dev = 0,169, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.205487376209059;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.39264645454784675;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13051739904470427;  // std dev = 0,456, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.15599307982269406;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.3321824760320547;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.13665
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.927 seconds
Total inference time: 1.419 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.116716
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.549 seconds
Parameter learned model CLL: -0.116716


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 10], 'true,true,false,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.243, 1, 10], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 10], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 1, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.176, 1, 10], 'false,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 8, 0], 'false,true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'false,true,true,false': [0.0, 1, 0], 'true': [0.558, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 8, 0], 'false,true,true': [0.0, 1, 0], 'true': [0.554, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.169, 1, 10], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [0.0, 0, 10], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 8, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'false,true,true': [0.0, 1, 0], 'true': [0.456, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 1, 0], 'true,true,true': [7.45e-09, 0, 10], 'true,false,false,false': [0.0, 7, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'false': [0.0, 0, 0]}]]
[{'': [0.0826446280991734, -9.25185853854297e-18], 'true,true': [-8.881784197001253e-17, 0.0], 'true,true,true': [nan, -8.881784197001253e-17], 'true': [0.0826446280991734, nan], 'true,true,false': [0.0, nan], 'false': [-9.25185853854297e-18, nan]}, {'': [0.058998885327700486, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'true': [0.058998885327700486, nan], 'false,true,true': [nan, 0.0]}, {'': [0.05138879218810454, -1.5419764230904951e-18], 'true,true': [-4.4408920985006264e-17, 0.0], 'true,true,true': [nan, -4.4408920985006264e-17], 'true': [0.05138879218810454, nan], 'false,true': [0.0, -1.734723475976807e-18], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.03096300215469163, 3.0839528461809902e-18], 'false,true': [0.0, 1.734723475976807e-18], 'false': [3.0839528461809902e-18, nan], 'true': [0.03096300215469163, nan]}, {'': [0.028334547544659836, 0.0], 'false,true': [0.0, 0.0], 'false,true,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.027863337471540118, 1.5419764230904951e-18], 'false,true': [0.0, 1.734723475976807e-18], 'false': [1.5419764230904951e-18, nan]}, {'': [0.02846721138793027, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'true': [0.02846721138793027, nan], 'false,true,true': [nan, 0.0]}, {'': [0.02956727929718435, 7.709882115452476e-19], 'true,true': [-1.1102230246251566e-17, 0.0], 'false,true': [0.0, 8.673617379884035e-19], 'false': [7.709882115452476e-19, nan], 'true': [0.02956727929718435, nan]}, {'': [0.018870868137808687, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan]}, {'': [0.0184821261694084, nan], 'true,true': [5.551115123125783e-18, 0.0], 'true,false': [0.0, 0.007855201042161013], 'true,true,false': [nan, 0.0], 'true,false,false': [0.0, -4.956352788505163e-19], 'true': [0.004006727186235386, 0.007093232687101302]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5786537370877302;  // std dev = 0,771, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5898141960184213;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.20372114412003964;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(A, E) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.34087981275197143;  // std dev = 0,563, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.10159632948783627;  // std dev = 1,32e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.26369962673198444;  // std dev = 0,537, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.2067584595168016;  // std dev = 0,529, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.08518475138839687;  // std dev = 1,32e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.1646862564583195;  // std dev = 0,531, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2310057262995052;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.35642968289842414;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.07324622576333704;  // std dev = 9,31e-10, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.11387204422948231;  // std dev = 0,431, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13550546025230306;  // std dev = 0,219, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then return -0.0940323185133706;  // std dev = 0,079, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.153306
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.374 seconds
Total inference time: 1.329 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.1191
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.501 seconds
Refined model CLL: -0.1191


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.13665
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.351 seconds
Total inference time: 1.419 seconds
AUC ROC: 1.0
Total revision time: 3.351
Best scored revision CLL: -0.116716


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:44:15
{'Inference time': 1.419, 'AUC ROC': 1.0, 'F1': 0.957447, 'Learning time': 3.351, 'parameter_10': {'Inference time': 1.419, 'AUC ROC': 1.0, 'F1': 0.957447, 'Learning time': 0.927, 'Precision': [0.918367, 0.5], 'CLL': -0.13665, 'AUC PR': 1.0, 'Recall': 1.0}, 'Precision': [0.918367, 0.5], 'CLL': -0.13665, 'AUC PR': 1.0, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6056364498471037;  // std dev = 0,801, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.13907827118943647;  // std dev = 0,116, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.4845912943420874;  // std dev = 0,759, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.1234256208061981;  // std dev = 0,106, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.09936009366083205;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.16593754239722625;  // std dev = 0,163, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.38673450149772015;  // std dev = 0,645, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.2965136481558034;  // std dev = 0,616, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( female(A) )
%   | then return -0.0908157491441998;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.14765816748394467;  // std dev = 0,152, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.08359070224831121;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.1587936825896004;  // std dev = 0,206, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.24238854464986104;  // std dev = 0,533, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.07740624772389569;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.14064334708080248;  // std dev = 0,187, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.19108569011773893;  // std dev = 0,528, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.16420592828306943;  // std dev = 0,470, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( female(A) )
%   | then return -0.07205600280714781;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.14831161915010513;  // std dev = 0,225, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.13408046163345275;  // std dev = 0,473, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( female(A) )
%   | then return -0.0673841374430752;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.1327025609819897;  // std dev = 0,205, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.06327094317714144;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.1377518774375798;  // std dev = 0,232, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.11978209955048018;  // std dev = 0,430, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.171195
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.576 seconds
Total inference time: 1.133 seconds
AUC ROC: 0.999201


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:44:18
{'Inference time': 1.133, 'AUC ROC': 0.999201, 'F1': 0.957447, 'Learning time': 1.576, 'Precision': [0.918367, 0.5], 'CLL': -0.171195, 'AUC PR': 0.95488, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.967219
   AUC PR    = 0.277528
   CLL	      = -0.173421
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.581 seconds
Total inference time: 0.731 seconds
AUC ROC: 0.967219


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:44:20
{'Inference time': 0.731, 'AUC ROC': 0.967219, 'F1': nan, 'Learning time': 0.581, 'Precision': [nan, 0.5], 'CLL': -0.173421, 'AUC PR': 0.277528, 'Recall': 0.0}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( movie(D, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6666660340397451;  // std dev = 0,205, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 1,86e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5683653769656988;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.218370952444709;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.3890620671941164;  // std dev = 0,148, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.29921976431671016;  // std dev = 0,566, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926096;  // std dev = 1,32e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2362579888626851;  // std dev = 0,563, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.19147529658046802;  // std dev = 0,143, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07877675473109172;  // std dev = 9,31e-10, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.19636098397478569;  // std dev = 1,83e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.4067201468508336;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13716841152591594;  // std dev = 0,465, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.14896715748917114;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(A, F) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.34364501165122235;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.139707
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 0.943 seconds
Total inference time: 1.364 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.109856
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.546 seconds
Parameter learned model CLL: -0.109856


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 15], 'true,true,false,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.205, 1, 15], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 13, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 15], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 1, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 13, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.148, 1, 15], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 13, 0], 'false,true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 13, 0], 'false,true,true,false': [0.0, 1, 0], 'true': [0.566, 1, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 13, 0], 'false,true,true': [0.0, 1, 0], 'true': [0.563, 1, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.143, 1, 15], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [9.31e-10, 13, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [1.83e-08, 0, 15], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 13, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 13, 0], 'false,true,true': [0.0, 1, 0], 'true': [0.465, 1, 15]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 2, 0], 'true,true,true': [0.0, 0, 15], 'true,false,false,false': [5.27e-09, 11, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 1, 0], 'false': [0.0, 0, 0]}]]
[{'': [0.05859374999999978, -1.1895246692412391e-17], 'true,true': [-2.3684757858670006e-16, 0.0], 'true,true,true': [nan, -2.3684757858670006e-16], 'true': [0.05859374999999978, nan], 'true,true,false': [0.0, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.041829287839756535, 3.96508223080413e-18], 'false,true': [0.0, 4.270088556250602e-18], 'false': [3.96508223080413e-18, nan], 'true': [0.041829287839756535, nan], 'false,true,true': [nan, 0.0]}, {'': [0.03626683898520455, 9.912705577010326e-18], 'true,true': [-1.7763568394002506e-16, 0.0], 'true,true,true': [nan, -1.7763568394002506e-16], 'true': [0.03626683898520455, nan], 'false,true': [0.0, 8.540177112501205e-18], 'false': [9.912705577010326e-18, nan]}, {'': [0.021846650601377804, -3.96508223080413e-18], 'false,true': [0.0, -2.135044278125301e-18], 'false': [-3.96508223080413e-18, nan], 'true': [0.021846650601377804, nan]}, {'': [0.020028931961399432, 3.96508223080413e-18], 'false,true': [0.0, 2.135044278125301e-18], 'false,true,true': [nan, 0.0], 'false': [3.96508223080413e-18, nan]}, {'': [0.019813036809508133, 4.956352788505163e-18], 'false,true': [0.0, 4.270088556250602e-18], 'false': [4.956352788505163e-18, nan]}, {'': [0.02038278154355306, -9.912705577010326e-19], 'false,true': [0.0, 1.0675221390626506e-18], 'false': [-9.912705577010326e-19, nan], 'true': [0.02038278154355306, nan], 'false,true,true': [nan, 0.0]}, {'': [0.02131094826315868, 9.912705577010326e-19], 'true,true': [2.2204460492503132e-17, 0.0], 'false,true': [0.0, 0.0], 'false': [9.912705577010326e-19, nan], 'true': [0.02131094826315868, nan]}, {'': [0.013534262456452683, 9.912705577010326e-19], 'false,true': [0.0, 5.337610695313253e-19], 'false': [9.912705577010326e-19, nan]}, {'': [0.015861152800829247, nan], 'true,true': [-7.401486830834377e-18, 0.0], 'true,false': [0.0, 0.005965519625700757], 'true,true,false': [nan, 0.0], 'true,false,false': [0.0, 2.523234146875356e-18], 'true': [0.0047166185029990666, 0.0055451414272248]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6426626803255592;  // std dev = 0,243, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5742440986978322;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.21430164219236184;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(A, E) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.37602193943229145;  // std dev = 0,176, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.28951652638465203;  // std dev = 0,168, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.2279946023162214;  // std dev = 0,167, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.18375549016005877;  // std dev = 0,169, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.205487376209059;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.3926464545478467;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( genre(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.13051739904470427;  // std dev = 0,137, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.10097388499300496;  // std dev = 0,181, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.13597626892226494;  // std dev = 0,063, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then if ( female(A) )
%   | | | then return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.1311894990695333;  // std dev = 0,232, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.15865
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.534 seconds
Total inference time: 1.387 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.113249
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.527 seconds
Refined model CLL: -0.113249


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.139707
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.55 seconds
Total inference time: 1.364 seconds
AUC ROC: 1.0
Total revision time: 3.55
Best scored revision CLL: -0.109856


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:44:26
{'parameter_15': {'Inference time': 1.364, 'AUC ROC': 1.0, 'F1': 0.957447, 'Learning time': 0.943, 'Precision': [0.918367, 0.5], 'CLL': -0.139707, 'AUC PR': 1.0, 'Recall': 1.0}, 'Inference time': 1.364, 'AUC ROC': 1.0, 'F1': 0.957447, 'Learning time': 3.55, 'Precision': [0.918367, 0.5], 'CLL': -0.139707, 'AUC PR': 1.0, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6465415686654066;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5044629797645588;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.18718240424776625;  // std dev = 0,383, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return 0.33099526521728556;  // std dev = 0,474, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.4184669670579366;  // std dev = 0,164, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.16514652958401307;  // std dev = 0,355, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return 0.26053178561396195;  // std dev = 0,434, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.3220802153342821;  // std dev = 0,148, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.14726821575693336;  // std dev = 0,329, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return 0.20842329832206566;  // std dev = 0,414, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.2531116931627571;  // std dev = 0,141, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.24361910222570216;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.18812378530516918;  // std dev = 0,188, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07480437870439577;  // std dev = 0,022, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.16641939707589953;  // std dev = 0,127, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.07351633301691073;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.13726627043789708;  // std dev = 0,352, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return 0.13869310995457326;  // std dev = 0,344, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.17601108076856556;  // std dev = 0,121, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1801618476055592;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.13110415350365884;  // std dev = 0,174, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06427870853935695;  // std dev = 0,024, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.16018601002029473;  // std dev = 0,140, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.06466504827020303;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.12802097220004444;  // std dev = 0,360, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return 0.10046064728143635;  // std dev = 0,299, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.13288900777947796;  // std dev = 0,108, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.228392
   Precision = 0.263158 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.416667


Total learning time: 1.796 seconds
Total inference time: 1.171 seconds
AUC ROC: 0.999201


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:44:30
{'Inference time': 1.171, 'AUC ROC': 0.999201, 'F1': 0.416667, 'Learning time': 1.796, 'Precision': [0.263158, 0.5], 'CLL': -0.228392, 'AUC PR': 0.95488, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.857665
   AUC PR    = 0.078721
   CLL	      = -0.211718
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.726 seconds
Total inference time: 0.804 seconds
AUC ROC: 0.857665


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:44:31
{'Inference time': 0.804, 'AUC ROC': 0.857665, 'F1': nan, 'Learning time': 0.726, 'Precision': [nan, 0.5], 'CLL': -0.211718, 'AUC PR': 0.078721, 'Recall': 0.0}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( movie(D, B) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6426626803255592;  // std dev = 0,243, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 1,86e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5742440986978322;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.21430164219236184;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.37602193943229145;  // std dev = 0,176, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783635;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2895165263846519;  // std dev = 0,790, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926094;  // std dev = 2,28e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22799460231622143;  // std dev = 0,783, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.18375549016005877;  // std dev = 0,169, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.20548737620905916;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.3926464545478467;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1305173990447045;  // std dev = 0,644, 22,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.15599307982269398;  // std dev = 2,58e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, F) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.33218247603205464;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.06419184008202619;  // std dev = 6,97e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.13665
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.023 seconds
Total inference time: 1.304 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.116716
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.545 seconds
Parameter learned model CLL: -0.116716


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 20], 'true,true,false,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 18, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.243, 2, 20], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 17, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 20], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 2, 0], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 17, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.176, 2, 20], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [2.28e-09, 17, 0], 'false,true,true,false': [0.0, 1, 0], 'true': [0.79, 2, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [1.18e-08, 17, 0], 'false,true,true': [0.0, 1, 0], 'true': [0.783, 2, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.169, 2, 20], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [0.0, 0, 20], 'false,false': [0.0, 0, 0], 'true,true,false': [0.0, 2, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true': [0.0, 1, 0], 'true': [0.644, 2, 20]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [1.32e-09, 3, 0], 'true,true,true': [2.58e-08, 0, 20], 'true,false,false,false': [6.97e-09, 14, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 2, 0], 'false': [0.0, 0, 0]}]]
[{'': [0.08264462809917356, -3.0839528461809902e-18], 'true,true': [-8.881784197001253e-17, 0.0], 'true,true,true': [nan, -8.881784197001253e-17], 'true': [0.08264462809917356, nan], 'true,true,false': [0.0, nan], 'false': [-3.0839528461809902e-18, nan]}, {'': [0.05899888532770057, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'true': [0.05899888532770057, nan], 'false,true,true': [nan, 0.0]}, {'': [0.051388792188104375, 1.5419764230904953e-17], 'true,true': [-2.220446049250313e-16, 0.0], 'true,true,true': [nan, -2.220446049250313e-16], 'true': [0.051388792188104375, nan], 'false,true': [0.0, 1.3061447348531253e-17], 'false': [1.5419764230904953e-17, nan]}, {'': [0.03096300215469153, -4.625929269271485e-18], 'false,true': [0.0, -4.89804275569922e-18], 'false': [-4.625929269271485e-18, nan], 'true': [0.03096300215469153, nan]}, {'': [0.028334547544659937, 6.1679056923619804e-18], 'false,true': [0.0, 4.89804275569922e-18], 'false,true,true': [nan, 0.0], 'false': [6.1679056923619804e-18, nan]}, {'': [0.027863337471540187, 7.709882115452476e-18], 'false,true': [0.0, 8.163404592832034e-18], 'false': [7.709882115452476e-18, nan]}, {'': [0.02846721138793027, -3.854941057726238e-18], 'false,true': [0.0, -2.44902137784961e-18], 'false': [-3.854941057726238e-18, nan], 'true': [0.02846721138793027, nan], 'false,true,true': [nan, 0.0]}, {'': [0.029567279297184335, -7.709882115452476e-19], 'true,true': [-2.7755575615628914e-17, 0.0], 'false,true': [0.0, 0.0], 'false': [-7.709882115452476e-19, nan], 'true': [0.029567279297184335, nan]}, {'': [0.01887086813780868, -1.5419764230904951e-18], 'false,true': [0.0, -8.163404592832033e-19], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.018482126169408423, nan], 'true,true': [3.3306690738754695e-17, 5.782411586589357e-19], 'true,false': [0.0, 0.007855201042161006], 'true,true,false': [nan, 5.782411586589357e-19], 'true,false,false': [0.0, 3.469446951953614e-18], 'true': [0.005498835420050846, 0.007455257538778609]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.598770833533905;  // std dev = 0,296, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.5849385533857349;  // std dev = 1,05e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.20700397199038253;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( genre(A, E) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830986;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.35198522537872323;  // std dev = 0,215, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.27181530665176223;  // std dev = 0,206, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.21332445045957324;  // std dev = 0,203, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.17046364282294216;  // std dev = 0,204, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2227958895716027;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.3676072384114917;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( genre(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.11894756008173313;  // std dev = 0,166, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then if ( female(A) )
%   | | | then return 0.13400703000801117;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16921648232819453;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, F) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then if ( female(A) )
%   | | | then return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.14676811582609808;  // std dev = 0,286, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.151316
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.636 seconds
Total inference time: 1.456 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.117085
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.562 seconds
Refined model CLL: -0.117085


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.13665
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.766 seconds
Total inference time: 1.304 seconds
AUC ROC: 1.0
Total revision time: 3.766
Best scored revision CLL: -0.116716


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:44:39
{'Inference time': 1.304, 'AUC ROC': 1.0, 'parameter_20': {'Inference time': 1.304, 'AUC ROC': 1.0, 'F1': 0.957447, 'Learning time': 1.023, 'Precision': [0.918367, 0.5], 'CLL': -0.13665, 'AUC PR': 1.0, 'Recall': 1.0}, 'F1': 0.957447, 'Learning time': 3.766, 'Precision': [0.918367, 0.5], 'CLL': -0.13665, 'AUC PR': 1.0, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7152917922423694;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.6045267906174346;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.18942863788974607;  // std dev = 0,122, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5928210024204567;  // std dev = 0,137, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.10159632948783634;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.16443191270700883;  // std dev = 0,110, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.44649546254872163;  // std dev = 0,139, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.14477859019099118;  // std dev = 0,100, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.340814110411659;  // std dev = 0,126, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2690668995130801;  // std dev = 0,110, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.12900970320027746;  // std dev = 0,091, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.11613040937889774;  // std dev = 0,084, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2196576000792254;  // std dev = 0,095, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1844059923606885;  // std dev = 0,083, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.1054462220289544;  // std dev = 0,077, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.09646133894596244;  // std dev = 0,071, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1583199105914025;  // std dev = 0,074, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.08881436548976084;  // std dev = 0,066, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13838165778569733;  // std dev = 0,066, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.106374
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.744 seconds
Total inference time: 1.094 seconds
AUC ROC: 0.999201


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:44:42
{'Inference time': 1.094, 'AUC ROC': 0.999201, 'F1': 0.957447, 'Learning time': 1.744, 'Precision': [0.918367, 0.5], 'CLL': -0.106374, 'AUC PR': 0.95488, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7152917922423694;  // std dev = 0,350, 14,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.857665
   AUC PR    = 0.078721
   CLL	      = -0.20943
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.771 seconds
Total inference time: 0.77 seconds
AUC ROC: 0.857665


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:44:44
{'Inference time': 0.77, 'AUC ROC': 0.857665, 'F1': nan, 'Learning time': 0.771, 'Precision': [nan, 0.5], 'CLL': -0.20943, 'AUC PR': 0.078721, 'Recall': 0.0}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( movie(D, B) )
%   | | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.630186844443069;  // std dev = 0,273, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5772914264035935;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.006991548478409437;  // std dev = 0,433, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.37117524768564986;  // std dev = 0,225, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return -0.10159632948783633;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2847781675542748;  // std dev = 1,174, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926098;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926103;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22279304617607185;  // std dev = 1,180, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.1780635260406245;  // std dev = 0,226, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07877675473109177;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.07877675473109179;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.21041309378925555;  // std dev = 3,65e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.24703858925950667;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12568917861764822;  // std dev = 1,097, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.15995815372139244;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, F) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.21675034417337508;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.200915
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.028 seconds
Total inference time: 1.422 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 0.9976
   AUC PR    = 0.997857
   CLL	      = -0.149283
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.979592


Total scoring time: 0.625 seconds
Parameter learned model CLL: -0.149283


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [1.03e-07, 0, 24], 'true,true,false,true': [0.866, 3, 1], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [1.05e-08, 22, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.273, 3, 25], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 20, 0], 'false,true,true,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 24], 'false,false': [0.0, 0, 0], 'true,true,false': [0.433, 3, 1], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 20, 0], 'false,true,true': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.225, 3, 25], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 20, 0], 'false,true,true': [0.0, 2, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false,true,true': 'genre(B, F)', 'false': 'movie(D, B)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 20, 0], 'false,true,true,false': [0.0, 2, 0], 'true': [1.174, 3, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [1.39e-08, 20, 0], 'false,true,true': [0.0, 2, 0], 'true': [1.18, 3, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)', 'false,true,true': 'genre(B, G)'}, {'true,true': [0.226, 3, 25], 'true,false': [0.0, 0, 0], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 20, 0], 'false,true,true,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [3.65e-08, 0, 24], 'false,false': [0.0, 0, 0], 'true,true,false': [0.866, 3, 1], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 20, 0], 'false,true,true': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 20, 0], 'false,true,true': [0.0, 2, 0], 'true': [1.097, 3, 25]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 4, 0], 'true,true,true': [0.0, 0, 24], 'true,false,false,false': [7.45e-09, 16, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.866, 3, 1], 'false': [0.0, 0, 0]}]]
[{'': [0.09566326530612335, 5.046468293750712e-18], 'true,true': [4.440892098500626e-16, 0.18750000000000003], 'true,true,true': [nan, 4.440892098500626e-16], 'false': [5.046468293750712e-18, nan], 'true,true,false': [0.18750000000000003, nan], 'true': [0.09566326530612335, nan]}, {'': [0.07461826138832935, -2.523234146875356e-18], 'false,true': [0.0, 0.0], 'false': [-2.523234146875356e-18, nan], 'true': [0.07461826138832935, nan], 'false,true,true': [nan, 0.0]}, {'': [0.06858815445758691, 7.569702440626067e-18], 'true,true': [-3.3306690738754696e-16, 0.18749999999999994], 'true,true,true': [nan, -3.3306690738754696e-16], 'true': [0.06858815445758691, nan], 'false,true': [0.0, 1.1102230246251566e-17], 'false': [7.569702440626067e-18, nan]}, {'': [0.05045303134456406, -1.261617073437678e-18], 'false,true': [0.0, -1.3877787807814458e-18], 'false': [-1.261617073437678e-18, nan], 'true': [0.05045303134456406, nan]}, {'': [0.049252140806088404, -8.831319514063745e-18], 'false,true': [0.0, -6.938893903907228e-18], 'false,true,true': [nan, 0.0], 'false': [-8.831319514063745e-18, nan]}, {'': [0.04973297637654648, 1.0092936587501423e-17], 'false,true': [0.0, 9.714451465470119e-18], 'false': [1.0092936587501423e-17, nan]}, {'': [0.05094473055184347, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'true': [0.05094473055184347, nan], 'false,true,true': [nan, 0.0]}, {'': [0.05240963783560968, -1.8924256101565167e-18], 'true,true': [5.551115123125783e-17, 0.18750000000000003], 'false,true': [0.0, -1.3877787807814458e-18], 'false': [-1.8924256101565167e-18, nan], 'true': [0.05240963783560968, nan]}, {'': [0.04293981364605241, -3.784851220313033e-18], 'false,true': [0.0, -2.7755575615628915e-18], 'false': [-3.784851220313033e-18, nan]}, {'': [0.031879933053333975, nan], 'true,true': [-3.23815048849004e-17, 0.0], 'true,false': [0.0, 0.041223855547294415], 'true,true,false': [nan, 0.0], 'true,false,false': [0.1875, 3.469446951953614e-18], 'true': [0.006152230986376216, 0.037553171479922494]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, H).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(A, F).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;false;genre(A, F).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(A, G).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7244731732359465;  // std dev = 0,122, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1555325621642444;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5541314836832208;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.079013850457099;  // std dev = 0,745, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( genre(A, E) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.44579370022668857;  // std dev = 0,088, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.4165982832780142;  // std dev = 5,27e-09, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14574518029760541;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.3432811635757358;  // std dev = 0,089, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.32009138303855517;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12851926354042625;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.2729187816000084;  // std dev = 0,084, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.25474882331918186;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11479877078292168;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.22388361531185969;  // std dev = 0,078, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.20945857335251053;  // std dev = 4,56e-09, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10363867815786636;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.07877675473109175;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1648423629512008;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.17687705997919884;  // std dev = 2,63e-09, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.029678454486230146;  // std dev = 0,430, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( genre(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.1685242279745489;  // std dev = 0,075, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.1525773721219688;  // std dev = 4,56e-09, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09696657691283901;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( movie(E, A), movie(E, B) )
%   | | then return 0.1301359781777395;  // std dev = 0,005, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.06419184008202618;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, F) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(D, B) )
%   | | then if ( female(A), actor(B) )
%   | | | then return -0.06608487486341236;  // std dev = 0,024, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.011292215204172507;  // std dev = 0,397, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.077475
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.913 seconds
Total inference time: 1.27 seconds
AUC ROC: 0.999201


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.101198
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.615 seconds
Refined model CLL: -0.101198


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999201
   AUC PR    = 0.95488
   CLL	      = -0.077475
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 4.181 seconds
Total inference time: 1.27 seconds
AUC ROC: 0.999201
Total revision time: 4.181
Best scored revision CLL: -0.101198


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:44:51
{'Inference time': 1.27, 'AUC ROC': 0.999201, 'F1': 0.957447, 'Learning time': 4.181, 'Precision': [0.918367, 0.5], 'CLL': -0.077475, 'AUC PR': 0.95488, 'parameter_25': {'Inference time': 1.422, 'AUC ROC': 1.0, 'F1': 0.957447, 'Learning time': 1.028, 'Precision': [0.918367, 0.5], 'CLL': -0.200915, 'AUC PR': 1.0, 'Recall': 1.0}, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839138;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360638;  // std dev = 1,29e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783635;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839682;  // std dev = 1,49e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109179;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420275;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202622;  // std dev = 5,27e-09, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.754 seconds
Total inference time: 1.199 seconds
AUC ROC: 0.998942


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:44:54
{'Inference time': 1.199, 'AUC ROC': 0.998942, 'F1': 0.957447, 'Learning time': 1.754, 'Precision': [0.918367, 0.5], 'CLL': -0.068112, 'AUC PR': 0.918367, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.160872
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.738 seconds
Total inference time: 0.782 seconds
AUC ROC: 0.998942


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:44:56
{'Inference time': 0.782, 'AUC ROC': 0.998942, 'F1': nan, 'Learning time': 0.738, 'Precision': [nan, 0.5], 'CLL': -0.160872, 'AUC PR': 0.918367, 'Recall': 0.0}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( movie(D, B) )
%   | | | then return 0.3581489350995122;  // std dev = 0,707, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5825626534025147;  // std dev = 0,348, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5888681676407787;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.20251196167627186;  // std dev = 0,500, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.34808251815794894;  // std dev = 0,318, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2651692652464504;  // std dev = 0,779, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20425232597338527;  // std dev = 0,782, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.15982510286429077;  // std dev = 0,321, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.23024843028429887;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07945895867645503;  // std dev = 0,707, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10799622432139226;  // std dev = 0,765, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.17578733813669378;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.08639689571469833;  // std dev = 0,707, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.967809
   AUC PR    = 0.8123
   CLL	      = -0.274202
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.849 seconds
Total inference time: 1.389 seconds
AUC ROC: 0.967809


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.983333
   CLL	      = -0.23112
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.487 seconds
Parameter learned model CLL: -0.23112


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 4], 'true,true,false,true': [0.707, 1, 1], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,true': [0.348, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 4], 'false,false': [0.0, 0, 0], 'true,true,false': [0.5, 1, 1], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.318, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.779, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.782, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)'}, {'true,true': [0.321, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [0.0, 0, 4], 'false,false': [0.0, 0, 0], 'true,true,false': [0.707, 1, 1], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,true,true': [0.0, 0, 0], 'true': [0.765, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 1, 0], 'true,true,true': [0.0, 0, 4], 'true,false,false,false': [1.32e-09, 3, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.707, 1, 1], 'false': [0.0, 0, 0]}]]
[{'': [0.1388888888888887, 0.0], 'true,true': [0.0, 0.25], 'true,true,true': [nan, 0.0], 'true': [0.1388888888888887, nan], 'true,true,false': [0.25, nan], 'false': [0.0, nan]}, {'': [0.1208224450883389, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.1208224450883389, nan]}, {'': [0.11650469286384187, 0.0], 'true,true': [0.0, 0.24999999999999997], 'true,true,true': [nan, 0.0], 'true': [0.11650469286384187, nan], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.10129729520975904, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.10129729520975904, nan]}, {'': [0.1011188475563987, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.10202986807701671, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.10331748402365638, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.10331748402365638, nan]}, {'': [0.10464859261708614, 0.0], 'true,true': [0.0, 0.25], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.10464859261708614, nan]}, {'': [0.09744187387019392, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.06475309191463645, nan], 'true,true': [0.0, 0.0], 'true,false': [nan, 0.10011833547895603], 'true,true,false': [nan, 0.0], 'true,false,false': [0.25, 5.782411586589357e-19], 'true': [0.009214400956565144, 0.10011833547895603]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false;movie(C, B).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3581489350995122;  // std dev = 0,707, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5825626534025147;  // std dev = 0,851, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5888681676407787;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.20251196167627186;  // std dev = 0,707, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.34808251815794894;  // std dev = 0,780, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2651692652464504;  // std dev = 0,779, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20425232597338527;  // std dev = 0,782, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15982510286429077;  // std dev = 0,787, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.23024843028429887;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.07945895867645503;  // std dev = 0,707, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10799622432139226;  // std dev = 0,765, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then return 0.1277915024929498;  // std dev = 0,215, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return -0.07307386233509507;  // std dev = 0,708, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.969312
   AUC PR    = 0.779331
   CLL	      = -0.274527
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.658 seconds
Total inference time: 1.111 seconds
AUC ROC: 0.969312


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.983333
   CLL	      = -0.235382
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.463 seconds
Refined model CLL: -0.235382


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.967809
   AUC PR    = 0.8123
   CLL	      = -0.274202
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.457 seconds
Total inference time: 1.389 seconds
AUC ROC: 0.967809
Total revision time: 2.457
Best scored revision CLL: -0.23112


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:45:02
{'Inference time': 1.389, 'AUC ROC': 0.967809, 'parameter_5': {'Inference time': 1.389, 'AUC ROC': 0.967809, 'F1': 0.137825, 'Learning time': 0.849, 'Precision': [0.074013, 0.5], 'CLL': -0.274202, 'AUC PR': 0.8123, 'Recall': 1.0}, 'F1': 0.137825, 'Learning time': 2.457, 'Precision': [0.074013, 0.5], 'CLL': -0.274202, 'AUC PR': 0.8123, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6056364498471037;  // std dev = 0,801, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.15612031201574286;  // std dev = 0,106, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.623136203806078;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.022176001408977186;  // std dev = 0,716, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.38395289339096245;  // std dev = 0,660, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.13446361599982037;  // std dev = 0,095, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.13971356710295194;  // std dev = 0,155, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.30782760463515585;  // std dev = 0,568, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.24019090436730897;  // std dev = 0,551, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.1245119393656323;  // std dev = 0,142, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12951885630130344;  // std dev = 0,190, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.20167543620006276;  // std dev = 0,484, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), female(A) )
%   then return 0.222025456207967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06266923170185776;  // std dev = 0,504, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11077851650148057;  // std dev = 0,168, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.14350822548015787;  // std dev = 0,460, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12661433387209983;  // std dev = 0,425, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11156561273651934;  // std dev = 0,192, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999646
   AUC PR    = 0.98105
   CLL	      = -0.140205
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.016 seconds
Total inference time: 1.001 seconds
AUC ROC: 0.999646


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:45:04
{'Inference time': 1.001, 'AUC ROC': 0.999646, 'F1': 0.967742, 'Learning time': 1.016, 'Precision': [0.9375, 0.5], 'CLL': -0.140205, 'AUC PR': 0.98105, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.977547
   AUC PR    = 0.326087
   CLL	      = -0.167473
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.493 seconds
Total inference time: 0.74 seconds
AUC ROC: 0.977547


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:45:05
{'Inference time': 0.74, 'AUC ROC': 0.977547, 'F1': nan, 'Learning time': 0.493, 'Precision': [nan, 0.5], 'CLL': -0.167473, 'AUC PR': 0.326087, 'Recall': 0.0}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( movie(D, B) )
%   | | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5271638816339702;  // std dev = 0,375, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6022112431414105;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.012183356951684043;  // std dev = 0,433, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.31685959891331594;  // std dev = 0,316, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.24452212418546362;  // std dev = 1,122, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18954063192794998;  // std dev = 1,121, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.14824605090713724;  // std dev = 0,312, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.25224162017384893;  // std dev = 1,49e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.18700270945840314;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10019438545345911;  // std dev = 1,043, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.1916803460341392;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.16577456025728926;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.967809
   AUC PR    = 0.8123
   CLL	      = -0.180795
   Precision = 0.945946 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.853659


Total learning time: 0.92 seconds
Total inference time: 1.206 seconds
AUC ROC: 0.967809


Results scoring model
   AUC ROC   = 0.985
   AUC PR    = 0.988462
   CLL	      = -0.221942
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.9
   F1        = 0.947368


Total scoring time: 0.493 seconds
Parameter learned model CLL: -0.221942


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 9], 'true,true,false,true': [0.866, 3, 1], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,true': [0.375, 3, 10], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 9], 'false,false': [0.0, 0, 0], 'true,true,false': [0.433, 3, 1], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.316, 3, 10], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.122, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 7, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.121, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)'}, {'true,true': [0.312, 3, 10], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [1.49e-08, 0, 9], 'false,false': [0.0, 0, 0], 'true,true,false': [0.866, 3, 1], 'true,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 7, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 7, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.043, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 1, 0], 'true,true,true': [0.0, 0, 9], 'true,false,false,false': [0.0, 6, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'false': [0.0, 0, 0]}]]
[{'': [0.1775147928994082, -7.93016446160826e-18], 'true,true': [-2.9605947323337506e-16, 0.18750000000000003], 'true,true,true': [nan, -2.9605947323337506e-16], 'true': [0.1775147928994082, nan], 'true,true,false': [0.18750000000000003, nan], 'false': [-7.93016446160826e-18, nan]}, {'': [0.1409039576814726, -1.982541115402065e-18], 'false,true': [nan, -1.982541115402065e-18], 'false': [-1.982541115402065e-18, nan], 'true': [0.1409039576814726, nan]}, {'': [0.13185079664695018, -1.982541115402065e-18], 'true,true': [-9.868649107779169e-17, 0.1875], 'true,true,true': [nan, -9.868649107779169e-17], 'true': [0.13185079664695018, nan], 'false,true': [nan, -1.982541115402065e-18], 'false': [-1.982541115402065e-18, nan]}, {'': [0.0995511884984187, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.0995511884984187, nan]}, {'': [0.09688972816783147, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.09661119713508708, 9.912705577010326e-19], 'false,true': [nan, 9.912705577010326e-19], 'false': [9.912705577010326e-19, nan]}, {'': [0.09747353689437008, -9.912705577010326e-19], 'false,true': [nan, -9.912705577010326e-19], 'false': [-9.912705577010326e-19, nan], 'true': [0.09747353689437008, nan]}, {'': [0.09879101136158058, 9.912705577010326e-19], 'true,true': [2.4671622769447922e-17, 0.1875], 'false,true': [nan, 9.912705577010326e-19], 'false': [9.912705577010326e-19, nan], 'true': [0.09879101136158058, nan]}, {'': [0.08368952481209953, 9.912705577010326e-19], 'false,true': [nan, 9.912705577010326e-19], 'false': [9.912705577010326e-19, nan]}, {'': [0.06003360999692651, nan], 'true,true': [0.0, 0.0], 'true,false': [nan, 0.07747657176916939], 'true,true,false': [nan, 0.0], 'true,false,false': [0.1875, -5.782411586589357e-19], 'true': [0.005892351806507901, 0.07747657176916939]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false;movie(C, B).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1555325621642444;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.7319728147734345;  // std dev = 0,119, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5522778050363519;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.07863907058749661;  // std dev = 0,744, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1456985250784427;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.4638687526998564;  // std dev = 0,266, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.41522671449759996;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.357714196103916;  // std dev = 0,269, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.31916185052336643;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1284825173822317;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11476916421997992;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.2841052700127688;  // std dev = 0,253, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.25411431622037306;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10361436267006578;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.2326003824955619;  // std dev = 0,232, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20901013087147724;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16569041967591971;  // std dev = 0,029, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.026137691211980018;  // std dev = 0,417, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09663624406234607;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.17716551517672866;  // std dev = 0,224, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1537348987399353;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.11675302129074672;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.09498582835281902;  // std dev = 0,178, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.06264862110271786;  // std dev = 0,341, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.07114351422504181;  // std dev = 0,029, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999571
   AUC PR    = 0.974902
   CLL	      = -0.077951
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.256 seconds
Total inference time: 1.157 seconds
AUC ROC: 0.999571


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.110299
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.496 seconds
Refined model CLL: -0.110299


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999571
   AUC PR    = 0.974902
   CLL	      = -0.077951
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 3.165 seconds
Total inference time: 1.157 seconds
AUC ROC: 0.999571
Total revision time: 3.165
Best scored revision CLL: -0.110299


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:45:11
{'Inference time': 1.157, 'AUC ROC': 0.999571, 'F1': 0.967742, 'Learning time': 3.165, 'parameter_10': {'Inference time': 1.206, 'AUC ROC': 0.967809, 'F1': 0.853659, 'Learning time': 0.92, 'Precision': [0.945946, 0.5], 'CLL': -0.180795, 'AUC PR': 0.8123, 'Recall': 0.777778}, 'Precision': [0.9375, 0.5], 'CLL': -0.077951, 'AUC PR': 0.974902, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.45176837314502194;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.15776846914150625;  // std dev = 0,159, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3440502083105984;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.14148990964156352;  // std dev = 0,150, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.20975771563253556;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.27104110509140633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12800415898050937;  // std dev = 0,141, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.22090711408221786;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.11666901772476677;  // std dev = 0,133, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.18523188550383973;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.1070241029731804;  // std dev = 0,125, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15888777462144266;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09873057615861912;  // std dev = 0,118, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.999646
   AUC PR    = 0.98105
   CLL	      = -0.077646
   Precision = 0.511364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.676692


Total learning time: 1.847 seconds
Total inference time: 1.216 seconds
AUC ROC: 0.999646


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:45:15
{'Inference time': 1.216, 'AUC ROC': 0.999646, 'F1': 0.676692, 'Learning time': 1.847, 'Precision': [0.511364, 0.5], 'CLL': -0.077646, 'AUC PR': 0.98105, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.979366
   AUC PR    = 0.353112
   CLL	      = -0.167029
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.584 seconds
Total inference time: 0.73 seconds
AUC ROC: 0.979366


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:45:16
{'Inference time': 0.73, 'AUC ROC': 0.979366, 'F1': nan, 'Learning time': 0.584, 'Precision': [nan, 0.5], 'CLL': -0.167029, 'AUC PR': 0.353112, 'Recall': 0.0}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( movie(D, B) )
%   | | | then return 0.0010060779566550668;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4799434630127483;  // std dev = 0,394, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6134666146541585;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.06811917287289511;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.2891207886863906;  // std dev = 0,317, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22530315938598885;  // std dev = 1,421, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1756558835899157;  // std dev = 1,408, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.1375929480701766;  // std dev = 0,307, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.27304423940950745;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.2208067435512137;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.0910718253019359;  // std dev = 1,257, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.20696004376240681;  // std dev = 1,49e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.19134684867002388;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.967809
   AUC PR    = 0.8123
   CLL	      = -0.14891
   Precision = 0.945946 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.853659


Total learning time: 0.928 seconds
Total inference time: 1.298 seconds
AUC ROC: 0.967809


Results scoring model
   AUC ROC   = 0.986667
   AUC PR    = 0.990476
   CLL	      = -0.218775
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.515 seconds
Parameter learned model CLL: -0.218775


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 14], 'true,true,false,true': [0.926, 6, 1], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,true': [0.394, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 14], 'false,false': [0.0, 0, 0], 'true,true,false': [0.35, 6, 1], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.317, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,false': [5.27e-09, 9, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.421, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 9, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.408, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)'}, {'true,true': [0.307, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [2.11e-08, 0, 14], 'false,false': [0.0, 0, 0], 'true,true,false': [0.926, 6, 1], 'true,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 9, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.257, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 1, 0], 'true,true,true': [1.49e-08, 0, 14], 'true,false,false,false': [0.0, 8, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.926, 6, 1], 'false': [0.0, 0, 0]}]]
[{'': [0.20408163265306084, -9.25185853854297e-18], 'true,true': [-2.5376526277146434e-16, 0.12244897959183677], 'true,true,true': [nan, -2.5376526277146434e-16], 'true': [0.20408163265306084, nan], 'true,true,false': [0.12244897959183677, nan], 'false': [-9.25185853854297e-18, nan]}, {'': [0.15556551965640236, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.15556551965640236, nan]}, {'': [0.14405170114369542, -1.5419764230904951e-18], 'true,true': [-6.344131569286608e-17, 0.12244897959183675], 'true,true,true': [nan, -6.344131569286608e-17], 'true': [0.14405170114369542, nan], 'false,true': [nan, -1.5419764230904951e-18], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.10071711336341, 3.0839528461809902e-18], 'false,true': [nan, 3.0839528461809902e-18], 'false': [3.0839528461809902e-18, nan], 'true': [0.10071711336341, nan]}, {'': [0.0961116356119156, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.09443857123186315, 1.5419764230904951e-18], 'false,true': [nan, 1.5419764230904951e-18], 'false': [1.5419764230904951e-18, nan]}, {'': [0.0943441450463322, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.0943441450463322, nan]}, {'': [0.09501383616867233, 7.709882115452476e-19], 'true,true': [3.172065784643304e-17, 0.12244897959183675], 'false,true': [nan, 7.709882115452476e-19], 'false': [7.709882115452476e-19, nan], 'true': [0.09501383616867233, nan]}, {'': [0.07526135135292016, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.05727153036490417, nan], 'true,true': [1.586032892321652e-17, 0.0], 'true,false': [nan, 0.061166991310433926], 'true,true,false': [nan, 0.0], 'true,false,false': [0.12244897959183675, 0.0], 'true': [0.0045747858558817574, 0.061166991310433926]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false;movie(C, B).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( female(A) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.13922792860841146;  // std dev = 0,048, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.7270555508123272;  // std dev = 0,110, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5534933673708158;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( female(A) )
%   | | then return 0.1368205351874153;  // std dev = 0,698, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.11094949042770627;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12246581815214197;  // std dev = 0,076, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.4423142389667423;  // std dev = 0,079, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.4161258187058371;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.34019275539992255;  // std dev = 0,078, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.31977115652193444;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.11000454632483708;  // std dev = 0,070, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.27026255794209786;  // std dev = 0,073, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2545302573315372;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.09976574476317114;  // std dev = 0,064, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.22161341363416462;  // std dev = 0,067, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2093041230992511;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.09121669203595216;  // std dev = 0,059, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16994789873933586;  // std dev = 0,019, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( female(A) )
%   | | then return 0.04643210929780639;  // std dev = 0,397, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.06814869269668998;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.16551795257201615;  // std dev = 0,065, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.15337433085550234;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.08278895296214307;  // std dev = 0,065, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.1247119154577331;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.1013838917476634;  // std dev = 0,181, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then if ( female(A), actor(B) )
%   | | then return -0.08330468616769868;  // std dev = 0,052, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(B) )
%   | | | then return -0.06084130721051495;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.007495006580777278;  // std dev = 0,357, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999571
   AUC PR    = 0.974902
   CLL	      = -0.073602
   Precision = 0.953488 at threshold = 0.5
   Recall    = 0.911111
   F1        = 0.931818


Total learning time: 1.389 seconds
Total inference time: 1.411 seconds
AUC ROC: 0.999571


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.105119
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.549 seconds
Refined model CLL: -0.105119


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999571
   AUC PR    = 0.974902
   CLL	      = -0.073602
   Precision = 0.953488 at threshold = 0.5
   Recall    = 0.911111
   F1        = 0.931818


Total learning time: 3.381 seconds
Total inference time: 1.411 seconds
AUC ROC: 0.999571
Total revision time: 3.381
Best scored revision CLL: -0.105119


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:45:23
{'parameter_15': {'Inference time': 1.298, 'AUC ROC': 0.967809, 'F1': 0.853659, 'Learning time': 0.928, 'Precision': [0.945946, 0.5], 'CLL': -0.14891, 'AUC PR': 0.8123, 'Recall': 0.777778}, 'Inference time': 1.411, 'AUC ROC': 0.999571, 'F1': 0.931818, 'Learning time': 3.381, 'Precision': [0.953488, 0.5], 'CLL': -0.073602, 'AUC PR': 0.974902, 'Recall': 0.911111}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.3211800329464989;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(A) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.17878395678482661;  // std dev = 0,548, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.25549168322416005;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( female(A) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.16206123399561895;  // std dev = 0,522, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.20998333859006602;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( female(A) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.14785505217807765;  // std dev = 0,496, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.1772619637847085;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( female(A) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.13562629984602517;  // std dev = 0,470, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.999646
   AUC PR    = 0.98105
   CLL	      = -0.100985
   Precision = 0.326087 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.491803


Total learning time: 1.732 seconds
Total inference time: 1.091 seconds
AUC ROC: 0.999646


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:45:26
{'Inference time': 1.091, 'AUC ROC': 0.999646, 'F1': 0.491803, 'Learning time': 1.732, 'Precision': [0.326087, 0.5], 'CLL': -0.100985, 'AUC PR': 0.98105, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.979366
   AUC PR    = 0.353112
   CLL	      = -0.166972
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.58 seconds
Total inference time: 0.709 seconds
AUC ROC: 0.979366


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:45:27
{'Inference time': 0.709, 'AUC ROC': 0.979366, 'F1': nan, 'Learning time': 0.58, 'Precision': [nan, 0.5], 'CLL': -0.166972, 'AUC PR': 0.353112, 'Recall': 0.0}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.8581489350995123;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( movie(D, B) )
%   | | | then return 0.0010060779566550668;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5260069147816341;  // std dev = 0,367, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 1,86e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6024883650598964;  // std dev = 2,98e-08, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.07588921165345476;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.31437021670435594;  // std dev = 0,292, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.24358706070363095;  // std dev = 1,456, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926096;  // std dev = 1,32e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18977601641320868;  // std dev = 1,446, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.1492359966279529;  // std dev = 0,284, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.2528228036006874;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.24605032963866708;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10107617795307224;  // std dev = 1,291, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.19193084979721015;  // std dev = 2,36e-08, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.21220043435727312;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.967809
   AUC PR    = 0.8123
   CLL	      = -0.154365
   Precision = 0.945946 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.853659


Total learning time: 0.967 seconds
Total inference time: 1.471 seconds
AUC ROC: 0.967809


Results scoring model
   AUC ROC   = 0.9925
   AUC PR    = 0.994231
   CLL	      = -0.191532
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.57 seconds
Parameter learned model CLL: -0.191532


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 19], 'true,true,false,true': [0.926, 6, 1], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,true': [0.367, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 14, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [2.98e-08, 0, 19], 'false,false': [0.0, 0, 0], 'true,true,false': [0.35, 6, 1], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [1.18e-08, 14, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.292, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 14, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.456, 6, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [8.33e-09, 14, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.446, 6, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)'}, {'true,true': [0.284, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [0.0, 0, 19], 'false,false': [0.0, 0, 0], 'true,true,false': [0.926, 6, 1], 'true,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 14, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [3.73e-09, 14, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.291, 6, 20]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 2, 0], 'true,true,true': [2.36e-08, 0, 19], 'true,false,false,false': [5.89e-09, 12, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.926, 6, 1], 'false': [0.0, 0, 0]}]]
[{'': [0.17751479289940847, -1.1895246692412391e-17], 'true,true': [-2.8047739569477637e-16, 0.12244897959183677], 'true,true,true': [nan, -2.8047739569477637e-16], 'true': [0.17751479289940847, nan], 'true,true,false': [0.12244897959183677, nan], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.13456080824186348, 3.96508223080413e-18], 'false,true': [nan, 3.96508223080413e-18], 'false': [3.96508223080413e-18, nan], 'true': [0.13456080824186348, nan]}, {'': [0.1235085805500726, 9.912705577010326e-18], 'true,true': [4.674623261579606e-17, 0.12244897959183672], 'true,true,true': [nan, 4.674623261579606e-17], 'true': [0.1235085805500726, nan], 'false,true': [nan, 9.912705577010326e-18], 'false': [9.912705577010326e-18, nan]}, {'': [0.08548803805028428, -3.96508223080413e-18], 'false,true': [nan, -3.96508223080413e-18], 'false': [-3.96508223080413e-18, nan], 'true': [0.08548803805028428, nan]}, {'': [0.08149782662147392, 3.96508223080413e-18], 'false,true': [nan, 3.96508223080413e-18], 'false': [3.96508223080413e-18, nan]}, {'': [0.08042048262546143, 4.956352788505163e-18], 'false,true': [nan, 4.956352788505163e-18], 'false': [4.956352788505163e-18, nan]}, {'': [0.0808367946455407, -9.912705577010326e-19], 'false,true': [nan, -9.912705577010326e-19], 'false': [-9.912705577010326e-19, nan], 'true': [0.0808367946455407, nan]}, {'': [0.08193196729846895, 9.912705577010326e-19], 'true,true': [-3.5059674461847047e-17, 0.12244897959183673], 'false,true': [nan, 9.912705577010326e-19], 'false': [9.912705577010326e-19, nan], 'true': [0.08193196729846895, nan]}, {'': [0.0640548215775377, 9.912705577010326e-19], 'false,true': [nan, 9.912705577010326e-19], 'false': [9.912705577010326e-19, nan]}, {'': [0.0472523022452946, nan], 'true,true': [2.921639538487254e-17, 0.0], 'true,false': [nan, 0.050210149529026006], 'true,true,false': [nan, 0.0], 'true,false,false': [0.12244897959183668, 2.8912057932946786e-18], 'true': [0.005652507089109027, 0.050210149529026006]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false;movie(C, B).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A) )
%   | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7251600161619839;  // std dev = 0,111, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.13922792860841146;  // std dev = 0,048, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5539617792479808;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A) )
%   | | then return 0.13695133835103132;  // std dev = 0,699, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.11094949042770627;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.122471868115141;  // std dev = 0,076, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.43518135563149096;  // std dev = 0,067, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.41647260121469803;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11000952296515171;  // std dev = 0,070, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.33460857658568527;  // std dev = 0,067, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.3200061952456683;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09976990606261338;  // std dev = 0,064, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.26597178501812163;  // std dev = 0,063, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.25469068201674844;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09122022072951681;  // std dev = 0,059, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.21827544689662357;  // std dev = 0,058, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.2094174899815997;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17161479222818543;  // std dev = 0,015, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( female(A) )
%   | | then return 0.04814842220731271;  // std dev = 0,401, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.06814750411917213;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.16200324015863568;  // std dev = 0,056, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1532321485980329;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.08285287758538235;  // std dev = 0,065, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.12731326769604928;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.08474312661726971;  // std dev = 0,086, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then if ( female(A), actor(B) )
%   | | then return -0.08017773585695993;  // std dev = 0,055, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(E, B), movie(E, A) )
%   | | | then return 0.01824709241962858;  // std dev = 0,346, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999571
   AUC PR    = 0.974902
   CLL	      = -0.073404
   Precision = 0.953488 at threshold = 0.5
   Recall    = 0.911111
   F1        = 0.931818


Total learning time: 1.634 seconds
Total inference time: 1.298 seconds
AUC ROC: 0.999571


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.102988
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.564 seconds
Refined model CLL: -0.102988


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999571
   AUC PR    = 0.974902
   CLL	      = -0.073404
   Precision = 0.953488 at threshold = 0.5
   Recall    = 0.911111
   F1        = 0.931818


Total learning time: 3.735 seconds
Total inference time: 1.298 seconds
AUC ROC: 0.999571
Total revision time: 3.735
Best scored revision CLL: -0.102988


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:45:35
{'Inference time': 1.298, 'AUC ROC': 0.999571, 'parameter_20': {'Inference time': 1.471, 'AUC ROC': 0.967809, 'F1': 0.853659, 'Learning time': 0.967, 'Precision': [0.945946, 0.5], 'CLL': -0.154365, 'AUC PR': 0.8123, 'Recall': 0.777778}, 'F1': 0.931818, 'Learning time': 3.735, 'Precision': [0.953488, 0.5], 'CLL': -0.073404, 'AUC PR': 0.974902, 'Recall': 0.911111}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.6081489350995123;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.7194734122109542;  // std dev = 5,16e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.5170719622367218;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.41257245288266;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.4175135841583098;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.3151786576185065;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.48676009386434194;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( female(A) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.1768010021785404;  // std dev = 0,168, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.36824990443623923;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( female(B) )
%   | then return -0.08201977854983392;  // std dev = 0,006, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.15816628331975482;  // std dev = 0,155, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.2874129586428056;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( female(B) )
%   | then return -0.07605297090601035;  // std dev = 0,006, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.14158381700968264;  // std dev = 0,144, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.1770964977452774;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.23229543947588205;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( female(A) )
%   | then return -0.06909660571579637;  // std dev = 0,009, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.128544182270466;  // std dev = 0,134, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.19345880109787117;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(B) )
%   | then return -0.0647302513415049;  // std dev = 0,009, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.11687478272289517;  // std dev = 0,124, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.16504644170025773;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(A) )
%   | then return -0.059603996127317455;  // std dev = 0,011, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.10747786802770024;  // std dev = 0,116, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.999646
   AUC PR    = 0.98105
   CLL	      = -0.080598
   Precision = 0.511364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.676692


Total learning time: 2.174 seconds
Total inference time: 1.191 seconds
AUC ROC: 0.999646


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:45:38
{'Inference time': 1.191, 'AUC ROC': 0.999646, 'F1': 0.676692, 'Learning time': 2.174, 'Precision': [0.511364, 0.5], 'CLL': -0.080598, 'AUC PR': 0.98105, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.6081489350995123;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */


Results
   AUC ROC   = 0.979366
   AUC PR    = 0.353112
   CLL	      = -0.167128
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.638 seconds
Total inference time: 0.724 seconds
AUC ROC: 0.979366


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:45:40
{'Inference time': 0.724, 'AUC ROC': 0.979366, 'F1': nan, 'Learning time': 0.638, 'Precision': [nan, 0.5], 'CLL': -0.167128, 'AUC PR': 0.353112, 'Recall': 0.0}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true,true;author(F, E), venue(F, B).;true;true
0;true,true,true;samebib(F, G), venue(G, A).;false;false
0;true,false,true;author(J, I), venue(J, A).;false;false
0;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;false
0;true,true,false;haswordvenue(B, D).;false;false
0;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true;haswordtitle(F, C).;true;false
1;true,true,true;haswordauthor(G, C).;false;false
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
1;false,true,false;haswordauthor(L, H).;false;false
1;false,true;title(J, I), venue(J, A).;true;true
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true,true;author(F, E), venue(F, B).;true;true
2;true,true,true;samebib(F, G), venue(G, A).;false;false
2;false;haswordvenue(B, I), haswordauthor(J, I).;true;false
2;true,true,false;haswordauthor(H, C).;false;false
2;false,true;haswordtitle(K, I).;true;false
2;false,true,true;author(L, J), venue(L, A).;false;false
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true,true;haswordtitle(F, C).;true;false
3;true,true,true;haswordtitle(F, D).;false;false
3;true,false,true;author(I, H), venue(I, B).;false;false
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;false
3;false,true;title(L, K), venue(L, A).;false;false
3;false;haswordvenue(B, J), haswordtitle(K, J).;true;false
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
4;false,true;title(F, E), venue(F, A).;true;true
4;false,true,false;haswordauthor(H, D).;false;false
4;false,true,true;samebib(F, G), venue(G, B).;false;false
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;author(K, J), venue(K, A).;false;false
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
5;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;haswordtitle(F, D).;true;true
5;false,true,false;author(H, E), venue(H, A).;false;false
5;false,true,true;author(G, E), title(G, F).;false;false
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true;haswordtitle(F, D).;true;false
6;true,true,true;haswordtitle(F, C).;false;false
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
6;false,true,false;haswordauthor(K, G).;false;false
6;false,true;title(I, H), venue(I, A).;true;true
6;false,true,true;samebib(I, J), venue(J, B).;false;false
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true,true;haswordauthor(F, C).;false;true
7;false,false,true;title(M, L), venue(M, B).;false;false
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;false
7;true,true,false;author(G, E), venue(G, B).;false;false
7;false,true;title(J, I), venue(J, A).;false;false
7;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
8;false,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
8;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;false,true;haswordtitle(F, D).;true;false
8;false,true,true;author(G, E), venue(G, A).;false;false
8;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
9;true,true;haswordvenue(B, C).;false;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;false
9;true,false;title(G, D), venue(G, A).;false;true
9;true,true,false;samebib(E, F), venue(F, A).;false;false
9;true,false,false;haswordvenue(B, C).;false;false
9;false,true;haswordvenue(B, I), haswordtitle(J, I).;false;false
9;true;venue(E, B), title(E, D).;true;true


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( movie(D, B) )
%   | | | then return -0.030739953789376676;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5158791081246895;  // std dev = 0,371, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 1,86e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6049113998318699;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.10056347441813612;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then if ( genre(A, H) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.30820605408684093;  // std dev = 0,291, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.23933579446392206;  // std dev = 1,626, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926094;  // std dev = 2,28e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18672607992250081;  // std dev = 1,611, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.14691593004422368;  // std dev = 0,281, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, A) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.2572858923115247;  // std dev = 3,33e-08, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.25841730080610736;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then if ( genre(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09895779650467136;  // std dev = 1,414, 33,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.19523175674680215;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(A, F) )
%   | | then return -0.3332105034735899;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.2082105034735899;  // std dev = 0,935, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.144729
   Precision = 0.945946 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.853659


Total learning time: 0.995 seconds
Total inference time: 1.394 seconds
AUC ROC: 0.971565


Results scoring model
   AUC ROC   = 0.9944
   AUC PR    = 0.995625
   CLL	      = -0.187196
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.96
   F1        = 0.979592


Total scoring time: 0.588 seconds
Parameter learned model CLL: -0.187196


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'true': 'movie(D, A)', 'true,true,false': 'movie(D, B)', 'false': 'movie(G, B)'}, {'true,true,false,false': [0.0, 0, 0], 'true,true,true,false': [1.03e-07, 0, 24], 'true,true,false,true': [0.943, 8, 1], 'true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 0], 'false,true': [0.0, 17, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, A)', 'false': 'movie(E, B)'}, {'true,true': [0.371, 8, 25], 'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 17, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'true,true,true': 'genre(A, F)', 'false': 'movie(G, B)', 'false,true': 'genre(A, H)', 'true': 'movie(D, B)'}, {'true,true,true,false': [0.0, 0, 24], 'false,false': [0.0, 0, 0], 'true,true,false': [0.314, 8, 1], 'true,true,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 17, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, B)'}, {'true,true': [0.291, 8, 25], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [2.28e-09, 17, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.626, 8, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [1.18e-08, 17, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.611, 8, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, F)', 'true': 'movie(D, B)', 'false': 'movie(E, A)'}, {'true,true': [0.281, 8, 25], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true': 'genre(B, E)', 'false,true': 'genre(A, G)', 'true': 'movie(D, A)', 'false': 'movie(F, B)'}, {'true,true,true': [3.33e-08, 0, 24], 'false,false': [0.0, 0, 0], 'true,true,false': [0.943, 8, 1], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, A)'}, {'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true': [0.0, 0, 0], 'true': [1.414, 8, 25]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true': 'movie(C, B)', 'true,false': 'genre(A, F)', 'true,true,false': 'genre(A, E)', 'true,false,false': 'movie(C, B)', 'true': 'genre(B, D)'}, {'true,true,false,false': [0.0, 2, 0], 'true,true,true': [0.0, 0, 24], 'true,false,false,false': [7.9e-09, 15, 0], 'true,true,false,true': [0.0, 0, 0], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.935, 7, 1], 'false': [0.0, 0, 0]}]]
[{'': [0.1836547291092757, -3.2653618371328133e-18], 'true,true': [4.440892098500626e-16, 0.09876543209876548], 'true,true,true': [nan, 4.440892098500626e-16], 'false': [-3.2653618371328133e-18, nan], 'true,true,false': [0.09876543209876548, nan], 'true': [0.1836547291092757, nan]}, {'': [0.1374710686863482, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.1374710686863482, nan]}, {'': [0.12565235054555945, 1.3061447348531253e-17], 'true,true': [-2.220446049250313e-16, 0.09876543209876544], 'true,true,true': [nan, -2.220446049250313e-16], 'true': [0.12565235054555945, nan], 'false,true': [nan, 1.3061447348531253e-17], 'false': [1.3061447348531253e-17, nan]}, {'': [0.08469971773416043, -8.163404592832034e-18], 'false,true': [nan, -8.163404592832034e-18], 'false': [-8.163404592832034e-18, nan], 'true': [0.08469971773416043, nan]}, {'': [0.08012546792391097, 4.89804275569922e-18], 'false,true': [nan, 4.89804275569922e-18], 'false': [4.89804275569922e-18, nan]}, {'': [0.07863771646813963, 8.163404592832034e-18], 'false,true': [nan, 8.163404592832034e-18], 'false': [8.163404592832034e-18, nan]}, {'': [0.07877649389497421, -2.44902137784961e-18], 'false,true': [nan, -2.44902137784961e-18], 'false': [-2.44902137784961e-18, nan], 'true': [0.07877649389497421, nan]}, {'': [0.07968639719554202, 0.0], 'true,true': [4.625929269271486e-17, 0.09876543209876547], 'false,true': [nan, 0.0], 'false': [0.0, nan], 'true': [0.07968639719554202, nan]}, {'': [0.06056125998293221, -8.163404592832033e-19], 'false,true': [nan, -8.163404592832033e-19], 'false': [-8.163404592832033e-19, nan]}, {'': [0.04533512646349862, nan], 'true,true': [-1.3877787807814457e-17, 0.0], 'true,false': [0.0, 0.042748516159945384], 'true,true,false': [nan, 0.0], 'true,false,false': [0.10937499999999997, 4.163336342344337e-18], 'true': [0.004778741012421752, 0.04288112963091296]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- genre(B, D).;true;true
9;false,false;movie(C, B).;true;true
9;false;genre(A, F).;true;true
9;true;movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.858148935099512;  // std dev = 1,03e-07, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( female(A) )
%   | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.13672760989183627;  // std dev = 0,041, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.7244731732359465;  // std dev = 0,122, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5541314836832208;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( female(A) )
%   | | then return 0.07734337650450221;  // std dev = 0,747, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.11119636113325222;  // std dev = 2,63e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11837958409397265;  // std dev = 0,065, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( female(A) )
%   | | then return 0.43486697152514897;  // std dev = 0,071, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.41659828327801435;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10662601315697078;  // std dev = 0,059, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( female(A) )
%   | | then return 0.3346123069331507;  // std dev = 0,072, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.32009138303855517;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.26616939576448406;  // std dev = 0,068, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.25474882331918186;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.09692787494232451;  // std dev = 0,054, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.2185712918239341;  // std dev = 0,063, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.20945857335251056;  // std dev = 1,49e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.08880045602370197;  // std dev = 0,050, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17210825263040788;  // std dev = 0,018, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.10321802936538364;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.010736401322439831;  // std dev = 0,437, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07889251894817333;  // std dev = 0,033, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( female(A) )
%   | | then return 0.1627140023542597;  // std dev = 0,063, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.1531949891665203;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.12721665068676696;  // std dev = 1,05e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.09825894756889503;  // std dev = 0,077, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.0648478745464708;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then if ( female(B) )
%   | | | then return -0.06855578365721986;  // std dev = 0,030, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.03016918759217759;  // std dev = 0,417, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999571
   AUC PR    = 0.974902
   CLL	      = -0.072098
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.56 seconds
Total inference time: 1.335 seconds
AUC ROC: 0.999571


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.10285
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.55 seconds
Refined model CLL: -0.10285


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999571
   AUC PR    = 0.974902
   CLL	      = -0.072098
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 3.6929999999999996 seconds
Total inference time: 1.335 seconds
AUC ROC: 0.999571
Total revision time: 3.6929999999999996
Best scored revision CLL: -0.10285


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:45:47
{'Inference time': 1.335, 'AUC ROC': 0.999571, 'F1': 0.967742, 'Learning time': 3.6929999999999996, 'Precision': [0.9375, 0.5], 'CLL': -0.072098, 'AUC PR': 0.974902, 'parameter_25': {'Inference time': 1.394, 'AUC ROC': 0.971565, 'F1': 0.853659, 'Learning time': 0.995, 'Precision': [0.945946, 0.5], 'CLL': -0.144729, 'AUC PR': 0.823063, 'Recall': 0.777778}, 'Recall': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.6763307532813305;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.7194734122109542;  // std dev = 5,96e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.5728505077589573;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 1,05e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.45250734201965837;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.4175135841583098;  // std dev = 5,16e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.34273989085368034;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 1,18e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.2573771265051453;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 2,11e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.37711643521660415;  // std dev = 1,49e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( female(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.19272451406739663;  // std dev = 0,215, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( female(A) )
%   | | then return 0.20975771563253562;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.2934012052523202;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( female(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.17238624239576555;  // std dev = 0,202, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( female(A) )
%   | | then return 0.17709649774527741;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.236435300710961;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( female(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.15539236675068777;  // std dev = 0,189, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.1527438580936708;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.1964299376342592;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( female(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.14100990947025016;  // std dev = 0,177, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.1672576992357614;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( female(A) )
%   | then return -0.05807837422859732;  // std dev = 0,021, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(B) )
%   | | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.14942803116035652;  // std dev = 0,179, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.999646
   AUC PR    = 0.98105
   CLL	      = -0.086947
   Precision = 0.511364 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.676692


Total learning time: 2.03 seconds
Total inference time: 1.215 seconds
AUC ROC: 0.999646


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:45:50
{'Inference time': 1.215, 'AUC ROC': 0.999646, 'F1': 0.676692, 'Learning time': 2.03, 'Precision': [0.511364, 0.5], 'CLL': -0.086947, 'AUC PR': 0.98105, 'Recall': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.6763307532813305;  // std dev = 0,386, 11,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */


Results
   AUC ROC   = 0.979366
   AUC PR    = 0.353112
   CLL	      = -0.166997
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.669 seconds
Total inference time: 0.729 seconds
AUC ROC: 0.979366


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:45:52
{'Inference time': 0.729, 'AUC ROC': 0.979366, 'F1': nan, 'Learning time': 0.669, 'Precision': [nan, 0.5], 'CLL': -0.166997, 'AUC PR': 0.353112, 'Recall': 0.0}


