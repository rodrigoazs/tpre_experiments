Starting experiment #3 for 53_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 3017
Source train neg examples: 249953

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21857430539954512;  // std dev = 0,480, 7.899,000 (wgt'ed) examples reached here.  /* #neg=5.052 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7914822684328452;  // std dev = 2,366, 90,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=84 */
%   | | | else return -0.13858309104427868;  // std dev = 0,998, 306,000 (wgt'ed) examples reached here.  /* #neg=305 #pos=1 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.19905802600860326;  // std dev = 3,144, 44,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return -0.05435106490048776;  // std dev = 4,377, 240,000 (wgt'ed) examples reached here.  /* #neg=219 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.0141336735961401;  // std dev = 6,403, 368,000 (wgt'ed) examples reached here.  /* #neg=321 #pos=47 */
%   | | | else return -0.10548742853685135;  // std dev = 1,388, 55,000 (wgt'ed) examples reached here.  /* #neg=53 #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordtitle(F, C) )
%   | | | then return 0.28335370476351035;  // std dev = 6,138, 152,000 (wgt'ed) examples reached here.  /* #neg=83 #pos=69 */
%   | | | else return 0.829406336342456;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.7182952252313447;  // std dev = 0,943, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.09812989554160217;  // std dev = 2,154, 69,000 (wgt'ed) examples reached here.  /* #neg=64 #pos=5 */
%   | else return 0.1907101719229365;  // std dev = 0,480, 7.639,000 (wgt'ed) examples reached here.  /* #neg=4.879 #pos=2.760 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.6660633000779176;  // std dev = 2,366, 90,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=84 */
%   | | | else return -0.12242522300916232;  // std dev = 0,998, 296,000 (wgt'ed) examples reached here.  /* #neg=295 #pos=1 */
%   | | else return -0.011989081654606161;  // std dev = 0,331, 281,000 (wgt'ed) examples reached here.  /* #neg=245 #pos=36 */
%   | else return -0.02753119912808172;  // std dev = 0,314, 442,000 (wgt'ed) examples reached here.  /* #neg=393 #pos=49 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16404006476519034;  // std dev = 0,480, 7.835,000 (wgt'ed) examples reached here.  /* #neg=4.988 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return 0.0635910662416288;  // std dev = 0,874, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.20226852752455732;  // std dev = 3,072, 41,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | else return -0.04424640680752661;  // std dev = 0,280, 23,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.03248812777955513;  // std dev = 7,663, 640,000 (wgt'ed) examples reached here.  /* #neg=574 #pos=66 */
%   | | | else return 0.00935147025519086;  // std dev = 4,012, 206,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=37 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.016159233266390807;  // std dev = 4,514, 253,000 (wgt'ed) examples reached here.  /* #neg=205 #pos=48 */
%   | | | else return -0.12245525322813391;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13108953068455625;  // std dev = 0,479, 7.957,000 (wgt'ed) examples reached here.  /* #neg=5.110 #pos=2.847 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.02963697757566866;  // std dev = 1,249, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.046140051740181404;  // std dev = 2,371, 64,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.08085766940170826;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1161406145466393;  // std dev = 0,015, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.016920867168994203;  // std dev = 5,315, 344,000 (wgt'ed) examples reached here.  /* #neg=276 #pos=68 */
%   | | | else return -0.018580081953133824;  // std dev = 5,453, 287,000 (wgt'ed) examples reached here.  /* #neg=252 #pos=35 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.003015986137529937;  // std dev = 6,461, 372,000 (wgt'ed) examples reached here.  /* #neg=324 #pos=48 */
%   | | | else return -0.11060967928483177;  // std dev = 0,011, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.11496769778408036;  // std dev = 0,481, 7.787,000 (wgt'ed) examples reached here.  /* #neg=4.940 #pos=2.847 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6961860003192888;  // std dev = 0,274, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1253018004762793;  // std dev = 0,026, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.03542893640140585;  // std dev = 2,393, 63,000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   | | | else return -0.1113258538488366;  // std dev = 0,023, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.003816752916189658;  // std dev = 8,360, 623,000 (wgt'ed) examples reached here.  /* #neg=540 #pos=83 */
%   | | | else return -0.041056388994268306;  // std dev = 3,186, 190,000 (wgt'ed) examples reached here.  /* #neg=169 #pos=21 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.003905032310600365;  // std dev = 4,457, 267,000 (wgt'ed) examples reached here.  /* #neg=220 #pos=47 */
%   | | | else return -0.10056412544198333;  // std dev = 0,009, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08936239112543104;  // std dev = 0,480, 7.861,000 (wgt'ed) examples reached here.  /* #neg=5.014 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5600551955885649;  // std dev = 1,027, 85,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=84 */
%   | | | else return -0.11214815312767527;  // std dev = 1,006, 324,000 (wgt'ed) examples reached here.  /* #neg=323 #pos=1 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.21958726890899607;  // std dev = 2,936, 36,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | | | else return -0.04468200321110833;  // std dev = 4,387, 251,000 (wgt'ed) examples reached here.  /* #neg=230 #pos=21 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.002431305594700075;  // std dev = 6,363, 348,000 (wgt'ed) examples reached here.  /* #neg=301 #pos=47 */
%   | | | else return -0.08045124510057715;  // std dev = 1,382, 51,000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   | | else return -0.09081020059364298;  // std dev = 0,001, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.607950716012414;  // std dev = 0,206, 22,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.20423320935373243;  // std dev = 4,432, 79,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=39 */
%   | | | else return -0.07149684590667937;  // std dev = 4,592, 123,000 (wgt'ed) examples reached here.  /* #neg=96 #pos=27 */
%   | else return 0.0647452075355957;  // std dev = 0,478, 7.764,000 (wgt'ed) examples reached here.  /* #neg=5.004 #pos=2.760 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then return -0.009156122249382578;  // std dev = 0,246, 550,000 (wgt'ed) examples reached here.  /* #neg=450 #pos=100 */
%   | | else return 0.061178058216741125;  // std dev = 0,385, 112,000 (wgt'ed) examples reached here.  /* #neg=91 #pos=21 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return -0.004304909400996495;  // std dev = 6,386, 366,000 (wgt'ed) examples reached here.  /* #neg=319 #pos=47 */
%   | | | else return -0.07309474870480995;  // std dev = 1,383, 52,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | | else return -0.08402603087205376;  // std dev = 0,006, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5062683355525627;  // std dev = 0,053, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.05108220459536576;  // std dev = 0,478, 7.957,000 (wgt'ed) examples reached here.  /* #neg=5.131 #pos=2.826 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.478302494470527;  // std dev = 0,431, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1095960053350338;  // std dev = 0,025, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordtitle(I, E) )
%   | | | then return 0.024525826899405426;  // std dev = 1,881, 54,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return -0.0889340193606632;  // std dev = 0,035, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.011353298128871585;  // std dev = 8,213, 553,000 (wgt'ed) examples reached here.  /* #neg=470 #pos=83 */
%   | | | else return -0.03577757119581241;  // std dev = 2,692, 176,000 (wgt'ed) examples reached here.  /* #neg=155 #pos=21 */
%   | | else return -0.009925159298596747;  // std dev = 0,229, 259,000 (wgt'ed) examples reached here.  /* #neg=212 #pos=47 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( venue(E, B), title(E, D) )
%   | then if ( haswordvenue(B, C) )
%   | | then return 0.03171185838018071;  // std dev = 0,475, 7.512,000 (wgt'ed) examples reached here.  /* #neg=4.903 #pos=2.609 */
%   | | else if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.7082344912194617;  // std dev = 3,125, 141,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=131 */
%   | | | else return -0.13643936928821118;  // std dev = 1,570, 525,000 (wgt'ed) examples reached here.  /* #neg=522 #pos=3 */
%   | else if ( title(G, D), venue(G, A) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return -0.20197043726577962;  // std dev = 4,891, 240,000 (wgt'ed) examples reached here.  /* #neg=213 #pos=27 */
%   | | | else return -0.04744120561668267;  // std dev = 1,316, 43,000 (wgt'ed) examples reached here.  /* #neg=40 #pos=3 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.4062936106818318;  // std dev = 4,573, 107,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=78 */
%   | | | else return 0.03619239406268765;  // std dev = 4,110, 211,000 (wgt'ed) examples reached here.  /* #neg=162 #pos=49 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.5776391666192543;  // std dev = 0,293, 75,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=68 */
%   | else return -0.007522123670568333;  // std dev = 0,228, 263,000 (wgt'ed) examples reached here.  /* #neg=214 #pos=49 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03854614034788214;  // std dev = 0,476, 7.835,000 (wgt'ed) examples reached here.  /* #neg=4.988 #pos=2.847 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.12048446445259238;  // std dev = 2,481, 43,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=17 */
%   | | | else return -0.025064078855575794;  // std dev = 4,903, 512,000 (wgt'ed) examples reached here.  /* #neg=429 #pos=83 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return 0.3274482411300051;  // std dev = 0,639, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.009758496368988036;  // std dev = 3,567, 131,000 (wgt'ed) examples reached here.  /* #neg=112 #pos=19 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.006326703081768758;  // std dev = 5,629, 357,000 (wgt'ed) examples reached here.  /* #neg=310 #pos=47 */
%   | | | else return -0.0632200180219761;  // std dev = 1,381, 52,000 (wgt'ed) examples reached here.  /* #neg=50 #pos=2 */
%   | | else return -0.07572850214119997;  // std dev = 0,006, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.866082
   AUC PR    = 0.059448
   CLL	      = -0.64181
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.795 seconds
Total inference time: 1.445 seconds
AUC ROC: 0.866082


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.467 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 5], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.49e-08, 0, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 2], 'true,true,false': [0.0, 0, 3], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 3], 'true,true,true': [0.0, 0, 2], 'true,false,false,false': [1.86e-09, 5, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0]}]]
[{'': [0.0, -2.7755575615628915e-18], 'false,true': [nan, -2.7755575615628915e-18], 'false': [-2.7755575615628915e-18, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'false': [0.0, nan], 'false,true': [nan, 0.0]}, {'': [-4.4408920985006264e-17, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [4.4408920985006264e-17, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [-2.2204460492503132e-17, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.0, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [-5.551115123125783e-18, -1.3877787807814458e-18], 'true': [-5.551115123125783e-18, nan], 'false': [-1.3877787807814458e-18, nan], 'true,true': [0.0, 0.0]}, {'': [0.0, -6.938893903907229e-19], 'false,true': [nan, -6.938893903907229e-19], 'false': [-6.938893903907229e-19, nan]}, {'': [0.01222913466736446, nan], 'true': [0.0, 0.01146481375065418], 'true,false': [nan, 0.01146481375065418], 'true,true': [0.0, nan], 'true,false,false': [-4.625929269271485e-18, 6.938893903907229e-19]}, {'': [0.0, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;false;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.15274385809367097;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( movie(D, B) )
%   | then if ( actor(B) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.09745114910920255;  // std dev = 0,192, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13793553226164262;  // std dev = 0,007, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06633474260504205;  // std dev = 0,010, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.589282
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.692 seconds
Total inference time: 1.383 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097441
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.463 seconds
Refined model CLL: -0.097441


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.866082
   AUC PR    = 0.059448
   CLL	      = -0.64181
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.417 seconds
Total inference time: 1.445 seconds
AUC ROC: 0.866082
Total revision time: 2.417
Best scored revision CLL: -0.094637


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:37:30
{'CLL': -0.64181, 'AUC ROC': 0.866082, 'F1': 0.106262, 'Recall': 1.0, 'Precision': [0.056112, 0.5], 'parameter_5': {'CLL': -0.64181, 'AUC ROC': 0.866082, 'F1': 0.106262, 'Recall': 1.0, 'Precision': [0.056112, 0.5], 'Inference time': 1.445, 'Learning time': 0.795, 'AUC PR': 0.059448}, 'Inference time': 1.445, 'Learning time': 2.417, 'AUC PR': 0.059448}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.641551
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.01 seconds
Total inference time: 1.37 seconds
AUC ROC: 0.857618


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 02:37:33
{'CLL': -0.641551, 'AUC ROC': 0.857618, 'F1': 0.106262, 'Recall': 1.0, 'Precision': [0.056112, 0.5], 'Inference time': 1.37, 'Learning time': 1.01, 'AUC PR': 0.056112}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.207627
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.475 seconds
Total inference time: 0.869 seconds
AUC ROC: 0.857618


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 02:37:34
{'CLL': -0.207627, 'AUC ROC': 0.857618, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.869, 'Learning time': 0.475, 'AUC PR': 0.056112}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675544;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.34884632569484214;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354195;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423424;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 1,32e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3211800329464989;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.01215330038683445;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1229969126036808;  // std dev = 0,359, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 9,31e-10, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.23280656023518964;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.03582634619284993;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08277065763791105;  // std dev = 1,217, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.398476
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.847 seconds
Total inference time: 1.501 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.959603
   CLL	      = -0.277349
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.533 seconds
Parameter learned model CLL: -0.277349


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.291, 2, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.373, 2, 10], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.291, 2, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.291, 2, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [1.291, 2, 10], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.291, 2, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.32e-09, 8, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 6], 'true,true,false': [1.155, 2, 4], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.359, 2, 10], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [9.31e-10, 7, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [1.155, 2, 4], 'true,true,true': [0.0, 0, 6], 'true,true,false,false': [0.0, 1, 0], 'true,true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false': [2.63e-09, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.217, 2, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'false,true': [nan, -6.938893903907228e-18], 'false': [-6.938893903907228e-18, nan]}, {'': [0.13888888888888914, 0.0], 'true': [0.13888888888888914, nan], 'false': [0.0, nan], 'false,true': [nan, 0.0]}, {'': [0.1388888888888891, -1.734723475976807e-18], 'false,true': [nan, -1.734723475976807e-18], 'false': [-1.734723475976807e-18, nan]}, {'': [0.138888888888889, 1.734723475976807e-18], 'false,true': [0.0, 0.0], 'false': [1.734723475976807e-18, nan]}, {'': [0.1388888888888888, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'false,true,true': [nan, 0.0]}, {'': [0.13888888888888892, 1.734723475976807e-18], 'false,true': [nan, 1.734723475976807e-18], 'false': [1.734723475976807e-18, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan], 'false': [0.0, nan], 'true,true': [0.0, 0.2222222222222222]}, {'': [0.12866597535288452, 8.673617379884035e-19], 'false,true': [0.0, 9.912705577010326e-19], 'false': [8.673617379884035e-19, nan], 'false,true,true': [nan, 0.0]}, {'': [0.084177927601852, nan], 'true,true,false': [nan, 0.0], 'true,false': [nan, 0.10282823066901868], 'true': [0.011111221771081077, 0.10282823066901868], 'true,true': [0.0, 0.0], 'true,false,false': [0.2222222222222222, 9.912705577010326e-19]}, {'': [0.1234444388063577, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.448295606241962;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.36236334632262296;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2807538536965854;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.21248070121827137;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.15948988228171151;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( female(A) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.33142317417372186;  // std dev = 0,298, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.0019101591596115315;  // std dev = 0,967, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.18506538249102902;  // std dev = 0,061, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.07991796634848763;  // std dev = 1,087, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.08542697379522426;  // std dev = 0,178, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3544489113598608;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then if ( actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.3172942107437101;  // std dev = 0,498, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.18168635123959737;  // std dev = 0,355, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.14127652681168235;  // std dev = 0,035, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.041608310079720434;  // std dev = 0,921, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( female(A) )
%   | then return -0.06748702004349451;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.06217496021853627;  // std dev = 0,025, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.929632
   AUC PR    = 0.525762
   CLL	      = -0.379178
   Precision = 0.085366 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.157303


Total learning time: 1.221 seconds
Total inference time: 1.295 seconds
AUC ROC: 0.929632


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.204956
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.493 seconds
Refined model CLL: -0.204956


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.929632
   AUC PR    = 0.525762
   CLL	      = -0.379178
   Precision = 0.085366 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.157303


Total learning time: 3.094 seconds
Total inference time: 1.295 seconds
AUC ROC: 0.929632
Total revision time: 3.094
Best scored revision CLL: -0.204956


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:37:41
{'CLL': -0.379178, 'AUC ROC': 0.929632, 'F1': 0.157303, 'Recall': 1.0, 'Precision': [0.085366, 0.5], 'Inference time': 1.295, 'Learning time': 3.094, 'AUC PR': 0.525762, 'parameter_10': {'CLL': -0.398476, 'AUC ROC': 0.999547, 'F1': 0.106262, 'Recall': 1.0, 'Precision': [0.056112, 0.5], 'Inference time': 1.501, 'Learning time': 0.847, 'AUC PR': 0.949153}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( female(A) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7473839334745777;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.46353134357177256;  // std dev = 1,020, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( female(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.18637150224008767;  // std dev = 0,122, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5835404111048867;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.3803485991245408;  // std dev = 0,980, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( female(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.16032342500307456;  // std dev = 0,108, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( female(A) )
%   | then return 0.3485214536387139;  // std dev = 0,221, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.4223291595473008;  // std dev = 0,678, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( female(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.1710981340185243;  // std dev = 0,158, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.35554857090520947;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.23949478956493478;  // std dev = 0,795, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( female(B) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.16663914266553956;  // std dev = 0,176, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.16531626069998756;  // std dev = 0,196, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(A) )
%   | then return 0.2071686514338691;  // std dev = 0,176, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.2828853901136109;  // std dev = 0,569, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.23913006650217716;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.15168817428696837;  // std dev = 0,665, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( female(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.16378668990296325;  // std dev = 0,212, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.15500754613983753;  // std dev = 0,211, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(A) )
%   | then return 0.1371095207660518;  // std dev = 0,150, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.19885556767217458;  // std dev = 0,499, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1774537938491929;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.10238617646891113;  // std dev = 0,579, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( female(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.15673666744520415;  // std dev = 0,229, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.14361968379421752;  // std dev = 0,214, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(A) )
%   | then return 0.09873796601189803;  // std dev = 0,133, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.1488233376990773;  // std dev = 0,452, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.164005
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.775 seconds
Total inference time: 1.439 seconds
AUC ROC: 0.999765


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 02:37:44
{'CLL': -0.164005, 'AUC ROC': 0.999765, 'F1': 0.973913, 'Recall': 1.0, 'Precision': [0.949153, 0.5], 'Inference time': 1.439, 'Learning time': 1.775, 'AUC PR': 0.983476}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( female(A) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.160314
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.611 seconds
Total inference time: 0.833 seconds
AUC ROC: 0.983055


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 02:37:46
{'CLL': -0.160314, 'AUC ROC': 0.983055, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.833, 'Learning time': 0.611, 'AUC PR': 0.338212}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6081489350995123;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5170719622367218;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4125724528826601;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3151786576185066;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2367600938643422;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17806945427207488;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 9,31e-10, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.38513671764223445;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.0694087369032201;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109172;  // std dev = 9,31e-10, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10540178192344292;  // std dev = 0,409, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2772106664725063;  // std dev = 1,49e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.07789611581062479;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.06865351612240914;  // std dev = 1,769, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.322674
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.861 seconds
Total inference time: 1.606 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 0.933333
   AUC PR    = 0.937376
   CLL	      = -0.349824
   Precision = 0.75 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.857143


Total scoring time: 0.559 seconds
Parameter learned model CLL: -0.349824


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.936, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.433, 5, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [5.27e-09, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.936, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.936, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [5.27e-09, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [1.936, 5, 15], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.936, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [9.31e-10, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 9], 'true,true,false': [1.651, 5, 6], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [9.31e-10, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.409, 5, 15], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 9, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [1.651, 5, 6], 'true,true,true': [1.49e-08, 0, 9], 'true,true,false,false': [0.0, 1, 0], 'true,true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.769, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [3.73e-09, 10, 0]}]]
[{'': [0.18749999999999964, -1.1102230246251566e-17], 'false,true': [nan, -1.1102230246251566e-17], 'false': [-1.1102230246251566e-17, nan]}, {'': [0.18750000000000008, 2.7755575615628915e-18], 'true': [0.18750000000000008, nan], 'false': [2.7755575615628915e-18, nan], 'false,true': [nan, 2.7755575615628915e-18]}, {'': [0.18749999999999994, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.1874999999999999, 1.3877787807814458e-18], 'false,true': [0.0, 3.0839528461809902e-18], 'false': [1.3877787807814458e-18, nan]}, {'': [0.18749999999999986, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'false,true,true': [nan, 0.0]}, {'': [0.18750000000000003, 1.3877787807814458e-18], 'false,true': [nan, 1.3877787807814458e-18], 'false': [1.3877787807814458e-18, nan]}, {'': [0.1875, 0.0], 'true': [0.1875, nan], 'false': [0.0, nan], 'true,true': [0.0, 0.2479338842975207]}, {'': [0.1669713182438021, 6.938893903907229e-19], 'false,true': [0.0, 7.709882115452476e-19], 'false': [6.938893903907229e-19, nan], 'false,true,true': [nan, 0.0]}, {'': [0.11673767898002173, nan], 'true,true,false': [nan, 0.0], 'true,false': [nan, 0.13638582834565857], 'true': [0.010751884305192371, 0.13638582834565857], 'true,true': [2.4671622769447922e-17, 0.0], 'true,false,false': [0.24793388429752064, 0.0]}, {'': [0.15641757535014783, 1.3877787807814458e-18], 'false,true': [nan, 1.3877787807814458e-18], 'false': [1.3877787807814458e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( female(A) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.20975771563253556;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.10850969090609605;  // std dev = 0,198, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.15274385809367075;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.12114802438826025;  // std dev = 0,077, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.13838636941299512;  // std dev = 0,000749, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.1346252390436233;  // std dev = 0,003, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07015625462916794;  // std dev = 0,012, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999328
   AUC PR    = 0.918673
   CLL	      = -0.065614
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.54 seconds
Total inference time: 1.811 seconds
AUC ROC: 0.999328


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096695
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.52 seconds
Refined model CLL: -0.096695


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999328
   AUC PR    = 0.918673
   CLL	      = -0.065614
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 3.48 seconds
Total inference time: 1.811 seconds
AUC ROC: 0.999328
Total revision time: 3.48
Best scored revision CLL: -0.096695


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:37:53
{'CLL': -0.065614, 'AUC ROC': 0.999328, 'F1': 0.973913, 'Recall': 1.0, 'Precision': [0.949153, 0.5], 'parameter_15': {'CLL': -0.322674, 'AUC ROC': 0.999547, 'F1': 0.106262, 'Recall': 1.0, 'Precision': [0.056112, 0.5], 'Inference time': 1.606, 'Learning time': 0.861, 'AUC PR': 0.949153}, 'Inference time': 1.811, 'Learning time': 3.48, 'AUC PR': 0.918673}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( female(A) )
%   | then return 0.6392070123615109;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.6045267906174348;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(A) )
%   | then return 0.49932275605826126;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.4749335700127619;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.48603426285502305;  // std dev = 0,048, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( female(B) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.30650789199008144;  // std dev = 0,410, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3678117243276674;  // std dev = 0,045, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(B) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.2560236257683215;  // std dev = 0,359, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.28715839372903407;  // std dev = 0,040, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.21710286282404828;  // std dev = 0,314, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.23214384880569278;  // std dev = 0,035, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( female(B) )
%   | then return -0.07877675473109179;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.18686829521416365;  // std dev = 0,276, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.19336506562323585;  // std dev = 0,030, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.16307798401955337;  // std dev = 0,244, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.16498643994376377;  // std dev = 0,027, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.14407683467336974;  // std dev = 0,218, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1435003025682876;  // std dev = 0,024, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.128668868702045;  // std dev = 0,196, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.058361
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.801 seconds
Total inference time: 1.588 seconds
AUC ROC: 0.999765


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 02:37:57
{'CLL': -0.058361, 'AUC ROC': 0.999765, 'F1': 0.973913, 'Recall': 1.0, 'Precision': [0.949153, 0.5], 'Inference time': 1.588, 'Learning time': 1.801, 'AUC PR': 0.983476}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.160136
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.679 seconds
Total inference time: 0.777 seconds
AUC ROC: 0.983055


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 02:37:59
{'CLL': -0.160136, 'AUC ROC': 0.983055, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.777, 'Learning time': 0.679, 'AUC PR': 0.338212}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6273797043302811;  // std dev = 2,148, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5328490890947367;  // std dev = 0,421, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.42393250893969897;  // std dev = 2,148, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32298193296725763;  // std dev = 2,148, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.24247055537624268;  // std dev = 2,148, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926096;  // std dev = 1,32e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18270684819255756;  // std dev = 2,148, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839686;  // std dev = 2,28e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3699757986834004;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.09156266285506114;  // std dev = 1,797, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10930035973951613;  // std dev = 0,395, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 9,31e-10, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.26666747125237567;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.09568758679140096;  // std dev = 1,797, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07231472601337877;  // std dev = 1,945, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202619;  // std dev = 6,97e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.328352
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.881 seconds
Total inference time: 1.442 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 0.9475
   AUC PR    = 0.950637
   CLL	      = -0.326528
   Precision = 0.769231 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.869565


Total scoring time: 0.543 seconds
Parameter learned model CLL: -0.326528


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.148, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.421, 6, 20], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.45e-09, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.148, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.18e-08, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.148, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 13, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [2.148, 6, 20], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 13, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.148, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [2.28e-09, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 13], 'true,true,false': [1.797, 6, 7], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.395, 6, 20], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [9.31e-10, 13, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [1.797, 6, 7], 'true,true,true': [0.0, 0, 13], 'true,true,false,false': [0.0, 1, 0], 'true,true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false': [2.63e-09, 13, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.945, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [6.97e-09, 14, 0]}]]
[{'': [0.17751479289940847, -1.1895246692412391e-17], 'false,true': [nan, -1.1895246692412391e-17], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.17751479289940864, 3.96508223080413e-18], 'true': [0.17751479289940864, nan], 'false': [3.96508223080413e-18, nan], 'false,true': [nan, 3.96508223080413e-18]}, {'': [0.17751479289940802, 9.912705577010326e-18], 'false,true': [nan, 9.912705577010326e-18], 'false': [9.912705577010326e-18, nan]}, {'': [0.17751479289940847, -3.96508223080413e-18], 'false,true': [0.0, -2.135044278125301e-18], 'false': [-3.96508223080413e-18, nan]}, {'': [0.17751479289940825, 3.96508223080413e-18], 'false,true': [0.0, 2.135044278125301e-18], 'false': [3.96508223080413e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.17751479289940825, 4.956352788505163e-18], 'false,true': [nan, 4.956352788505163e-18], 'false': [4.956352788505163e-18, nan]}, {'': [0.17751479289940833, -9.912705577010326e-19], 'true': [0.17751479289940833, nan], 'false': [-9.912705577010326e-19, nan], 'true,true': [-5.124106267500723e-17, 0.2485207100591716]}, {'': [0.15640111684479213, 9.912705577010326e-19], 'false,true': [0.0, 0.0], 'false': [9.912705577010326e-19, nan], 'false,true,true': [nan, 0.0]}, {'': [0.10749524399374177, nan], 'true,true,false': [nan, 0.0], 'true,false': [nan, 0.12444614022962885], 'true': [0.007447692691833707, 0.12444614022962885], 'true,true': [-3.416070845000482e-17, 0.0], 'true,false,false': [0.2485207100591716, 5.337610695313253e-19]}, {'': [0.14543965676649984, 3.469446951953614e-18], 'false,true': [nan, 3.469446951953614e-18], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.3207118471601497;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 5,27e-09, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.2097577156325356;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.12816932076724036;  // std dev = 0,070, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.15274385809367075;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then if ( actor(B) )
%   | | then return -0.06842697784420274;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.12509750360143654;  // std dev = 0,073, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.13704033418369074;  // std dev = 0,000180, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1345471837178159;  // std dev = 0,003, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(A) )
%   | | then return -0.06848221744974596;  // std dev = 0,011, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06735507383156457;  // std dev = 0,011, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999328
   AUC PR    = 0.918673
   CLL	      = -0.065672
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.742 seconds
Total inference time: 1.384 seconds
AUC ROC: 0.999328


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.09628
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.576 seconds
Refined model CLL: -0.09628


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999328
   AUC PR    = 0.918673
   CLL	      = -0.065672
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 3.742 seconds
Total inference time: 1.384 seconds
AUC ROC: 0.999328
Total revision time: 3.742
Best scored revision CLL: -0.09628


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:38:06
{'CLL': -0.065672, 'AUC ROC': 0.999328, 'F1': 0.973913, 'Recall': 1.0, 'Precision': [0.949153, 0.5], 'Inference time': 1.384, 'Learning time': 3.742, 'AUC PR': 0.918673, 'parameter_20': {'CLL': -0.328352, 'AUC ROC': 0.999547, 'F1': 0.106262, 'Recall': 1.0, 'Precision': [0.056112, 0.5], 'Inference time': 1.442, 'Learning time': 0.881, 'AUC PR': 0.949153}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.7914822684328456;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.6660633000779167;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.6045267906174348;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.5181199435476403;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.4749335700127619;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.38952954024068537;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.3584548159137827;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.37742388217665923;  // std dev = 0,103, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(A) )
%   | | then return -0.2743454244425035;  // std dev = 0,445, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.21636721810781964;  // std dev = 0,428, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.2937770356275628;  // std dev = 0,092, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(A) )
%   | | then return -0.23877088013561124;  // std dev = 0,408, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.19056039804924876;  // std dev = 0,397, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.23679566581138994;  // std dev = 0,080, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(A) )
%   | | then return -0.20942666779328792;  // std dev = 0,372, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.16940106351049766;  // std dev = 0,366, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.1967506230550728;  // std dev = 0,070, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(A) )
%   | | then return -0.18508578359510808;  // std dev = 0,338, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.15183222468946145;  // std dev = 0,338, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.16753644261873377;  // std dev = 0,062, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(A) )
%   | | then return -0.16479811936782143;  // std dev = 0,307, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.13708942199055754;  // std dev = 0,312, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.14547953998430413;  // std dev = 0,056, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(A), actor(B) )
%   | then return -0.052025633465788146;  // std dev = 0,033, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(B) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.17485008683577136;  // std dev = 0,366, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.067003
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.939 seconds
Total inference time: 1.295 seconds
AUC ROC: 0.999765


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 02:38:09
{'CLL': -0.067003, 'AUC ROC': 0.999765, 'F1': 0.973913, 'Recall': 1.0, 'Precision': [0.949153, 0.5], 'Inference time': 1.295, 'Learning time': 1.939, 'AUC PR': 0.983476}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.7914822684328456;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.160072
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.686 seconds
Total inference time: 0.847 seconds
AUC ROC: 0.983055


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 02:38:11
{'CLL': -0.160072, 'AUC ROC': 0.983055, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.847, 'Learning time': 0.686, 'AUC PR': 0.338212}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6393989350995116;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5426919143120583;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.43099286828776007;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32784349372229826;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.24607639161015318;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926094;  // std dev = 2,28e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18568882989429153;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08518475138839685;  // std dev = 2,63e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.36061579240410924;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.07688420759589087;  // std dev = 1,984, 16,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109175;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11164014272417108;  // std dev = 0,390, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.26019633205736836;  // std dev = 2,11e-08, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(A, F) )
%   | | then if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.08485852084844028;  // std dev = 1,984, 16,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07402364306218814;  // std dev = 2,135, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.06419184008202618;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06419184008202618;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.339013
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.927 seconds
Total inference time: 1.417 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 0.9496
   AUC PR    = 0.951792
   CLL	      = -0.318214
   Precision = 0.78125 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.877193


Total scoring time: 0.589 seconds
Parameter learned model CLL: -0.318214


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [2.339, 7, 25], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)', 'false,true': 'genre(A, F)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'true,true': [0.413, 7, 25], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.339, 7, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [1.49e-08, 17, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.339, 7, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 2, 0], 'false,true,false': [0.0, 16, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [2.339, 7, 25], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [2.28e-09, 16, 0], 'false,true,true,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [2.339, 7, 25], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 17, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 16], 'true,true,false': [1.984, 7, 9], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.39, 7, 25], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,true,true,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [1.984, 7, 9], 'true,true,false,false': [0.0, 2, 0], 'true,true,true': [2.11e-08, 0, 16], 'true,false,true,false': [0.0, 1, 0], 'true,true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 0, 0], 'true,false,false,false': [3.73e-09, 15, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.135, 7, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 17, 0]}]]
[{'': [0.1708984375000011, -3.0839528461809902e-18], 'false,true': [0.0, -3.2653618371328133e-18], 'false': [-3.0839528461809902e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.17089843749999933, 0.0], 'true': [0.17089843749999933, nan], 'false': [0.0, nan], 'false,true,true': [nan, 0.0], 'false,true': [0.0, 0.0]}, {'': [0.17089843750000042, 1.5419764230904953e-17], 'false,true': [0.0, 1.3061447348531253e-17], 'false': [1.5419764230904953e-17, nan]}, {'': [0.17089843749999994, -9.25185853854297e-18], 'false,true': [0.0, -6.938893903907228e-18], 'false': [-9.25185853854297e-18, nan]}, {'': [0.1708984375, 6.1679056923619804e-18], 'false,true': [0.0, 5.204170427930421e-18], 'false': [6.1679056923619804e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.1708984375, 7.709882115452476e-18], 'false,true': [0.0, 8.163404592832034e-18], 'false': [7.709882115452476e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.17089843749999994, -3.854941057726238e-18], 'true': [0.17089843749999994, nan], 'false': [-3.854941057726238e-18, nan], 'true,true': [-1.1102230246251565e-16, 0.24609374999999997]}, {'': [0.15215597338182996, -7.709882115452476e-19], 'false,true': [0.0, 0.0], 'false': [-7.709882115452476e-19, nan], 'false,true,true': [nan, 0.0]}, {'': [0.10341396532296025, nan], 'true,true,false': [nan, 0.0], 'true,false': [0.0, 0.12708355769544227], 'true': [0.01066600294426312, 0.12311437390137502], 'true,false,true': [nan, 0.0], 'true,true': [2.7755575615628914e-17, 0.0], 'true,false,false': [0.24609375, 9.251858538542971e-19]}, {'': [0.14244490273708038, 0.0], 'false,true': [0.0, -8.163404592832033e-19], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;false;genre(A, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, F).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 3,73e-09, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.2551722425694894;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2097577156325356;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109175;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.132637418462955;  // std dev = 0,064, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.12114802438826025;  // std dev = 0,077, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then if ( director(B) )
%   | | | then return 0.1306267744998834;  // std dev = 0,210, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.06842697784420275;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.13645515297496366;  // std dev = 0,000117, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.1374358477385831;  // std dev = 0,000486, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( female(A) )
%   | | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202618;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.06419184008202618;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.06419184008202618;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.0770614567583587;  // std dev = 0,000616, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.065697
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.785 seconds
Total inference time: 1.716 seconds
AUC ROC: 0.999765


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096617
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.602 seconds
Refined model CLL: -0.096617


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.065697
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 3.903 seconds
Total inference time: 1.716 seconds
AUC ROC: 0.999765
Total revision time: 3.903
Best scored revision CLL: -0.096617


Dataset: 53_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:38:19
{'CLL': -0.065697, 'AUC ROC': 0.999765, 'F1': 0.973913, 'Recall': 1.0, 'parameter_25': {'CLL': -0.339013, 'AUC ROC': 0.999547, 'F1': 0.106262, 'Recall': 1.0, 'Precision': [0.056112, 0.5], 'Inference time': 1.417, 'Learning time': 0.927, 'AUC PR': 0.949153}, 'Precision': [0.949153, 0.5], 'Inference time': 1.716, 'Learning time': 3.903, 'AUC PR': 0.983476}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 1,29e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926093;  // std dev = 1,18e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 1,49e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109179;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420275;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202622;  // std dev = 5,27e-09, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.546 seconds
Total inference time: 1.15 seconds
AUC ROC: 0.999547


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 02:38:21
{'CLL': -0.065262, 'AUC ROC': 0.999547, 'F1': 0.973913, 'Recall': 1.0, 'Precision': [0.949153, 0.5], 'Inference time': 1.15, 'Learning time': 1.546, 'AUC PR': 0.949153}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.153142
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.603 seconds
Total inference time: 0.856 seconds
AUC ROC: 0.999547


Dataset: 53_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 02:38:23
{'CLL': -0.153142, 'AUC ROC': 0.999547, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.856, 'Learning time': 0.603, 'AUC PR': 0.949153}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5851860008555361;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3211800329464989;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.17881996705350112;  // std dev = 0,707, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1241092290893413;  // std dev = 0,343, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.23260795103197518;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.66677692719309;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return 0.33322307280691;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.0886182672818555;  // std dev = 0,655, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.404571
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.814 seconds
Total inference time: 1.514 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.20803
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.472 seconds
Parameter learned model CLL: -0.20803


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.373, 1, 5], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 4], 'true,true,false': [0.707, 1, 1], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.343, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'genre(A, E)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 1], 'true,true,true': [0.0, 0, 4], 'true,false,true,false': [0.0, 0, 0], 'true,false,false,false': [0.0, 4, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.655, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}]]
[{'': [0.1388888888888887, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan], 'false': [0.0, nan], 'false,true': [nan, 0.0]}, {'': [0.13888888888888887, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.13888888888888898, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.13888888888888884, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.13888888888888887, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan], 'false': [0.0, nan], 'true,true': [0.0, 0.25]}, {'': [0.11785603184230882, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.0780340040239, nan], 'true,false': [0.0, 0.025811642110086623], 'true': [0.0, 0.08548282500820636], 'true,false,true': [0.0, nan], 'true,true': [0.0, nan], 'true,false,false': [0.0, 0.0]}, {'': [0.07153812278296434, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3211800329464989;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.17881996705350112;  // std dev = 0,707, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1241092290893413;  // std dev = 0,841, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.23260795103197518;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( genre(A, D) )
%   | then return -0.66677692719309;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then return 0.01190303228601983;  // std dev = 0,359, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09976686847473405;  // std dev = 0,676, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06918964220560449;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.349548
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.644 seconds
Total inference time: 1.311 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.218305
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.478 seconds
Refined model CLL: -0.218305


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.404571
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.4080000000000004 seconds
Total inference time: 1.514 seconds
AUC ROC: 0.999416
Total revision time: 2.4080000000000004
Best scored revision CLL: -0.20803


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:38:29
{'CLL': -0.404571, 'AUC ROC': 0.999416, 'F1': 0.113837, 'Recall': 1.0, 'Precision': [0.060354, 0.5], 'parameter_5': {'CLL': -0.404571, 'AUC ROC': 0.999416, 'F1': 0.113837, 'Recall': 1.0, 'Precision': [0.060354, 0.5], 'Inference time': 1.514, 'Learning time': 0.814, 'AUC PR': 0.935484}, 'Inference time': 1.514, 'Learning time': 2.4080000000000004, 'AUC PR': 0.935484}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6056364498471037;  // std dev = 0,801, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.15612031201574286;  // std dev = 0,106, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4845912943420874;  // std dev = 0,759, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.13701473982051887;  // std dev = 0,096, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14726242728701588;  // std dev = 0,175, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.38755131270767945;  // std dev = 0,641, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.13069242947318732;  // std dev = 0,160, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.29623661057414924;  // std dev = 0,616, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.24221489086665268;  // std dev = 0,533, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.13818278300855044;  // std dev = 0,219, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1909477009467079;  // std dev = 0,529, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12398127764140526;  // std dev = 0,201, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1271651337286327;  // std dev = 0,237, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.162844788542252;  // std dev = 0,477, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13309504077101025;  // std dev = 0,480, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11562152024706876;  // std dev = 0,220, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1184493351346096;  // std dev = 0,249, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.11850265039157866;  // std dev = 0,439, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.147399
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.041 seconds
Total inference time: 1.267 seconds
AUC ROC: 0.999416


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 02:38:32
{'CLL': -0.147399, 'AUC ROC': 0.999416, 'F1': 0.966667, 'Recall': 1.0, 'Precision': [0.935484, 0.5], 'Inference time': 1.267, 'Learning time': 1.041, 'AUC PR': 0.935484}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.973999
   AUC PR    = 0.245763
   CLL	      = -0.162759
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.487 seconds
Total inference time: 0.865 seconds
AUC ROC: 0.973999


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 02:38:33
{'CLL': -0.162759, 'AUC ROC': 0.973999, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.865, 'Learning time': 0.487, 'AUC PR': 0.245763}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5724346493852266;  // std dev = 1,690, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.4876778839172629;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3912569620992537;  // std dev = 1,690, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3005711547884892;  // std dev = 1,690, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22629823971521892;  // std dev = 1,690, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926097;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1698435867651014;  // std dev = 1,690, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 9,31e-10, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.4138474925967532;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.25281917406991355;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10021658424556734;  // std dev = 0,398, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.29689106429232087;  // std dev = 1,83e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.5487149442290555;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.14871494422905554;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.06712099401896242;  // std dev = 1,351, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.245701
   Precision = 0.06423 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.120708


Total learning time: 0.841 seconds
Total inference time: 1.697 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.974176
   CLL	      = -0.326172
   Precision = 0.769231 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.869565


Total scoring time: 0.5 seconds
Parameter learned model CLL: -0.326172


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.69, 4, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.452, 4, 10], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.69, 4, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.69, 4, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.69, 4, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.69, 4, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [9.31e-10, 6, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 8], 'true,true,false': [1.155, 4, 2], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 6, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.398, 4, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'genre(A, E)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false,true': [1.095, 3, 2], 'true,true,true': [1.83e-08, 0, 8], 'true,false,true,false': [0.0, 0, 0], 'true,false,false,false': [1.86e-09, 6, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.351, 4, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0]}]]
[{'': [0.20408163265306115, -6.938893903907228e-18], 'false,true': [nan, -6.938893903907228e-18], 'false': [-6.938893903907228e-18, nan]}, {'': [0.20408163265306115, -2.3129646346357427e-18], 'true': [0.20408163265306115, nan], 'false': [-2.3129646346357427e-18, nan], 'false,true': [nan, -2.3129646346357427e-18]}, {'': [0.20408163265306123, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.20408163265306126, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.20408163265306126, 1.1564823173178713e-18], 'false,true': [nan, 1.1564823173178713e-18], 'false': [1.1564823173178713e-18, nan]}, {'': [0.20408163265306123, 1.1564823173178713e-18], 'false,true': [nan, 1.1564823173178713e-18], 'false': [1.1564823173178713e-18, nan]}, {'': [0.20408163265306123, -1.1564823173178713e-18], 'true': [0.20408163265306123, nan], 'false': [-1.1564823173178713e-18, nan], 'true,true': [-2.7755575615628914e-17, 0.22222222222222224]}, {'': [0.15860971380483752, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.11611594432101753, nan], 'true,false': [0.0, 0.11068912997013601], 'true': [4.163336342344337e-17, 0.11651002715493779], 'true,false,true': [0.0, nan], 'true,true': [4.163336342344337e-17, nan], 'true,false,false': [0.24, 5.782411586589357e-19]}, {'': [0.13042150656970858, -5.782411586589357e-19], 'false,true': [nan, -5.782411586589357e-19], 'false': [-5.782411586589357e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.017401402056784015;  // std dev = 0,333, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.18305476549197736;  // std dev = 0,038, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.08004888393804811;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.15197437413892434;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( genre(A, D) )
%   | then return -0.07434866485995344;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, B) )
%   | | then if ( director(B), female(A) )
%   | | | then return 0.09616175213370685;  // std dev = 0,202, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.07064761047510924;  // std dev = 0,008, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13968300431878947;  // std dev = 0,040, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.06957062887466567;  // std dev = 0,000207, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06585165284459622;  // std dev = 0,010, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065332
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.187 seconds
Total inference time: 1.274 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098753
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.498 seconds
Refined model CLL: -0.098753


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065332
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.026 seconds
Total inference time: 1.274 seconds
AUC ROC: 1.0
Total revision time: 3.026
Best scored revision CLL: -0.098753


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:38:40
{'CLL': -0.065332, 'AUC ROC': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.274, 'Learning time': 3.026, 'AUC PR': 1.0, 'parameter_10': {'CLL': -0.245701, 'AUC ROC': 0.999416, 'F1': 0.120708, 'Recall': 1.0, 'Precision': [0.06423, 0.5], 'Inference time': 1.697, 'Learning time': 0.841, 'AUC PR': 0.935484}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.39047961032437173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1725740244362688;  // std dev = 0,479, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.3024250978419154;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.20975771563253556;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.15517998211040893;  // std dev = 0,452, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.24265074723448032;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17709649774527736;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1406218504906888;  // std dev = 0,426, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.20087218310127752;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.15274385809367097;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12827339260895085;  // std dev = 0,401, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.17055141962951892;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.13400703000801117;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11768419319725008;  // std dev = 0,377, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.085561
   Precision = 0.337209 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.504348


Total learning time: 1.78 seconds
Total inference time: 1.515 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 02:38:43
{'CLL': -0.085561, 'AUC ROC': 1.0, 'F1': 0.504348, 'Recall': 1.0, 'Precision': [0.337209, 0.5], 'Inference time': 1.515, 'Learning time': 1.78, 'AUC PR': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.975188
   AUC PR    = 0.252639
   CLL	      = -0.162199
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.614 seconds
Total inference time: 0.875 seconds
AUC ROC: 0.975188


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 02:38:45
{'CLL': -0.162199, 'AUC ROC': 0.975188, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.875, 'Learning time': 0.614, 'AUC PR': 0.252639}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6081489350995123;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5170719622367218;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4125724528826601;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3151786576185066;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2367600938643422;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17806945427207488;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 9,31e-10, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3851367176422345;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.23986328235776555;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109172;  // std dev = 9,31e-10, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10659446260198661;  // std dev = 0,386, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2769717586223584;  // std dev = 1,83e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.5828618509297768;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.15429042235834828;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07238662508370017;  // std dev = 1,582, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.263422
   Precision = 0.06423 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.120708


Total learning time: 0.861 seconds
Total inference time: 1.392 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 0.973333
   AUC PR    = 0.976114
   CLL	      = -0.304529
   Precision = 0.789474 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.882353


Total scoring time: 0.551 seconds
Parameter learned model CLL: -0.304529


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.936, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.433, 5, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [5.27e-09, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.936, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.936, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [5.27e-09, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [1.936, 5, 15], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.936, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [9.31e-10, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 12], 'true,true,false': [1.369, 5, 3], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [9.31e-10, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.386, 5, 15], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 9, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [1.309, 4, 3], 'true,true,false,false': [0.0, 1, 0], 'true,true,true': [1.83e-08, 0, 12], 'true,false,true,false': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.582, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [3.73e-09, 10, 0]}]]
[{'': [0.18749999999999964, -1.1102230246251566e-17], 'false,true': [nan, -1.1102230246251566e-17], 'false': [-1.1102230246251566e-17, nan]}, {'': [0.18750000000000008, 2.7755575615628915e-18], 'true': [0.18750000000000008, nan], 'false': [2.7755575615628915e-18, nan], 'false,true': [nan, 2.7755575615628915e-18]}, {'': [0.18749999999999994, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.1874999999999999, 1.3877787807814458e-18], 'false,true': [0.0, 3.0839528461809902e-18], 'false': [1.3877787807814458e-18, nan]}, {'': [0.18749999999999986, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'false,true,true': [nan, 0.0]}, {'': [0.18750000000000003, 1.3877787807814458e-18], 'false,true': [nan, 1.3877787807814458e-18], 'false': [1.3877787807814458e-18, nan]}, {'': [0.1875, 0.0], 'true': [0.1875, nan], 'false': [0.0, nan], 'true,true': [-3.700743415417188e-17, 0.23437500000000003]}, {'': [0.14917416993011787, 6.938893903907229e-19], 'false,true': [0.0, 7.709882115452476e-19], 'false': [6.938893903907229e-19, nan], 'false,true,true': [nan, 0.0]}, {'': [0.10520834393804966, nan], 'true,true,false': [nan, 0.0], 'true,false': [0.0, 0.10895719096919121], 'true': [0.008471026306700397, 0.11513782019353666], 'true,false,true': [0.0, nan], 'true,true': [2.7755575615628914e-17, 0.0], 'true,false,false': [0.2448979591836735, 0.0]}, {'': [0.12520359727937266, 1.3877787807814458e-18], 'false,true': [nan, 1.3877787807814458e-18], 'false': [1.3877787807814458e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, F).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 5,27e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2551722425694894;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( director(B), female(A) )
%   | | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367075;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.12509750360143654;  // std dev = 0,073, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then if ( director(B), female(A) )
%   | | | then return 0.06427552371852137;  // std dev = 0,242, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.13798318302693013;  // std dev = 0,005, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1372479522668395;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07404133166829137;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064127
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.444 seconds
Total inference time: 1.467 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097219
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.545 seconds
Refined model CLL: -0.097219


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064127
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.401 seconds
Total inference time: 1.467 seconds
AUC ROC: 1.0
Total revision time: 3.401
Best scored revision CLL: -0.097219


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:38:52
{'CLL': -0.064127, 'AUC ROC': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'parameter_15': {'CLL': -0.263422, 'AUC ROC': 0.999416, 'F1': 0.120708, 'Recall': 1.0, 'Precision': [0.06423, 0.5], 'Inference time': 1.392, 'Learning time': 0.861, 'AUC PR': 0.935484}, 'Inference time': 1.467, 'Learning time': 3.401, 'AUC PR': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.0641918400820262;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.38 seconds
Total inference time: 1.264 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 02:38:55
{'CLL': -0.063422, 'AUC ROC': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.264, 'Learning time': 1.38, 'AUC PR': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.598 seconds
Total inference time: 0.91 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 02:38:56
{'CLL': -0.152985, 'AUC ROC': 1.0, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.91, 'Learning time': 0.598, 'AUC PR': 1.0}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6273797043302811;  // std dev = 2,148, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5328490890947367;  // std dev = 0,421, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.42393250893969897;  // std dev = 2,148, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32298193296725763;  // std dev = 2,148, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.24247055537624268;  // std dev = 2,148, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926096;  // std dev = 1,32e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18270684819255756;  // std dev = 2,148, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839686;  // std dev = 2,28e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3699757986834004;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.17547874677114506;  // std dev = 1,651, 11,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10990957973163801;  // std dev = 0,385, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 9,31e-10, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2665483516062573;  // std dev = 2,58e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.6146145857177207;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.11461458571772062;  // std dev = 1,581, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07430680138217408;  // std dev = 1,833, 26,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202619;  // std dev = 6,97e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.288633
   Precision = 0.06423 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.120708


Total learning time: 0.891 seconds
Total inference time: 1.571 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 0.96875
   AUC PR    = 0.970957
   CLL	      = -0.303379
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total scoring time: 0.528 seconds
Parameter learned model CLL: -0.303379


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.148, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.421, 6, 20], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.45e-09, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.148, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.18e-08, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.148, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 13, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [2.148, 6, 20], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 13, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.148, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [2.28e-09, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 15], 'true,true,false': [1.651, 6, 5], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.385, 6, 20], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [9.31e-10, 13, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [1.581, 5, 5], 'true,true,false,false': [0.0, 1, 0], 'true,true,true': [2.58e-08, 0, 15], 'true,false,true,false': [0.0, 0, 0], 'true,true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0], 'true,false,false,false': [2.63e-09, 13, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.833, 6, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [6.97e-09, 14, 0]}]]
[{'': [0.17751479289940847, -1.1895246692412391e-17], 'false,true': [nan, -1.1895246692412391e-17], 'false': [-1.1895246692412391e-17, nan]}, {'': [0.17751479289940864, 3.96508223080413e-18], 'true': [0.17751479289940864, nan], 'false': [3.96508223080413e-18, nan], 'false,true': [nan, 3.96508223080413e-18]}, {'': [0.17751479289940802, 9.912705577010326e-18], 'false,true': [nan, 9.912705577010326e-18], 'false': [9.912705577010326e-18, nan]}, {'': [0.17751479289940847, -3.96508223080413e-18], 'false,true': [0.0, -2.135044278125301e-18], 'false': [-3.96508223080413e-18, nan]}, {'': [0.17751479289940825, 3.96508223080413e-18], 'false,true': [0.0, 2.135044278125301e-18], 'false': [3.96508223080413e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.17751479289940825, 4.956352788505163e-18], 'false,true': [nan, 4.956352788505163e-18], 'false': [4.956352788505163e-18, nan]}, {'': [0.17751479289940833, -9.912705577010326e-19], 'true': [0.17751479289940833, nan], 'false': [-9.912705577010326e-19, nan], 'true,true': [-5.921189464667501e-17, 0.24793388429752064]}, {'': [0.14842604980673532, 9.912705577010326e-19], 'false,true': [0.0, 0.0], 'false': [9.912705577010326e-19, nan], 'false,true,true': [nan, 0.0]}, {'': [0.10248652030655389, nan], 'true,true,false': [nan, 0.0], 'true,false': [0.0, 0.10921990239270347], 'true': [0.006574715117604185, 0.11572135434838522], 'true,false,true': [0.0, nan], 'true,true': [4.4408920985006264e-17, 0.0], 'true,false,false': [0.25, 5.337610695313253e-19]}, {'': [0.12915910244870152, 3.469446951953614e-18], 'false,true': [nan, 3.469446951953614e-18], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, F).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3207118471601497;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.2551722425694894;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(A) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( director(B), female(A) )
%   | | then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367075;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1306267744998834;  // std dev = 0,066, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then if ( director(B), female(A) )
%   | | | then return 0.08955219068284977;  // std dev = 0,264, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.13741812163783573;  // std dev = 0,004, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.13659453828928037;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(B) )
%   | then if ( female(A) )
%   | | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(B) )
%   | | | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.07531986344339718;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064131
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.766 seconds
Total inference time: 1.833 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096806
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.561 seconds
Refined model CLL: -0.096806


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064131
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.746 seconds
Total inference time: 1.833 seconds
AUC ROC: 1.0
Total revision time: 3.746
Best scored revision CLL: -0.096806


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:39:04
{'CLL': -0.064131, 'AUC ROC': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.833, 'Learning time': 3.746, 'AUC PR': 1.0, 'parameter_20': {'CLL': -0.288633, 'AUC ROC': 0.999416, 'F1': 0.120708, 'Recall': 1.0, 'Precision': [0.06423, 0.5], 'Inference time': 1.571, 'Learning time': 0.891, 'AUC PR': 0.935484}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09269127618926096;  // std dev = 7,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839687;  // std dev = 7,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202619;  // std dev = 6,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.407 seconds
Total inference time: 1.313 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 02:39:07
{'CLL': -0.063422, 'AUC ROC': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.313, 'Learning time': 1.407, 'AUC PR': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.622 seconds
Total inference time: 0.883 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 02:39:09
{'CLL': -0.152985, 'AUC ROC': 1.0, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.883, 'Learning time': 0.622, 'AUC PR': 1.0}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6393989350995116;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5426919143120583;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.43099286828776007;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32784349372229826;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.24607639161015318;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926094;  // std dev = 2,28e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18568882989429153;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08518475138839685;  // std dev = 2,63e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3606157924041093;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.17784574605742934;  // std dev = 1,797, 13,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109175;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11237471686454836;  // std dev = 0,378, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.26005495570556464;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(A, F) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.6241548810953713;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.12415488109537128;  // std dev = 1,732, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07639586414738897;  // std dev = 2,001, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.06419184008202618;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06419184008202618;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.291374
   Precision = 0.06423 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.120708


Total learning time: 0.917 seconds
Total inference time: 1.498 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 0.9712
   AUC PR    = 0.973124
   CLL	      = -0.293651
   Precision = 0.806452 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.892857


Total scoring time: 0.555 seconds
Parameter learned model CLL: -0.293651


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [2.339, 7, 25], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)', 'false,true': 'genre(A, F)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'true,true': [0.413, 7, 25], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.339, 7, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [1.49e-08, 17, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.339, 7, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 2, 0], 'false,true,false': [0.0, 16, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [2.339, 7, 25], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [2.28e-09, 16, 0], 'false,true,true,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [2.339, 7, 25], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 17, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 19], 'true,true,false': [1.797, 7, 6], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 18, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.378, 7, 25], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0], 'false,true,true,false': [0.0, 2, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [1.732, 6, 6], 'true,true,false,false': [0.0, 2, 0], 'true,true,true': [0.0, 0, 19], 'true,false,true,false': [0.0, 1, 0], 'true,true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0], 'true,false,false,false': [3.73e-09, 15, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.001, 7, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 17, 0]}]]
[{'': [0.1708984375000011, -3.0839528461809902e-18], 'false,true': [0.0, -3.2653618371328133e-18], 'false': [-3.0839528461809902e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.17089843749999933, 0.0], 'true': [0.17089843749999933, nan], 'false': [0.0, nan], 'false,true,true': [nan, 0.0], 'false,true': [0.0, 0.0]}, {'': [0.17089843750000042, 1.5419764230904953e-17], 'false,true': [0.0, 1.3061447348531253e-17], 'false': [1.5419764230904953e-17, nan]}, {'': [0.17089843749999994, -9.25185853854297e-18], 'false,true': [0.0, -6.938893903907228e-18], 'false': [-9.25185853854297e-18, nan]}, {'': [0.1708984375, 6.1679056923619804e-18], 'false,true': [0.0, 5.204170427930421e-18], 'false': [6.1679056923619804e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.1708984375, 7.709882115452476e-18], 'false,true': [0.0, 8.163404592832034e-18], 'false': [7.709882115452476e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.17089843749999994, -3.854941057726238e-18], 'true': [0.17089843749999994, nan], 'false': [-3.854941057726238e-18, nan], 'true,true': [-1.6361181415528622e-16, 0.24852071005917156]}, {'': [0.14314004898208232, -7.709882115452476e-19], 'false,true': [0.0, 0.0], 'false': [-7.709882115452476e-19, nan], 'false,true,true': [nan, 0.0]}, {'': [0.09785727105477798, nan], 'true,true,false': [nan, 0.0], 'true,false': [0.07720837561298503, 0.11187792572858563], 'true': [0.009297538470309594, 0.11360001318166378], 'true,false,true': [0.0, 0.0], 'true,true': [-7.011934892369409e-17, 0.0], 'true,false,false': [0.25, 9.251858538542971e-19]}, {'': [0.1251858240377218, 0.0], 'false,true': [0.0, -8.163404592832033e-19], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;false;genre(A, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, F).;true;true
8;false,true;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.3207118471601497;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2551722425694894;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( director(B), female(A) )
%   | | then return 0.20975771563253556;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( female(A) )
%   | | | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109175;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.12509750360143654;  // std dev = 0,073, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.1357307168676805;  // std dev = 0,059, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then if ( movie(D, B) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(D, B) )
%   | | then if ( director(B), female(A) )
%   | | | then return 0.09745114910920238;  // std dev = 0,271, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.06842697784420274;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then if ( female(A) )
%   | | then return 0.13877406680401982;  // std dev = 0,002, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.13599371305656724;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( female(A) )
%   | | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.06419184008202618;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return -0.07606499356441762;  // std dev = 0,002, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.06419184008202618;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.06419184008202618;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06413
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.908 seconds
Total inference time: 1.495 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097089
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.576 seconds
Refined model CLL: -0.097089


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06413
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.956 seconds
Total inference time: 1.495 seconds
AUC ROC: 1.0
Total revision time: 3.956
Best scored revision CLL: -0.097089


Dataset: 53_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:39:16
{'CLL': -0.06413, 'AUC ROC': 1.0, 'F1': 1.0, 'Recall': 1.0, 'parameter_25': {'CLL': -0.291374, 'AUC ROC': 0.999416, 'F1': 0.120708, 'Recall': 1.0, 'Precision': [0.06423, 0.5], 'Inference time': 1.498, 'Learning time': 0.917, 'AUC PR': 0.935484}, 'Precision': [1.0, 0.5], 'Inference time': 1.495, 'Learning time': 3.956, 'AUC PR': 1.0}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360636;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783634;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926103;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839685;  // std dev = 1,18e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109179;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420275;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.0641918400820262;  // std dev = 5,27e-09, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.493 seconds
Total inference time: 1.366 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 02:39:20
{'CLL': -0.063422, 'AUC ROC': 1.0, 'F1': 1.0, 'Recall': 1.0, 'Precision': [1.0, 0.5], 'Inference time': 1.366, 'Learning time': 1.493, 'AUC PR': 1.0}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152985
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.629 seconds
Total inference time: 0.914 seconds
AUC ROC: 1.0


Dataset: 53_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 02:39:21
{'CLL': -0.152985, 'AUC ROC': 1.0, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.914, 'Learning time': 0.629, 'AUC PR': 1.0}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5724346493852266;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.48767788391726297;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3912569620992536;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3005711547884894;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22629823971521876;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926094;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.16984358676510128;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.41384749259675324;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.5861525074032468;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1013732780971568;  // std dev = 0,343, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 9,31e-10, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.29664966493825484;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.46587892750425614;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.06940998951108807;  // std dev = 0,708, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.956138
   AUC PR    = 0.573021
   CLL	      = -0.198558
   Precision = 0.693548 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.708791


Total learning time: 0.775 seconds
Total inference time: 1.299 seconds
AUC ROC: 0.956138


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.239322
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.492 seconds
Parameter learned model CLL: -0.239322


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.195, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.452, 2, 5], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.195, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [2.63e-09, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.195, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.195, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.32e-09, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.195, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 5], 'true,true,false': [0.0, 2, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.343, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [9.31e-10, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,true,true': [7.45e-09, 0, 5], 'true,false,false,false': [0.0, 3, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.708, 2, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.32e-09, 3, 0]}]]
[{'': [0.20408163265306106, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.20408163265306115, 0.0], 'true': [0.20408163265306115, nan], 'false': [0.0, nan], 'false,true': [nan, 0.0]}, {'': [0.20408163265306115, 2.3129646346357427e-18], 'false,true': [nan, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan]}, {'': [0.2040816326530612, -1.1564823173178713e-18], 'false,true': [nan, -1.1564823173178713e-18], 'false': [-1.1564823173178713e-18, nan]}, {'': [0.20408163265306128, 2.3129646346357427e-18], 'false,true': [nan, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan]}, {'': [0.2040816326530612, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.20408163265306126, 0.0], 'true': [0.20408163265306126, nan], 'false': [0.0, nan], 'true,true': [0.0, 0.0]}, {'': [0.11756427083817463, 1.1564823173178713e-18], 'false,true': [nan, 1.1564823173178713e-18], 'false': [1.1564823173178713e-18, nan]}, {'': [0.08761521183234688, nan], 'true': [1.1102230246251566e-17, 0.03791233254925862], 'true,false': [nan, 0.03791233254925862], 'true,true': [1.1102230246251566e-17, nan], 'true,false,false': [0.0, -5.782411586589357e-19]}, {'': [0.07162732149045012, 5.782411586589357e-19], 'false,true': [nan, 5.782411586589357e-19], 'false': [5.782411586589357e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;false;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.19148226843284555;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3140986890620202;  // std dev = 0,467, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.2685374172200411;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.16239905935653765;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.07573362864203724;  // std dev = 0,722, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.24288983653363855;  // std dev = 0,453, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, B) )
%   | then return -0.13401255783640198;  // std dev = 0,180, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.11448008768195883;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.05753532825121174;  // std dev = 0,654, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.060362847935471954;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.991577
   AUC PR    = 0.899022
   CLL	      = -0.130251
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.5
   F1        = 0.666667


Total learning time: 1.075 seconds
Total inference time: 1.835 seconds
AUC ROC: 0.991577


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.196822
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.514 seconds
Refined model CLL: -0.196822


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.991577
   AUC PR    = 0.899022
   CLL	      = -0.130251
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.5
   F1        = 0.666667


Total learning time: 2.856 seconds
Total inference time: 1.835 seconds
AUC ROC: 0.991577
Total revision time: 2.856
Best scored revision CLL: -0.196822


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:39:28
{'CLL': -0.130251, 'AUC ROC': 0.991577, 'F1': 0.666667, 'Recall': 0.5, 'Precision': [1.0, 0.5], 'parameter_5': {'CLL': -0.198558, 'AUC ROC': 0.956138, 'F1': 0.708791, 'Recall': 0.724719, 'Precision': [0.693548, 0.5], 'Inference time': 1.299, 'Learning time': 0.775, 'AUC PR': 0.573021}, 'Inference time': 1.835, 'Learning time': 2.856, 'AUC PR': 0.899022}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.002 seconds
Total inference time: 1.113 seconds
AUC ROC: 0.870167


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 02:39:30
{'CLL': -0.575892, 'AUC ROC': 0.870167, 'F1': 0.278997, 'Recall': 1.0, 'Precision': [0.162113, 0.5], 'Inference time': 1.113, 'Learning time': 1.002, 'AUC PR': 0.162113}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.5 seconds
Total inference time: 0.858 seconds
AUC ROC: 0.870167


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 02:39:32
{'CLL': -0.236693, 'AUC ROC': 0.870167, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.858, 'Learning time': 0.5, 'AUC PR': 0.162113}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6273797043302815;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5328490890947368;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4239325089396988;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3229819329672577;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.24247055537624246;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.18270684819255756;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 9,31e-10, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3699757986834004;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.38002420131659964;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11116973189079654;  // std dev = 0,358, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 9,31e-10, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2663020639326177;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.31548816132884905;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.0777167203439731;  // std dev = 1,150, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.956138
   AUC PR    = 0.573021
   CLL	      = -0.242431
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.84 seconds
Total inference time: 1.747 seconds
AUC ROC: 0.956138


Results scoring model
   AUC ROC   = 0.985
   AUC PR    = 0.988462
   CLL	      = -0.264789
   Precision = 0.769231 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.869565


Total scoring time: 0.518 seconds
Parameter learned model CLL: -0.264789


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.519, 3, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.421, 3, 10], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.519, 3, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.519, 3, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.519, 3, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.519, 3, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [9.31e-10, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 9], 'true,true,false': [0.866, 3, 1], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.358, 3, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [9.31e-10, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.866, 3, 1], 'true,true,true': [0.0, 0, 9], 'true,false,false,false': [2.63e-09, 7, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.15, 3, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0]}]]
[{'': [0.1775147928994082, -7.93016446160826e-18], 'false,true': [nan, -7.93016446160826e-18], 'false': [-7.93016446160826e-18, nan]}, {'': [0.1775147928994084, -1.982541115402065e-18], 'true': [0.1775147928994084, nan], 'false': [-1.982541115402065e-18, nan], 'false,true': [nan, -1.982541115402065e-18]}, {'': [0.177514792899408, -1.982541115402065e-18], 'false,true': [nan, -1.982541115402065e-18], 'false': [-1.982541115402065e-18, nan]}, {'': [0.17751479289940836, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.1775147928994082, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.17751479289940816, 9.912705577010326e-19], 'false,true': [nan, 9.912705577010326e-19], 'false': [9.912705577010326e-19, nan]}, {'': [0.17751479289940827, -9.912705577010326e-19], 'true': [0.17751479289940827, nan], 'false': [-9.912705577010326e-19, nan], 'true,true': [-4.9343245538895844e-17, 0.18750000000000003]}, {'': [0.12850876290038504, 9.912705577010326e-19], 'false,true': [nan, 9.912705577010326e-19], 'false': [9.912705577010326e-19, nan]}, {'': [0.08988279014270975, nan], 'true': [-3.700743415417188e-17, 0.08230659830392853], 'true,false': [nan, 0.08230659830392853], 'true,true': [-3.700743415417188e-17, nan], 'true,false,false': [0.1875, 9.912705577010326e-19]}, {'': [0.10171230730555843, -4.956352788505163e-19], 'false,true': [nan, -4.956352788505163e-19], 'false': [-4.956352788505163e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;false;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.00664313714018492;  // std dev = 0,250, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07829600280330673;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.18047294810843112;  // std dev = 0,032, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.15230741308579376;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return -0.027357275861529345;  // std dev = 0,230, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.07018779233572495;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06915397695294098;  // std dev = 0,002, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.138950435683083;  // std dev = 0,050, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06558180648404459;  // std dev = 0,003, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.98947
   AUC PR    = 0.700283
   CLL	      = -0.123459
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.182 seconds
Total inference time: 1.412 seconds
AUC ROC: 0.98947


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.098129
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.499 seconds
Refined model CLL: -0.098129


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.98947
   AUC PR    = 0.700283
   CLL	      = -0.123459
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.039 seconds
Total inference time: 1.412 seconds
AUC ROC: 0.98947
Total revision time: 3.039
Best scored revision CLL: -0.098129


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:39:39
{'CLL': -0.123459, 'AUC ROC': 0.98947, 'F1': 0.770563, 'Recall': 1.0, 'Precision': [0.626761, 0.5], 'Inference time': 1.412, 'Learning time': 3.039, 'AUC PR': 0.700283, 'parameter_10': {'CLL': -0.242431, 'AUC ROC': 0.956138, 'F1': 0.309835, 'Recall': 1.0, 'Precision': [0.183316, 0.5], 'Inference time': 1.747, 'Learning time': 0.84, 'AUC PR': 0.573021}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.114 seconds
Total inference time: 1.042 seconds
AUC ROC: 0.870167


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 02:39:41
{'CLL': -0.575892, 'AUC ROC': 0.870167, 'F1': 0.278997, 'Recall': 1.0, 'Precision': [0.162113, 0.5], 'Inference time': 1.042, 'Learning time': 1.114, 'AUC PR': 0.162113}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.509 seconds
Total inference time: 0.83 seconds
AUC ROC: 0.870167


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 02:39:43
{'CLL': -0.236693, 'AUC ROC': 0.870167, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.83, 'Learning time': 0.509, 'AUC PR': 0.162113}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5724346493852266;  // std dev = 2,070, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.48767788391726324;  // std dev = 0,452, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.39125696209925326;  // std dev = 2,070, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.30057115478848934;  // std dev = 2,070, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22629823971521895;  // std dev = 2,070, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.16984358676510142;  // std dev = 2,070, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.4138474925967532;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.44329536454610396;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10103239674893852;  // std dev = 0,368, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2967207942982614;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.3585977302552291;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.06919933113228882;  // std dev = 1,437, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.956138
   AUC PR    = 0.573021
   CLL	      = -0.215316
   Precision = 0.409524 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.523327


Total learning time: 0.855 seconds
Total inference time: 1.548 seconds
AUC ROC: 0.956138


Results scoring model
   AUC ROC   = 0.986667
   AUC PR    = 0.990476
   CLL	      = -0.278924
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.51 seconds
Parameter learned model CLL: -0.278924


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.07, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.452, 6, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.07, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.07, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [5.27e-09, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.07, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.07, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.32e-09, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 14], 'true,true,false': [0.926, 6, 1], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.368, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.32e-09, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.926, 6, 1], 'true,true,true': [0.0, 0, 14], 'true,false,false,false': [0.0, 9, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.437, 6, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [2.63e-09, 9, 0]}]]
[{'': [0.20408163265306084, -9.25185853854297e-18], 'false,true': [nan, -9.25185853854297e-18], 'false': [-9.25185853854297e-18, nan]}, {'': [0.2040816326530611, 0.0], 'true': [0.2040816326530611, nan], 'false': [0.0, nan], 'false,true': [nan, 0.0]}, {'': [0.20408163265306142, -1.5419764230904951e-18], 'false,true': [nan, -1.5419764230904951e-18], 'false': [-1.5419764230904951e-18, nan]}, {'': [0.20408163265306126, 3.0839528461809902e-18], 'false,true': [nan, 3.0839528461809902e-18], 'false': [3.0839528461809902e-18, nan]}, {'': [0.20408163265306126, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.20408163265306123, 1.5419764230904951e-18], 'false,true': [nan, 1.5419764230904951e-18], 'false': [1.5419764230904951e-18, nan]}, {'': [0.20408163265306117, 0.0], 'true': [0.20408163265306117, nan], 'false': [0.0, nan], 'true,true': [-6.344131569286608e-17, 0.1224489795918368]}, {'': [0.13516366169728344, 7.709882115452476e-19], 'false,true': [nan, 7.709882115452476e-19], 'false': [7.709882115452476e-19, nan]}, {'': [0.09989347089151507, nan], 'true': [-4.7580986769649563e-17, 0.07429229236030047], 'true,false': [nan, 0.07429229236030047], 'true,true': [-4.7580986769649563e-17, nan], 'true,false,false': [0.12244897959183668, 0.0]}, {'': [0.09829413731924165, 7.709882115452476e-19], 'false,true': [nan, 7.709882115452476e-19], 'false': [7.709882115452476e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;false;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( female(B) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.00664313714018492;  // std dev = 0,250, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0757711142833219;  // std dev = 0,006, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.17934746465404655;  // std dev = 0,033, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.1524527809729989;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.06838678458103295;  // std dev = 0,000139, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.01523573779943424;  // std dev = 0,205, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.06991548822960272;  // std dev = 0,007, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13688099877145768;  // std dev = 0,045, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06619456071172314;  // std dev = 0,005, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06531131769362664;  // std dev = 0,007, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.98947
   AUC PR    = 0.700283
   CLL	      = -0.123104
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.167 seconds
Total inference time: 1.616 seconds
AUC ROC: 0.98947


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096685
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.546 seconds
Refined model CLL: -0.096685


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.98947
   AUC PR    = 0.700283
   CLL	      = -0.123104
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.0780000000000003 seconds
Total inference time: 1.616 seconds
AUC ROC: 0.98947
Total revision time: 3.0780000000000003
Best scored revision CLL: -0.096685


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:39:50
{'CLL': -0.123104, 'AUC ROC': 0.98947, 'F1': 0.770563, 'Recall': 1.0, 'Precision': [0.626761, 0.5], 'parameter_15': {'CLL': -0.215316, 'AUC ROC': 0.956138, 'F1': 0.523327, 'Recall': 0.724719, 'Precision': [0.409524, 0.5], 'Inference time': 1.548, 'Learning time': 0.855, 'AUC PR': 0.573021}, 'Inference time': 1.616, 'Learning time': 3.0780000000000003, 'AUC PR': 0.700283}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.179 seconds
Total inference time: 1.138 seconds
AUC ROC: 0.870167


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 02:39:52
{'CLL': -0.575892, 'AUC ROC': 0.870167, 'F1': 0.278997, 'Recall': 1.0, 'Precision': [0.162113, 0.5], 'Inference time': 1.138, 'Learning time': 1.179, 'AUC PR': 0.162113}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.528 seconds
Total inference time: 0.884 seconds
AUC ROC: 0.870167


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 02:39:54
{'CLL': -0.236693, 'AUC ROC': 0.870167, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.884, 'Learning time': 0.528, 'AUC PR': 0.162113}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.572434649385226;  // std dev = 2,390, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.48767788391726324;  // std dev = 0,452, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.39125696209925315;  // std dev = 2,390, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3005711547884899;  // std dev = 2,390, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22629823971521892;  // std dev = 2,390, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926097;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1698435867651014;  // std dev = 2,390, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 1,61e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.4138474925967532;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.3134252346759741;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109172;  // std dev = 1,32e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10052028037458975;  // std dev = 0,389, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 1,32e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.29682767261999243;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.2610157414370683;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.06804192596059704;  // std dev = 1,856, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.956138
   AUC PR    = 0.573021
   CLL	      = -0.232923
   Precision = 0.409524 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.523327


Total learning time: 0.863 seconds
Total inference time: 1.651 seconds
AUC ROC: 0.956138


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.975447
   CLL	      = -0.315057
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.85
   F1        = 0.918919


Total scoring time: 0.544 seconds
Parameter learned model CLL: -0.315057


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.39, 8, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.452, 8, 20], 'false,true,true': [0.0, 0, 0], 'false,true,false': [5.27e-09, 12, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.39, 8, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [9.13e-09, 12, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.39, 8, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.39, 8, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.39, 8, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.61e-09, 12, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 17], 'true,true,false': [1.477, 8, 3], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.32e-09, 12, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.389, 8, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.32e-09, 12, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false,true': [1.477, 8, 3], 'true,true,true': [0.0, 0, 17], 'true,false,false,false': [2.63e-09, 12, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.856, 8, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [5.89e-09, 12, 0]}]]
[{'': [0.20408163265306145, -1.1564823173178714e-17], 'false,true': [nan, -1.1564823173178714e-17], 'false': [-1.1564823173178714e-17, nan]}, {'': [0.20408163265306103, 2.3129646346357427e-18], 'true': [0.20408163265306103, nan], 'false': [2.3129646346357427e-18, nan], 'false,true': [nan, 2.3129646346357427e-18]}, {'': [0.20408163265306167, 6.938893903907228e-18], 'false,true': [nan, 6.938893903907228e-18], 'false': [6.938893903907228e-18, nan]}, {'': [0.20408163265306126, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.2040816326530612, 2.3129646346357427e-18], 'false,true': [nan, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan]}, {'': [0.20408163265306128, 2.3129646346357427e-18], 'false,true': [nan, 2.3129646346357427e-18], 'false': [2.3129646346357427e-18, nan]}, {'': [0.2040816326530612, 1.1564823173178713e-18], 'true': [0.2040816326530612, nan], 'false': [1.1564823173178713e-18, nan], 'true,true': [-1.0449157878825003e-16, 0.1983471074380166]}, {'': [0.15117104131431278, 1.1564823173178713e-18], 'false,true': [nan, 1.1564823173178713e-18], 'false': [1.1564823173178713e-18, nan]}, {'': [0.110985559003692, nan], 'true': [-1.3061447348531253e-17, 0.10411673948512737], 'true,false': [nan, 0.10411673948512737], 'true,true': [-1.3061447348531253e-17, nan], 'true,false,false': [0.19834710743801656, 5.782411586589357e-19]}, {'': [0.12298415220274558, 2.8912057932946786e-18], 'false,true': [nan, 2.8912057932946786e-18], 'false': [2.8912057932946786e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;false;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.1527438580936708;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( movie(D, B) )
%   | then if ( actor(B) )
%   | | then return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.15274385809367075;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.127497
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.269 seconds
Total inference time: 1.358 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.53 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.127497
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.2060000000000004 seconds
Total inference time: 1.358 seconds
AUC ROC: 0.985041
Total revision time: 3.2060000000000004
Best scored revision CLL: -0.094637


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:40:01
{'CLL': -0.127497, 'AUC ROC': 0.985041, 'F1': 0.770563, 'Recall': 1.0, 'Precision': [0.626761, 0.5], 'Inference time': 1.358, 'Learning time': 3.2060000000000004, 'AUC PR': 0.626761, 'parameter_20': {'CLL': -0.232923, 'AUC ROC': 0.956138, 'F1': 0.523327, 'Recall': 0.724719, 'Precision': [0.409524, 0.5], 'Inference time': 1.651, 'Learning time': 0.863, 'AUC PR': 0.573021}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109179;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 6,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.175 seconds
Total inference time: 1.201 seconds
AUC ROC: 0.870167


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 02:40:03
{'CLL': -0.575892, 'AUC ROC': 0.870167, 'F1': 0.278997, 'Recall': 1.0, 'Precision': [0.162113, 0.5], 'Inference time': 1.201, 'Learning time': 1.175, 'AUC PR': 0.162113}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.537 seconds
Total inference time: 0.836 seconds
AUC ROC: 0.870167


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 02:40:05
{'CLL': -0.236693, 'AUC ROC': 0.870167, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.836, 'Learning time': 0.537, 'AUC PR': 0.162113}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5934430527465704;  // std dev = 2,572, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5049832912932651;  // std dev = 0,441, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4038306972090013;  // std dev = 2,572, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3091847894789792;  // std dev = 2,572, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.23243369117121432;  // std dev = 2,572, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926094;  // std dev = 2,28e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17462562909620657;  // std dev = 2,572, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839685;  // std dev = 2,63e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.39687546710963395;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.35312453289036627;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10448091184503668;  // std dev = 0,376, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.28498692444308;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.2923625791503674;  // std dev = 1,500, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07178164740343211;  // std dev = 1,955, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.956138
   AUC PR    = 0.573021
   CLL	      = -0.234384
   Precision = 0.409524 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.523327


Total learning time: 0.92 seconds
Total inference time: 1.672 seconds
AUC ROC: 0.956138


Results scoring model
   AUC ROC   = 0.9784
   AUC PR    = 0.98209
   CLL	      = -0.291606
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.88
   F1        = 0.93617


Total scoring time: 0.548 seconds
Parameter learned model CLL: -0.291606


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.572, 9, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.441, 9, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.45e-09, 16, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.572, 9, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.39e-08, 16, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.572, 9, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.572, 9, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [2.28e-09, 16, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.572, 9, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [2.63e-09, 16, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 22], 'true,true,false': [1.5, 9, 3], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.376, 9, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 16, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false,true': [1.5, 9, 3], 'true,true,true': [0.0, 0, 22], 'true,false,false,false': [0.0, 16, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.955, 9, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [7.45e-09, 16, 0]}]]
[{'': [0.1946366782006932, -6.938893903907228e-18], 'false,true': [nan, -6.938893903907228e-18], 'false': [-6.938893903907228e-18, nan]}, {'': [0.19463667820069183, 3.469446951953614e-18], 'true': [0.19463667820069183, nan], 'false': [3.469446951953614e-18, nan], 'false,true': [nan, 3.469446951953614e-18]}, {'': [0.19463667820069178, 1.214306433183765e-17], 'false,true': [nan, 1.214306433183765e-17], 'false': [1.214306433183765e-17, nan]}, {'': [0.1946366782006921, -6.938893903907228e-18], 'false,true': [nan, -6.938893903907228e-18], 'false': [-6.938893903907228e-18, nan]}, {'': [0.19463667820069214, 5.204170427930421e-18], 'false,true': [nan, 5.204170427930421e-18], 'false': [5.204170427930421e-18, nan]}, {'': [0.19463667820069208, 6.938893903907228e-18], 'false,true': [nan, 6.938893903907228e-18], 'false': [6.938893903907228e-18, nan]}, {'': [0.19463667820069191, -1.734723475976807e-18], 'true': [0.19463667820069191, nan], 'false': [-1.734723475976807e-18, nan], 'true,true': [-1.4130111222501992e-16, 0.18750000000000008]}, {'': [0.14118024202389987, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.10163732323257593, nan], 'true': [-4.0371746350005693e-17, 0.09263807841608662], 'true,false': [nan, 0.09263807841608662], 'true,true': [-4.0371746350005693e-17, nan], 'true,false,false': [0.1875, 0.0]}, {'': [0.11242759601329974, 3.469446951953614e-18], 'false,true': [nan, 3.469446951953614e-18], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;false;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.15274385809367083;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( movie(D, B) )
%   | then if ( actor(B) )
%   | | then return -0.06842697784420276;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.15274385809367075;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.127497
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.539 seconds
Total inference time: 1.382 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.554 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.127497
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.561 seconds
Total inference time: 1.382 seconds
AUC ROC: 0.985041
Total revision time: 3.561
Best scored revision CLL: -0.094637


Dataset: 53_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:40:12
{'CLL': -0.127497, 'AUC ROC': 0.985041, 'F1': 0.770563, 'Recall': 1.0, 'parameter_25': {'CLL': -0.234384, 'AUC ROC': 0.956138, 'F1': 0.523327, 'Recall': 0.724719, 'Precision': [0.409524, 0.5], 'Inference time': 1.672, 'Learning time': 0.92, 'AUC PR': 0.573021}, 'Precision': [0.626761, 0.5], 'Inference time': 1.382, 'Learning time': 3.561, 'AUC PR': 0.626761}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926096;  // std dev = 9,13e-09, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 1,75e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109176;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420276;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202622;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.234 seconds
Total inference time: 1.023 seconds
AUC ROC: 0.870167


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 02:40:15
{'CLL': -0.575892, 'AUC ROC': 0.870167, 'F1': 0.278997, 'Recall': 1.0, 'Precision': [0.162113, 0.5], 'Inference time': 1.023, 'Learning time': 1.234, 'AUC PR': 0.162113}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.55 seconds
Total inference time: 0.864 seconds
AUC ROC: 0.870167


Dataset: 53_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 02:40:16
{'CLL': -0.236693, 'AUC ROC': 0.870167, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.864, 'Learning time': 0.55, 'AUC PR': 0.162113}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5851860008555361;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3211800329464989;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.6788199670535011;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12668031260558496;  // std dev = 0,288, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2321493243405528;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.5488968420817765;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(C, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09233944138011767;  // std dev = 0,553, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.286188
   Precision = 0.08167 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.151007


Total learning time: 0.783 seconds
Total inference time: 1.188 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.180915
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.501 seconds
Parameter learned model CLL: -0.180915


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [0.913, 1, 5], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)', 'false,true': 'genre(A, F)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'true,true': [0.373, 1, 5], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [2.63e-09, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [0.913, 1, 5], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 5], 'true,true,false': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.288, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,false': 'genre(A, E)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,true,true': [7.45e-09, 0, 5], 'true,false,true,false': [0.0, 1, 0], 'true,false,false,false': [0.0, 3, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.553, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [1.32e-09, 3, 0]}]]
[{'': [0.1388888888888887, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'false,true,true': [nan, 0.0]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan], 'false': [0.0, nan], 'false,true,true': [nan, 0.0], 'false,true': [0.0, 0.0]}, {'': [0.13888888888888887, 0.0], 'false,true': [0.0, 2.3129646346357427e-18], 'false': [0.0, nan]}, {'': [0.13888888888888898, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.13888888888888884, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.13888888888888887, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'false,true,true': [nan, 0.0]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan], 'false': [0.0, nan], 'true,true': [0.0, 0.0]}, {'': [0.08296184600317953, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.05780493000878205, nan], 'true,false': [0.05771282261011815, -5.782411586589357e-19], 'true': [1.1102230246251566e-17, 0.0369362064704756], 'true,false,true': [0.0, 0.0], 'true,true': [1.1102230246251566e-17, nan], 'true,false,false': [nan, -5.782411586589357e-19]}, {'': [0.05101945362300922, 0.0], 'false,true': [0.0, 5.782411586589357e-19], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;false;genre(A, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;false,true;movie(C, B).;true;true
8;false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3211800329464989;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.6788199670535011;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12668031260558496;  // std dev = 0,706, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.2321493243405528;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( genre(A, D) )
%   | then if ( movie(E, B) )
%   | | then return -0.3086619099629896;  // std dev = 0,340, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08247517140381487;  // std dev = 0,607, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( genre(A, D) )
%   | then return -0.05118490228929457;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.276158
   Precision = 0.08167 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.151007


Total learning time: 0.681 seconds
Total inference time: 1.093 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.191252
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.465 seconds
Refined model CLL: -0.191252


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.286188
   Precision = 0.08167 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.151007


Total learning time: 2.43 seconds
Total inference time: 1.188 seconds
AUC ROC: 0.998942
Total revision time: 2.43
Best scored revision CLL: -0.180915


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:40:22
{'CLL': -0.286188, 'AUC ROC': 0.998942, 'F1': 0.151007, 'Recall': 1.0, 'Precision': [0.08167, 0.5], 'parameter_5': {'CLL': -0.286188, 'AUC ROC': 0.998942, 'F1': 0.151007, 'Recall': 1.0, 'Precision': [0.08167, 0.5], 'Inference time': 1.188, 'Learning time': 0.783, 'AUC PR': 0.918367}, 'Inference time': 1.188, 'Learning time': 2.43, 'AUC PR': 0.918367}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.203547
   Precision = 0.255682 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.40724


Total learning time: 1.029 seconds
Total inference time: 0.919 seconds
AUC ROC: 0.965362


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 02:40:24
{'CLL': -0.203547, 'AUC ROC': 0.965362, 'F1': 0.40724, 'Recall': 1.0, 'Precision': [0.255682, 0.5], 'Inference time': 0.919, 'Learning time': 1.029, 'AUC PR': 0.255682}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.173677
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.485 seconds
Total inference time: 0.715 seconds
AUC ROC: 0.965362


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 02:40:25
{'CLL': -0.173677, 'AUC ROC': 0.965362, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.715, 'Learning time': 0.485, 'AUC PR': 0.255682}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675544;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.34884632569484214;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783633;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354195;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926098;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926098;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423424;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3211800329464989;  // std dev = 1,05e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.17881996705350112;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109176;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12410922908934136;  // std dev = 0,343, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 9,31e-10, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.23260795103197518;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.66677692719309;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(C, B) )
%   | | | then return -1.1026052642334101E-4;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08687450193098385;  // std dev = 1,064, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.06419184008202618;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.369248
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.873 seconds
Total inference time: 1.216 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 0.99
   AUC PR    = 0.990191
   CLL	      = -0.237735
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.543 seconds
Parameter learned model CLL: -0.237735


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [1.291, 2, 10], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true,false': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)', 'false,true': 'genre(A, F)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'true,true': [0.373, 2, 10], 'false,true,true,false': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.291, 2, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [2.63e-09, 3, 0], 'false,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.291, 2, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [1.291, 2, 10], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [1.291, 2, 10], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,true,true,false': [0.0, 3, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [1.05e-08, 0, 8], 'true,true,false': [1.0, 2, 2], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.343, 2, 10], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [9.31e-10, 7, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [0.816, 1, 2], 'true,true,false,false': [0.0, 1, 0], 'true,true,true': [0.0, 0, 8], 'true,false,true,false': [0.0, 3, 0], 'true,true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.064, 2, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 3, 0], 'false,true,false': [0.0, 5, 0]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'false,true': [0.0, -2.7755575615628915e-18], 'false': [-6.938893903907228e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.13888888888888914, 0.0], 'true': [0.13888888888888914, nan], 'false': [0.0, nan], 'false,true,true': [nan, 0.0], 'false,true': [0.0, 0.0]}, {'': [0.1388888888888891, -1.734723475976807e-18], 'false,true': [2.3129646346357427e-18, 0.0], 'false': [-1.734723475976807e-18, nan]}, {'': [0.138888888888889, -1.734723475976807e-18], 'false,true': [0.0, 0.0], 'false': [-1.734723475976807e-18, nan]}, {'': [0.1388888888888888, -1.734723475976807e-18], 'false,true': [0.0, -9.912705577010326e-19], 'false': [-1.734723475976807e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.13888888888888892, 1.734723475976807e-18], 'false,true': [0.0, 0.0], 'false': [1.734723475976807e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.13888888888888887, -8.673617379884035e-19], 'true': [0.13888888888888887, nan], 'false': [-8.673617379884035e-19, nan], 'true,true': [1.3877787807814457e-17, 0.25]}, {'': [0.11785603184230882, 8.673617379884035e-19], 'false,true': [0.0, 9.912705577010326e-19], 'false': [8.673617379884035e-19, nan], 'false,true,true': [nan, 0.0]}, {'': [0.07803400402389997, nan], 'true,true,false': [nan, 0.0], 'true,false': [0.0671292491035905, 0.09638107659280806], 'true': [0.00895032379293684, 0.093147404554], 'true,false,true': [0.0, -5.782411586589357e-19], 'true,true': [-6.938893903907228e-18, 0.0], 'true,false,false': [0.2222222222222222, 0.0]}, {'': [0.09441400498846764, 0.0], 'false,true': [-5.782411586589357e-19, 0.0], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;false;genre(A, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, F).;true;true
8;false,true;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6359267128772901;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5398498420741675;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4289562725350853;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.32644004768013724;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(A) )
%   | | then return -0.10159632948783633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.24503149911444544;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(A) )
%   | | then return -0.09269127618926098;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.18482045881522163;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.324922203626394;  // std dev = 0,066, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.17507779637360596;  // std dev = 0,930, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( actor(A) )
%   | then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.18737148305750576;  // std dev = 0,065, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.107306843553244;  // std dev = 0,377, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.06866265027295522;  // std dev = 0,168, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2702698546665712;  // std dev = 1,05e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then if ( movie(D, B) )
%   | | then return -0.20653839919681616;  // std dev = 0,478, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(D, B) )
%   | | then return -0.04396086368597966;  // std dev = 0,287, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1578714780655711;  // std dev = 0,070, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.05889703186156933;  // std dev = 0,351, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(A, D) )
%   | then return -0.05637804428127071;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.0671289909382603;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.950455
   AUC PR    = 0.380798
   CLL	      = -0.370332
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.337 seconds
Total inference time: 1.328 seconds
AUC ROC: 0.950455


Results scoring model
   AUC ROC   = 0.995
   AUC PR    = 0.995455
   CLL	      = -0.234394
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.505 seconds
Refined model CLL: -0.234394


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.950455
   AUC PR    = 0.380798
   CLL	      = -0.370332
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 3.258 seconds
Total inference time: 1.328 seconds
AUC ROC: 0.950455
Total revision time: 3.258
Best scored revision CLL: -0.234394


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:40:32
{'CLL': -0.370332, 'AUC ROC': 0.950455, 'F1': 0.140406, 'Recall': 1.0, 'Precision': [0.075503, 0.5], 'Inference time': 1.328, 'Learning time': 3.258, 'AUC PR': 0.380798, 'parameter_10': {'CLL': -0.369248, 'AUC ROC': 0.998942, 'F1': 0.140406, 'Recall': 1.0, 'Precision': [0.075503, 0.5], 'Inference time': 1.216, 'Learning time': 0.873, 'AUC PR': 0.918367}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.41257245288266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5651786576185065;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.30215582557027737;  // std dev = 0,216, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( actor(A), actor(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.1849025827112506;  // std dev = 0,289, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4248311124097277;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.23989465091318823;  // std dev = 0,199, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( actor(A), actor(B) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.16195129530872032;  // std dev = 0,263, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.098711535718446;  // std dev = 0,104, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.15618936842676656;  // std dev = 0,587, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.29420681967865203;  // std dev = 1,05e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2923511208611643;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1510405703637646;  // std dev = 0,161, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( actor(A) )
%   | then return -0.1399762111913176;  // std dev = 0,278, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.06753551260581611;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08929514738264797;  // std dev = 0,130, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.08778724572999098;  // std dev = 0,512, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.21077060624405247;  // std dev = 1,29e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.22026360818540613;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.10324782718602012;  // std dev = 0,140, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06286236057670472;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.13781621512011427;  // std dev = 0,275, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0816279865227108;  // std dev = 0,145, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.05242427704828935;  // std dev = 0,458, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.1632414610650894;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */


Results
   AUC ROC   = 0.998684
   AUC PR    = 0.897867
   CLL	      = -0.155173
   Precision = 0.298013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.459184


Total learning time: 1.784 seconds
Total inference time: 1.108 seconds
AUC ROC: 0.998684


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 02:40:35
{'CLL': -0.155173, 'AUC ROC': 0.998684, 'F1': 0.459184, 'Recall': 1.0, 'Precision': [0.298013, 0.5], 'Inference time': 1.108, 'Learning time': 1.784, 'AUC PR': 0.897867}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */


Results
   AUC ROC   = 0.963505
   AUC PR    = 0.244543
   CLL	      = -0.173906
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.615 seconds
Total inference time: 0.691 seconds
AUC ROC: 0.963505


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 02:40:36
{'CLL': -0.173906, 'AUC ROC': 0.963505, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.691, 'Learning time': 0.615, 'AUC PR': 0.244543}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328457;  // std dev = 1,581, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675533;  // std dev = 1,581, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948421;  // std dev = 1,581, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354195;  // std dev = 1,581, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1994526427642342;  // std dev = 1,581, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08518475138839687;  // std dev = 1,32e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3211800329464989;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.17881996705350112;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109172;  // std dev = 1,32e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12410922908934137;  // std dev = 0,343, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 1,32e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.23260795103197518;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.66677692719309;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.06677692719309;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08658844718722908;  // std dev = 1,336, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.357466
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.881 seconds
Total inference time: 1.295 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 0.986667
   AUC PR    = 0.987029
   CLL	      = -0.243642
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.516 seconds
Parameter learned model CLL: -0.243642


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [1.581, 3, 15], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'false,true,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)', 'false,true': 'genre(A, F)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 8, 0], 'true,true': [0.373, 3, 15], 'false,true,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.581, 3, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 4, 0], 'false,true,false': [0.0, 8, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.581, 3, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 11, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [1.581, 3, 15], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 11, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [1.581, 3, 15], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 8, 0], 'false,true,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 12], 'true,true,false': [1.225, 3, 3], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [1.32e-09, 12, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.343, 3, 15], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 11, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [1.095, 2, 3], 'true,true,false,false': [0.0, 1, 0], 'true,true,true': [0.0, 0, 12], 'true,false,true,false': [0.0, 4, 0], 'true,true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0], 'true,false,false,false': [2.63e-09, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.336, 3, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 4, 0], 'false,true,false': [0.0, 8, 0]}]]
[{'': [0.1388888888888886, -1.1564823173178714e-17], 'false,true': [0.0, -6.938893903907228e-18], 'false': [-1.1564823173178714e-17, nan], 'false,true,true': [nan, 0.0]}, {'': [0.13888888888888898, 2.3129646346357427e-18], 'true': [0.13888888888888898, nan], 'false': [2.3129646346357427e-18, nan], 'false,true,true': [nan, 0.0], 'false,true': [0.0, 0.0]}, {'': [0.1388888888888892, 6.938893903907228e-18], 'false,true': [0.0, -1.734723475976807e-18], 'false': [6.938893903907228e-18, nan]}, {'': [0.1388888888888891, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan]}, {'': [0.13888888888888884, 2.3129646346357427e-18], 'false,true': [0.0, 0.0], 'false': [2.3129646346357427e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.13888888888888895, 2.3129646346357427e-18], 'false,true': [0.0, 1.734723475976807e-18], 'false': [2.3129646346357427e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.13888888888888884, 1.1564823173178713e-18], 'true': [0.13888888888888884, nan], 'false': [1.1564823173178713e-18, nan], 'true,true': [-1.850371707708594e-17, 0.25]}, {'': [0.1178560318423088, 1.1564823173178713e-18], 'false,true': [0.0, 6.30808536718839e-19], 'false': [1.1564823173178713e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.0780340040239, nan], 'true,true,false': [nan, 0.0], 'true,false': [0.05728362590173057, 0.10000066175937701], 'true': [0.006434700241667608, 0.09044428729217054], 'true,false,true': [0.0, 0.0], 'true,true': [-9.25185853854297e-18, 0.0], 'true,false,false': [0.24, 9.912705577010326e-19]}, {'': [0.09918720410615678, 2.8912057932946786e-18], 'false,true': [0.0, 0.0], 'false': [2.8912057932946786e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;false;genre(A, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, F).;true;true
8;false,true;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7194734122109543;  // std dev = 1,05e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(B) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.41751358415830986;  // std dev = 1,05e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(A) )
%   | | | then return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(B) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(A) )
%   | | | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2551722425694894;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.06549048045072191;  // std dev = 0,353, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   else if ( actor(A) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08366249539491133;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.18443375962181122;  // std dev = 0,025, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.17954225170412197;  // std dev = 0,007, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.10775199418177824;  // std dev = 0,197, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.15242761406082173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then if ( movie(D, B) )
%   | | then return -0.07023519173987666;  // std dev = 0,008, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(D, B) )
%   | | then if ( actor(B) )
%   | | | then return -0.07043610439495157;  // std dev = 0,011, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.17155046429951526;  // std dev = 0,000568, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.14173062141044931;  // std dev = 0,011, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.13544632043781846;  // std dev = 0,005, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07258616282267284;  // std dev = 1,10e-05, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.06408330397687026;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(B) )
%   | | then return -0.0640712549673721;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06638166132848694;  // std dev = 0,010, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.998684
   AUC PR    = 0.897867
   CLL	      = -0.071156
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.602 seconds
Total inference time: 1.484 seconds
AUC ROC: 0.998684


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.09755
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.54 seconds
Refined model CLL: -0.09755


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998684
   AUC PR    = 0.897867
   CLL	      = -0.071156
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.539 seconds
Total inference time: 1.484 seconds
AUC ROC: 0.998684
Total revision time: 3.539
Best scored revision CLL: -0.09755


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:40:43
{'CLL': -0.071156, 'AUC ROC': 0.998684, 'F1': 0.957447, 'Recall': 1.0, 'Precision': [0.918367, 0.5], 'parameter_15': {'CLL': -0.357466, 'AUC ROC': 0.998942, 'F1': 0.140406, 'Recall': 1.0, 'Precision': [0.075503, 0.5], 'Inference time': 1.295, 'Learning time': 0.881, 'AUC PR': 0.918367}, 'Inference time': 1.484, 'Learning time': 3.539, 'AUC PR': 0.897867}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.6045267906174348;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.4749335700127619;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.3584548159137827;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.41751358415830986;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.35746909075069155;  // std dev = 0,174, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.17514190413496675;  // std dev = 0,452, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2807293480076589;  // std dev = 0,154, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.15654600352885242;  // std dev = 0,425, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.22802297706441352;  // std dev = 0,135, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A) )
%   | then return -0.13972001229659148;  // std dev = 0,149, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.0683130329294175;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.19060914165003193;  // std dev = 0,118, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06921540349065299;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.1318234339362401;  // std dev = 0,371, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.1630677199232705;  // std dev = 0,105, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( actor(A) )
%   | then return -0.1181627971419471;  // std dev = 0,130, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.056623958408196416;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.14211718195572184;  // std dev = 0,094, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( actor(A), actor(B) )
%   | then return -0.0580754224835986;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.11289159279135597;  // std dev = 0,324, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.998684
   AUC PR    = 0.897867
   CLL	      = -0.101149
   Precision = 0.737705 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.849057


Total learning time: 1.721 seconds
Total inference time: 1.127 seconds
AUC ROC: 0.998684


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 02:40:46
{'CLL': -0.101149, 'AUC ROC': 0.998684, 'F1': 0.849057, 'Recall': 1.0, 'Precision': [0.737705, 0.5], 'Inference time': 1.127, 'Learning time': 1.721, 'AUC PR': 0.897867}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */


Results
   AUC ROC   = 0.963505
   AUC PR    = 0.244543
   CLL	      = -0.173781
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.672 seconds
Total inference time: 0.704 seconds
AUC ROC: 0.963505


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 02:40:48
{'CLL': -0.173781, 'AUC ROC': 0.963505, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.704, 'Learning time': 0.672, 'AUC PR': 0.244543}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328453;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4612598391067553;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948424;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783633;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354195;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926096;  // std dev = 1,32e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423416;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08518475138839687;  // std dev = 1,61e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3211800329464989;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.25024853848207257;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109176;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1245525152741664;  // std dev = 0,336, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 9,31e-10, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.23252883316576645;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.6508228522525463;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.15082285225254632;  // std dev = 1,225, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08765767557247395;  // std dev = 1,509, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.06419184008202618;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.330704
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.936 seconds
Total inference time: 1.348 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 0.98875
   AUC PR    = 0.989346
   CLL	      = -0.237289
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.546 seconds
Parameter learned model CLL: -0.237289


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [1.826, 4, 20], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 11, 0], 'false,true,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)', 'false,true': 'genre(A, F)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [5.27e-09, 11, 0], 'true,true': [0.373, 4, 20], 'false,true,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.826, 4, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 5, 0], 'false,true,false': [7.45e-09, 11, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.826, 4, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 15, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [1.826, 4, 20], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 15, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [1.826, 4, 20], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.61e-09, 11, 0], 'false,true,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 17], 'true,true,false': [1.309, 4, 3], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.336, 4, 20], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [9.31e-10, 15, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [1.225, 3, 3], 'true,true,false,false': [0.0, 1, 0], 'true,true,true': [0.0, 0, 17], 'true,false,true,false': [1.86e-09, 5, 0], 'true,true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0], 'true,false,false,false': [2.63e-09, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.509, 4, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 5, 0], 'false,true,false': [2.63e-09, 11, 0]}]]
[{'': [0.13888888888888906, -6.938893903907228e-18], 'false,true': [-2.7755575615628915e-18, -1.0092936587501423e-17], 'false': [-6.938893903907228e-18, nan], 'false,true,true': [nan, -2.7755575615628915e-18]}, {'': [0.13888888888888937, 3.469446951953614e-18], 'true': [0.13888888888888937, nan], 'false': [3.469446951953614e-18, nan], 'false,true,true': [nan, 0.0], 'false,true': [0.0, 2.523234146875356e-18]}, {'': [0.13888888888888917, 1.214306433183765e-17], 'false,true': [0.0, 5.046468293750712e-18], 'false': [1.214306433183765e-17, nan]}, {'': [0.1388888888888889, -6.938893903907228e-18], 'false,true': [0.0, -5.551115123125783e-18], 'false': [-6.938893903907228e-18, nan]}, {'': [0.13888888888888887, 5.204170427930421e-18], 'false,true': [0.0, 1.8503717077085942e-18], 'false': [5.204170427930421e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.13888888888888895, 6.938893903907228e-18], 'false,true': [0.0, 2.523234146875356e-18], 'false': [6.938893903907228e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.13888888888888884, -2.6020852139652106e-18], 'true': [0.13888888888888884, nan], 'false': [-2.6020852139652106e-18, nan], 'true,true': [-2.6122894697062506e-17, 0.24489795918367344]}, {'': [0.11306658813691756, 0.0], 'false,true': [0.0, 9.251858538542971e-19], 'false': [0.0, nan], 'false,true,true': [nan, 0.0]}, {'': [0.07529374357251664, nan], 'true,true,false': [nan, 0.0], 'true,false': [0.04710902146220267, 0.09534119065301142], 'true': [0.004752360503306642, 0.08305535439808737], 'true,false,true': [0.0, 6.938893903907229e-19], 'true,true': [-1.959217102279688e-17, 0.0], 'true,false,false': [0.24999999999999997, 6.938893903907229e-19]}, {'': [0.0948512578690734, 1.734723475976807e-18], 'false,true': [0.0, 6.30808536718839e-19], 'false': [1.734723475976807e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;false;genre(A, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, F).;true;true
8;false,true;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.7194734122109544;  // std dev = 1,05e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(B) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.41751358415830986;  // std dev = 1,05e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.4175135841583098;  // std dev = 1,29e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(A) )
%   | | then if ( female(B) )
%   | | | then return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09269127618926098;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2551722425694894;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109176;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(B) )
%   | | then if ( actor(A) )
%   | | | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(A) )
%   | | | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.12509750360143654;  // std dev = 0,073, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.15274385809367078;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then if ( movie(D, B) )
%   | | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(D, B) )
%   | | then if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.15274385809367075;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.1365277473204332;  // std dev = 0,001, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.13400703000801117;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return -0.06840948508141065;  // std dev = 0,010, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(B) )
%   | | | then return -0.06419184008202618;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06419184008202618;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.998684
   AUC PR    = 0.897867
   CLL	      = -0.069042
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.868 seconds
Total inference time: 1.29 seconds
AUC ROC: 0.998684


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095453
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.605 seconds
Refined model CLL: -0.095453


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998684
   AUC PR    = 0.897867
   CLL	      = -0.069042
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.9550000000000005 seconds
Total inference time: 1.29 seconds
AUC ROC: 0.998684
Total revision time: 3.9550000000000005
Best scored revision CLL: -0.095453


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:40:55
{'CLL': -0.069042, 'AUC ROC': 0.998684, 'F1': 0.957447, 'Recall': 1.0, 'Precision': [0.918367, 0.5], 'Inference time': 1.29, 'Learning time': 3.9550000000000005, 'AUC PR': 0.897867, 'parameter_20': {'CLL': -0.330704, 'AUC ROC': 0.998942, 'F1': 0.140406, 'Recall': 1.0, 'Precision': [0.075503, 0.5], 'Inference time': 1.348, 'Learning time': 0.936, 'AUC PR': 0.918367}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.6392070123615109;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.49932275605826126;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.3758491322444214;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.28401811356076057;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.28407322469510243;  // std dev = 0,143, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(A) )
%   | then return -0.28365761849457327;  // std dev = 0,486, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.23021775007822134;  // std dev = 0,125, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(A) )
%   | then return -0.24903888178267078;  // std dev = 0,450, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07877675473109179;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1921107820685644;  // std dev = 0,109, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06848672038682363;  // std dev = 0,027, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.19386713043496706;  // std dev = 0,418, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.164136372448236;  // std dev = 0,097, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A) )
%   | then return -0.2015412216495828;  // std dev = 0,375, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.06690604572166318;  // std dev = 0,011, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.14290410034152284;  // std dev = 0,086, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(A) )
%   | then return -0.1791083448783097;  // std dev = 0,341, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.06284883698366929;  // std dev = 0,011, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.998684
   AUC PR    = 0.897867
   CLL	      = -0.121615
   Precision = 0.298013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.459184


Total learning time: 1.975 seconds
Total inference time: 1.124 seconds
AUC ROC: 0.998684


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 02:40:58
{'CLL': -0.121615, 'AUC ROC': 0.998684, 'F1': 0.459184, 'Recall': 1.0, 'Precision': [0.298013, 0.5], 'Inference time': 1.124, 'Learning time': 1.975, 'AUC PR': 0.897867}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.963505
   AUC PR    = 0.244543
   CLL	      = -0.173742
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.662 seconds
Total inference time: 0.708 seconds
AUC ROC: 0.963505


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 02:41:00
{'CLL': -0.173742, 'AUC ROC': 0.963505, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.708, 'Learning time': 0.662, 'AUC PR': 0.244543}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6646005480027375;  // std dev = 2,200, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.563285584736772;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4457024086767857;  // std dev = 2,200, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3380124605859271;  // std dev = 2,200, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783633;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2537478665917126;  // std dev = 2,200, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.09269127618926094;  // std dev = 2,28e-09, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19216930606222232;  // std dev = 2,200, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08518475138839686;  // std dev = 2,28e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3412973393451353;  // std dev = 4,21e-08, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.2587026606548646;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109176;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11834294641629362;  // std dev = 0,354, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.24653874028706207;  // std dev = 3,33e-08, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( genre(A, E) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(A, F) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.6264830796210449;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(C, B) )
%   | | | then return -0.18203863517660043;  // std dev = 1,491, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08247432621158061;  // std dev = 1,811, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.06419184008202618;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.307069
   Precision = 0.08167 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.151007


Total learning time: 0.933 seconds
Total inference time: 1.28 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 0.984
   AUC PR    = 0.985189
   CLL	      = -0.258935
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.558 seconds
Parameter learned model CLL: -0.258935


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [2.2, 6, 25], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0], 'false,true,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)', 'false,true': 'genre(A, F)'}, {'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 14, 0], 'true,true': [0.395, 6, 25], 'false,true,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.2, 6, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 5, 0], 'false,true,false': [1.18e-08, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.2, 6, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 18, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [2.2, 6, 25], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [2.28e-09, 18, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [2.2, 6, 25], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [2.28e-09, 14, 0], 'false,true,true,false': [0.0, 5, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [4.21e-08, 0, 21], 'true,true,false': [1.549, 6, 4], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 19, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.354, 6, 25], 'false,true,true,true': [0.0, 0, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 18, 0], 'false,true,true,false': [0.0, 1, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [1.491, 5, 4], 'true,true,false,false': [0.0, 1, 0], 'true,true,true': [3.33e-08, 0, 21], 'true,false,true,false': [1.86e-09, 5, 0], 'true,true,false,true': [0.0, 0, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0], 'true,false,false,false': [2.63e-09, 13, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.811, 6, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 5, 0], 'false,true,false': [3.73e-09, 14, 0]}]]
[{'': [0.15608740894901246, 0.0], 'false,true': [-2.7755575615628915e-18, -1.1895246692412391e-17], 'false': [0.0, nan], 'false,true,true': [nan, -2.7755575615628915e-18]}, {'': [0.15608740894901107, 0.0], 'true': [0.15608740894901107, nan], 'false': [0.0, nan], 'false,true,true': [nan, 0.0], 'false,true': [0.0, 3.96508223080413e-18]}, {'': [0.1560874089490117, 1.460819769243627e-17], 'false,true': [0.0, 9.912705577010326e-18], 'false': [1.460819769243627e-17, nan]}, {'': [0.1560874089490113, -1.0225738384705389e-17], 'false,true': [0.0, -9.25185853854297e-18], 'false': [-1.0225738384705389e-17, nan]}, {'': [0.15608740894901157, 7.304098846218135e-18], 'false,true': [0.0, 3.0839528461809902e-18], 'false': [7.304098846218135e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.1560874089490115, 8.764918615461762e-18], 'false,true': [0.0, 4.956352788505163e-18], 'false': [8.764918615461762e-18, nan], 'false,true,true': [nan, 0.0]}, {'': [0.15608740894901146, -5.112869192352694e-18], 'true': [0.15608740894901146, nan], 'false': [-5.112869192352694e-18, nan], 'true,true': [8.458842092382145e-17, 0.24000000000000005]}, {'': [0.1251946028334291, -7.304098846218135e-19], 'false,true': [0.0, -7.709882115452476e-19], 'false': [-7.304098846218135e-19, nan], 'false,true,true': [nan, 0.0]}, {'': [0.08452644473087847, nan], 'true,true,false': [nan, 0.0], 'true,false': [0.04325369621255074, 0.10413032872863871], 'true': [0.004304279908175269, 0.09144988729030672], 'true,false,true': [0.0, 6.938893903907229e-19], 'true,true': [5.2867763077388404e-17, 0.0], 'true,false,false': [0.2469135802469136, 5.337610695313253e-19]}, {'': [0.10575633370974082, 7.304098846218135e-19], 'false,true': [0.0, 9.912705577010326e-19], 'false': [7.304098846218135e-19, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;false;genre(A, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, F).;true;true
8;false,true;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(B) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.3207118471601497;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(B) )
%   | | then if ( actor(A) )
%   | | | then return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.09269127618926098;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(A) )
%   | | | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.09269127618926098;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2551722425694894;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839686;  // std dev = 1,86e-09, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109176;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.132637418462955;  // std dev = 0,064, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.15274385809367078;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then if ( movie(D, B) )
%   | | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( movie(D, B) )
%   | | then if ( actor(B) )
%   | | | then return -0.06842697784420274;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.15274385809367075;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(A) )
%   | | then return 0.13581514789026564;  // std dev = 0,000990, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.13400703000801117;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( genre(A, D) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return -0.06682974476889351;  // std dev = 0,012, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(B) )
%   | | | then return -0.06419184008202618;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06419184008202618;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.998684
   AUC PR    = 0.897867
   CLL	      = -0.069058
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.773 seconds
Total inference time: 1.325 seconds
AUC ROC: 0.998684


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.095315
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.55 seconds
Refined model CLL: -0.095315


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998684
   AUC PR    = 0.897867
   CLL	      = -0.069058
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.814 seconds
Total inference time: 1.325 seconds
AUC ROC: 0.998684
Total revision time: 3.814
Best scored revision CLL: -0.095315


Dataset: 53_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:41:07
{'CLL': -0.069058, 'AUC ROC': 0.998684, 'F1': 0.957447, 'Recall': 1.0, 'parameter_25': {'CLL': -0.307069, 'AUC ROC': 0.998942, 'F1': 0.151007, 'Recall': 1.0, 'Precision': [0.08167, 0.5], 'Inference time': 1.28, 'Learning time': 0.933, 'AUC PR': 0.918367}, 'Precision': [0.918367, 0.5], 'Inference time': 1.325, 'Learning time': 3.814, 'AUC PR': 0.897867}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.6622329172201352;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.7194734122109542;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.5154428111118985;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.3875647182006322;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.4175135841583098;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.29398103437200096;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 1,67e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.2288562690978686;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.2551722425694894;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.23301938074012804;  // std dev = 0,112, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( female(A) )
%   | then return -0.2121230663862153;  // std dev = 0,596, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.19407451091364855;  // std dev = 0,098, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(A) )
%   | then return -0.19239894167397195;  // std dev = 0,571, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.07324622576333704;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.1655668295065635;  // std dev = 0,086, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( female(A) )
%   | then return -0.17549877973818284;  // std dev = 0,543, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.06842697784420272;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.14398147449911416;  // std dev = 0,077, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( female(A) )
%   | then return -0.16079837563177432;  // std dev = 0,515, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.06419184008202619;  // std dev = 6,97e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.998684
   AUC PR    = 0.897867
   CLL	      = -0.14349
   Precision = 0.255682 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.40724


Total learning time: 1.865 seconds
Total inference time: 1.143 seconds
AUC ROC: 0.998684


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 02:41:11
{'CLL': -0.14349, 'AUC ROC': 0.998684, 'F1': 0.40724, 'Recall': 1.0, 'Precision': [0.255682, 0.5], 'Inference time': 1.143, 'Learning time': 1.865, 'AUC PR': 0.897867}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( female(A) )
%   | then return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


Results
   AUC ROC   = 0.963505
   AUC PR    = 0.244543
   CLL	      = -0.17372
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.637 seconds
Total inference time: 0.764 seconds
AUC ROC: 0.963505


Dataset: 53_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 02:41:12
{'CLL': -0.17372, 'AUC ROC': 0.963505, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.764, 'Learning time': 0.637, 'AUC PR': 0.244543}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5851860008555361;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3211800329464989;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.6788199670535011;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12668031260558496;  // std dev = 0,288, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2321493243405528;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.5488968420817765;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09233944138011767;  // std dev = 0,553, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.967434
   AUC PR    = 0.770258
   CLL	      = -0.211206
   Precision = 0.486111 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.598291


Total learning time: 0.795 seconds
Total inference time: 1.221 seconds
AUC ROC: 0.967434


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.180915
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.505 seconds
Parameter learned model CLL: -0.180915


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true': 'genre(A, F)'}, {'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.373, 1, 5], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.913, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 5], 'true,true,false': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [0.288, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,true,false': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,true,true': [7.45e-09, 0, 5], 'true,false,false,false': [0.0, 4, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [0.553, 1, 5], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0]}]]
[{'': [0.1388888888888887, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan], 'false': [0.0, nan], 'false,true': [nan, 0.0]}, {'': [0.13888888888888887, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.13888888888888898, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.13888888888888884, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.13888888888888887, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan], 'false': [0.0, nan], 'true,true': [0.0, 0.0]}, {'': [0.08296184600317953, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}, {'': [0.05780493000878205, nan], 'true': [1.1102230246251566e-17, 0.03693620647047561], 'true,false': [nan, 0.03693620647047561], 'true,true': [1.1102230246251566e-17, nan], 'true,false,false': [0.0, 0.0]}, {'': [0.05101945362300922, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;false;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3211800329464989;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.6788199670535011;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12668031260558496;  // std dev = 0,706, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then return 0.2321493243405528;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( movie(D, B) )
%   | then return -0.16452095069171746;  // std dev = 0,430, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07647433931581131;  // std dev = 0,640, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.05865546992233328;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.969312
   AUC PR    = 0.779331
   CLL	      = -0.247837
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.672 seconds
Total inference time: 1.13 seconds
AUC ROC: 0.969312


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.197975
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.445 seconds
Refined model CLL: -0.197975


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.967434
   AUC PR    = 0.770258
   CLL	      = -0.211206
   Precision = 0.486111 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.598291


Total learning time: 2.417 seconds
Total inference time: 1.221 seconds
AUC ROC: 0.967434
Total revision time: 2.417
Best scored revision CLL: -0.180915


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:41:18
{'CLL': -0.211206, 'AUC ROC': 0.967434, 'F1': 0.598291, 'Recall': 0.777778, 'Precision': [0.486111, 0.5], 'parameter_5': {'CLL': -0.211206, 'AUC ROC': 0.967434, 'F1': 0.598291, 'Recall': 0.777778, 'Precision': [0.486111, 0.5], 'Inference time': 1.221, 'Learning time': 0.795, 'AUC PR': 0.770258}, 'Inference time': 1.221, 'Learning time': 2.417, 'AUC PR': 0.770258}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.977547
   AUC PR    = 0.326087
   CLL	      = -0.154459
   Precision = 0.326087 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.491803


Total learning time: 1.004 seconds
Total inference time: 0.921 seconds
AUC ROC: 0.977547


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 02:41:20
{'CLL': -0.154459, 'AUC ROC': 0.977547, 'F1': 0.491803, 'Recall': 1.0, 'Precision': [0.326087, 0.5], 'Inference time': 0.921, 'Learning time': 1.004, 'AUC PR': 0.326087}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.977547
   AUC PR    = 0.326087
   CLL	      = -0.1668
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.495 seconds
Total inference time: 0.718 seconds
AUC ROC: 0.977547


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 02:41:21
{'CLL': -0.1668, 'AUC ROC': 0.977547, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.718, 'Learning time': 0.495, 'AUC PR': 0.326087}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675544;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.34884632569484214;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354195;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423424;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 9,31e-10, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.3211800329464989;  // std dev = 1,49e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.3454866337201678;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12510799275318682;  // std dev = 0,326, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 9,31e-10, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.23242971784170757;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( genre(A, E) )
%   | | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, F) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.2956774703952409;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08904614242869997;  // std dev = 1,029, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.967434
   AUC PR    = 0.770258
   CLL	      = -0.285872
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.843 seconds
Total inference time: 1.326 seconds
AUC ROC: 0.967434


Results scoring model
   AUC ROC   = 0.99
   AUC PR    = 0.991667
   CLL	      = -0.228193
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.492 seconds
Parameter learned model CLL: -0.228193


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [1.291, 2, 10], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)', 'false,true': 'genre(A, F)'}, {'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'true,true': [0.373, 2, 10], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.291, 2, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.291, 2, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [1.291, 2, 10], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 7, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [1.291, 2, 10], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [9.31e-10, 7, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [1.49e-08, 0, 9], 'true,true,false': [0.816, 2, 1], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 8, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.326, 2, 10], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [9.31e-10, 7, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [0.816, 2, 1], 'true,true,true': [0.0, 0, 9], 'true,true,false,false': [0.0, 0, 0], 'true,true,false,true': [0.0, 1, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,false': [2.63e-09, 7, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.029, 2, 10], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 7, 0]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'false,true': [0.0, -7.93016446160826e-18], 'false': [-6.938893903907228e-18, nan], 'false,true,true': [0.0, nan]}, {'': [0.13888888888888914, 0.0], 'true': [0.13888888888888914, nan], 'false': [0.0, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, -1.982541115402065e-18]}, {'': [0.1388888888888891, -1.734723475976807e-18], 'false,true': [0.0, -1.982541115402065e-18], 'false': [-1.734723475976807e-18, nan]}, {'': [0.138888888888889, 1.734723475976807e-18], 'false,true': [0.0, 0.0], 'false': [1.734723475976807e-18, nan]}, {'': [0.1388888888888888, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'false,true,true': [0.0, nan]}, {'': [0.13888888888888892, 1.734723475976807e-18], 'false,true': [0.0, 9.912705577010326e-19], 'false': [1.734723475976807e-18, nan], 'false,true,true': [0.0, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan], 'false': [0.0, nan], 'true,true': [2.4671622769447922e-17, 0.22222222222222224]}, {'': [0.10655527577804724, 8.673617379884035e-19], 'false,true': [0.0, 9.912705577010326e-19], 'false': [8.673617379884035e-19, nan], 'false,true,true': [0.0, nan]}, {'': [0.07155011690930133, nan], 'true,true,false': [0.0, nan], 'true,false': [nan, 0.07751165180325145], 'true': [0.008146327620513972, 0.07751165180325145], 'true,true': [-2.4671622769447922e-17, 0.0], 'true,false,false': [0.22222222222222224, 9.912705577010326e-19]}, {'': [0.08832206640627034, 0.0], 'false,true': [0.0, -4.956352788505163e-19], 'false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;false;genre(A, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false;movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6359267128772901;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5398498420741675;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3293194512490402;  // std dev = 0,783, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.5261784947573075;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.4732900013584101;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.30768102842424505;  // std dev = 0,406, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.14336088988829893;  // std dev = 0,747, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.32278207687145644;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.3266023392902869;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.15785213073751725;  // std dev = 0,397, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2591876516368352;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3339729495364873;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.3033043297691332;  // std dev = 0,783, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( female(A) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.033774770243319346;  // std dev = 0,619, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.1742632451584783;  // std dev = 0,295, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.2069912964212265;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1888598704867838;  // std dev = 0,105, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then if ( female(A), female(B) )
%   | | then return -0.21598908300320516;  // std dev = 0,361, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08794410016677745;  // std dev = 0,269, 7,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.17506478545697046;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.05660294834046943;  // std dev = 0,324, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( genre(A, D) )
%   | then return -0.08149186600585982;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.058261365548868925;  // std dev = 0,006, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06302934693519135;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.99294
   AUC PR    = 0.918848
   CLL	      = -0.274197
   Precision = 0.095137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173745


Total learning time: 1.398 seconds
Total inference time: 1.227 seconds
AUC ROC: 0.99294


Results scoring model
   AUC ROC   = 0.995
   AUC PR    = 0.995455
   CLL	      = -0.217491
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.495 seconds
Refined model CLL: -0.217491


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99294
   AUC PR    = 0.918848
   CLL	      = -0.274197
   Precision = 0.095137 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.173745


Total learning time: 3.2279999999999998 seconds
Total inference time: 1.227 seconds
AUC ROC: 0.99294
Total revision time: 3.2279999999999998
Best scored revision CLL: -0.217491


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:41:28
{'CLL': -0.274197, 'AUC ROC': 0.99294, 'F1': 0.173745, 'Recall': 1.0, 'Precision': [0.095137, 0.5], 'Inference time': 1.227, 'Learning time': 3.2279999999999998, 'AUC PR': 0.918848, 'parameter_10': {'CLL': -0.285872, 'AUC ROC': 0.967434, 'F1': 0.137825, 'Recall': 1.0, 'Precision': [0.074013, 0.5], 'Inference time': 1.326, 'Learning time': 0.843, 'AUC PR': 0.770258}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.97972
   AUC PR    = 0.348837
   CLL	      = -0.145678
   Precision = 0.348837 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.517241


Total learning time: 1.105 seconds
Total inference time: 0.902 seconds
AUC ROC: 0.97972


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 02:41:30
{'CLL': -0.145678, 'AUC ROC': 0.97972, 'F1': 0.517241, 'Recall': 1.0, 'Precision': [0.348837, 0.5], 'Inference time': 0.902, 'Learning time': 1.105, 'AUC PR': 0.348837}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.97972
   AUC PR    = 0.348837
   CLL	      = -0.16597
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.558 seconds
Total inference time: 0.704 seconds
AUC ROC: 0.97972


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 02:41:31
{'CLL': -0.16597, 'AUC ROC': 0.97972, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.704, 'Learning time': 0.558, 'AUC PR': 0.348837}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6081489350995123;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5170719622367218;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4125724528826601;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3151786576185066;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2367600938643422;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17806945427207488;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839687;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.38513671764223456;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.4481966156910988;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109172;  // std dev = 9,31e-10, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10770147230612306;  // std dev = 0,356, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.2767501253689449;  // std dev = 2,58e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( genre(A, E) )
%   | | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, F) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.5317836884227167;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.3317836884227167;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07514708211734915;  // std dev = 1,366, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971189
   AUC PR    = 0.781021
   CLL	      = -0.220321
   Precision = 0.945946 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.853659


Total learning time: 0.909 seconds
Total inference time: 1.403 seconds
AUC ROC: 0.971189


Results scoring model
   AUC ROC   = 0.991111
   AUC PR    = 0.992982
   CLL	      = -0.259478
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.933333
   F1        = 0.965517


Total scoring time: 0.522 seconds
Parameter learned model CLL: -0.259478


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [1.936, 5, 15], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)', 'false,true': 'genre(A, F)'}, {'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'true,true': [0.433, 5, 15], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.936, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [1.936, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [5.27e-09, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [1.936, 5, 15], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 9, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [1.936, 5, 15], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 9, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 14], 'true,true,false': [0.913, 5, 1], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [9.31e-10, 10, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.356, 5, 15], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 9, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [0.894, 4, 1], 'true,true,false,false': [0.0, 0, 0], 'true,true,true': [2.58e-08, 0, 14], 'true,false,true,false': [0.0, 0, 0], 'true,true,false,true': [0.0, 1, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0], 'true,false,false,false': [0.0, 9, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.366, 5, 15], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [2.63e-09, 9, 0]}]]
[{'': [0.18749999999999964, -1.1102230246251566e-17], 'false,true': [0.0, -9.25185853854297e-18], 'false': [-1.1102230246251566e-17, nan], 'false,true,true': [0.0, nan]}, {'': [0.18750000000000008, 2.7755575615628915e-18], 'true': [0.18750000000000008, nan], 'false': [2.7755575615628915e-18, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, 0.0]}, {'': [0.18749999999999994, 0.0], 'false,true': [0.0, -1.5419764230904951e-18], 'false': [0.0, nan]}, {'': [0.1874999999999999, 1.3877787807814458e-18], 'false,true': [0.0, 3.0839528461809902e-18], 'false': [1.3877787807814458e-18, nan]}, {'': [0.18749999999999986, 0.0], 'false,true': [0.0, 0.0], 'false': [0.0, nan], 'false,true,true': [0.0, nan]}, {'': [0.18750000000000003, 1.3877787807814458e-18], 'false,true': [0.0, 1.5419764230904951e-18], 'false': [1.3877787807814458e-18, nan], 'false,true,true': [0.0, nan]}, {'': [0.1875, 0.0], 'true': [0.1875, nan], 'false': [0.0, nan], 'true,true': [-3.172065784643304e-17, 0.13888888888888895]}, {'': [0.12689187198095644, 6.938893903907229e-19], 'false,true': [0.0, 7.709882115452476e-19], 'false': [6.938893903907229e-19, nan], 'false,true,true': [0.0, nan]}, {'': [0.09063284443761725, nan], 'true,true,false': [0.0, nan], 'true,false': [0.0, 0.07306660237399532], 'true': [0.007413605582918615, 0.07668155127309488], 'true,false,true': [0.0, nan], 'true,true': [4.7580986769649563e-17, 0.0], 'true,false,false': [0.15999999999999998, 0.0]}, {'': [0.09327294224425711, 1.3877787807814458e-18], 'false,true': [0.0, 7.709882115452476e-19], 'false': [1.3877787807814458e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;false;genre(A, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, F).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.7194734122109542;  // std dev = 1,49e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4175135841583098;  // std dev = 1,29e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2551722425694894;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.03068767633715389;  // std dev = 0,263, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( female(A) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07657831047167542;  // std dev = 2,63e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.18053225203408738;  // std dev = 0,011, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.13223368976128616;  // std dev = 0,063, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.07133569922766328;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return -0.019869084489291856;  // std dev = 0,230, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06937488126346286;  // std dev = 0,003, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.14082122852058376;  // std dev = 0,015, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( genre(A, D) )
%   | then return -0.07735254483363548;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.999506
   AUC PR    = 0.971941
   CLL	      = -0.068516
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.686 seconds
Total inference time: 1.356 seconds
AUC ROC: 0.999506


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.09819
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.532 seconds
Refined model CLL: -0.09819


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999506
   AUC PR    = 0.971941
   CLL	      = -0.068516
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 3.649 seconds
Total inference time: 1.356 seconds
AUC ROC: 0.999506
Total revision time: 3.649
Best scored revision CLL: -0.09819


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:41:38
{'CLL': -0.068516, 'AUC ROC': 0.999506, 'F1': 0.967742, 'Recall': 1.0, 'Precision': [0.9375, 0.5], 'parameter_15': {'CLL': -0.220321, 'AUC ROC': 0.971189, 'F1': 0.853659, 'Recall': 0.777778, 'Precision': [0.945946, 0.5], 'Inference time': 1.403, 'Learning time': 0.909, 'AUC PR': 0.781021}, 'Inference time': 1.356, 'Learning time': 3.649, 'AUC PR': 0.971941}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.08518475138839686;  // std dev = 6,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.97972
   AUC PR    = 0.348837
   CLL	      = -0.145678
   Precision = 0.348837 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.517241


Total learning time: 1.189 seconds
Total inference time: 0.977 seconds
AUC ROC: 0.97972


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 02:41:41
{'CLL': -0.145678, 'AUC ROC': 0.97972, 'F1': 0.517241, 'Recall': 1.0, 'Precision': [0.348837, 0.5], 'Inference time': 0.977, 'Learning time': 1.189, 'AUC PR': 0.348837}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.97972
   AUC PR    = 0.348837
   CLL	      = -0.16597
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.544 seconds
Total inference time: 0.709 seconds
AUC ROC: 0.97972


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 02:41:42
{'CLL': -0.16597, 'AUC ROC': 0.97972, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.709, 'Learning time': 0.544, 'AUC PR': 0.348837}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6581489350995119;  // std dev = 2,000, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5580193346218546;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4419486100244409;  // std dev = 2,000, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3354113949509431;  // std dev = 2,000, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25176837314502193;  // std dev = 2,000, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926096;  // std dev = 1,32e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1904796103243717;  // std dev = 2,000, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839686;  // std dev = 2,28e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.34620194507639973;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.48713138825693375;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.11819726874538848;  // std dev = 0,330, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 9,31e-10, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.24970701768346046;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( genre(A, E) )
%   | | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, F) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.5663174909663339;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.3663174909663339;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.06842697784420272;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.08441832434738394;  // std dev = 1,410, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06419184008202619;  // std dev = 6,97e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971189
   AUC PR    = 0.781021
   CLL	      = -0.234234
   Precision = 0.945946 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.853659


Total learning time: 0.952 seconds
Total inference time: 1.367 seconds
AUC ROC: 0.971189


Results scoring model
   AUC ROC   = 0.995
   AUC PR    = 0.995833
   CLL	      = -0.225766
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95
   F1        = 0.974359


Total scoring time: 0.509 seconds
Parameter learned model CLL: -0.225766


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [2.0, 5, 20], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)', 'false,true': 'genre(A, F)'}, {'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 14, 0], 'true,true': [0.4, 5, 20], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.0, 5, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [1.18e-08, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.0, 5, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [2.0, 5, 20], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.32e-09, 14, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [2.0, 5, 20], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [2.28e-09, 14, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 19], 'true,true,false': [0.913, 5, 1], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 15, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.33, 5, 20], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [9.31e-10, 14, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [0.894, 4, 1], 'true,true,false,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 19], 'true,false,true,false': [0.0, 0, 0], 'true,true,false,true': [0.0, 1, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 1, 0], 'true,false,false,false': [3.73e-09, 14, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.41, 5, 20], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [6.97e-09, 14, 0]}]]
[{'': [0.16000000000000014, -1.4802973661668754e-17], 'false,true': [0.0, -1.1895246692412391e-17], 'false': [-1.4802973661668754e-17, nan], 'false,true,true': [0.0, nan]}, {'': [0.15999999999999975, 3.7007434154171884e-18], 'true': [0.15999999999999975, nan], 'false': [3.7007434154171884e-18, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, 3.96508223080413e-18]}, {'': [0.16000000000000014, 1.295260195396016e-17], 'false,true': [0.0, 9.912705577010326e-18], 'false': [1.295260195396016e-17, nan]}, {'': [0.16000000000000036, -5.551115123125783e-18], 'false,true': [0.0, -3.96508223080413e-18], 'false': [-5.551115123125783e-18, nan]}, {'': [0.16, 3.7007434154171884e-18], 'false,true': [0.0, 3.96508223080413e-18], 'false': [3.7007434154171884e-18, nan], 'false,true,true': [0.0, nan]}, {'': [0.16000000000000006, 5.551115123125783e-18], 'false,true': [0.0, 4.956352788505163e-18], 'false': [5.551115123125783e-18, nan], 'false,true,true': [0.0, nan]}, {'': [0.15999999999999998, -1.8503717077085942e-18], 'true': [0.15999999999999998, nan], 'false': [-1.8503717077085942e-18, nan], 'true,true': [-1.1686558153949016e-16, 0.13888888888888895]}, {'': [0.10872900809791897, 9.251858538542971e-19], 'false,true': [0.0, 9.912705577010326e-19], 'false': [9.251858538542971e-19, nan], 'false,true,true': [0.0, nan]}, {'': [0.07507604809561998, nan], 'true,true,false': [0.0, nan], 'true,false': [0.0, 0.05931222450573866], 'true': [0.004807438857743707, 0.06470560632342483], 'true,false,true': [0.0, nan], 'true,true': [-5.843279076974508e-17, 0.0], 'true,false,false': [0.16000000000000003, 9.912705577010326e-19]}, {'': [0.0794803623393085, 4.163336342344337e-18], 'false,true': [0.0, 3.469446951953614e-18], 'false': [4.163336342344337e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;false;genre(A, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, F).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.7194734122109546;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.7194734122109543;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.41751358415830986;  // std dev = 1,05e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.4175135841583098;  // std dev = 1,18e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.2551722425694894;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08518475138839687;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.03068767633715389;  // std dev = 0,263, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.18000367445119356;  // std dev = 0,010, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.07657831047167542;  // std dev = 2,63e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07324622576333704;  // std dev = 1,32e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.152743858093671;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.13538378093247003;  // std dev = 0,059, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.07133569922766328;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(D, B) )
%   | | then if ( movie(F, A), movie(F, B) )
%   | | | then return -0.01985307625493815;  // std dev = 0,230, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.06842697784420272;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06937571531497107;  // std dev = 0,003, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1398016131354763;  // std dev = 0,014, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( genre(A, D) )
%   | then return -0.07757766362772164;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.999506
   AUC PR    = 0.971941
   CLL	      = -0.068519
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.671 seconds
Total inference time: 1.288 seconds
AUC ROC: 0.999506


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.097318
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.55 seconds
Refined model CLL: -0.097318


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999506
   AUC PR    = 0.971941
   CLL	      = -0.068519
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 3.6819999999999995 seconds
Total inference time: 1.288 seconds
AUC ROC: 0.999506
Total revision time: 3.6819999999999995
Best scored revision CLL: -0.097318


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:41:49
{'CLL': -0.068519, 'AUC ROC': 0.999506, 'F1': 0.967742, 'Recall': 1.0, 'Precision': [0.9375, 0.5], 'Inference time': 1.288, 'Learning time': 3.6819999999999995, 'AUC PR': 0.971941, 'parameter_20': {'CLL': -0.234234, 'AUC ROC': 0.971189, 'F1': 0.853659, 'Recall': 0.777778, 'Precision': [0.945946, 0.5], 'Inference time': 1.367, 'Learning time': 0.952, 'AUC PR': 0.781021}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.14185106490048777;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926094;  // std dev = 1,05e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839685;  // std dev = 1,05e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109175;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06419184008202619;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.97972
   AUC PR    = 0.348837
   CLL	      = -0.145678
   Precision = 0.348837 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.517241


Total learning time: 1.273 seconds
Total inference time: 0.929 seconds
AUC ROC: 0.97972


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 02:41:51
{'CLL': -0.145678, 'AUC ROC': 0.97972, 'F1': 0.517241, 'Recall': 1.0, 'Precision': [0.348837, 0.5], 'Inference time': 0.929, 'Learning time': 1.273, 'AUC PR': 0.348837}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.14185106490048777;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.97972
   AUC PR    = 0.348837
   CLL	      = -0.16597
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.584 seconds
Total inference time: 0.752 seconds
AUC ROC: 0.97972


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 02:41:53
{'CLL': -0.16597, 'AUC ROC': 0.97972, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.752, 'Learning time': 0.584, 'AUC PR': 0.348837}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
0;false,false,true;title(K, J), venue(K, B).;false;false
0;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
0;false,true,true;samebib(F, G), venue(G, B).;false;false
0;false,true;title(F, E), venue(F, A).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true,false;haswordauthor(H, D).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true,true,false;haswordauthor(G, C).;false;false
1;true,true,true;haswordtitle(F, C).;false;false
1;false,true,true;samebib(J, K), venue(K, B).;false;false
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;false
1;false,true;title(J, I), venue(J, A).;true;false
1;false;haswordvenue(B, H), haswordtitle(I, H).;true;false
1;true,true;haswordtitle(F, D).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
2;false,false,true;title(J, I), venue(J, A).;false;false
2;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true,true;author(G, E), venue(G, A).;false;false
2;false,true;haswordtitle(F, D).;true;false
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
3;false,false,true;title(K, J), venue(K, A).;false;false
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true,true;author(G, E), title(G, F).;false;false
3;false,true;haswordtitle(F, D).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;false;false
3;false,true,false;author(H, E), venue(H, B).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
4;false,false,true;title(K, J), venue(K, B).;false;false
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;false;false
4;false,true;author(F, E), venue(F, B).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
4;false,true,false;haswordtitle(H, D).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
5;false,false,true;title(K, J), venue(K, B).;false;false
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
5;false,true,true;samebib(F, G), venue(G, B).;false;false
5;false,true;title(F, E), venue(F, A).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true,false;haswordauthor(H, D).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true,true,false;author(G, E), venue(G, B).;false;false
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;false
6;false,false,true;title(N, M), venue(N, B).;false;false
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;false
6;false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;true,true;haswordauthor(F, C).;false;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false,false,true;title(L, K), venue(L, B).;false;false
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;false
7;false,true,true;samebib(G, H), venue(H, A).;false;false
7;true;haswordauthor(D, C).;false;false
7;false,true;author(G, F), venue(G, B).;true;true
7;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
7;false,true,false;haswordtitle(I, E).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordtitle(D, C).;true;true
8;true,true,false;samebib(E, F), venue(F, A).;false;false
8;false;haswordvenue(A, H), haswordvenue(B, H).;false;false
8;true,false;title(G, D), venue(G, A).;true;true
8;true;venue(E, B), title(E, D).;true;true
8;true,false,true;haswordvenue(B, C).;false;false
8;true,true;haswordvenue(B, C).;false;true
8;true,false,false;haswordvenue(B, C).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;false;true
9;false,false,true;title(K, J), venue(K, B).;false;false
9;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;false
9;false,true,true;haswordauthor(G, D).;false;false
9;false,true;haswordtitle(E, F), haswordauthor(G, F).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true,false;title(H, E), venue(H, A).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5934430527465704;  // std dev = 2,572, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5049832912932651;  // std dev = 0,441, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(E, B) )
%   | then if ( genre(A, F) )
%   | | then if ( genre(B, G) )
%   | | | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4038306972090013;  // std dev = 2,572, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3091847894789792;  // std dev = 2,572, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.23243369117121432;  // std dev = 2,572, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926094;  // std dev = 1,86e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17462562909620657;  // std dev = 2,572, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then if ( genre(B, F) )
%   | | | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839685;  // std dev = 2,63e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then return 0.39687546710963395;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.4213063510721845;  // std dev = 1,279, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10479033180527608;  // std dev = 0,365, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, A) )
%   | then if ( genre(B, E) )
%   | | then if ( genre(A, F) )
%   | | | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 9,31e-10, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A) )
%   then if ( genre(B, D) )
%   | then if ( movie(C, B) )
%   | | then return 0.28492387832536503;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( genre(A, E) )
%   | | | then return -0.06842697784420272;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( genre(A, F) )
%   | | then if ( movie(C, B) )
%   | | | then return -0.5254742070595246;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( movie(C, B) )
%   | | | then return -0.3032519848373024;  // std dev = 1,247, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.0724438992885621;  // std dev = 1,838, 34,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( movie(D, B) )
%   | then if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.971189
   AUC PR    = 0.781021
   CLL	      = -0.220328
   Precision = 0.945946 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.853659


Total learning time: 0.947 seconds
Total inference time: 1.307 seconds
AUC ROC: 0.971189


Results scoring model
   AUC ROC   = 0.9888
   AUC PR    = 0.990534
   CLL	      = -0.273064
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.92
   F1        = 0.958333


Total scoring time: 0.554 seconds
Parameter learned model CLL: -0.273064


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [2.572, 9, 25], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [0.0, 15, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)', 'false': 'movie(E, B)', 'false,true,true': 'genre(B, G)', 'false,true': 'genre(A, F)'}, {'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 15, 0], 'true,true': [0.441, 9, 25], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [2.572, 9, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [1.39e-08, 15, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)'}, {'true': [2.572, 9, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [0.0, 15, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [2.572, 9, 25], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [1.86e-09, 15, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)', 'false,true,true': 'genre(B, F)'}, {'true': [2.572, 9, 25], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [2.63e-09, 15, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'false': 'movie(F, B)', 'true,true': 'genre(B, E)'}, {'true,true,true': [0.0, 0, 23], 'true,true,false': [1.279, 9, 2], 'false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 16, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(B, E)', 'false': 'movie(D, A)', 'false,true,true': 'genre(A, F)'}, {'true': [0.365, 9, 25], 'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'false,true,false': [9.31e-10, 15, 0], 'false,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A)', 'true,true,false': 'genre(A, E)', 'true,false': 'genre(A, F)', 'true': 'genre(B, D)', 'true,false,true': 'movie(C, B)', 'true,true': 'movie(C, B)', 'true,false,false': 'movie(C, B)'}, {'true,false,false,true': [1.247, 7, 2], 'true,true,false,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 23], 'true,false,true,false': [0.0, 0, 0], 'true,true,false,true': [0.0, 1, 0], 'false': [0.0, 0, 0], 'true,false,true,true': [0.0, 2, 0], 'true,false,false,false': [3.73e-09, 15, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'false,true': 'genre(A, E)', 'false': 'movie(D, B)'}, {'true': [1.838, 9, 25], 'false,false': [0.0, 0, 0], 'false,true,true': [0.0, 1, 0], 'false,true,false': [7.9e-09, 15, 0]}]]
[{'': [0.1946366782006932, -6.938893903907228e-18], 'false,true': [0.0, -1.4802973661668754e-17], 'false': [-6.938893903907228e-18, nan], 'false,true,true': [0.0, nan]}, {'': [0.19463667820069183, 3.469446951953614e-18], 'true': [0.19463667820069183, nan], 'false': [3.469446951953614e-18, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, 3.7007434154171884e-18]}, {'': [0.19463667820069178, 1.214306433183765e-17], 'false,true': [0.0, 1.295260195396016e-17], 'false': [1.214306433183765e-17, nan]}, {'': [0.1946366782006921, -6.938893903907228e-18], 'false,true': [0.0, -5.551115123125783e-18], 'false': [-6.938893903907228e-18, nan]}, {'': [0.19463667820069214, 5.204170427930421e-18], 'false,true': [0.0, 3.7007434154171884e-18], 'false': [5.204170427930421e-18, nan], 'false,true,true': [0.0, nan]}, {'': [0.19463667820069208, 6.938893903907228e-18], 'false,true': [0.0, 5.551115123125783e-18], 'false': [6.938893903907228e-18, nan], 'false,true,true': [0.0, nan]}, {'': [0.19463667820069191, -1.734723475976807e-18], 'true': [0.19463667820069191, nan], 'false': [-1.734723475976807e-18, nan], 'true,true': [-1.1584935909132068e-16, 0.14876033057851246]}, {'': [0.13340831539080092, 0.0], 'false,true': [0.0, 9.251858538542971e-19], 'false': [0.0, nan], 'false,true,true': [0.0, nan]}, {'': [0.09642447490306835, nan], 'true,true,false': [0.0, nan], 'true,false': [0.0, 0.07773890479355915], 'true': [0.004985602489205931, 0.08142658913179314], 'true,false,true': [0.0, nan], 'true,true': [-1.9308226515220113e-17, 0.0], 'true,false,false': [0.17283950617283944, 9.251858538542971e-19]}, {'': [0.0993921992871507, 3.469446951953614e-18], 'false,true': [0.0, 4.163336342344337e-18], 'false': [3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;false;genre(A, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;false;genre(A, F).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;false;genre(B, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;false;genre(A, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;false;genre(B, E).;true;true
8;;workedunder(A, B) :- genre(B, D).;true;true
8;true;movie(C, B).;true;true
8;false,false;movie(C, B).;true;true
8;false;genre(A, F).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( female(A) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12544463852839138;  // std dev = 1,86e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360638;  // std dev = 1,86e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(A) )
%   | | then return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( genre(B, D) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(B) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( genre(B, D) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2551722425694894;  // std dev = 5,27e-09, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08518475138839687;  // std dev = 9,31e-10, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2097577156325356;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.20975771563253562;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( actor(A), actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.0654904804507219;  // std dev = 0,289, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.1792976763082375;  // std dev = 0,007, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.17856395012058415;  // std dev = 0,005, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.0801904055177199;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(B, D) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07324622576333704;  // std dev = 9,31e-10, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( genre(B, C) )
%   then if ( movie(D, B) )
%   | then if ( female(A) )
%   | | then return 0.15245921428281062;  // std dev = 1,86e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.13782197885010597;  // std dev = 0,055, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( genre(A, E) )
%   | then return -0.07771655062002768;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(D, B) )
%   | | then if ( actor(A), actor(B) )
%   | | | then return -0.06840596210926085;  // std dev = 0,000431, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.09192519213872996;  // std dev = 0,196, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.13634092872766637;  // std dev = 0,008, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.13716734269897318;  // std dev = 0,006, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( female(A) )
%   | | then return -0.06419310253500905;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06947621473978127;  // std dev = 0,007, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( genre(A, D) )
%   | then return -0.0777523193339849;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( female(B) )
%   | | then return -0.06625934757114169;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.06419310253500907;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.999506
   AUC PR    = 0.971941
   CLL	      = -0.067442
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.853 seconds
Total inference time: 1.496 seconds
AUC ROC: 0.999506


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.096688
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.621 seconds
Refined model CLL: -0.096688


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999506
   AUC PR    = 0.971941
   CLL	      = -0.067442
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 3.975 seconds
Total inference time: 1.496 seconds
AUC ROC: 0.999506
Total revision time: 3.975
Best scored revision CLL: -0.096688


Dataset: 53_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:42:00
{'CLL': -0.067442, 'AUC ROC': 0.999506, 'F1': 0.967742, 'Recall': 1.0, 'parameter_25': {'CLL': -0.220328, 'AUC ROC': 0.971189, 'F1': 0.853659, 'Recall': 0.777778, 'Precision': [0.945946, 0.5], 'Inference time': 1.307, 'Learning time': 0.947, 'AUC PR': 0.781021}, 'Precision': [0.9375, 0.5], 'Inference time': 1.496, 'Learning time': 3.975, 'AUC PR': 0.971941}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360639;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783635;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.09269127618926096;  // std dev = 9,13e-09, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839683;  // std dev = 1,58e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109176;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420276;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06419184008202622;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */


Results
   AUC ROC   = 0.97972
   AUC PR    = 0.348837
   CLL	      = -0.145678
   Precision = 0.348837 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.517241


Total learning time: 1.262 seconds
Total inference time: 0.983 seconds
AUC ROC: 0.97972


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 02:42:03
{'CLL': -0.145678, 'AUC ROC': 0.97972, 'F1': 0.517241, 'Recall': 1.0, 'Precision': [0.348837, 0.5], 'Inference time': 0.983, 'Learning time': 1.262, 'AUC PR': 0.348837}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */


Results
   AUC ROC   = 0.97972
   AUC PR    = 0.348837
   CLL	      = -0.16597
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.6 seconds
Total inference time: 0.761 seconds
AUC ROC: 0.97972


Dataset: 53_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 02:42:04
{'CLL': -0.16597, 'AUC ROC': 0.97972, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 0.761, 'Learning time': 0.6, 'AUC PR': 0.348837}


