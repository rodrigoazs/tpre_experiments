Starting experiment #3 for 54_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 698
Source train neg examples: 27996

WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.6097017301305643;  // std dev = 0,432, 322,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.10406768958562637;  // std dev = 3,799, 397,000 (wgt'ed) examples reached here.  /* #neg=382 #pos=15 */
%   | | | else return 0.12841920536978263;  // std dev = 2,701, 37,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.04643121757224366;  // std dev = 4,755, 262,000 (wgt'ed) examples reached here.  /* #neg=237 #pos=25 */
%   | | | else return 0.2716906017661742;  // std dev = 15,259, 960,000 (wgt'ed) examples reached here.  /* #neg=563 #pos=397 */
%   else return -0.14185106490048793;  // std dev = 0,000, 135,000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5063126368171746;  // std dev = 0,435, 340,000 (wgt'ed) examples reached here.  /* #neg=89 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.09242794081366631;  // std dev = 3,800, 403,000 (wgt'ed) examples reached here.  /* #neg=388 #pos=15 */
%   | | | else return 0.05455242577579203;  // std dev = 2,806, 47,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.04335565473473048;  // std dev = 4,762, 269,000 (wgt'ed) examples reached here.  /* #neg=244 #pos=25 */
%   | | | else return 0.24409924986159195;  // std dev = 15,144, 940,000 (wgt'ed) examples reached here.  /* #neg=543 #pos=397 */
%   else return -0.12544463852839105;  // std dev = 8,02e-08, 118,000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.6071954155017116;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.19223719950118426;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.4138536742771468;  // std dev = 0,433, 323,000 (wgt'ed) examples reached here.  /* #neg=81 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.08307499925864578;  // std dev = 3,802, 411,000 (wgt'ed) examples reached here.  /* #neg=396 #pos=15 */
%   | | | else return 0.11216267550277254;  // std dev = 2,687, 36,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.02710210536463029;  // std dev = 4,732, 240,000 (wgt'ed) examples reached here.  /* #neg=215 #pos=25 */
%   | | | else return 0.2257519836641972;  // std dev = 14,876, 897,000 (wgt'ed) examples reached here.  /* #neg=500 #pos=397 */
%   else return -0.11231637819360617;  // std dev = 9,88e-08, 130,000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.45719081993223665;  // std dev = 2,58e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1641353058442752;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.26053504248584614;  // std dev = 0,461, 349,000 (wgt'ed) examples reached here.  /* #neg=107 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.07120474529991694;  // std dev = 3,795, 376,000 (wgt'ed) examples reached here.  /* #neg=361 #pos=15 */
%   | | | else return 0.2182990560291055;  // std dev = 2,449, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | else return 0.11965445587024326;  // std dev = 0,466, 1.204,000 (wgt'ed) examples reached here.  /* #neg=782 #pos=422 */
%   else return -0.10159632948783633;  // std dev = 0,000, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.34777183987349375;  // std dev = 2,11e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.14283859722356992;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.224787270359733;  // std dev = 0,448, 335,000 (wgt'ed) examples reached here.  /* #neg=93 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.06270754294914847;  // std dev = 3,792, 361,000 (wgt'ed) examples reached here.  /* #neg=346 #pos=15 */
%   | | | else return 0.08659579303102773;  // std dev = 2,640, 33,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.0433738090297313;  // std dev = 4,747, 253,000 (wgt'ed) examples reached here.  /* #neg=228 #pos=25 */
%   | | | else return 0.14758365079535268;  // std dev = 15,060, 926,000 (wgt'ed) examples reached here.  /* #neg=529 #pos=397 */
%   else return -0.09269127618926072;  // std dev = 8,43e-08, 145,000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.14461070922966518;  // std dev = 0,447, 364,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.058652618668551246;  // std dev = 3,795, 376,000 (wgt'ed) examples reached here.  /* #neg=361 #pos=15 */
%   | | | else return 0.07154989985026249;  // std dev = 2,640, 33,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.04472843973599526;  // std dev = 4,764, 271,000 (wgt'ed) examples reached here.  /* #neg=246 #pos=25 */
%   | | | else return 0.11360235104643075;  // std dev = 15,102, 933,000 (wgt'ed) examples reached here.  /* #neg=536 #pos=397 */
%   else return -0.0851847513883968;  // std dev = 6,58e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(F, D) )
%   | | then if ( haswordauthor(E, C) )
%   | | | then return 0.09347552871483807;  // std dev = 8,656, 364,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=245 */
%   | | | else return -0.08477083672713216;  // std dev = 3,807, 296,000 (wgt'ed) examples reached here.  /* #neg=281 #pos=15 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.4110077237594582;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5907200507608055;  // std dev = 1,642, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else if ( haswordtitle(A, H), haswordauthor(I, H) )
%   | | then if ( haswordvenue(J, H) )
%   | | | then return -0.04946885646106522;  // std dev = 3,787, 341,000 (wgt'ed) examples reached here.  /* #neg=326 #pos=15 */
%   | | | else return 0.03332515005113295;  // std dev = 2,687, 36,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | else return 0.07206363566595664;  // std dev = 0,492, 971,000 (wgt'ed) examples reached here.  /* #neg=574 #pos=397 */
%   else return -0.07877675473109154;  // std dev = 7,22e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(B, D) )
%   | | then if ( author(F, E), title(F, A) )
%   | | | then return 0.26436113629766644;  // std dev = 0,199, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.09242446670005278;  // std dev = 8,379, 346,000 (wgt'ed) examples reached here.  /* #neg=104 #pos=242 */
%   | | else if ( author(G, E), title(G, A) )
%   | | | then return 0.0612167798590242;  // std dev = 1,596, 20,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return -0.05189009535250905;  // std dev = 4,379, 418,000 (wgt'ed) examples reached here.  /* #neg=396 #pos=22 */
%   | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | then if ( haswordvenue(J, H) )
%   | | | then return -0.06261637303435989;  // std dev = 3,755, 251,000 (wgt'ed) examples reached here.  /* #neg=236 #pos=15 */
%   | | | else return 0.6182609250958983;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.0990899689329067;  // std dev = 0,498, 878,000 (wgt'ed) examples reached here.  /* #neg=481 #pos=397 */
%   else return -0.07324622576333711;  // std dev = 4,21e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.1916570603783082;  // std dev = 0,034, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1673900139559767;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.07913955137342672;  // std dev = 0,451, 339,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=242 */
%   | else if ( haswordtitle(B, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.06301531537791184;  // std dev = 3,784, 275,000 (wgt'ed) examples reached here.  /* #neg=260 #pos=15 */
%   | | | else return 0.39056128442284077;  // std dev = 1,619, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( haswordtitle(A, J), haswordauthor(K, J) )
%   | | | then return -0.033995129698230986;  // std dev = 4,619, 412,000 (wgt'ed) examples reached here.  /* #neg=387 #pos=25 */
%   | | | else return 0.06508832354792411;  // std dev = 14,896, 900,000 (wgt'ed) examples reached here.  /* #neg=503 #pos=397 */
%   else return -0.06842697784420265;  // std dev = 5,58e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then if ( samebib(E, F), title(F, B) )
%   | | | then return 0.1921915855699035;  // std dev = 0,190, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.689284688285241;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(G, D), title(G, B) )
%   | | | then return -0.08571327820299567;  // std dev = 0,420, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return 0.05963219222600289;  // std dev = 8,299, 337,000 (wgt'ed) examples reached here.  /* #neg=97 #pos=240 */
%   | else if ( haswordtitle(A, H), haswordauthor(I, H) )
%   | | then if ( haswordvenue(J, H) )
%   | | | then return -0.04517691422787479;  // std dev = 3,802, 385,000 (wgt'ed) examples reached here.  /* #neg=370 #pos=15 */
%   | | | else return 0.07277291739808268;  // std dev = 2,623, 33,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | else if ( haswordtitle(B, K), haswordauthor(L, K) )
%   | | | then return -0.03296932563690833;  // std dev = 4,312, 264,000 (wgt'ed) examples reached here.  /* #neg=239 #pos=25 */
%   | | | else return 0.030030539166488315;  // std dev = 15,155, 942,000 (wgt'ed) examples reached here.  /* #neg=545 #pos=397 */
%   else return -0.06419184008202626;  // std dev = 3,80e-08, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328455;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555361;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46125983910675533;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3488463256948422;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354184;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423433;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.12179491558002796;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081688;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07895233872555124;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.458212
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.704 seconds
Total inference time: 1.334 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.486 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [0.913, 1, 5], 'false': [0.0, 4, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}]]
[{'': [0.1388888888888887, 0.0], 'true': [0.1388888888888887, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888898, 0.0], 'true': [0.13888888888888898, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888887, 0.0], 'true,true,true': [0.13888888888888887, nan], 'true': [0.13888888888888887, nan], 'true,true': [0.13888888888888887, nan]}, {'': [0.13888888888888892, 0.0], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15451336627983223;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12179491558002796;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09745354768081688;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07895233872555124;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.458212
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.641 seconds
Total inference time: 1.306 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.467 seconds
Refined model CLL: -0.302866


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.458212
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.298 seconds
Total inference time: 1.334 seconds
AUC ROC: 0.857618
Total revision time: 2.298
Best scored revision CLL: -0.302866


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 01:23:01
{'Learning time': 2.298, 'Inference time': 1.334, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.458212, 'parameter_5': {'Learning time': 0.704, 'Inference time': 1.334, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.458212, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.983525
   AUC PR    = 0.339394
   CLL	      = -0.130317
   Precision = 0.339394 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.506787


Total learning time: 1.054 seconds
Total inference time: 1.265 seconds
AUC ROC: 0.983525


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 01:23:03
{'Learning time': 1.054, 'Inference time': 1.265, 'AUC ROC': 0.983525, 'AUC PR': 0.339394, 'Recall': 1.0, 'CLL': -0.130317, 'F1': 0.506787, 'Precision': [0.339394, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.983525
   AUC PR    = 0.339394
   CLL	      = -0.159293
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.413 seconds
Total inference time: 0.689 seconds
AUC ROC: 0.983525


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 01:23:05
{'Learning time': 0.413, 'Inference time': 0.689, 'AUC ROC': 0.983525, 'AUC PR': 0.339394, 'Recall': 0.0, 'CLL': -0.159293, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328455;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46125983910675544;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.34884632569484214;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423424;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.12179491558002802;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081678;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0789523387255512;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.458212
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.652 seconds
Total inference time: 1.187 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.497 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [1.291, 2, 10], 'false': [2.63e-09, 8, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [0.1388888888888887, nan]}, {'': [0.13888888888888914, 0.0], 'true': [0.13888888888888914, nan]}, {'': [0.1388888888888891, -1.734723475976807e-18], 'true': [0.1388888888888891, nan]}, {'': [0.138888888888889, 1.734723475976807e-18], 'true': [0.138888888888889, nan]}, {'': [0.1388888888888888, 0.0], 'true': [0.1388888888888888, nan]}, {'': [0.13888888888888892, 1.734723475976807e-18], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888887, 8.673617379884035e-19], 'true,true,true': [0.13888888888888887, nan], 'true': [0.13888888888888887, nan], 'true,true': [0.13888888888888887, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5724346493852266;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.48767788391726297;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3912569620992536;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.34929716702591446;  // std dev = 0,350, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.33575129311675045;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.2141190486849726;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.26540989785253744;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.16079476960844183;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.21696401507493612;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.1214789863382333;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1823642091865354;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.09251766767126691;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1567283142919087;  // std dev = 3,73e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.07101759940083148;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1371100019692656;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.05489173971835447;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.858552
   AUC PR    = 0.056607
   CLL	      = -0.492362
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.229 seconds
Total inference time: 1.399 seconds
AUC ROC: 0.858552


Results scoring model
   AUC ROC   = 0.95
   AUC PR    = 0.947022
   CLL	      = -0.268249
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.503 seconds
Refined model CLL: -0.268249


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.858552
   AUC PR    = 0.056607
   CLL	      = -0.492362
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.8810000000000002 seconds
Total inference time: 1.399 seconds
AUC ROC: 0.858552
Total revision time: 2.8810000000000002
Best scored revision CLL: -0.268249


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 01:23:11
{'Learning time': 2.8810000000000002, 'Inference time': 1.399, 'AUC ROC': 0.858552, 'AUC PR': 0.056607, 'Recall': 1.0, 'CLL': -0.492362, 'parameter_10': {'Learning time': 0.652, 'Inference time': 1.187, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.458212, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.983525
   AUC PR    = 0.339394
   CLL	      = -0.130317
   Precision = 0.339394 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.506787


Total learning time: 1.083 seconds
Total inference time: 1.151 seconds
AUC ROC: 0.983525


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 01:23:13
{'Learning time': 1.083, 'Inference time': 1.151, 'AUC ROC': 0.983525, 'AUC PR': 0.339394, 'Recall': 1.0, 'CLL': -0.130317, 'F1': 0.506787, 'Precision': [0.339394, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.983525
   AUC PR    = 0.339394
   CLL	      = -0.159293
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.532 seconds
Total inference time: 0.812 seconds
AUC ROC: 0.983525


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 01:23:15
{'Learning time': 0.532, 'Inference time': 0.812, 'AUC ROC': 0.983525, 'AUC PR': 0.339394, 'Recall': 0.0, 'CLL': -0.159293, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5724346493852266;  // std dev = 0,452, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.48767788391726324;  // std dev = 0,452, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.39125696209925326;  // std dev = 0,452, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.30057115478848934;  // std dev = 0,452, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22629823971521895;  // std dev = 0,452, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16984358676510142;  // std dev = 0,452, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.1281332068824675;  // std dev = 0,452, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.09743184803714998;  // std dev = 2,070, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07468131696953079;  // std dev = 0,452, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.057651940521137146;  // std dev = 0,452, 21,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.360567
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.865 seconds
Total inference time: 1.427 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.8
   AUC PR    = 0.714286
   CLL	      = -0.440744
   Precision = 0.714286 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.833333


Total scoring time: 0.552 seconds
Parameter learned model CLL: -0.440744


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.452, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.452, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.452, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 9, 0], 'true,true': [0.452, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.452, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 9, 0], 'true,true': [0.452, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.452, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [2.07, 6, 15], 'false': [2.63e-09, 9, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.452, 6, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 9, 0], 'true,true': [0.452, 6, 15]}]]
[{'': [0.20408163265306084, -9.25185853854297e-18], 'true': [0.20408163265306084, nan]}, {'': [0.2040816326530611, 0.0], 'true': [0.2040816326530611, nan]}, {'': [0.20408163265306142, -1.5419764230904951e-18], 'true': [0.20408163265306142, nan]}, {'': [0.20408163265306126, 3.0839528461809902e-18], 'true': [0.20408163265306126, nan]}, {'': [0.20408163265306126, 0.0], 'true': [0.20408163265306126, nan]}, {'': [0.20408163265306123, 1.5419764230904951e-18], 'true': [0.20408163265306123, nan]}, {'': [0.20408163265306117, 0.0], 'true': [0.20408163265306117, nan]}, {'': [0.2040816326530613, 7.709882115452476e-19], 'true,true,true': [0.2040816326530613, nan], 'true': [0.2040816326530613, nan], 'true,true': [0.2040816326530613, nan]}, {'': [0.20408163265306117, 0.0], 'true': [0.20408163265306117, nan]}, {'': [0.20408163265306123, 7.709882115452476e-19], 'true': [0.20408163265306123, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.229 seconds
Total inference time: 1.42 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.536 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.182 seconds
Total inference time: 1.42 seconds
AUC ROC: 1.0
Total revision time: 3.182
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 01:23:22
{'Learning time': 3.182, 'Inference time': 1.42, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.063421, 'parameter_15': {'Learning time': 0.865, 'Inference time': 1.427, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.360567, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'F1': 1.0, 'Precision': [1.0, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.983525
   AUC PR    = 0.339394
   CLL	      = -0.130317
   Precision = 0.339394 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.506787


Total learning time: 1.237 seconds
Total inference time: 1.084 seconds
AUC ROC: 0.983525


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 01:23:24
{'Learning time': 1.237, 'Inference time': 1.084, 'AUC ROC': 0.983525, 'AUC PR': 0.339394, 'Recall': 1.0, 'CLL': -0.130317, 'F1': 0.506787, 'Precision': [0.339394, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.983525
   AUC PR    = 0.339394
   CLL	      = -0.159293
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.556 seconds
Total inference time: 0.869 seconds
AUC ROC: 0.983525


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 01:23:26
{'Learning time': 0.556, 'Inference time': 0.869, 'AUC ROC': 0.983525, 'AUC PR': 0.339394, 'Recall': 0.0, 'CLL': -0.159293, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.572434649385226;  // std dev = 0,452, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.48767788391726324;  // std dev = 0,452, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.39125696209925315;  // std dev = 0,452, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3005711547884899;  // std dev = 0,452, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22629823971521892;  // std dev = 0,452, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1698435867651014;  // std dev = 0,452, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.12813320688246746;  // std dev = 0,452, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.09743184803714998;  // std dev = 2,390, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0746813169695307;  // std dev = 0,452, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.05765194052113715;  // std dev = 0,452, 28,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.360567
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.913 seconds
Total inference time: 1.345 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.8
   AUC PR    = 0.714286
   CLL	      = -0.440744
   Precision = 0.714286 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.833333


Total scoring time: 0.603 seconds
Parameter learned model CLL: -0.440744


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 12, 0], 'true,true': [0.452, 8, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 12, 0], 'true,true': [0.452, 8, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 12, 0], 'true,true': [0.452, 8, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 12, 0], 'true,true': [0.452, 8, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 12, 0], 'true,true': [0.452, 8, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 12, 0], 'true,true': [0.452, 8, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 12, 0], 'true,true': [0.452, 8, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [2.39, 8, 20], 'false': [3.73e-09, 12, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 12, 0], 'true,true': [0.452, 8, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.89e-09, 12, 0], 'true,true': [0.452, 8, 20]}]]
[{'': [0.20408163265306145, -1.1564823173178714e-17], 'true': [0.20408163265306145, nan]}, {'': [0.20408163265306103, 2.3129646346357427e-18], 'true': [0.20408163265306103, nan]}, {'': [0.20408163265306167, 6.938893903907228e-18], 'true': [0.20408163265306167, nan]}, {'': [0.20408163265306126, 0.0], 'true': [0.20408163265306126, nan]}, {'': [0.2040816326530612, 2.3129646346357427e-18], 'true': [0.2040816326530612, nan]}, {'': [0.20408163265306128, 2.3129646346357427e-18], 'true': [0.20408163265306128, nan]}, {'': [0.2040816326530612, 1.1564823173178713e-18], 'true': [0.2040816326530612, nan]}, {'': [0.2040816326530613, 1.1564823173178713e-18], 'true,true,true': [0.2040816326530613, nan], 'true': [0.2040816326530613, nan], 'true,true': [0.2040816326530613, nan]}, {'': [0.20408163265306123, 5.782411586589357e-19], 'true': [0.20408163265306123, nan]}, {'': [0.20408163265306123, 2.8912057932946786e-18], 'true': [0.20408163265306123, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.36 seconds
Total inference time: 1.373 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.517 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.3930000000000002 seconds
Total inference time: 1.373 seconds
AUC ROC: 1.0
Total revision time: 3.3930000000000002
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 01:23:32
{'Learning time': 3.3930000000000002, 'Inference time': 1.373, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.063421, 'parameter_20': {'Learning time': 0.913, 'Inference time': 1.345, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.360567, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'F1': 1.0, 'Precision': [1.0, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.14185106490048777;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926094;  // std dev = 1,05e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839683;  // std dev = 1,29e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.21735479879639094;  // std dev = 0,107, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.21229267678104322;  // std dev = 0,014, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08002397748989828;  // std dev = 0,024, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.17895523938924032;  // std dev = 0,012, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.0743292434388203;  // std dev = 0,023, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.1541535580647991;  // std dev = 0,011, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.0693758771339343;  // std dev = 0,021, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.13510736926991215;  // std dev = 0,010, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.0650298486108755;  // std dev = 0,020, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.98376
   AUC PR    = 0.343975
   CLL	      = -0.129786
   Precision = 0.339394 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.506787


Total learning time: 1.338 seconds
Total inference time: 1.091 seconds
AUC ROC: 0.98376


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 01:23:35
{'Learning time': 1.338, 'Inference time': 1.091, 'AUC ROC': 0.98376, 'AUC PR': 0.343975, 'Recall': 1.0, 'CLL': -0.129786, 'F1': 0.506787, 'Precision': [0.339394, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.14185106490048777;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.983525
   AUC PR    = 0.339394
   CLL	      = -0.159293
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.544 seconds
Total inference time: 0.821 seconds
AUC ROC: 0.983525


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 01:23:37
{'Learning time': 0.544, 'Inference time': 0.821, 'AUC ROC': 0.983525, 'AUC PR': 0.339394, 'Recall': 0.0, 'CLL': -0.159293, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5525933795439559;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.47129505638258123;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.37928590695965536;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.29236919621330726;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22053484095854584;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1654573902134103;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.12452174624659694;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.0943022748524754;  // std dev = 2,764, 36,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0719005646610041;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.05515986769940717;  // std dev = 0,461, 36,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.346475
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.969 seconds
Total inference time: 1.537 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.78
   AUC PR    = 0.694444
   CLL	      = -0.463547
   Precision = 0.694444 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.819672


Total scoring time: 0.583 seconds
Parameter learned model CLL: -0.463547


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 14, 0], 'true,true': [0.461, 11, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 14, 0], 'true,true': [0.461, 11, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 14, 0], 'true,true': [0.461, 11, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 14, 0], 'true,true': [0.461, 11, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 14, 0], 'true,true': [0.461, 11, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [8.33e-09, 14, 0], 'true,true': [0.461, 11, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 14, 0], 'true,true': [0.461, 11, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [2.764, 11, 25], 'false': [3.73e-09, 14, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 14, 0], 'true,true': [0.461, 11, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.97e-09, 14, 0], 'true,true': [0.461, 11, 25]}]]
[{'': [0.21219135802469255, -1.1895246692412391e-17], 'true': [0.21219135802469255, nan]}, {'': [0.21219135802469105, 3.96508223080413e-18], 'true': [0.21219135802469105, nan]}, {'': [0.21219135802469116, 9.912705577010326e-18], 'true': [0.21219135802469116, nan]}, {'': [0.21219135802469108, -3.96508223080413e-18], 'true': [0.21219135802469108, nan]}, {'': [0.21219135802469113, 3.96508223080413e-18], 'true': [0.21219135802469113, nan]}, {'': [0.21219135802469144, 4.956352788505163e-18], 'true': [0.21219135802469144, nan]}, {'': [0.21219135802469122, -9.912705577010326e-19], 'true': [0.21219135802469122, nan]}, {'': [0.21219135802469136, 9.912705577010326e-19], 'true,true,true': [0.21219135802469136, nan], 'true': [0.21219135802469136, nan], 'true,true': [0.21219135802469136, nan]}, {'': [0.21219135802469133, 9.912705577010326e-19], 'true': [0.21219135802469133, nan]}, {'': [0.21219135802469127, 3.469446951953614e-18], 'true': [0.21219135802469127, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.397 seconds
Total inference time: 1.476 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.528 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063421
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.477 seconds
Total inference time: 1.476 seconds
AUC ROC: 1.0
Total revision time: 3.477
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 01:23:44
{'Learning time': 3.477, 'Inference time': 1.476, 'parameter_25': {'Learning time': 0.969, 'Inference time': 1.537, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.346475, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.063421, 'F1': 1.0, 'Precision': [1.0, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360639;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783635;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.09269127618926096;  // std dev = 9,13e-09, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839683;  // std dev = 1,58e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109176;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420276;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06419184008202622;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */


Results
   AUC ROC   = 0.983525
   AUC PR    = 0.339394
   CLL	      = -0.130317
   Precision = 0.339394 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.506787


Total learning time: 1.251 seconds
Total inference time: 1.11 seconds
AUC ROC: 0.983525


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 01:23:46
{'Learning time': 1.251, 'Inference time': 1.11, 'AUC ROC': 0.983525, 'AUC PR': 0.339394, 'Recall': 1.0, 'CLL': -0.130317, 'F1': 0.506787, 'Precision': [0.339394, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */


Results
   AUC ROC   = 0.983525
   AUC PR    = 0.339394
   CLL	      = -0.159293
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.611 seconds
Total inference time: 0.838 seconds
AUC ROC: 0.983525


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 01:23:48
{'Learning time': 0.611, 'Inference time': 0.838, 'AUC ROC': 0.983525, 'AUC PR': 0.339394, 'Recall': 0.0, 'CLL': -0.159293, 'F1': nan, 'Precision': [nan, 0.5]}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328455;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555361;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46125983910675533;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3488463256948422;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354184;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423433;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.12179491558002796;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081688;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07895233872555124;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.429317
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.793 seconds
Total inference time: 1.66 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.492 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [0.913, 1, 5], 'false': [0.0, 4, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}]]
[{'': [0.1388888888888887, 0.0], 'true': [0.1388888888888887, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888898, 0.0], 'true': [0.13888888888888898, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888887, 0.0], 'true,true,true': [0.13888888888888887, nan], 'true': [0.13888888888888887, nan], 'true,true': [0.13888888888888887, nan]}, {'': [0.13888888888888892, 0.0], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15451336627983223;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12179491558002796;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09745354768081688;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07895233872555124;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.429317
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.668 seconds
Total inference time: 1.151 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.476 seconds
Refined model CLL: -0.302866


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.429317
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.4290000000000003 seconds
Total inference time: 1.66 seconds
AUC ROC: 0.868098
Total revision time: 2.4290000000000003
Best scored revision CLL: -0.302866


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 01:23:54
{'Learning time': 2.4290000000000003, 'Inference time': 1.66, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.429317, 'parameter_5': {'Learning time': 0.793, 'Inference time': 1.66, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.429317, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6056364498471037;  // std dev = 0,801, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.15612031201574286;  // std dev = 0,106, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4845912943420874;  // std dev = 0,759, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.13701473982051887;  // std dev = 0,096, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14726242728701588;  // std dev = 0,175, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.38755131270767945;  // std dev = 0,641, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.13069242947318732;  // std dev = 0,160, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.29623661057414924;  // std dev = 0,616, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.24221489086665268;  // std dev = 0,533, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.13818278300855044;  // std dev = 0,219, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1909477009467079;  // std dev = 0,529, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12398127764140526;  // std dev = 0,201, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12716513372863272;  // std dev = 0,237, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.162844788542252;  // std dev = 0,477, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13309504077101025;  // std dev = 0,480, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11562152024706876;  // std dev = 0,220, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11844933513460962;  // std dev = 0,249, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.11850265039157866;  // std dev = 0,439, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.147399
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.031 seconds
Total inference time: 1.168 seconds
AUC ROC: 0.999416


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 01:23:56
{'Learning time': 1.031, 'Inference time': 1.168, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.147399, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.973999
   AUC PR    = 0.245763
   CLL	      = -0.162759
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.493 seconds
Total inference time: 0.827 seconds
AUC ROC: 0.973999


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 01:23:58
{'Learning time': 0.493, 'Inference time': 0.827, 'AUC ROC': 0.973999, 'AUC PR': 0.245763, 'Recall': 0.0, 'CLL': -0.162759, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328455;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46125983910675544;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.34884632569484214;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423424;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.12179491558002802;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081678;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0789523387255512;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.429317
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.841 seconds
Total inference time: 1.353 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.514 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [1.291, 2, 10], 'false': [2.63e-09, 8, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [0.1388888888888887, nan]}, {'': [0.13888888888888914, 0.0], 'true': [0.13888888888888914, nan]}, {'': [0.1388888888888891, -1.734723475976807e-18], 'true': [0.1388888888888891, nan]}, {'': [0.138888888888889, 1.734723475976807e-18], 'true': [0.138888888888889, nan]}, {'': [0.1388888888888888, 0.0], 'true': [0.1388888888888888, nan]}, {'': [0.13888888888888892, 1.734723475976807e-18], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888887, 8.673617379884035e-19], 'true,true,true': [0.13888888888888887, nan], 'true': [0.13888888888888887, nan], 'true,true': [0.13888888888888887, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6359267128772901;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5398498420741675;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4289562725350853;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.32644004768013724;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.24503149911444544;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.18482045881522163;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1410881440687913;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.10912169797108993;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.08540523411308514;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.0675192639640355;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.871367
   AUC PR    = 0.062774
   CLL	      = -0.453013
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.185 seconds
Total inference time: 1.501 seconds
AUC ROC: 0.871367


Results scoring model
   AUC ROC   = 0.93
   AUC PR    = 0.917057
   CLL	      = -0.285756
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.496 seconds
Refined model CLL: -0.285756


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.871367
   AUC PR    = 0.062774
   CLL	      = -0.453013
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 3.036 seconds
Total inference time: 1.501 seconds
AUC ROC: 0.871367
Total revision time: 3.036
Best scored revision CLL: -0.285756


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 01:24:04
{'Learning time': 3.036, 'Inference time': 1.501, 'AUC ROC': 0.871367, 'AUC PR': 0.062774, 'Recall': 1.0, 'CLL': -0.453013, 'parameter_10': {'Learning time': 0.841, 'Inference time': 1.353, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.429317, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( female(A) )
%   | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7670719622367216;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5507882248174403;  // std dev = 0,361, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( female(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.20479168731561626;  // std dev = 0,099, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.6046262796882593;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.44279004419246637;  // std dev = 0,343, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( actor(A), actor(B) )
%   | then return -0.11078217499985168;  // std dev = 0,007, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.17654731478988925;  // std dev = 0,080, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.09939460829240924;  // std dev = 0,006, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.17156387887863328;  // std dev = 0,197, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return 0.298428729900476;  // std dev = 0,543, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.42973622260012934;  // std dev = 0,234, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.09084571083292457;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.1496554053187599;  // std dev = 0,176, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return 0.23238367563243076;  // std dev = 0,521, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.3271728616749504;  // std dev = 0,224, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3294531129412588;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2121625564095778;  // std dev = 0,231, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( female(B) )
%   | then return -0.07889548887811396;  // std dev = 0,013, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.22468303631504175;  // std dev = 0,185, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.0746366549589384;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.14462258976395864;  // std dev = 0,207, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.1922704299815263;  // std dev = 0,200, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.22576459523158243;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.14462420991135394;  // std dev = 0,201, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( female(B) )
%   | then return -0.06598125765931255;  // std dev = 0,016, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.21377682657782124;  // std dev = 0,195, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.06302722986464396;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.13719041174062135;  // std dev = 0,220, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return 0.08753923156615345;  // std dev = 0,351, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.16232010806132896;  // std dev = 0,168, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1757100794704176;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1028173749169589;  // std dev = 0,179, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( actor(A), actor(B) )
%   | then return -0.056000485530364255;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.19815278122707577;  // std dev = 0,194, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.149384
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.84 seconds
Total inference time: 1.305 seconds
AUC ROC: 0.999617


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 01:24:08
{'Learning time': 1.84, 'Inference time': 1.305, 'AUC ROC': 0.999617, 'AUC PR': 0.971227, 'Recall': 1.0, 'CLL': -0.149384, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( female(A) )
%   | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */


Results
   AUC ROC   = 0.972045
   AUC PR    = 0.229945
   CLL	      = -0.162898
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.618 seconds
Total inference time: 0.816 seconds
AUC ROC: 0.972045


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 01:24:09
{'Learning time': 0.618, 'Inference time': 0.816, 'AUC ROC': 0.972045, 'AUC PR': 0.229945, 'Recall': 0.0, 'CLL': -0.162898, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328457;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46125983910675533;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3488463256948421;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1994526427642342;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.12179491558002797;  // std dev = 1,581, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081678;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07895233872555117;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.429317
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.859 seconds
Total inference time: 1.34 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.523 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [1.581, 3, 15], 'false': [3.73e-09, 12, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.89e-09, 12, 0], 'true,true': [0.373, 3, 15]}]]
[{'': [0.1388888888888886, -1.1564823173178714e-17], 'true': [0.1388888888888886, nan]}, {'': [0.13888888888888898, 2.3129646346357427e-18], 'true': [0.13888888888888898, nan]}, {'': [0.1388888888888892, 6.938893903907228e-18], 'true': [0.1388888888888892, nan]}, {'': [0.1388888888888891, 0.0], 'true': [0.1388888888888891, nan]}, {'': [0.13888888888888884, 2.3129646346357427e-18], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888895, 2.3129646346357427e-18], 'true': [0.13888888888888895, nan]}, {'': [0.13888888888888884, 1.1564823173178713e-18], 'true': [0.13888888888888884, nan]}, {'': [0.1388888888888889, 1.1564823173178713e-18], 'true,true,true': [0.1388888888888889, nan], 'true': [0.1388888888888889, nan], 'true,true': [0.1388888888888889, nan]}, {'': [0.1388888888888889, 5.782411586589357e-19], 'true': [0.1388888888888889, nan]}, {'': [0.1388888888888889, 2.8912057932946786e-18], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(B) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(B) )
%   | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.185443
   Precision = 0.088957 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.16338


Total learning time: 1.154 seconds
Total inference time: 1.527 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.556 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.185443
   Precision = 0.088957 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.16338


Total learning time: 3.092 seconds
Total inference time: 1.527 seconds
AUC ROC: 0.999416
Total revision time: 3.092
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 01:24:16
{'Learning time': 3.092, 'Inference time': 1.527, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.185443, 'parameter_15': {'Learning time': 0.859, 'Inference time': 1.34, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.429317, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'F1': 0.16338, 'Precision': [0.088957, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.465 seconds
Total inference time: 1.131 seconds
AUC ROC: 0.999416


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 01:24:19
{'Learning time': 1.465, 'Inference time': 1.131, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.065794, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.153209
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.602 seconds
Total inference time: 0.825 seconds
AUC ROC: 0.999416


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 01:24:20
{'Learning time': 0.602, 'Inference time': 0.825, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 0.0, 'CLL': -0.153209, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6581489350995119;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4419486100244409;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3354113949509431;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.25176837314502193;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1904796103243717;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.14620194507639978;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.11389369465607484;  // std dev = 2,000, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08989956180301853;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07174810215160449;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.401764
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.894 seconds
Total inference time: 1.566 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.341891
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total scoring time: 0.55 seconds
Parameter learned model CLL: -0.341891


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.39e-08, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [2.0, 5, 20], 'false': [3.73e-09, 15, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.9e-09, 15, 0], 'true,true': [0.4, 5, 20]}]]
[{'': [0.16000000000000014, -1.4802973661668754e-17], 'true': [0.16000000000000014, nan]}, {'': [0.15999999999999975, 3.7007434154171884e-18], 'true': [0.15999999999999975, nan]}, {'': [0.16000000000000014, 1.295260195396016e-17], 'true': [0.16000000000000014, nan]}, {'': [0.16000000000000036, -5.551115123125783e-18], 'true': [0.16000000000000036, nan]}, {'': [0.16, 3.7007434154171884e-18], 'true': [0.16, nan]}, {'': [0.16000000000000006, 5.551115123125783e-18], 'true': [0.16000000000000006, nan]}, {'': [0.15999999999999998, -1.8503717077085942e-18], 'true': [0.15999999999999998, nan]}, {'': [0.15999999999999998, 9.251858538542971e-19], 'true,true,true': [0.15999999999999998, nan], 'true': [0.15999999999999998, nan], 'true,true': [0.15999999999999998, nan]}, {'': [0.15999999999999998, 9.251858538542971e-19], 'true': [0.15999999999999998, nan]}, {'': [0.16, 4.163336342344337e-18], 'true': [0.16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.289 seconds
Total inference time: 1.445 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.513 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.2459999999999996 seconds
Total inference time: 1.445 seconds
AUC ROC: 0.999416
Total revision time: 3.2459999999999996
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 01:24:27
{'Learning time': 3.2459999999999996, 'Inference time': 1.445, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.065794, 'parameter_20': {'Learning time': 0.894, 'Inference time': 1.566, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.401764, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.4 seconds
Total inference time: 1.207 seconds
AUC ROC: 0.999416


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 01:24:30
{'Learning time': 1.4, 'Inference time': 1.207, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.065794, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.153209
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.638 seconds
Total inference time: 0.839 seconds
AUC ROC: 0.999416


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 01:24:32
{'Learning time': 0.638, 'Inference time': 0.839, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 0.0, 'CLL': -0.153209, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6393989350995116;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5426919143120583;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.43099286828776007;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.32784349372229826;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783635;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24607639161015318;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926093;  // std dev = 1,05e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.18568882989429153;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839683;  // std dev = 1,18e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.1418657924041094;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109179;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.10984242247455098;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08608032379653505;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420274;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.06815142566519763;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.38708
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.958 seconds
Total inference time: 1.332 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.86
   AUC PR    = 0.78125
   CLL	      = -0.363647
   Precision = 0.78125 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.877193


Total scoring time: 0.578 seconds
Parameter learned model CLL: -0.363647


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.67e-08, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [2.339, 7, 25], 'false': [0.0, 18, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.45e-09, 18, 0], 'true,true': [0.413, 7, 25]}]]
[{'': [0.1708984375000011, -3.0839528461809902e-18], 'true': [0.1708984375000011, nan]}, {'': [0.17089843749999933, 0.0], 'true': [0.17089843749999933, nan]}, {'': [0.17089843750000042, 1.5419764230904953e-17], 'true': [0.17089843750000042, nan]}, {'': [0.17089843749999994, -4.625929269271485e-18], 'true': [0.17089843749999994, nan]}, {'': [0.1708984375, 6.1679056923619804e-18], 'true': [0.1708984375, nan]}, {'': [0.1708984375, 7.709882115452476e-18], 'true': [0.1708984375, nan]}, {'': [0.17089843749999994, 0.0], 'true': [0.17089843749999994, nan]}, {'': [0.17089843750000006, -7.709882115452476e-19], 'true,true,true': [0.17089843750000006, nan], 'true': [0.17089843750000006, nan], 'true,true': [0.17089843750000006, nan]}, {'': [0.17089843749999997, -1.5419764230904951e-18], 'true': [0.17089843749999997, nan]}, {'': [0.17089843750000003, 2.3129646346357427e-18], 'true': [0.17089843750000003, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.10159632948783635;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.09269127618926093;  // std dev = 1,05e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839683;  // std dev = 1,18e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109179;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420274;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.372 seconds
Total inference time: 1.471 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.53 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.4380000000000006 seconds
Total inference time: 1.471 seconds
AUC ROC: 0.999416
Total revision time: 3.4380000000000006
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 01:24:39
{'Learning time': 3.4380000000000006, 'Inference time': 1.471, 'parameter_25': {'Learning time': 0.958, 'Inference time': 1.332, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.38708, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.065794, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783634;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926103;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839683;  // std dev = 1,49e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109179;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420275;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 5,27e-09, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.558 seconds
Total inference time: 1.287 seconds
AUC ROC: 0.999416


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 01:24:42
{'Learning time': 1.558, 'Inference time': 1.287, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.065794, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.153209
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.65 seconds
Total inference time: 0.832 seconds
AUC ROC: 0.999416


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 01:24:43
{'Learning time': 0.65, 'Inference time': 0.832, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 0.0, 'CLL': -0.153209, 'F1': nan, 'Precision': [nan, 0.5]}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328455;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555361;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46125983910675533;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3488463256948422;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354184;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423433;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.12179491558002796;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081688;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07895233872555124;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.370681
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.799 seconds
Total inference time: 1.487 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.534 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [0.913, 1, 5], 'false': [0.0, 4, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}]]
[{'': [0.1388888888888887, 0.0], 'true': [0.1388888888888887, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888898, 0.0], 'true': [0.13888888888888898, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888887, 0.0], 'true,true,true': [0.13888888888888887, nan], 'true': [0.13888888888888887, nan], 'true,true': [0.13888888888888887, nan]}, {'': [0.13888888888888892, 0.0], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15451336627983223;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12179491558002796;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09745354768081688;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07895233872555124;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.370681
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.629 seconds
Total inference time: 1.388 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.508 seconds
Refined model CLL: -0.302866


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.370681
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 2.47 seconds
Total inference time: 1.487 seconds
AUC ROC: 0.888089
Total revision time: 2.47
Best scored revision CLL: -0.302866


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 01:24:49
{'Learning time': 2.47, 'Inference time': 1.487, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.370681, 'parameter_5': {'Learning time': 0.799, 'Inference time': 1.487, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.370681, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6056364498471037;  // std dev = 0,801, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.15612031201574286;  // std dev = 0,106, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4845912943420874;  // std dev = 0,759, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.13701473982051887;  // std dev = 0,096, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14726242728701588;  // std dev = 0,175, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.38755131270767945;  // std dev = 0,641, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.13069242947318732;  // std dev = 0,160, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.29623661057414924;  // std dev = 0,616, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.24221489086665268;  // std dev = 0,533, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.13818278300855044;  // std dev = 0,219, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.1909477009467079;  // std dev = 0,529, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12398127764140526;  // std dev = 0,201, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12716513372863272;  // std dev = 0,237, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.162844788542252;  // std dev = 0,477, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(A), director(B) )
%   then return 0.22071486925335349;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.045475212288667057;  // std dev = 0,429, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.11562152024706876;  // std dev = 0,220, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1136501591054053;  // std dev = 0,232, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.1164843611050751;  // std dev = 0,438, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.99252
   AUC PR    = 0.872151
   CLL	      = -0.23154
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.041 seconds
Total inference time: 1.23 seconds
AUC ROC: 0.99252


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 01:24:52
{'Learning time': 1.041, 'Inference time': 1.23, 'AUC ROC': 0.99252, 'AUC PR': 0.872151, 'Recall': 1.0, 'CLL': -0.23154, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.231676
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.516 seconds
Total inference time: 0.855 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 01:24:53
{'Learning time': 0.516, 'Inference time': 0.855, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 0.0, 'CLL': -0.231676, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6465415686654066;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5044629797645588;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.37956420580342304;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2871467034260754;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.22234379807937285;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.17659966289556142;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.14344282165366493;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11869034739602338;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09970391597144293;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.425918
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.847 seconds
Total inference time: 1.321 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.95
   AUC PR    = 0.909091
   CLL	      = -0.211616
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.506 seconds
Parameter learned model CLL: -0.211616


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [0.953, 1, 10], 'false': [2.63e-09, 9, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 9, 0], 'true,true': [0.287, 1, 10]}]]
[{'': [0.0826446280991734, -9.25185853854297e-18], 'true': [0.0826446280991734, nan]}, {'': [0.08264462809917372, 0.0], 'true': [0.08264462809917372, nan]}, {'': [0.08264462809917372, -1.5419764230904951e-18], 'true': [0.08264462809917372, nan]}, {'': [0.08264462809917356, 3.0839528461809902e-18], 'true': [0.08264462809917356, nan]}, {'': [0.08264462809917347, 0.0], 'true': [0.08264462809917347, nan]}, {'': [0.08264462809917356, 1.5419764230904951e-18], 'true': [0.08264462809917356, nan]}, {'': [0.08264462809917356, 0.0], 'true': [0.08264462809917356, nan]}, {'': [0.08264462809917358, 7.709882115452476e-19], 'true,true,true': [0.08264462809917358, nan], 'true': [0.08264462809917358, nan], 'true,true': [0.08264462809917358, nan]}, {'': [0.08264462809917356, 0.0], 'true': [0.08264462809917356, nan]}, {'': [0.08264462809917356, 7.709882115452476e-19], 'true': [0.08264462809917356, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.7518526675222027;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5582032880961626;  // std dev = 0,883, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.42922884108840886;  // std dev = 0,871, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.5947526002045307;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.4818670116477727;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.29455484756965933;  // std dev = 0,837, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.21348772229712543;  // std dev = 0,829, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.376211549843363;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.31692954604034207;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.14473348224582133;  // std dev = 0,811, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.10551183708280408;  // std dev = 0,806, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.2637428825870821;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.23319457517507347;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.07080819343050941;  // std dev = 0,794, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.05009389974902626;  // std dev = 0,789, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.20405252211166958;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.1863887131016102;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.03059346083687081;  // std dev = 0,779, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.961332
   AUC PR    = 0.696032
   CLL	      = -0.393456
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.089 seconds
Total inference time: 1.814 seconds
AUC ROC: 0.961332


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.175889
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.522 seconds
Refined model CLL: -0.175889


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.961332
   AUC PR    = 0.696032
   CLL	      = -0.393456
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 2.9640000000000004 seconds
Total inference time: 1.814 seconds
AUC ROC: 0.961332
Total revision time: 2.9640000000000004
Best scored revision CLL: -0.175889


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 01:25:00
{'Learning time': 2.9640000000000004, 'Inference time': 1.814, 'AUC ROC': 0.961332, 'AUC PR': 0.696032, 'Recall': 1.0, 'CLL': -0.393456, 'parameter_10': {'Learning time': 0.847, 'Inference time': 1.321, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.425918, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5786537370877302;  // std dev = 0,771, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.7518526675222027;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.13907827118943647;  // std dev = 0,116, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.5898141960184213;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.45624056019808007;  // std dev = 0,723, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12342562080619812;  // std dev = 0,106, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.13073724141217435;  // std dev = 0,172, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.09936009366083205;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return 0.4435870016513729;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3621964226218779;  // std dev = 0,619, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.23844346345123754;  // std dev = 0,548, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.38656555974365725;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( female(A) )
%   | then return -0.0882580413402351;  // std dev = 2,63e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.13491426779754329;  // std dev = 0,153, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.11953878173542905;  // std dev = 0,209, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.08027405157203472;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return 0.2872767144228725;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.20954569603604267;  // std dev = 0,494, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.10828882534585482;  // std dev = 0,194, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07454356289923783;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return 0.23220109921943144;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.16774938146340915;  // std dev = 0,493, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.11721732059112444;  // std dev = 0,417, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.22694674459342412;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( female(A) )
%   | then return -0.0659164506442822;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.13148320723856924;  // std dev = 0,215, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.09862859635064584;  // std dev = 0,422, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.18960492651145844;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( female(A) )
%   | then return -0.06197216461683609;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.1185078017930371;  // std dev = 0,197, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(A) )
%   | then return -0.09999293219211687;  // std dev = 0,227, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.05502151123679002;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return 0.16192544325776725;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.09085300747828723;  // std dev = 0,391, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.99252
   AUC PR    = 0.872151
   CLL	      = -0.272212
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.369 seconds
Total inference time: 1.397 seconds
AUC ROC: 0.99252


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 01:25:03
{'Learning time': 1.369, 'Inference time': 1.397, 'AUC ROC': 0.99252, 'AUC PR': 0.872151, 'Recall': 1.0, 'CLL': -0.272212, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.891758
   AUC PR    = 0.203944
   CLL	      = -0.232375
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.586 seconds
Total inference time: 0.877 seconds
AUC ROC: 0.891758


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 01:25:05
{'Learning time': 0.586, 'Inference time': 0.877, 'AUC ROC': 0.891758, 'AUC PR': 0.203944, 'Recall': 0.0, 'CLL': -0.232375, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.7405018762759829;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6249475655895571;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4893127157293236;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3686658221249617;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.27804969755906545;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.21383763039487166;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.16826633465571472;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.13518176386613595;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11050708250003544;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09163300171566749;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.40534
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.863 seconds
Total inference time: 1.421 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.933333
   AUC PR    = 0.882353
   CLL	      = -0.244323
   Precision = 0.882353 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9375


Total scoring time: 0.562 seconds
Parameter learned model CLL: -0.244323


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [1.328, 2, 15], 'false': [0.0, 13, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.97e-09, 13, 0], 'true,true': [0.322, 2, 15]}]]
[{'': [0.10380622837370206, -1.2810265668751807e-17], 'true': [0.10380622837370206, nan]}, {'': [0.10380622837370226, 4.270088556250602e-18], 'true': [0.10380622837370226, nan]}, {'': [0.10380622837370232, 8.540177112501205e-18], 'true': [0.10380622837370232, nan]}, {'': [0.10380622837370244, -2.135044278125301e-18], 'true': [0.10380622837370244, nan]}, {'': [0.10380622837370246, 2.135044278125301e-18], 'true': [0.10380622837370246, nan]}, {'': [0.10380622837370239, 4.270088556250602e-18], 'true': [0.10380622837370239, nan]}, {'': [0.10380622837370244, 1.0675221390626506e-18], 'true': [0.10380622837370244, nan]}, {'': [0.10380622837370246, 0.0], 'true,true,true': [0.10380622837370246, nan], 'true': [0.10380622837370246, nan], 'true,true': [0.10380622837370246, nan]}, {'': [0.10380622837370243, 5.337610695313253e-19], 'true': [0.10380622837370243, nan]}, {'': [0.10380622837370243, 3.736327486719277e-18], 'true': [0.10380622837370243, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.6359267128772901;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5398498420741675;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4289562725350853;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.320974549240982;  // std dev = 0,273, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.42366226990235945;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.3420969658276638;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.22375551733006205;  // std dev = 0,410, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.269716718326672;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.1693676837404798;  // std dev = 0,411, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.12588598186669028;  // std dev = 0,266, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.2244362169519798;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.19914240118932958;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.08293761777502469;  // std dev = 0,407, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.16927061289767353;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.0656562176266766;  // std dev = 0,407, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.14678081991487457;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.05239726051962669;  // std dev = 0,407, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.961332
   AUC PR    = 0.696032
   CLL	      = -0.334277
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.333 seconds
Total inference time: 1.445 seconds
AUC ROC: 0.961332


Results scoring model
   AUC ROC   = 0.984444
   AUC PR    = 0.982174
   CLL	      = -0.21917
   Precision = 0.882353 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9375


Total scoring time: 0.525 seconds
Refined model CLL: -0.21917


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.961332
   AUC PR    = 0.696032
   CLL	      = -0.334277
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 3.283 seconds
Total inference time: 1.445 seconds
AUC ROC: 0.961332
Total revision time: 3.283
Best scored revision CLL: -0.21917


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 01:25:12
{'Learning time': 3.283, 'Inference time': 1.445, 'AUC ROC': 0.961332, 'AUC PR': 0.696032, 'Recall': 1.0, 'CLL': -0.334277, 'parameter_15': {'Learning time': 0.863, 'Inference time': 1.421, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.40534, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.6189976143448207;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4851287515461648;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.41751358415830986;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.35906479069505287;  // std dev = 0,246, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( female(A) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.1598422461889383;  // std dev = 0,143, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2695918402146211;  // std dev = 0,145, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.3344969633907706;  // std dev = 0,179, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( female(A) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.14240607254099352;  // std dev = 0,133, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.26500905027964294;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2128459857979691;  // std dev = 0,210, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( female(A) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.12813993876334664;  // std dev = 0,125, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09358402602082182;  // std dev = 0,184, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.2166827882573194;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.19476634479254534;  // std dev = 0,226, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.14049326474069565;  // std dev = 0,118, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.18688711952876247;  // std dev = 0,147, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( female(A) )
%   | then return -0.07224741994217089;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.11816405266749937;  // std dev = 0,136, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.05995745282578596;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return -0.09223494594913195;  // std dev = 0,135, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.09194213819132438;  // std dev = 0,160, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return 0.1621551548191451;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.1309995371641845;  // std dev = 0,209, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.1413121170555498;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.10042208705323952;  // std dev = 0,166, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( female(A) )
%   | then return -0.06228604336248894;  // std dev = 0,002, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.10940130999185402;  // std dev = 0,141, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.99252
   AUC PR    = 0.872151
   CLL	      = -0.280185
   Precision = 0.301184 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.462939


Total learning time: 1.867 seconds
Total inference time: 1.615 seconds
AUC ROC: 0.99252


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 01:25:15
{'Learning time': 1.867, 'Inference time': 1.615, 'AUC ROC': 0.99252, 'AUC PR': 0.872151, 'Recall': 1.0, 'CLL': -0.280185, 'F1': 0.462939, 'Precision': [0.301184, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */


Results
   AUC ROC   = 0.891758
   AUC PR    = 0.203944
   CLL	      = -0.23336
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.625 seconds
Total inference time: 0.87 seconds
AUC ROC: 0.891758


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 01:25:17
{'Learning time': 0.625, 'Inference time': 0.87, 'AUC ROC': 0.891758, 'AUC PR': 0.203944, 'Recall': 0.0, 'CLL': -0.23336, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6581489350995119;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4419486100244409;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3354113949509431;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.25176837314502193;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1904796103243717;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.14620194507639978;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.11389369465607484;  // std dev = 2,000, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08989956180301853;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07174810215160449;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.349243
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.874 seconds
Total inference time: 1.474 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.341891
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total scoring time: 0.535 seconds
Parameter learned model CLL: -0.341891


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.39e-08, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [2.0, 5, 20], 'false': [3.73e-09, 15, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.9e-09, 15, 0], 'true,true': [0.4, 5, 20]}]]
[{'': [0.16000000000000014, -1.4802973661668754e-17], 'true': [0.16000000000000014, nan]}, {'': [0.15999999999999975, 3.7007434154171884e-18], 'true': [0.15999999999999975, nan]}, {'': [0.16000000000000014, 1.295260195396016e-17], 'true': [0.16000000000000014, nan]}, {'': [0.16000000000000036, -5.551115123125783e-18], 'true': [0.16000000000000036, nan]}, {'': [0.16, 3.7007434154171884e-18], 'true': [0.16, nan]}, {'': [0.16000000000000006, 5.551115123125783e-18], 'true': [0.16000000000000006, nan]}, {'': [0.15999999999999998, -1.8503717077085942e-18], 'true': [0.15999999999999998, nan]}, {'': [0.15999999999999998, 9.251858538542971e-19], 'true,true,true': [0.15999999999999998, nan], 'true': [0.15999999999999998, nan], 'true,true': [0.15999999999999998, nan]}, {'': [0.15999999999999998, 9.251858538542971e-19], 'true': [0.15999999999999998, nan]}, {'': [0.16, 4.163336342344337e-18], 'true': [0.16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.341 seconds
Total inference time: 1.443 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.562 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.3120000000000003 seconds
Total inference time: 1.443 seconds
AUC ROC: 0.985041
Total revision time: 3.3120000000000003
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 01:25:24
{'Learning time': 3.3120000000000003, 'Inference time': 1.443, 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'CLL': -0.124249, 'parameter_20': {'Learning time': 0.874, 'Inference time': 1.474, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.349243, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.6465415686654066;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.6465415686654066;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( female(A) )
%   | then return 0.5044629797645588;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.5044629797645588;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.4704732967125141;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(B), female(A) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.1966919681099807;  // std dev = 0,178, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3569291299756465;  // std dev = 2,98e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A), actor(B) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.17286436745441502;  // std dev = 0,164, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.2797611238837395;  // std dev = 4,21e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A), actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.15359753612997304;  // std dev = 0,152, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.22698615351561274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(B), female(A) )
%   | then return -0.07877675473109179;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.13777101124389474;  // std dev = 0,140, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.18963338563437762;  // std dev = 1,83e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A), actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.12459292049725122;  // std dev = 0,130, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1621893714843506;  // std dev = 1,83e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A), actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.11348880632499658;  // std dev = 0,121, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1413385248951214;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A), actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.10403293607749076;  // std dev = 0,112, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.177959
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.829 seconds
Total inference time: 1.845 seconds
AUC ROC: 0.985041


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 01:25:28
{'Learning time': 1.829, 'Inference time': 1.845, 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'CLL': -0.177959, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.23376
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.673 seconds
Total inference time: 0.874 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 01:25:29
{'Learning time': 0.673, 'Inference time': 0.874, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 0.0, 'CLL': -0.23376, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6393989350995116;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5426919143120583;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.43099286828776007;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.32784349372229826;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783635;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24607639161015318;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926093;  // std dev = 1,05e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.18568882989429153;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839683;  // std dev = 1,18e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.1418657924041094;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109179;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.10984242247455098;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08608032379653505;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420274;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.06815142566519763;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.337895
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.944 seconds
Total inference time: 1.544 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.86
   AUC PR    = 0.78125
   CLL	      = -0.363647
   Precision = 0.78125 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.877193


Total scoring time: 0.552 seconds
Parameter learned model CLL: -0.363647


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.67e-08, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [2.339, 7, 25], 'false': [0.0, 18, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.45e-09, 18, 0], 'true,true': [0.413, 7, 25]}]]
[{'': [0.1708984375000011, -3.0839528461809902e-18], 'true': [0.1708984375000011, nan]}, {'': [0.17089843749999933, 0.0], 'true': [0.17089843749999933, nan]}, {'': [0.17089843750000042, 1.5419764230904953e-17], 'true': [0.17089843750000042, nan]}, {'': [0.17089843749999994, -4.625929269271485e-18], 'true': [0.17089843749999994, nan]}, {'': [0.1708984375, 6.1679056923619804e-18], 'true': [0.1708984375, nan]}, {'': [0.1708984375, 7.709882115452476e-18], 'true': [0.1708984375, nan]}, {'': [0.17089843749999994, 0.0], 'true': [0.17089843749999994, nan]}, {'': [0.17089843750000006, -7.709882115452476e-19], 'true,true,true': [0.17089843750000006, nan], 'true': [0.17089843750000006, nan], 'true,true': [0.17089843750000006, nan]}, {'': [0.17089843749999997, -1.5419764230904951e-18], 'true': [0.17089843749999997, nan]}, {'': [0.17089843750000003, 2.3129646346357427e-18], 'true': [0.17089843750000003, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783635;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.09269127618926093;  // std dev = 1,05e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839683;  // std dev = 1,18e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109179;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07324622576333704;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420274;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.557 seconds
Total inference time: 1.465 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.585 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.638 seconds
Total inference time: 1.465 seconds
AUC ROC: 0.985041
Total revision time: 3.638
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 01:25:37
{'Learning time': 3.638, 'Inference time': 1.465, 'parameter_25': {'Learning time': 0.944, 'Inference time': 1.544, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.337895, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'CLL': -0.124249, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.6622329172201352;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 1,05e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.5154428111118985;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.3875647182006322;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.36711286229599494;  // std dev = 0,009, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( female(A), actor(B) )
%   | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(B) )
%   | | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.22772249931278632;  // std dev = 0,234, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2866457602237288;  // std dev = 0,008, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( female(A), actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.20104957710454235;  // std dev = 0,218, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.23176468404847855;  // std dev = 0,007, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( female(A), actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(B) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.1790041774965541;  // std dev = 0,202, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.19307750184291855;  // std dev = 0,006, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( female(A), actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.16056127797903857;  // std dev = 0,187, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.16476239886813068;  // std dev = 0,005, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( female(A), actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.1449854892533444;  // std dev = 0,173, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.1433214246411538;  // std dev = 0,005, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(B), female(A) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( female(B) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.1317251413493349;  // std dev = 0,160, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.977561
   AUC PR    = 0.504309
   CLL	      = -0.209064
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.997 seconds
Total inference time: 1.658 seconds
AUC ROC: 0.977561


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 01:25:41
{'Learning time': 1.997, 'Inference time': 1.658, 'AUC ROC': 0.977561, 'AUC PR': 0.504309, 'Recall': 1.0, 'CLL': -0.209064, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( female(A) )
%   | then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */


Results
   AUC ROC   = 0.848575
   AUC PR    = 0.136922
   CLL	      = -0.234324
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.661 seconds
Total inference time: 0.895 seconds
AUC ROC: 0.848575


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 01:25:42
{'Learning time': 0.661, 'Inference time': 0.895, 'AUC ROC': 0.848575, 'AUC PR': 0.136922, 'Recall': 0.0, 'CLL': -0.234324, 'F1': nan, 'Precision': [nan, 0.5]}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4175135841583099;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.65144
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.79 seconds
Total inference time: 1.102 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.476 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [5.27e-09, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 5], 'false': [0.0, 5, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.86e-09, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}]]
[{'': [0.0, -2.7755575615628915e-18], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'true': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.0], 'true': [4.4408920985006264e-17, nan]}, {'': [-2.2204460492503132e-17, 0.0], 'true': [-2.2204460492503132e-17, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan]}, {'': [-5.551115123125783e-18, -1.3877787807814458e-18], 'true': [-5.551115123125783e-18, nan]}, {'': [0.0, -6.938893903907229e-19], 'true,true,true': [0.0, nan], 'true': [0.0, nan], 'true,true': [0.0, nan]}, {'': [0.0, 6.938893903907229e-19], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.65144
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.644 seconds
Total inference time: 1.003 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.467 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.65144
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.3770000000000002 seconds
Total inference time: 1.102 seconds
AUC ROC: 0.85431
Total revision time: 2.3770000000000002
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 01:25:47
{'Learning time': 2.3770000000000002, 'Inference time': 1.102, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.65144, 'parameter_5': {'Learning time': 0.79, 'Inference time': 1.102, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.65144, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.203547
   Precision = 0.255682 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.40724


Total learning time: 1.019 seconds
Total inference time: 0.955 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 01:25:50
{'Learning time': 1.019, 'Inference time': 0.955, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 1.0, 'CLL': -0.203547, 'F1': 0.40724, 'Precision': [0.255682, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.173677
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.535 seconds
Total inference time: 0.727 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 01:25:51
{'Learning time': 0.535, 'Inference time': 0.727, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 0.0, 'CLL': -0.173677, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328455;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46125983910675544;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.34884632569484214;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423424;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.12179491558002802;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081678;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0789523387255512;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.465961
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.863 seconds
Total inference time: 1.087 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.506 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [1.291, 2, 10], 'false': [2.63e-09, 8, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [0.1388888888888887, nan]}, {'': [0.13888888888888914, 0.0], 'true': [0.13888888888888914, nan]}, {'': [0.1388888888888891, -1.734723475976807e-18], 'true': [0.1388888888888891, nan]}, {'': [0.138888888888889, 1.734723475976807e-18], 'true': [0.138888888888889, nan]}, {'': [0.1388888888888888, 0.0], 'true': [0.1388888888888888, nan]}, {'': [0.13888888888888892, 1.734723475976807e-18], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888887, 8.673617379884035e-19], 'true,true,true': [0.13888888888888887, nan], 'true': [0.13888888888888887, nan], 'true,true': [0.13888888888888887, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.6081489350995123;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5170719622367218;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3768076399735596;  // std dev = 0,799, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.5197153100255172;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.46146904859710713;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.29309571934050394;  // std dev = 0,425, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1808155669375434;  // std dev = 0,760, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32268956078828737;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.31072873546060353;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.14547886534168888;  // std dev = 0,418, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.24834783651963965;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.11135188603079743;  // std dev = 0,419, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.042633146218950514;  // std dev = 0,726, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.18507508132605038;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.19806626695767582;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.05036427836226873;  // std dev = 0,413, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.009079035147438862;  // std dev = 0,713, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.13542644264406836;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.914296
   AUC PR    = 0.364429
   CLL	      = -0.417546
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.241 seconds
Total inference time: 1.266 seconds
AUC ROC: 0.914296


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.964132
   CLL	      = -0.267332
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.497 seconds
Refined model CLL: -0.267332


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.914296
   AUC PR    = 0.364429
   CLL	      = -0.417546
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 3.107 seconds
Total inference time: 1.266 seconds
AUC ROC: 0.914296
Total revision time: 3.107
Best scored revision CLL: -0.267332


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 01:25:57
{'Learning time': 3.107, 'Inference time': 1.266, 'AUC ROC': 0.914296, 'AUC PR': 0.364429, 'Recall': 1.0, 'CLL': -0.417546, 'parameter_10': {'Learning time': 0.863, 'Inference time': 1.087, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.465961, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.203547
   Precision = 0.255682 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.40724


Total learning time: 1.131 seconds
Total inference time: 0.937 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 01:26:00
{'Learning time': 1.131, 'Inference time': 0.937, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 1.0, 'CLL': -0.203547, 'F1': 0.40724, 'Precision': [0.255682, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.173677
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.528 seconds
Total inference time: 0.726 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 01:26:01
{'Learning time': 0.528, 'Inference time': 0.726, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 0.0, 'CLL': -0.173677, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6476226193100386;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5494185715067316;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.43580662724469027;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.331164704788703;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24856222263410194;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.18776859068219615;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.14373883200944887;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.11158581592814869;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08771890601691956;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.069690398723165;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.426842
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.897 seconds
Total inference time: 1.257 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.866667
   AUC PR    = 0.789474
   CLL	      = -0.354119
   Precision = 0.789474 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.882353


Total scoring time: 0.518 seconds
Parameter learned model CLL: -0.354119


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [1.777, 4, 15], 'false': [2.63e-09, 11, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 11, 0], 'true,true': [0.408, 4, 15]}]]
[{'': [0.16620498614958412, -1.0092936587501423e-17], 'true': [0.16620498614958412, nan]}, {'': [0.16620498614958432, 2.523234146875356e-18], 'true': [0.16620498614958432, nan]}, {'': [0.16620498614958465, 5.046468293750712e-18], 'true': [0.16620498614958465, nan]}, {'': [0.16620498614958448, 0.0], 'true': [0.16620498614958448, nan]}, {'': [0.16620498614958454, 0.0], 'true': [0.16620498614958454, nan]}, {'': [0.16620498614958443, 2.523234146875356e-18], 'true': [0.16620498614958443, nan]}, {'': [0.16620498614958445, 0.0], 'true': [0.16620498614958445, nan]}, {'': [0.16620498614958445, 6.30808536718839e-19], 'true,true,true': [0.16620498614958445, nan], 'true': [0.16620498614958445, nan], 'true,true': [0.16620498614958445, nan]}, {'': [0.16620498614958445, 6.30808536718839e-19], 'true': [0.16620498614958445, nan]}, {'': [0.1662049861495845, 2.523234146875356e-18], 'true': [0.1662049861495845, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.178 seconds
Total inference time: 1.259 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.517 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.11 seconds
Total inference time: 1.259 seconds
AUC ROC: 0.998942
Total revision time: 3.11
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 01:26:07
{'Learning time': 3.11, 'Inference time': 1.259, 'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'Recall': 1.0, 'CLL': -0.068112, 'parameter_15': {'Learning time': 0.897, 'Inference time': 1.257, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.426842, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'F1': 0.957447, 'Precision': [0.918367, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.203547
   Precision = 0.255682 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.40724


Total learning time: 1.179 seconds
Total inference time: 0.9 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 01:26:10
{'Learning time': 1.179, 'Inference time': 0.9, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 1.0, 'CLL': -0.203547, 'F1': 0.40724, 'Precision': [0.255682, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.173677
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.549 seconds
Total inference time: 0.717 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 01:26:11
{'Learning time': 0.549, 'Inference time': 0.717, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 0.0, 'CLL': -0.173677, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5988896758402525;  // std dev = 0,438, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5094629858417187;  // std dev = 0,438, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4070740258573001;  // std dev = 0,438, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3114078147114217;  // std dev = 0,438, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.23403251771721492;  // std dev = 0,438, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.17589132818213782;  // std dev = 0,438, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.13325440122967722;  // std dev = 0,438, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.10197462374426836;  // std dev = 2,277, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07879271838026491;  // std dev = 0,438, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.06139208729600351;  // std dev = 0,438, 27,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.38739
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.918 seconds
Total inference time: 1.065 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.825
   AUC PR    = 0.740741
   CLL	      = -0.410349
   Precision = 0.740741 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.851064


Total scoring time: 0.579 seconds
Parameter learned model CLL: -0.410349


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.438, 7, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 13, 0], 'true,true': [0.438, 7, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 13, 0], 'true,true': [0.438, 7, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.438, 7, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 13, 0], 'true,true': [0.438, 7, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 13, 0], 'true,true': [0.438, 7, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 13, 0], 'true,true': [0.438, 7, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [2.277, 7, 20], 'false': [0.0, 13, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 13, 0], 'true,true': [0.438, 7, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.97e-09, 13, 0], 'true,true': [0.438, 7, 20]}]]
[{'': [0.19204389574759964, -1.2810265668751807e-17], 'true': [0.19204389574759964, nan]}, {'': [0.1920438957475991, 4.270088556250602e-18], 'true': [0.1920438957475991, nan]}, {'': [0.19204389574759936, 8.540177112501205e-18], 'true': [0.19204389574759936, nan]}, {'': [0.19204389574759959, -2.135044278125301e-18], 'true': [0.19204389574759959, nan]}, {'': [0.19204389574759945, 2.135044278125301e-18], 'true': [0.19204389574759945, nan]}, {'': [0.1920438957475995, 4.270088556250602e-18], 'true': [0.1920438957475995, nan]}, {'': [0.19204389574759945, 1.0675221390626506e-18], 'true': [0.19204389574759945, nan]}, {'': [0.1920438957475994, 0.0], 'true,true,true': [0.1920438957475994, nan], 'true': [0.1920438957475994, nan], 'true,true': [0.1920438957475994, nan]}, {'': [0.1920438957475995, 5.337610695313253e-19], 'true': [0.1920438957475995, nan]}, {'': [0.19204389574759947, 3.736327486719277e-18], 'true': [0.19204389574759947, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.373 seconds
Total inference time: 1.147 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.524 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.394 seconds
Total inference time: 1.147 seconds
AUC ROC: 0.998942
Total revision time: 3.394
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 01:26:17
{'Learning time': 3.394, 'Inference time': 1.147, 'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'Recall': 1.0, 'CLL': -0.068112, 'parameter_20': {'Learning time': 0.918, 'Inference time': 1.065, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.38739, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'F1': 0.957447, 'Precision': [0.918367, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109179;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B) )
%   then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 6,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.203547
   Precision = 0.255682 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.40724


Total learning time: 1.154 seconds
Total inference time: 0.886 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 01:26:20
{'Learning time': 1.154, 'Inference time': 0.886, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 1.0, 'CLL': -0.203547, 'F1': 0.40724, 'Precision': [0.255682, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.173677
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.584 seconds
Total inference time: 0.721 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 01:26:21
{'Learning time': 0.584, 'Inference time': 0.721, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 0.0, 'CLL': -0.173677, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5724346493852258;  // std dev = 0,452, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4876778839172633;  // std dev = 0,452, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3912569620992533;  // std dev = 0,452, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.30057115478848995;  // std dev = 0,452, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22629823971521895;  // std dev = 0,452, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16984358676510142;  // std dev = 0,452, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.1281332068824675;  // std dev = 0,452, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.0974318480371498;  // std dev = 2,673, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07468131696953069;  // std dev = 0,452, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.057651940521137236;  // std dev = 0,452, 35,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.367591
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.962 seconds
Total inference time: 1.059 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.8
   AUC PR    = 0.714286
   CLL	      = -0.440744
   Precision = 0.714286 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.833333


Total scoring time: 0.609 seconds
Parameter learned model CLL: -0.440744


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.452, 10, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 15, 0], 'true,true': [0.452, 10, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.39e-08, 15, 0], 'true,true': [0.452, 10, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.452, 10, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 15, 0], 'true,true': [0.452, 10, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 15, 0], 'true,true': [0.452, 10, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.452, 10, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [2.673, 10, 25], 'false': [3.73e-09, 15, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 15, 0], 'true,true': [0.452, 10, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.9e-09, 15, 0], 'true,true': [0.452, 10, 25]}]]
[{'': [0.20408163265306242, -1.4802973661668754e-17], 'true': [0.20408163265306242, nan]}, {'': [0.20408163265306106, 3.7007434154171884e-18], 'true': [0.20408163265306106, nan]}, {'': [0.20408163265306165, 1.295260195396016e-17], 'true': [0.20408163265306165, nan]}, {'': [0.20408163265306103, -5.551115123125783e-18], 'true': [0.20408163265306103, nan]}, {'': [0.20408163265306115, 3.7007434154171884e-18], 'true': [0.20408163265306115, nan]}, {'': [0.2040816326530612, 5.551115123125783e-18], 'true': [0.2040816326530612, nan]}, {'': [0.2040816326530612, -1.8503717077085942e-18], 'true': [0.2040816326530612, nan]}, {'': [0.2040816326530614, 9.251858538542971e-19], 'true,true,true': [0.2040816326530614, nan], 'true': [0.2040816326530614, nan], 'true,true': [0.2040816326530614, nan]}, {'': [0.2040816326530613, 9.251858538542971e-19], 'true': [0.2040816326530613, nan]}, {'': [0.20408163265306112, 4.163336342344337e-18], 'true': [0.20408163265306112, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.381 seconds
Total inference time: 1.112 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.581 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.533 seconds
Total inference time: 1.112 seconds
AUC ROC: 0.998942
Total revision time: 3.533
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 01:26:28
{'Learning time': 3.533, 'Inference time': 1.112, 'parameter_25': {'Learning time': 0.962, 'Inference time': 1.059, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.367591, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'Recall': 1.0, 'CLL': -0.068112, 'F1': 0.957447, 'Precision': [0.918367, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( female(A) )
%   | then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 1,67e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.22699179224124724;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.2551722425694894;  // std dev = 2,11e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109176;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.1812058810760637;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.14804913120500338;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.1770964977452774;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.12328872166165511;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202618;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0.15665813111368573;  // std dev = 0,118, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( female(A) )
%   | then return -0.31572895206196194;  // std dev = 0,616, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.06419184008202618;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.985499
   AUC PR    = 0.742298
   CLL	      = -0.184414
   Precision = 0.255682 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.40724


Total learning time: 1.567 seconds
Total inference time: 1.041 seconds
AUC ROC: 0.985499


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 01:26:30
{'Learning time': 1.567, 'Inference time': 1.041, 'AUC ROC': 0.985499, 'AUC PR': 0.742298, 'Recall': 1.0, 'CLL': -0.184414, 'F1': 0.40724, 'Precision': [0.255682, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */


Results
   AUC ROC   = 0.963505
   AUC PR    = 0.244543
   CLL	      = -0.173724
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.684 seconds
Total inference time: 0.721 seconds
AUC ROC: 0.963505


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 01:26:32
{'Learning time': 0.684, 'Inference time': 0.721, 'AUC ROC': 0.963505, 'AUC PR': 0.244543, 'Recall': 0.0, 'CLL': -0.173724, 'F1': nan, 'Precision': [nan, 0.5]}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4175135841583099;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.613037
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.814 seconds
Total inference time: 1.27 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.475 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [5.27e-09, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [0.0, 0, 5], 'false': [0.0, 5, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.86e-09, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}]]
[{'': [0.0, -2.7755575615628915e-18], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'true': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.0], 'true': [4.4408920985006264e-17, nan]}, {'': [-2.2204460492503132e-17, 0.0], 'true': [-2.2204460492503132e-17, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan]}, {'': [-5.551115123125783e-18, -1.3877787807814458e-18], 'true': [-5.551115123125783e-18, nan]}, {'': [0.0, -6.938893903907229e-19], 'true,true,true': [0.0, nan], 'true': [0.0, nan], 'true,true': [0.0, nan]}, {'': [0.0, 6.938893903907229e-19], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.613037
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.677 seconds
Total inference time: 1.036 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.464 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.613037
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.43 seconds
Total inference time: 1.27 seconds
AUC ROC: 0.864075
Total revision time: 2.43
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 01:26:37
{'Learning time': 2.43, 'Inference time': 1.27, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.613037, 'parameter_5': {'Learning time': 0.814, 'Inference time': 1.27, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.613037, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.977547
   AUC PR    = 0.326087
   CLL	      = -0.154459
   Precision = 0.326087 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.491803


Total learning time: 1.039 seconds
Total inference time: 0.94 seconds
AUC ROC: 0.977547


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 01:26:40
{'Learning time': 1.039, 'Inference time': 0.94, 'AUC ROC': 0.977547, 'AUC PR': 0.326087, 'Recall': 1.0, 'CLL': -0.154459, 'F1': 0.491803, 'Precision': [0.326087, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.977547
   AUC PR    = 0.326087
   CLL	      = -0.1668
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.514 seconds
Total inference time: 0.745 seconds
AUC ROC: 0.977547


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 01:26:41
{'Learning time': 0.514, 'Inference time': 0.745, 'AUC ROC': 0.977547, 'AUC PR': 0.326087, 'Recall': 0.0, 'CLL': -0.1668, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.41751358415830986;  // std dev = 1,18e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2551722425694894;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15274385809367094;  // std dev = 1,86e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.613037
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.892 seconds
Total inference time: 1.315 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.503 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 10, 0], 'true,true': [0.0, 0, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 10, 0], 'true,true': [0.0, 0, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 10, 0], 'true,true': [0.0, 0, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 10, 0], 'true,true': [1.18e-08, 0, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 10, 0], 'true,true': [0.0, 0, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 10, 0], 'true,true': [5.27e-09, 0, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 10, 0], 'true,true': [0.0, 0, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [7.45e-09, 0, 10], 'false': [2.63e-09, 10, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 10, 0], 'true,true': [1.86e-09, 0, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 10, 0], 'true,true': [0.0, 0, 10]}]]
[{'': [-8.881784197001253e-17, -1.1102230246251566e-17], 'true': [-8.881784197001253e-17, nan]}, {'': [8.881784197001253e-17, 2.7755575615628915e-18], 'true': [8.881784197001253e-17, nan]}, {'': [-1.7763568394002506e-16, 0.0], 'true': [-1.7763568394002506e-16, nan]}, {'': [1.3322676295501878e-16, 1.3877787807814458e-18], 'true': [1.3322676295501878e-16, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'true': [-4.4408920985006264e-17, nan]}, {'': [3.3306690738754695e-17, 1.3877787807814458e-18], 'true': [3.3306690738754695e-17, nan]}, {'': [-2.7755575615628914e-17, 0.0], 'true': [-2.7755575615628914e-17, nan]}, {'': [5.551115123125783e-18, 6.938893903907229e-19], 'true,true,true': [5.551115123125783e-18, nan], 'true': [5.551115123125783e-18, nan], 'true,true': [5.551115123125783e-18, nan]}, {'': [0.0, 6.938893903907229e-19], 'true': [0.0, nan]}, {'': [0.0, 1.3877787807814458e-18], 'true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.613037
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.675 seconds
Total inference time: 0.989 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.464 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.613037
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.5340000000000003 seconds
Total inference time: 1.315 seconds
AUC ROC: 0.864075
Total revision time: 2.5340000000000003
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 01:26:47
{'Learning time': 2.5340000000000003, 'Inference time': 1.315, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.613037, 'parameter_10': {'Learning time': 0.892, 'Inference time': 1.315, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.613037, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */


Results
   AUC ROC   = 0.977547
   AUC PR    = 0.326087
   CLL	      = -0.154459
   Precision = 0.326087 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.491803


Total learning time: 1.166 seconds
Total inference time: 0.939 seconds
AUC ROC: 0.977547


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 01:26:49
{'Learning time': 1.166, 'Inference time': 0.939, 'AUC ROC': 0.977547, 'AUC PR': 0.326087, 'Recall': 1.0, 'CLL': -0.154459, 'F1': 0.491803, 'Precision': [0.326087, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */


Results
   AUC ROC   = 0.977547
   AUC PR    = 0.326087
   CLL	      = -0.1668
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.534 seconds
Total inference time: 0.736 seconds
AUC ROC: 0.977547


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 01:26:50
{'Learning time': 0.534, 'Inference time': 0.736, 'AUC ROC': 0.977547, 'AUC PR': 0.326087, 'Recall': 0.0, 'CLL': -0.1668, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.7405018762759829;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6249475655895571;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4893127157293236;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3686658221249617;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.27804969755906545;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.21383763039487166;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.16826633465571472;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.13518176386613595;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11050708250003544;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09163300171566749;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.484644
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.889 seconds
Total inference time: 1.087 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.933333
   AUC PR    = 0.882353
   CLL	      = -0.244323
   Precision = 0.882353 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9375


Total scoring time: 0.55 seconds
Parameter learned model CLL: -0.244323


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [1.328, 2, 15], 'false': [0.0, 13, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.97e-09, 13, 0], 'true,true': [0.322, 2, 15]}]]
[{'': [0.10380622837370206, -1.2810265668751807e-17], 'true': [0.10380622837370206, nan]}, {'': [0.10380622837370226, 4.270088556250602e-18], 'true': [0.10380622837370226, nan]}, {'': [0.10380622837370232, 8.540177112501205e-18], 'true': [0.10380622837370232, nan]}, {'': [0.10380622837370244, -2.135044278125301e-18], 'true': [0.10380622837370244, nan]}, {'': [0.10380622837370246, 2.135044278125301e-18], 'true': [0.10380622837370246, nan]}, {'': [0.10380622837370239, 4.270088556250602e-18], 'true': [0.10380622837370239, nan]}, {'': [0.10380622837370244, 1.0675221390626506e-18], 'true': [0.10380622837370244, nan]}, {'': [0.10380622837370246, 0.0], 'true,true,true': [0.10380622837370246, nan], 'true': [0.10380622837370246, nan], 'true,true': [0.10380622837370246, nan]}, {'': [0.10380622837370243, 5.337610695313253e-19], 'true': [0.10380622837370243, nan]}, {'': [0.10380622837370243, 3.736327486719277e-18], 'true': [0.10380622837370243, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.5724346493852266;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.48767788391726297;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.3912569620992536;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.3005711547884894;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.22629823971521876;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.16984358676510128;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.12813320688246752;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.09743184803714998;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.07468131696953094;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.057651940521137104;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.872949
   AUC PR    = 0.080885
   CLL	      = -0.46553
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 1.324 seconds
Total inference time: 1.172 seconds
AUC ROC: 0.872949


Results scoring model
   AUC ROC   = 0.977778
   AUC PR    = 0.977101
   CLL	      = -0.210006
   Precision = 0.882353 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9375


Total scoring time: 0.505 seconds
Refined model CLL: -0.210006


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.872949
   AUC PR    = 0.080885
   CLL	      = -0.46553
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 3.268 seconds
Total inference time: 1.172 seconds
AUC ROC: 0.872949
Total revision time: 3.268
Best scored revision CLL: -0.210006


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 01:26:57
{'Learning time': 3.268, 'Inference time': 1.172, 'AUC ROC': 0.872949, 'AUC PR': 0.080885, 'Recall': 1.0, 'CLL': -0.46553, 'parameter_15': {'Learning time': 0.889, 'Inference time': 1.087, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.484644, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.6465415686654066;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.5044629797645588;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4704732967125139;  // std dev = 2,11e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.2691964659736967;  // std dev = 0,235, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( actor(A), actor(B) )
%   | then return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.20857892293774874;  // std dev = 0,371, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3569291299756467;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.21590731103509694;  // std dev = 0,218, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( actor(A), actor(B) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.1824161545747145;  // std dev = 0,341, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2797611238837396;  // std dev = 1,05e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.17435368330912787;  // std dev = 0,208, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( actor(A), actor(B) )
%   | then return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.16134864607816138;  // std dev = 0,313, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08937213066672897;  // std dev = 0,140, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.17061033272186268;  // std dev = 0,178, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.2704291694486285;  // std dev = 7,45e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1984487112362742;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.10986969401261508;  // std dev = 0,175, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( actor(A), actor(B) )
%   | then return -0.0725302428573666;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.15076341504015284;  // std dev = 0,328, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.16875635098452815;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.09227573129756449;  // std dev = 0,174, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( female(A) )
%   | then return -0.1228153998191886;  // std dev = 0,301, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.05961540033681131;  // std dev = 0,025, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( actor(A) )
%   | then if ( female(A) )
%   | | then return -0.0604376337932835;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.1083009561006789;  // std dev = 0,153, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.046013848425796706;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return 0.09954554929398383;  // std dev = 0,148, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.187700601845202;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.999646
   AUC PR    = 0.98105
   CLL	      = -0.142526
   Precision = 0.459184 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.629371


Total learning time: 1.844 seconds
Total inference time: 1.215 seconds
AUC ROC: 0.999646


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 01:27:00
{'Learning time': 1.844, 'Inference time': 1.215, 'AUC ROC': 0.999646, 'AUC PR': 0.98105, 'Recall': 1.0, 'CLL': -0.142526, 'F1': 0.629371, 'Precision': [0.459184, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.975728
   AUC PR    = 0.303381
   CLL	      = -0.167053
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.672 seconds
Total inference time: 0.734 seconds
AUC ROC: 0.975728


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 01:27:02
{'Learning time': 0.672, 'Inference time': 0.734, 'AUC ROC': 0.975728, 'AUC PR': 0.303381, 'Recall': 0.0, 'CLL': -0.167053, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.7277141524908164;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6145965951068212;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4820310770235995;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.36348006169997665;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.27380696439698715;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2099390251949393;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.16449338179098782;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.13147590894712874;  // std dev = 1,615, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1068656588370264;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08806971003324962;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.472441
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.909 seconds
Total inference time: 1.265 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.925
   AUC PR    = 0.869565
   CLL	      = -0.259756
   Precision = 0.869565 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.930233


Total scoring time: 0.539 seconds
Parameter learned model CLL: -0.259756


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.49e-08, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [1.615, 3, 20], 'false': [0.0, 17, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 17, 0], 'true,true': [0.337, 3, 20]}]]
[{'': [0.11342155009451807, -3.2653618371328133e-18], 'true': [0.11342155009451807, nan]}, {'': [0.1134215500945183, 0.0], 'true': [0.1134215500945183, nan]}, {'': [0.11342155009451824, 1.3061447348531253e-17], 'true': [0.11342155009451824, nan]}, {'': [0.11342155009451785, -8.163404592832034e-18], 'true': [0.11342155009451785, nan]}, {'': [0.1134215500945179, 4.89804275569922e-18], 'true': [0.1134215500945179, nan]}, {'': [0.1134215500945179, 8.163404592832034e-18], 'true': [0.1134215500945179, nan]}, {'': [0.11342155009451796, -2.44902137784961e-18], 'true': [0.11342155009451796, nan]}, {'': [0.11342155009451796, 0.0], 'true,true,true': [0.11342155009451796, nan], 'true': [0.11342155009451796, nan], 'true,true': [0.11342155009451796, nan]}, {'': [0.11342155009451795, -8.163404592832033e-19], 'true': [0.11342155009451795, nan]}, {'': [0.11342155009451797, 3.2653618371328133e-18], 'true': [0.11342155009451797, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.251 seconds
Total inference time: 1.378 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.557 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.256 seconds
Total inference time: 1.378 seconds
AUC ROC: 1.0
Total revision time: 3.256
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 01:27:08
{'Learning time': 3.256, 'Inference time': 1.378, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.063719, 'parameter_20': {'Learning time': 0.909, 'Inference time': 1.265, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.472441, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'F1': 1.0, 'Precision': [1.0, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6622329172201352;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.6189976143448207;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5950114616924633;  // std dev = 0,050, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.1949402509830567;  // std dev = 0,131, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4476980583459727;  // std dev = 0,051, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.16898677202337378;  // std dev = 0,118, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.34131362841395047;  // std dev = 0,047, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.14858927071789152;  // std dev = 0,107, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2692159975292466;  // std dev = 0,041, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.1322349781926404;  // std dev = 0,098, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.21964905410842675;  // std dev = 0,036, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A) )
%   | then if ( female(A), actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.1393339194438311;  // std dev = 0,210, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.06226622310001517;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1843295602189161;  // std dev = 0,031, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07164384806514529;  // std dev = 0,006, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.10895688764413171;  // std dev = 0,080, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15821656725242775;  // std dev = 0,028, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A) )
%   | then if ( female(A), actor(B) )
%   | | then return -0.06852919163575964;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.11502345063756662;  // std dev = 0,174, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.05298680601268794;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13827029876377042;  // std dev = 0,025, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A) )
%   | then if ( actor(B), female(A) )
%   | | then return -0.06428201573818558;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.10433646062702116;  // std dev = 0,160, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.050390083222002134;  // std dev = 1,32e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066079
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.922 seconds
Total inference time: 1.305 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 01:27:12
{'Learning time': 1.922, 'Inference time': 1.305, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.066079, 'F1': 1.0, 'Precision': [1.0, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.980428
   AUC PR    = 0.360179
   CLL	      = -0.166419
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.664 seconds
Total inference time: 0.787 seconds
AUC ROC: 0.980428


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 01:27:13
{'Learning time': 0.664, 'Inference time': 0.787, 'AUC ROC': 0.980428, 'AUC PR': 0.360179, 'Recall': 0.0, 'CLL': -0.166419, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true;author(E, D), title(E, B).;true;false
3;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
3;true,true,true;samebib(E, F), title(F, A).;false;false
3;true;haswordauthor(D, C).;true;true
3;true,false,true;haswordvenue(I, G).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;haswordvenue(G, E).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,true;haswordvenue(F, D).;true;true
6;true,true,false;haswordauthor(G, C).;false;false
6;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;false
6;true,true,true;haswordauthor(E, C).;false;false
6;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
6;true,false,true;haswordvenue(J, H).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,true;haswordtitle(B, D).;true;true
7;true,true,false;author(G, E), title(G, A).;false;false
7;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
7;true,true,true;author(F, E), title(F, A).;false;false
7;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
7;true,false,true;haswordvenue(J, H).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(A, J), haswordauthor(K, J).;false;false
8;true,true;author(E, D), title(E, B).;true;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
9;true,true;author(E, D), title(E, A).;true;true
9;true,true,false;author(G, D), title(G, B).;false;false
9;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
9;true,true,true;samebib(E, F), title(F, B).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(J, H).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.691482268432845;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555363;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4612598391067552;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.34884632569484253;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423427;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109179;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( movie(D, B) )
%   | | then if ( genre(E, F) )
%   | | | then return 0.1217949155800278;  // std dev = 2,041, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081699;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07895233872555117;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.439577
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.971 seconds
Total inference time: 1.32 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.767 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.49e-08, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.39e-08, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true,true,true': 'genre(E, F)', 'true': 'movie(D, A)', 'true,true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'true,true,true,true': [2.041, 5, 25], 'false': [0.0, 20, 0], 'true,true,false': [0.0, 0, 0], 'true,true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.45e-09, 20, 0], 'true,true': [0.373, 5, 25]}]]
[{'': [0.13888888888888987, 2.7755575615628915e-18], 'true': [0.13888888888888987, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888912, 1.1102230246251566e-17], 'true': [0.13888888888888912, nan]}, {'': [0.1388888888888888, -1.3877787807814458e-18], 'true': [0.1388888888888888, nan]}, {'': [0.13888888888888884, 6.938893903907228e-18], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888892, 9.714451465470119e-18], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.1388888888888889, -1.3877787807814458e-18], 'true,true,true': [0.1388888888888889, nan], 'true': [0.1388888888888889, nan], 'true,true': [0.1388888888888889, nan]}, {'': [0.13888888888888892, -2.7755575615628915e-18], 'true': [0.13888888888888892, nan]}, {'': [0.1388888888888889, 2.0816681711721684e-18], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109179;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.333 seconds
Total inference time: 1.266 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.546 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063719
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.617 seconds
Total inference time: 1.266 seconds
AUC ROC: 1.0
Total revision time: 3.617
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 01:27:20
{'Learning time': 3.617, 'Inference time': 1.266, 'parameter_25': {'Learning time': 0.971, 'Inference time': 1.32, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.439577, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.063719, 'F1': 1.0, 'Precision': [1.0, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.7993254056877476;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.1418510649004878;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6723676618346616;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.6392070123615109;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.12544463852839138;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.5225238410881435;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.49932275605826126;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.11231637819360636;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4603282938800208;  // std dev = 0,058, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.3913831249811232;  // std dev = 0,355, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.3499847473249244;  // std dev = 0,053, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.3162495524538788;  // std dev = 0,301, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.27509478852368724;  // std dev = 0,047, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.2596741533176719;  // std dev = 0,254, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.22375683543131075;  // std dev = 0,041, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.2173825151474709;  // std dev = 0,216, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.18731047587373906;  // std dev = 0,036, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.1854139331980084;  // std dev = 0,187, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.16045693318757684;  // std dev = 0,032, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.16079817645515446;  // std dev = 0,163, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.14000559851040484;  // std dev = 0,028, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 7,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.14145937038904896;  // std dev = 0,144, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06907
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.872 seconds
Total inference time: 1.17 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 01:27:23
{'Learning time': 1.872, 'Inference time': 1.17, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.06907, 'F1': 1.0, 'Precision': [1.0, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.7993254056877476;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.1418510649004878;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */


Results
   AUC ROC   = 0.980428
   AUC PR    = 0.360179
   CLL	      = -0.166324
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.698 seconds
Total inference time: 0.796 seconds
AUC ROC: 0.980428


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 01:27:25
{'Learning time': 0.698, 'Inference time': 0.796, 'AUC ROC': 0.980428, 'AUC PR': 0.360179, 'Recall': 0.0, 'CLL': -0.166324, 'F1': nan, 'Precision': [nan, 0.5]}


