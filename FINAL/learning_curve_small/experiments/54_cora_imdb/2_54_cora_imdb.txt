Starting experiment #2 for 54_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 698
Source train neg examples: 27996

WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.5477093746599478;  // std dev = 0,463, 364,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=251 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.08437980053267183;  // std dev = 3,760, 261,000 (wgt'ed) examples reached here.  /* #neg=246 #pos=15 */
%   | | | else return 0.41370449065506787;  // std dev = 2,108, 18,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.10152848425532668;  // std dev = 3,794, 372,000 (wgt'ed) examples reached here.  /* #neg=357 #pos=15 */
%   | | | else return 0.1914822684328457;  // std dev = 2,582, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | else return 0.3187057796470714;  // std dev = 0,498, 862,000 (wgt'ed) examples reached here.  /* #neg=465 #pos=397 */
%   else return -0.14185106490048763;  // std dev = 8,16e-08, 109,000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.7776961275085464;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.22230387249145359;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.5155010055573214;  // std dev = 0,440, 328,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.09178053360168589;  // std dev = 3,800, 389,000 (wgt'ed) examples reached here.  /* #neg=374 #pos=15 */
%   | | | else return 0.21133317241476227;  // std dev = 2,479, 27,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.04462314769742332;  // std dev = 4,650, 274,000 (wgt'ed) examples reached here.  /* #neg=249 #pos=25 */
%   | | | else return 0.2544136111548458;  // std dev = 14,915, 903,000 (wgt'ed) examples reached here.  /* #neg=506 #pos=397 */
%   else return -0.1254446385283913;  // std dev = 0,000, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.36474608332773767;  // std dev = 0,458, 366,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.08410976191452166;  // std dev = 3,806, 413,000 (wgt'ed) examples reached here.  /* #neg=398 #pos=15 */
%   | | | else return 0.08070860052981614;  // std dev = 2,671, 37,000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.032599222732292675;  // std dev = 4,636, 254,000 (wgt'ed) examples reached here.  /* #neg=229 #pos=25 */
%   | | | else return 0.20385782492799717;  // std dev = 15,035, 922,000 (wgt'ed) examples reached here.  /* #neg=525 #pos=397 */
%   else return -0.11231637819360621;  // std dev = 8,16e-08, 111,000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.30387589211687355;  // std dev = 0,447, 354,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.07349876986460475;  // std dev = 3,802, 390,000 (wgt'ed) examples reached here.  /* #neg=375 #pos=15 */
%   | | | else return 0.05152044025224372;  // std dev = 2,705, 39,000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.04663437203112525;  // std dev = 4,680, 316,000 (wgt'ed) examples reached here.  /* #neg=291 #pos=25 */
%   | | | else return 0.17230465720612215;  // std dev = 14,954, 909,000 (wgt'ed) examples reached here.  /* #neg=512 #pos=397 */
%   else return -0.1015963294878364;  // std dev = 0,000, 126,000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.45164473668600824;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.3087493901444534;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.21243761376478737;  // std dev = 0,460, 348,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.06318739621743072;  // std dev = 3,794, 362,000 (wgt'ed) examples reached here.  /* #neg=347 #pos=15 */
%   | | | else return 0.0685821592672329;  // std dev = 2,649, 36,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.026614821385224183;  // std dev = 4,647, 263,000 (wgt'ed) examples reached here.  /* #neg=238 #pos=25 */
%   | | | else return 0.12305818984524992;  // std dev = 15,144, 940,000 (wgt'ed) examples reached here.  /* #neg=543 #pos=397 */
%   else return -0.09269127618926075;  // std dev = 8,02e-08, 137,000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.15146623531817127;  // std dev = 0,453, 369,000 (wgt'ed) examples reached here.  /* #neg=118 #pos=251 */
%   | | else if ( haswordvenue(F, D) )
%   | | | then return -0.06150573993875074;  // std dev = 3,804, 399,000 (wgt'ed) examples reached here.  /* #neg=384 #pos=15 */
%   | | | else return 0.25057203314401105;  // std dev = 2,261, 21,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else if ( haswordtitle(B, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.05093686649033418;  // std dev = 3,746, 232,000 (wgt'ed) examples reached here.  /* #neg=217 #pos=15 */
%   | | | else return 0.4479942612307159;  // std dev = 1,936, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else return 0.11055528827039032;  // std dev = 0,496, 910,000 (wgt'ed) examples reached here.  /* #neg=513 #pos=397 */
%   else return -0.0851847513883968;  // std dev = 6,99e-08, 139,000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.10662221850069445;  // std dev = 0,454, 375,000 (wgt'ed) examples reached here.  /* #neg=124 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.0533660942781676;  // std dev = 3,796, 374,000 (wgt'ed) examples reached here.  /* #neg=359 #pos=15 */
%   | | | else return 0.06749297700424987;  // std dev = 2,531, 30,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | else return 0.05362152553822462;  // std dev = 0,457, 1.199,000 (wgt'ed) examples reached here.  /* #neg=777 #pos=422 */
%   else return -0.07877675473109154;  // std dev = 7,30e-08, 129,000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, A) )
%   | | then if ( samebib(E, F), title(F, B) )
%   | | | then return 0.31327107977308377;  // std dev = 0,140, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.5992541645252593;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.09590050001388448;  // std dev = 0,452, 353,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), title(I, A) )
%   | | | then return 0.061039112830974386;  // std dev = 1,597, 20,000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return -0.05256739223026154;  // std dev = 4,320, 424,000 (wgt'ed) examples reached here.  /* #neg=402 #pos=22 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.030855954440952623;  // std dev = 4,519, 270,000 (wgt'ed) examples reached here.  /* #neg=245 #pos=25 */
%   | | | else return 0.06459931128098295;  // std dev = 15,078, 929,000 (wgt'ed) examples reached here.  /* #neg=532 #pos=397 */
%   else return -0.07324622576333709;  // std dev = 4,59e-08, 112,000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.07193835860885751;  // std dev = 0,445, 368,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=251 */
%   | | else if ( author(F, E), title(F, B) )
%   | | | then return 0.03530323877077283;  // std dev = 2,087, 41,000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | | | else return -0.048832425173561414;  // std dev = 4,100, 368,000 (wgt'ed) examples reached here.  /* #neg=348 #pos=20 */
%   | else if ( haswordtitle(B, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.05859148839463733;  // std dev = 3,767, 277,000 (wgt'ed) examples reached here.  /* #neg=262 #pos=15 */
%   | | | else return 0.3688368621730762;  // std dev = 1,936, 16,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else return 0.06527734421958571;  // std dev = 0,497, 896,000 (wgt'ed) examples reached here.  /* #neg=499 #pos=397 */
%   else return -0.06842697784420265;  // std dev = 5,96e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.06037804241338078;  // std dev = 0,451, 360,000 (wgt'ed) examples reached here.  /* #neg=109 #pos=251 */
%   | else if ( haswordtitle(B, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.055929577238343096;  // std dev = 3,790, 281,000 (wgt'ed) examples reached here.  /* #neg=266 #pos=15 */
%   | | | else return 0.17289855727002654;  // std dev = 2,182, 21,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | | else if ( haswordtitle(A, H), haswordauthor(I, H) )
%   | | | then return -0.03499432438159917;  // std dev = 4,620, 404,000 (wgt'ed) examples reached here.  /* #neg=379 #pos=25 */
%   | | | else return 0.0473560616633071;  // std dev = 14,902, 901,000 (wgt'ed) examples reached here.  /* #neg=504 #pos=397 */
%   else return -0.06419184008202626;  // std dev = 3,07e-08, 110,000 (wgt'ed) examples reached here.  /* #neg=110 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5724346493852266;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.48767788391726297;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3912569620992536;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3005711547884894;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22629823971521876;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16984358676510128;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12813320688246752;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09743184803714998;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.07468131696953094;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.057651940521137104;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.360567
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.765 seconds
Total inference time: 1.133 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.8
   AUC PR    = 0.714286
   CLL	      = -0.440744
   Precision = 0.714286 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.833333


Total scoring time: 0.515 seconds
Parameter learned model CLL: -0.440744


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.86e-09, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.195, 2, 5], 'false': [0.0, 3, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [1.32e-09, 3, 0], 'true,true': [0.452, 2, 5]}]]
[{'': [0.20408163265306106, 0.0], 'true': [0.20408163265306106, nan]}, {'': [0.20408163265306115, 0.0], 'true': [0.20408163265306115, nan]}, {'': [0.20408163265306115, 2.3129646346357427e-18], 'true': [0.20408163265306115, nan]}, {'': [0.2040816326530612, -1.1564823173178713e-18], 'true': [0.2040816326530612, nan]}, {'': [0.20408163265306128, 2.3129646346357427e-18], 'true': [0.20408163265306128, nan]}, {'': [0.2040816326530612, 0.0], 'true': [0.2040816326530612, nan]}, {'': [0.20408163265306126, 0.0], 'true': [0.20408163265306126, nan]}, {'': [0.2040816326530612, 1.1564823173178713e-18], 'true': [0.2040816326530612, nan]}, {'': [0.20408163265306123, -5.782411586589357e-19], 'true': [0.20408163265306123, nan], 'true,true': [0.20408163265306123, nan]}, {'': [0.2040816326530612, 5.782411586589357e-19], 'true': [0.2040816326530612, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.19148226843284555;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.16653882456488175;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1420942428155648;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.11914890490746428;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.09841340278401862;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.08026654944252243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.06479591611329223;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.05187916934404054;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.04126932998424623;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.0326637487348301;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.926266
   AUC PR    = 0.549646
   CLL	      = -0.157959
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.482143
   F1        = 0.650602


Total learning time: 0.901 seconds
Total inference time: 1.382 seconds
AUC ROC: 0.926266


Results scoring model
   AUC ROC   = 0.96
   AUC PR    = 0.971429
   CLL	      = -0.26089
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.8
   F1        = 0.888889


Total scoring time: 0.475 seconds
Refined model CLL: -0.26089


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.926266
   AUC PR    = 0.549646
   CLL	      = -0.157959
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.482143
   F1        = 0.650602


Total learning time: 2.656 seconds
Total inference time: 1.382 seconds
AUC ROC: 0.926266
Total revision time: 2.656
Best scored revision CLL: -0.26089


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:54:39
{'Learning time': 2.656, 'Inference time': 1.382, 'AUC ROC': 0.926266, 'AUC PR': 0.549646, 'Recall': 0.482143, 'CLL': -0.157959, 'parameter_5': {'Learning time': 0.765, 'Inference time': 1.133, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.360567, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'F1': 0.650602, 'Precision': [1.0, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.982164
   AUC PR    = 0.321839
   CLL	      = -0.13584
   Precision = 0.321839 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.486957


Total learning time: 1.017 seconds
Total inference time: 1.087 seconds
AUC ROC: 0.982164


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:54:42
{'Learning time': 1.017, 'Inference time': 1.087, 'AUC ROC': 0.982164, 'AUC PR': 0.321839, 'Recall': 1.0, 'CLL': -0.13584, 'F1': 0.486957, 'Precision': [0.321839, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.982164
   AUC PR    = 0.321839
   CLL	      = -0.159815
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.526 seconds
Total inference time: 0.834 seconds
AUC ROC: 0.982164


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:54:43
{'Learning time': 0.526, 'Inference time': 0.834, 'AUC ROC': 0.982164, 'AUC PR': 0.321839, 'Recall': 0.0, 'CLL': -0.159815, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.6914822684328455;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.46125983910675544;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.34884632569484214;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423424;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12179491558002802;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.09745354768081678;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.0789523387255512;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.458212
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.813 seconds
Total inference time: 1.192 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.508 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.291, 2, 10], 'false': [0.0, 8, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [0.1388888888888887, nan]}, {'': [0.13888888888888914, 0.0], 'true': [0.13888888888888914, nan]}, {'': [0.1388888888888891, -1.734723475976807e-18], 'true': [0.1388888888888891, nan]}, {'': [0.138888888888889, 1.734723475976807e-18], 'true': [0.138888888888889, nan]}, {'': [0.1388888888888888, 0.0], 'true': [0.1388888888888888, nan]}, {'': [0.13888888888888892, 1.734723475976807e-18], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888887, 8.673617379884035e-19], 'true': [0.13888888888888887, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan], 'true,true': [0.1388888888888889, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.32092546969114216;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.41751358415830986;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.25206564481433;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.19292386438161405;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.16648295341591052;  // std dev = 0,235, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.2956579293408583;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.22483708118296497;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.07835343340271678;  // std dev = 1,078, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.18808002427026405;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.058857834346173935;  // std dev = 1,078, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.16102594593977582;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.04429217121181437;  // std dev = 1,078, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.055245249499318666;  // std dev = 0,225, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.1770201212817281;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.961333
   AUC PR    = 0.587871
   CLL	      = -0.297365
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.027 seconds
Total inference time: 1.444 seconds
AUC ROC: 0.961333


Results scoring model
   AUC ROC   = 0.985
   AUC PR    = 0.984558
   CLL	      = -0.236289
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.488 seconds
Refined model CLL: -0.236289


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.961333
   AUC PR    = 0.587871
   CLL	      = -0.297365
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 2.836 seconds
Total inference time: 1.444 seconds
AUC ROC: 0.961333
Total revision time: 2.836
Best scored revision CLL: -0.236289


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:54:50
{'Learning time': 2.836, 'Inference time': 1.444, 'AUC ROC': 0.961333, 'AUC PR': 0.587871, 'Recall': 1.0, 'CLL': -0.297365, 'parameter_10': {'Learning time': 0.813, 'Inference time': 1.192, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.458212, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5170719622367217;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.41257245288266;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.41751358415830986;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.2984686627759694;  // std dev = 0,730, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.212671333785722;  // std dev = 0,272, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.24165825668152735;  // std dev = 0,683, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.18366279434451016;  // std dev = 0,245, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09915547207931003;  // std dev = 0,103, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 1,29e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.23795592200141766;  // std dev = 0,669, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.16485229098275783;  // std dev = 0,119, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.2429913464827022;  // std dev = 0,453, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07776883367211007;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.17509802509115224;  // std dev = 0,271, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09177222768789327;  // std dev = 0,139, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.1837358707812727;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.15033613918625005;  // std dev = 0,584, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.11816468094241775;  // std dev = 0,105, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.17293536760539596;  // std dev = 0,396, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06644680638623211;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.16356743911733143;  // std dev = 0,278, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.05755122355227779;  // std dev = 0,017, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.10775063607834874;  // std dev = 0,144, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return 0.1426882671555988;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.1017493448789074;  // std dev = 0,524, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.118012
   Precision = 0.509091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.674699


Total learning time: 1.552 seconds
Total inference time: 1.373 seconds
AUC ROC: 0.999765


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:54:53
{'Learning time': 1.552, 'Inference time': 1.373, 'AUC ROC': 0.999765, 'AUC PR': 0.983476, 'Recall': 1.0, 'CLL': -0.118012, 'F1': 0.674699, 'Precision': [0.509091, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.160142
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.589 seconds
Total inference time: 0.803 seconds
AUC ROC: 0.983055


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:54:54
{'Learning time': 0.589, 'Inference time': 0.803, 'AUC ROC': 0.983055, 'AUC PR': 0.338212, 'Recall': 0.0, 'CLL': -0.160142, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.7405018762759829;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6249475655895571;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4893127157293236;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3686658221249617;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.27804969755906545;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.21383763039487166;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16826633465571472;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13518176386613595;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.11050708250003544;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.09163300171566749;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.505911
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.834 seconds
Total inference time: 1.418 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.933333
   AUC PR    = 0.882353
   CLL	      = -0.244323
   Precision = 0.882353 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9375


Total scoring time: 0.531 seconds
Parameter learned model CLL: -0.244323


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.328, 2, 15], 'false': [2.63e-09, 13, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [6.97e-09, 13, 0], 'true,true': [0.322, 2, 15]}]]
[{'': [0.10380622837370206, -1.2810265668751807e-17], 'true': [0.10380622837370206, nan]}, {'': [0.10380622837370226, 4.270088556250602e-18], 'true': [0.10380622837370226, nan]}, {'': [0.10380622837370232, 8.540177112501205e-18], 'true': [0.10380622837370232, nan]}, {'': [0.10380622837370244, -2.135044278125301e-18], 'true': [0.10380622837370244, nan]}, {'': [0.10380622837370246, 2.135044278125301e-18], 'true': [0.10380622837370246, nan]}, {'': [0.10380622837370239, 4.270088556250602e-18], 'true': [0.10380622837370239, nan]}, {'': [0.10380622837370244, 1.0675221390626506e-18], 'true': [0.10380622837370244, nan]}, {'': [0.10380622837370246, 0.0], 'true': [0.10380622837370246, nan]}, {'': [0.10380622837370243, 5.337610695313253e-19], 'true': [0.10380622837370243, nan], 'true,true': [0.10380622837370243, nan]}, {'': [0.10380622837370243, 3.736327486719277e-18], 'true': [0.10380622837370243, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.6081489350995123;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.5170719622367218;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.41257245288266;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.41751358415830986;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.3151786576185065;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.23731667183056895;  // std dev = 0,250, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.3439029510071991;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.2713430732457862;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.15529712054173628;  // std dev = 0,427, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.22111816347209062;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.11849188891976267;  // std dev = 0,428, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.18538508887631822;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.09138022113075514;  // std dev = 0,428, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.07727872532710403;  // std dev = 0,245, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.17534547232775063;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.14893936623276038;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.03682374004281648;  // std dev = 0,424, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.961333
   AUC PR    = 0.587871
   CLL	      = -0.391007
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 1.219 seconds
Total inference time: 1.444 seconds
AUC ROC: 0.961333


Results scoring model
   AUC ROC   = 0.986667
   AUC PR    = 0.985199
   CLL	      = -0.214692
   Precision = 0.882353 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9375


Total scoring time: 0.523 seconds
Refined model CLL: -0.214692


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.961333
   AUC PR    = 0.587871
   CLL	      = -0.391007
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 3.107 seconds
Total inference time: 1.444 seconds
AUC ROC: 0.961333
Total revision time: 3.107
Best scored revision CLL: -0.214692


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:55:01
{'Learning time': 3.107, 'Inference time': 1.444, 'AUC ROC': 0.961333, 'AUC PR': 0.587871, 'Recall': 1.0, 'CLL': -0.391007, 'parameter_15': {'Learning time': 0.834, 'Inference time': 1.418, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.505911, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.7392070123615109;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.5291767904738354;  // std dev = 0,378, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.14563846753663207;  // std dev = 0,171, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.5750887498568714;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.4276103265899063;  // std dev = 0,360, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.1287180799627095;  // std dev = 0,156, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.09830445241633747;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return -0.15616568231650652;  // std dev = 0,142, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.1330211903564389;  // std dev = 0,155, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return 0.3679313277266611;  // std dev = 0,193, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.42674686541752355;  // std dev = 0,258, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.3451615433655673;  // std dev = 2,11e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.25832575372898664;  // std dev = 0,290, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( actor(A), actor(B) )
%   | then return -0.08807181089784316;  // std dev = 0,006, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.16517373576527405;  // std dev = 0,211, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( female(A) )
%   | then return 0.21989212699009414;  // std dev = 0,156, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.276432942599279;  // std dev = 0,215, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( female(B) )
%   | then return -0.08183962169879566;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return -0.14997750624570458;  // std dev = 0,175, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12156866826583586;  // std dev = 0,197, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.23051071249881078;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.160271487630168;  // std dev = 0,247, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07355457972327913;  // std dev = 0,010, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.16025780542146706;  // std dev = 0,252, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.06985389852080934;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return -0.14085415719399666;  // std dev = 0,188, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11095144433638708;  // std dev = 0,218, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return 0.1471080027392255;  // std dev = 0,135, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.19261087411010863;  // std dev = 0,190, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.1703641859009163;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.10681607799288485;  // std dev = 0,220, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06279898837396225;  // std dev = 0,014, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.15229958865302895;  // std dev = 0,270, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( actor(A) )
%   | then if ( female(B) )
%   | | then return -0.06352847030257727;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.13531144650198065;  // std dev = 0,279, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.04654792291532044;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return 0.10710563702526739;  // std dev = 0,122, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.14444123340362963;  // std dev = 0,174, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.150762
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.89 seconds
Total inference time: 1.505 seconds
AUC ROC: 0.999765


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:55:04
{'Learning time': 1.89, 'Inference time': 1.505, 'AUC ROC': 0.999765, 'AUC PR': 0.983476, 'Recall': 1.0, 'CLL': -0.150762, 'F1': 0.973913, 'Precision': [0.949153, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.160136
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.656 seconds
Total inference time: 0.807 seconds
AUC ROC: 0.983055


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:55:06
{'Learning time': 0.656, 'Inference time': 0.807, 'AUC ROC': 0.983055, 'AUC PR': 0.338212, 'Recall': 0.0, 'CLL': -0.160136, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.6914822684328453;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4612598391067553;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3488463256948424;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423416;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12179491558002786;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.09745354768081692;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.07895233872555119;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.458212
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.933 seconds
Total inference time: 1.529 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.552 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.39e-08, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.826, 4, 20], 'false': [0.0, 16, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 16, 0], 'true,true': [0.373, 4, 20]}]]
[{'': [0.13888888888888906, -6.938893903907228e-18], 'true': [0.13888888888888906, nan]}, {'': [0.13888888888888937, 3.469446951953614e-18], 'true': [0.13888888888888937, nan]}, {'': [0.13888888888888917, 1.214306433183765e-17], 'true': [0.13888888888888917, nan]}, {'': [0.1388888888888889, -6.938893903907228e-18], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888887, 5.204170427930421e-18], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888895, 6.938893903907228e-18], 'true': [0.13888888888888895, nan]}, {'': [0.13888888888888884, -1.734723475976807e-18], 'true': [0.13888888888888884, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888892, 0.0], 'true': [0.13888888888888892, nan], 'true,true': [0.13888888888888892, nan]}, {'': [0.1388888888888889, 3.469446951953614e-18], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.139 seconds
Total inference time: 1.478 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.571 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 3.1950000000000003 seconds
Total inference time: 1.478 seconds
AUC ROC: 0.999547
Total revision time: 3.1950000000000003
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:55:13
{'Learning time': 3.1950000000000003, 'Inference time': 1.478, 'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'Recall': 1.0, 'CLL': -0.065262, 'parameter_20': {'Learning time': 0.933, 'Inference time': 1.529, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.458212, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'F1': 0.973913, 'Precision': [0.949153, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.7748156017661789;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.6526478931012827;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.6392070123615109;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.508738411682717;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.49932275605826126;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.47043324524836183;  // std dev = 0,022, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(A), actor(B) )
%   | then return -0.10159632948783634;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.24408902012134423;  // std dev = 0,494, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3569115032025315;  // std dev = 0,020, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(A), actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.21030014863878643;  // std dev = 0,447, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2797552208363879;  // std dev = 0,018, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(A), actor(B) )
%   | then return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.18342655482578185;  // std dev = 0,403, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.22698563539524344;  // std dev = 0,015, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.16177386455589757;  // std dev = 0,365, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1896352355291106;  // std dev = 0,014, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.14410727576573767;  // std dev = 0,332, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1621922011683321;  // std dev = 0,012, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.12951785560650314;  // std dev = 0,303, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.14134168966893923;  // std dev = 0,011, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(A) )
%   | then if ( female(B) )
%   | | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.1353085249603794;  // std dev = 0,246, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.037225442973854536;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.070836
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.912 seconds
Total inference time: 1.643 seconds
AUC ROC: 0.999765


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:55:17
{'Learning time': 1.912, 'Inference time': 1.643, 'AUC ROC': 0.999765, 'AUC PR': 0.983476, 'Recall': 1.0, 'CLL': -0.070836, 'F1': 0.973913, 'Precision': [0.949153, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.7748156017661789;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.160048
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.665 seconds
Total inference time: 0.807 seconds
AUC ROC: 0.983055


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:55:18
{'Learning time': 0.665, 'Inference time': 0.807, 'AUC ROC': 0.983055, 'AUC PR': 0.338212, 'Recall': 0.0, 'CLL': -0.160048, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.691482268432845;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5851860008555363;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4612598391067552;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.34884632569484253;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423427;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109179;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1217949155800278;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.09745354768081699;  // std dev = 2,041, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.07895233872555117;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.458212
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.917 seconds
Total inference time: 1.548 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.548 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.49e-08, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.39e-08, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.041, 5, 25], 'false': [0.0, 20, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [6.45e-09, 20, 0], 'true,true': [0.373, 5, 25]}]]
[{'': [0.13888888888888987, 2.7755575615628915e-18], 'true': [0.13888888888888987, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888912, 1.1102230246251566e-17], 'true': [0.13888888888888912, nan]}, {'': [0.1388888888888888, -1.3877787807814458e-18], 'true': [0.1388888888888888, nan]}, {'': [0.13888888888888884, 6.938893903907228e-18], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888892, 9.714451465470119e-18], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.1388888888888889, -1.3877787807814458e-18], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888892, -2.7755575615628915e-18], 'true': [0.13888888888888892, nan], 'true,true': [0.13888888888888892, nan]}, {'': [0.1388888888888889, 2.0816681711721684e-18], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109179;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.253 seconds
Total inference time: 1.422 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.547 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 3.265 seconds
Total inference time: 1.422 seconds
AUC ROC: 0.999547
Total revision time: 3.265
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:55:25
{'Learning time': 3.265, 'Inference time': 1.422, 'parameter_25': {'Learning time': 0.917, 'Inference time': 1.548, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.458212, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'Recall': 1.0, 'CLL': -0.065262, 'F1': 0.973913, 'Precision': [0.949153, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360638;  // std dev = 1,29e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926093;  // std dev = 1,18e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 1,49e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109179;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420275;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202622;  // std dev = 5,27e-09, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.548 seconds
Total inference time: 1.101 seconds
AUC ROC: 0.999547


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:55:28
{'Learning time': 1.548, 'Inference time': 1.101, 'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'Recall': 1.0, 'CLL': -0.065262, 'F1': 0.973913, 'Precision': [0.949153, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.153142
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.665 seconds
Total inference time: 0.835 seconds
AUC ROC: 0.999547


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:55:30
{'Learning time': 0.665, 'Inference time': 0.835, 'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'Recall': 0.0, 'CLL': -0.153142, 'F1': nan, 'Precision': [nan, 0.5]}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5724346493852266;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.48767788391726297;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3912569620992536;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3005711547884894;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22629823971521876;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16984358676510128;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12813320688246752;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09743184803714998;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.07468131696953094;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.057651940521137104;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.339032
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.777 seconds
Total inference time: 1.479 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.8
   AUC PR    = 0.714286
   CLL	      = -0.440744
   Precision = 0.714286 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.833333


Total scoring time: 0.478 seconds
Parameter learned model CLL: -0.440744


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.86e-09, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.195, 2, 5], 'false': [0.0, 3, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [1.32e-09, 3, 0], 'true,true': [0.452, 2, 5]}]]
[{'': [0.20408163265306106, 0.0], 'true': [0.20408163265306106, nan]}, {'': [0.20408163265306115, 0.0], 'true': [0.20408163265306115, nan]}, {'': [0.20408163265306115, 2.3129646346357427e-18], 'true': [0.20408163265306115, nan]}, {'': [0.2040816326530612, -1.1564823173178713e-18], 'true': [0.2040816326530612, nan]}, {'': [0.20408163265306128, 2.3129646346357427e-18], 'true': [0.20408163265306128, nan]}, {'': [0.2040816326530612, 0.0], 'true': [0.2040816326530612, nan]}, {'': [0.20408163265306126, 0.0], 'true': [0.20408163265306126, nan]}, {'': [0.2040816326530612, 1.1564823173178713e-18], 'true': [0.2040816326530612, nan]}, {'': [0.20408163265306123, -5.782411586589357e-19], 'true': [0.20408163265306123, nan], 'true,true': [0.20408163265306123, nan]}, {'': [0.2040816326530612, 5.782411586589357e-19], 'true': [0.2040816326530612, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5724346493852266;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.48767788391726297;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3912569620992536;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3005711547884894;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22629823971521876;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.16984358676510128;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12813320688246752;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09743184803714998;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07468131696953094;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.057651940521137104;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.339032
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.278 seconds
Total inference time: 1.21 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.8
   AUC PR    = 0.714286
   CLL	      = -0.440744
   Precision = 0.714286 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.833333


Total scoring time: 0.475 seconds
Refined model CLL: -0.440744


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.339032
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 3.008 seconds
Total inference time: 1.479 seconds
AUC ROC: 0.868098
Total revision time: 3.008
Best scored revision CLL: -0.440744


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:55:36
{'Learning time': 3.008, 'Inference time': 1.479, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.339032, 'parameter_5': {'Learning time': 0.777, 'Inference time': 1.479, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.339032, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.41642853892569953;  // std dev = 0,334, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.19890208353793024;  // std dev = 0,212, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12747659482650647;  // std dev = 0,067, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.3844334334677746;  // std dev = 0,779, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26661161944434675;  // std dev = 0,260, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.19455218326305354;  // std dev = 0,272, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12529111250474018;  // std dev = 0,111, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.24435911290272652;  // std dev = 0,673, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17667315962243427;  // std dev = 0,215, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.18428532830377678;  // std dev = 0,299, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.14319852135366565;  // std dev = 0,210, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1628671932017418;  // std dev = 0,271, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12802581381259773;  // std dev = 0,167, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.14908789676106404;  // std dev = 0,543, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10365242961323504;  // std dev = 0,186, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1533364308462902;  // std dev = 0,279, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.110214
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.203 seconds
Total inference time: 1.211 seconds
AUC ROC: 0.999416


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:55:39
{'Learning time': 1.203, 'Inference time': 1.211, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.110214, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.973999
   AUC PR    = 0.245763
   CLL	      = -0.162759
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.473 seconds
Total inference time: 0.816 seconds
AUC ROC: 0.973999


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:55:40
{'Learning time': 0.473, 'Inference time': 0.816, 'AUC ROC': 0.973999, 'AUC PR': 0.245763, 'Recall': 0.0, 'CLL': -0.162759, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5724346493852266;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4876778839172629;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3912569620992537;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3005711547884892;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22629823971521892;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1698435867651014;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12813320688246746;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09743184803714998;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.07468131696953091;  // std dev = 1,690, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.057651940521137146;  // std dev = 0,452, 14,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.339032
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.815 seconds
Total inference time: 1.485 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.8
   AUC PR    = 0.714286
   CLL	      = -0.440744
   Precision = 0.714286 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.833333


Total scoring time: 0.513 seconds
Parameter learned model CLL: -0.440744


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 6, 0], 'true,true': [0.452, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 6, 0], 'true,true': [0.452, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 6, 0], 'true,true': [0.452, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 6, 0], 'true,true': [0.452, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 6, 0], 'true,true': [0.452, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 6, 0], 'true,true': [0.452, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 6, 0], 'true,true': [0.452, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 6, 0], 'true,true': [0.452, 4, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.69, 4, 10], 'false': [1.86e-09, 6, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 6, 0], 'true,true': [0.452, 4, 10]}]]
[{'': [0.20408163265306115, -6.938893903907228e-18], 'true': [0.20408163265306115, nan]}, {'': [0.20408163265306115, -2.3129646346357427e-18], 'true': [0.20408163265306115, nan]}, {'': [0.20408163265306123, 0.0], 'true': [0.20408163265306123, nan]}, {'': [0.20408163265306126, 0.0], 'true': [0.20408163265306126, nan]}, {'': [0.20408163265306126, 1.1564823173178713e-18], 'true': [0.20408163265306126, nan]}, {'': [0.20408163265306123, 1.1564823173178713e-18], 'true': [0.20408163265306123, nan]}, {'': [0.20408163265306123, -1.1564823173178713e-18], 'true': [0.20408163265306123, nan]}, {'': [0.20408163265306123, 0.0], 'true': [0.20408163265306123, nan]}, {'': [0.2040816326530612, 5.782411586589357e-19], 'true': [0.2040816326530612, nan], 'true,true': [0.2040816326530612, nan]}, {'': [0.20408163265306123, -5.782411586589357e-19], 'true': [0.20408163265306123, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.155 seconds
Total inference time: 1.356 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.504 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 2.9869999999999997 seconds
Total inference time: 1.356 seconds
AUC ROC: 0.999416
Total revision time: 2.9869999999999997
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:55:47
{'Learning time': 2.9869999999999997, 'Inference time': 1.356, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.065794, 'parameter_10': {'Learning time': 0.815, 'Inference time': 1.485, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.339032, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6189976143448207;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4851287515461648;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.36568225360444984;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.37663492857936476;  // std dev = 0,116, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1771424029121651;  // std dev = 0,463, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.29349234218518283;  // std dev = 0,101, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.15839419448470568;  // std dev = 0,436, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.23674068343977547;  // std dev = 0,087, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14286521326732043;  // std dev = 0,410, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.19679582573116064;  // std dev = 0,076, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1298131378295649;  // std dev = 0,385, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1676233812909254;  // std dev = 0,067, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1187099153795438;  // std dev = 0,362, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.14558157070550104;  // std dev = 0,059, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1091680220407961;  // std dev = 0,340, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.076899
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.534 seconds
Total inference time: 1.476 seconds
AUC ROC: 0.999617


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:55:50
{'Learning time': 1.534, 'Inference time': 1.476, 'AUC ROC': 0.999617, 'AUC PR': 0.971227, 'Recall': 1.0, 'CLL': -0.076899, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */


Results
   AUC ROC   = 0.975954
   AUC PR    = 0.272034
   CLL	      = -0.162713
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.616 seconds
Total inference time: 0.832 seconds
AUC ROC: 0.975954


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:55:52
{'Learning time': 0.616, 'Inference time': 0.832, 'AUC ROC': 0.975954, 'AUC PR': 0.272034, 'Recall': 0.0, 'CLL': -0.162713, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.6476226193100386;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5494185715067316;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.43580662724469027;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.331164704788703;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24856222263410194;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.18776859068219615;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14373883200944887;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11158581592814869;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.08771890601691956;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.069690398723165;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.39345
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.85 seconds
Total inference time: 1.456 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.866667
   AUC PR    = 0.789474
   CLL	      = -0.354119
   Precision = 0.789474 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.882353


Total scoring time: 0.529 seconds
Parameter learned model CLL: -0.354119


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.777, 4, 15], 'false': [2.63e-09, 11, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 11, 0], 'true,true': [0.408, 4, 15]}]]
[{'': [0.16620498614958412, -1.0092936587501423e-17], 'true': [0.16620498614958412, nan]}, {'': [0.16620498614958432, 2.523234146875356e-18], 'true': [0.16620498614958432, nan]}, {'': [0.16620498614958465, 5.046468293750712e-18], 'true': [0.16620498614958465, nan]}, {'': [0.16620498614958448, 0.0], 'true': [0.16620498614958448, nan]}, {'': [0.16620498614958454, 0.0], 'true': [0.16620498614958454, nan]}, {'': [0.16620498614958443, 2.523234146875356e-18], 'true': [0.16620498614958443, nan]}, {'': [0.16620498614958445, 0.0], 'true': [0.16620498614958445, nan]}, {'': [0.16620498614958445, 6.30808536718839e-19], 'true': [0.16620498614958445, nan]}, {'': [0.16620498614958445, 6.30808536718839e-19], 'true': [0.16620498614958445, nan], 'true,true': [0.16620498614958445, nan]}, {'': [0.1662049861495845, 2.523234146875356e-18], 'true': [0.1662049861495845, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.205 seconds
Total inference time: 1.518 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.512 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.096 seconds
Total inference time: 1.518 seconds
AUC ROC: 0.999416
Total revision time: 3.096
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:55:58
{'Learning time': 3.096, 'Inference time': 1.518, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.065794, 'parameter_15': {'Learning time': 0.85, 'Inference time': 1.456, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.39345, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(A) )
%   | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(A) )
%   | then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.6465415686654066;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(A) )
%   | then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.5044629797645588;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.4854865285955123;  // std dev = 0,082, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(A), actor(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.2174279083378798;  // std dev = 0,184, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3675603705674586;  // std dev = 0,077, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(A), actor(B) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.1889706132776678;  // std dev = 0,167, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.28706858171311456;  // std dev = 0,068, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( female(A), actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.16623645164992754;  // std dev = 0,153, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.23212971595927592;  // std dev = 0,060, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(B) )
%   | then return -0.06623216512959335;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.18292820472185914;  // std dev = 0,338, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.19338478450631116;  // std dev = 0,052, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( female(B) )
%   | then return -0.062256595945567504;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.16068887576724927;  // std dev = 0,303, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.16502056177767693;  // std dev = 0,046, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( female(B) )
%   | then return -0.05872357283907668;  // std dev = 0,014, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.14270217418455505;  // std dev = 0,274, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.14353972212024715;  // std dev = 0,041, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(B) )
%   | then return -0.05556391520487448;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A), actor(B) )
%   | | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12795954882024935;  // std dev = 0,248, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.999214
   AUC PR    = 0.910741
   CLL	      = -0.065417
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.855 seconds
Total inference time: 1.571 seconds
AUC ROC: 0.999214


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:56:02
{'Learning time': 1.855, 'Inference time': 1.571, 'AUC ROC': 0.999214, 'AUC PR': 0.910741, 'Recall': 1.0, 'CLL': -0.065417, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(A) )
%   | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */


Results
   AUC ROC   = 0.972045
   AUC PR    = 0.229945
   CLL	      = -0.162865
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.626 seconds
Total inference time: 0.845 seconds
AUC ROC: 0.972045


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:56:04
{'Learning time': 0.626, 'Inference time': 0.845, 'AUC ROC': 0.972045, 'AUC PR': 0.229945, 'Recall': 0.0, 'CLL': -0.162865, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.6914822684328453;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4612598391067553;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3488463256948424;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423416;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12179491558002786;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.09745354768081692;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.07895233872555119;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.429317
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.886 seconds
Total inference time: 1.5 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.533 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.39e-08, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.826, 4, 20], 'false': [0.0, 16, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 16, 0], 'true,true': [0.373, 4, 20]}]]
[{'': [0.13888888888888906, -6.938893903907228e-18], 'true': [0.13888888888888906, nan]}, {'': [0.13888888888888937, 3.469446951953614e-18], 'true': [0.13888888888888937, nan]}, {'': [0.13888888888888917, 1.214306433183765e-17], 'true': [0.13888888888888917, nan]}, {'': [0.1388888888888889, -6.938893903907228e-18], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888887, 5.204170427930421e-18], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888895, 6.938893903907228e-18], 'true': [0.13888888888888895, nan]}, {'': [0.13888888888888884, -1.734723475976807e-18], 'true': [0.13888888888888884, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888892, 0.0], 'true': [0.13888888888888892, nan], 'true,true': [0.13888888888888892, nan]}, {'': [0.1388888888888889, 3.469446951953614e-18], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.237 seconds
Total inference time: 1.397 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.506 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.162 seconds
Total inference time: 1.397 seconds
AUC ROC: 0.999416
Total revision time: 3.162
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:56:10
{'Learning time': 3.162, 'Inference time': 1.397, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.065794, 'parameter_20': {'Learning time': 0.886, 'Inference time': 1.5, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.429317, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.7914822684328456;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.6045267906174348;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.6660633000779167;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( female(A) )
%   | then return 0.4749335700127619;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.5181199435476403;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.469730932466424;  // std dev = 0,092, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(B), female(A) )
%   | then return -0.10159632948783634;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783633;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.24147952537884465;  // std dev = 0,486, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.35659623612874214;  // std dev = 0,086, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(B), female(A) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(B) )
%   | | then return -0.09269127618926098;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.20808255423319114;  // std dev = 0,439, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2796452512897498;  // std dev = 0,076, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A), actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.18155092586279695;  // std dev = 0,397, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109177;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.22697132499363004;  // std dev = 0,066, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A), actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(B) )
%   | | then return -0.07877675473109177;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.16018757023510166;  // std dev = 0,360, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.18966371870817791;  // std dev = 0,058, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(A), actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.1427614453259033;  // std dev = 0,327, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.16223886883772434;  // std dev = 0,052, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(A), actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12837019317596993;  // std dev = 0,299, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.14139497543690843;  // std dev = 0,046, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(B), female(A) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(B) )
%   | | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11634621928174188;  // std dev = 0,274, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.999214
   AUC PR    = 0.910741
   CLL	      = -0.068162
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.812 seconds
Total inference time: 1.493 seconds
AUC ROC: 0.999214


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:56:14
{'Learning time': 1.812, 'Inference time': 1.493, 'AUC ROC': 0.999214, 'AUC PR': 0.910741, 'Recall': 1.0, 'CLL': -0.068162, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.7914822684328456;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */


Results
   AUC ROC   = 0.972045
   AUC PR    = 0.229945
   CLL	      = -0.16289
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.673 seconds
Total inference time: 0.829 seconds
AUC ROC: 0.972045


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:56:16
{'Learning time': 0.673, 'Inference time': 0.829, 'AUC ROC': 0.972045, 'AUC PR': 0.229945, 'Recall': 0.0, 'CLL': -0.16289, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.6646005480027375;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.563285584736772;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4457024086767857;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3380124605859271;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2537478665917126;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19216930606222232;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839683;  // std dev = 1,29e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14774895224836107;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109179;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1153515711182683;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.09128345998966082;  // std dev = 2,200, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420274;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.07305937331670807;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.406949
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.922 seconds
Total inference time: 1.483 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.88
   AUC PR    = 0.806452
   CLL	      = -0.334376
   Precision = 0.806452 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.892857


Total scoring time: 0.578 seconds
Parameter learned model CLL: -0.334376


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.67e-08, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.29e-08, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.2, 6, 25], 'false': [0.0, 19, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [6.45e-09, 19, 0], 'true,true': [0.395, 6, 25]}]]
[{'': [0.15608740894901246, 0.0], 'true': [0.15608740894901246, nan]}, {'': [0.15608740894901107, 0.0], 'true': [0.15608740894901107, nan]}, {'': [0.1560874089490117, 1.460819769243627e-17], 'true': [0.1560874089490117, nan]}, {'': [0.1560874089490113, -5.843279076974508e-18], 'true': [0.1560874089490113, nan]}, {'': [0.15608740894901157, 7.304098846218135e-18], 'true': [0.15608740894901157, nan]}, {'': [0.1560874089490115, 8.764918615461762e-18], 'true': [0.1560874089490115, nan]}, {'': [0.15608740894901146, -7.304098846218135e-19], 'true': [0.15608740894901146, nan]}, {'': [0.15608740894901138, -7.304098846218135e-19], 'true': [0.15608740894901138, nan]}, {'': [0.15608740894901135, -2.1912296538654404e-18], 'true': [0.15608740894901135, nan], 'true,true': [0.15608740894901135, nan]}, {'': [0.15608740894901152, 2.1912296538654404e-18], 'true': [0.15608740894901152, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839683;  // std dev = 1,29e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109179;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420274;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.336 seconds
Total inference time: 1.641 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.541 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.3770000000000002 seconds
Total inference time: 1.641 seconds
AUC ROC: 0.999416
Total revision time: 3.3770000000000002
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:56:23
{'Learning time': 3.3770000000000002, 'Inference time': 1.641, 'parameter_25': {'Learning time': 0.922, 'Inference time': 1.483, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.406949, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.065794, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.8081489350995122;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6045267906174348;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.6794533872440252;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else return -0.12544463852839138;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.4749335700127619;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.527470398902049;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else return -0.11231637819360638;  // std dev = 1,05e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.3584548159137827;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.3964381250956143;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else return -0.10159632948783635;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.3663283086721238;  // std dev = 0,130, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(B) )
%   | then return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.44279056317575977;  // std dev = 0,431, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.2863226504826604;  // std dev = 0,116, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(B) )
%   | then return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.3604237861014195;  // std dev = 0,369, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.23166620067980048;  // std dev = 0,102, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.2951112551834195;  // std dev = 0,311, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.19308506356740401;  // std dev = 0,089, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.24515710215379535;  // std dev = 0,263, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.1648192228573138;  // std dev = 0,079, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.20719498373015746;  // std dev = 0,225, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.14339997805293442;  // std dev = 0,071, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.17806775557927268;  // std dev = 0,195, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.07327
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.828 seconds
Total inference time: 1.488 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:56:26
{'Learning time': 1.828, 'Inference time': 1.488, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.07327, 'F1': 1.0, 'Precision': [1.0, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.8081489350995122;  // std dev = 0,218, 20,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */


Results
   AUC ROC   = 0.975188
   AUC PR    = 0.252639
   CLL	      = -0.162091
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.666 seconds
Total inference time: 0.891 seconds
AUC ROC: 0.975188


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:56:28
{'Learning time': 0.666, 'Inference time': 0.891, 'AUC ROC': 0.975188, 'AUC PR': 0.252639, 'Recall': 0.0, 'CLL': -0.162091, 'F1': nan, 'Precision': [nan, 0.5]}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.4831489350995123;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4136573287083126;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3366053739648666;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.26297558544868993;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20032545170291094;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15079889954054382;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11312434025950242;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08492715391619823;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.06391587871034281;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.04824192700154653;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.260668
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.783 seconds
Total inference time: 1.504 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.625
   CLL	      = -0.543944
   Precision = 0.625 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.769231


Total scoring time: 0.497 seconds
Parameter learned model CLL: -0.543944


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.369, 3, 5], 'false': [0.0, 2, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}]]
[{'': [0.23437499999999983, 0.0], 'true': [0.23437499999999983, nan]}, {'': [0.2343749999999998, 0.0], 'true': [0.2343749999999998, nan]}, {'': [0.234375, 0.0], 'true': [0.234375, nan]}, {'': [0.23437500000000006, 0.0], 'true': [0.23437500000000006, nan]}, {'': [0.234375, 0.0], 'true': [0.234375, nan]}, {'': [0.23437500000000003, 0.0], 'true': [0.23437500000000003, nan]}, {'': [0.23437500000000003, 0.0], 'true': [0.23437500000000003, nan]}, {'': [0.23437499999999997, 0.0], 'true': [0.23437499999999997, nan]}, {'': [0.234375, 0.0], 'true': [0.234375, nan], 'true,true': [0.234375, nan]}, {'': [0.23437499999999997, 0.0], 'true': [0.23437499999999997, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.141 seconds
Total inference time: 1.439 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.486 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 2.907 seconds
Total inference time: 1.439 seconds
AUC ROC: 0.985041
Total revision time: 2.907
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:56:35
{'Learning time': 2.907, 'Inference time': 1.439, 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'CLL': -0.124249, 'parameter_5': {'Learning time': 0.783, 'Inference time': 1.504, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.260668, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.064 seconds
Total inference time: 1.196 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:56:37
{'Learning time': 1.064, 'Inference time': 1.196, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 1.0, 'CLL': -0.575892, 'F1': 0.278997, 'Precision': [0.162113, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.533 seconds
Total inference time: 0.886 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:56:39
{'Learning time': 0.533, 'Inference time': 0.886, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 0.0, 'CLL': -0.236693, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.6273797043302815;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5328490890947368;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4239325089396988;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3229819329672577;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24247055537624246;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.18270684819255756;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.13920656791416966;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1073857272638388;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.0837849901638278;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.06600674956054416;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.330879
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.861 seconds
Total inference time: 1.611 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.85
   AUC PR    = 0.769231
   CLL	      = -0.377538
   Precision = 0.769231 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.869565


Total scoring time: 0.505 seconds
Parameter learned model CLL: -0.377538


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.519, 3, 10], 'false': [2.63e-09, 7, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}]]
[{'': [0.1775147928994082, -7.93016446160826e-18], 'true': [0.1775147928994082, nan]}, {'': [0.1775147928994084, -1.982541115402065e-18], 'true': [0.1775147928994084, nan]}, {'': [0.177514792899408, -1.982541115402065e-18], 'true': [0.177514792899408, nan]}, {'': [0.17751479289940836, 0.0], 'true': [0.17751479289940836, nan]}, {'': [0.1775147928994082, 0.0], 'true': [0.1775147928994082, nan]}, {'': [0.17751479289940816, 9.912705577010326e-19], 'true': [0.17751479289940816, nan]}, {'': [0.17751479289940827, -9.912705577010326e-19], 'true': [0.17751479289940827, nan]}, {'': [0.17751479289940827, 9.912705577010326e-19], 'true': [0.17751479289940827, nan]}, {'': [0.17751479289940827, 9.912705577010326e-19], 'true': [0.17751479289940827, nan], 'true,true': [0.17751479289940827, nan]}, {'': [0.1775147928994083, -4.956352788505163e-19], 'true': [0.1775147928994083, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.256 seconds
Total inference time: 1.455 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.498 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.12 seconds
Total inference time: 1.455 seconds
AUC ROC: 0.985041
Total revision time: 3.12
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:56:45
{'Learning time': 3.12, 'Inference time': 1.455, 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'CLL': -0.124249, 'parameter_10': {'Learning time': 0.861, 'Inference time': 1.611, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.330879, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.13 seconds
Total inference time: 1.064 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:56:48
{'Learning time': 1.13, 'Inference time': 1.064, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 1.0, 'CLL': -0.575892, 'F1': 0.278997, 'Precision': [0.162113, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.524 seconds
Total inference time: 0.874 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:56:50
{'Learning time': 0.524, 'Inference time': 0.874, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 0.0, 'CLL': -0.236693, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.6476226193100386;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5494185715067316;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.43580662724469027;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.331164704788703;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24856222263410194;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.18776859068219615;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14373883200944887;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11158581592814869;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.08771890601691956;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.069690398723165;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.342811
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.835 seconds
Total inference time: 1.428 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.866667
   AUC PR    = 0.789474
   CLL	      = -0.354119
   Precision = 0.789474 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.882353


Total scoring time: 0.545 seconds
Parameter learned model CLL: -0.354119


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.777, 4, 15], 'false': [2.63e-09, 11, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 11, 0], 'true,true': [0.408, 4, 15]}]]
[{'': [0.16620498614958412, -1.0092936587501423e-17], 'true': [0.16620498614958412, nan]}, {'': [0.16620498614958432, 2.523234146875356e-18], 'true': [0.16620498614958432, nan]}, {'': [0.16620498614958465, 5.046468293750712e-18], 'true': [0.16620498614958465, nan]}, {'': [0.16620498614958448, 0.0], 'true': [0.16620498614958448, nan]}, {'': [0.16620498614958454, 0.0], 'true': [0.16620498614958454, nan]}, {'': [0.16620498614958443, 2.523234146875356e-18], 'true': [0.16620498614958443, nan]}, {'': [0.16620498614958445, 0.0], 'true': [0.16620498614958445, nan]}, {'': [0.16620498614958445, 6.30808536718839e-19], 'true': [0.16620498614958445, nan]}, {'': [0.16620498614958445, 6.30808536718839e-19], 'true': [0.16620498614958445, nan], 'true,true': [0.16620498614958445, nan]}, {'': [0.1662049861495845, 2.523234146875356e-18], 'true': [0.1662049861495845, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.25 seconds
Total inference time: 1.695 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.523 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.153 seconds
Total inference time: 1.695 seconds
AUC ROC: 0.985041
Total revision time: 3.153
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:56:56
{'Learning time': 3.153, 'Inference time': 1.695, 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'CLL': -0.124249, 'parameter_15': {'Learning time': 0.835, 'Inference time': 1.428, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.342811, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.176 seconds
Total inference time: 1.078 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:56:59
{'Learning time': 1.176, 'Inference time': 1.078, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 1.0, 'CLL': -0.575892, 'F1': 0.278997, 'Precision': [0.162113, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.532 seconds
Total inference time: 0.872 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:57:01
{'Learning time': 0.532, 'Inference time': 0.872, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 0.0, 'CLL': -0.236693, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.6581489350995119;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5580193346218546;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4419486100244409;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3354113949509431;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.25176837314502193;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1904796103243717;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14620194507639978;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11389369465607484;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.08989956180301853;  // std dev = 2,000, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.07174810215160449;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.349243
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.885 seconds
Total inference time: 1.393 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.341891
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total scoring time: 0.557 seconds
Parameter learned model CLL: -0.341891


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.39e-08, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.0, 5, 20], 'false': [3.73e-09, 15, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [7.9e-09, 15, 0], 'true,true': [0.4, 5, 20]}]]
[{'': [0.16000000000000014, -1.4802973661668754e-17], 'true': [0.16000000000000014, nan]}, {'': [0.15999999999999975, 3.7007434154171884e-18], 'true': [0.15999999999999975, nan]}, {'': [0.16000000000000014, 1.295260195396016e-17], 'true': [0.16000000000000014, nan]}, {'': [0.16000000000000036, -5.551115123125783e-18], 'true': [0.16000000000000036, nan]}, {'': [0.16, 3.7007434154171884e-18], 'true': [0.16, nan]}, {'': [0.16000000000000006, 5.551115123125783e-18], 'true': [0.16000000000000006, nan]}, {'': [0.15999999999999998, -1.8503717077085942e-18], 'true': [0.15999999999999998, nan]}, {'': [0.15999999999999998, 9.251858538542971e-19], 'true': [0.15999999999999998, nan]}, {'': [0.15999999999999998, 9.251858538542971e-19], 'true': [0.15999999999999998, nan], 'true,true': [0.15999999999999998, nan]}, {'': [0.16, 4.163336342344337e-18], 'true': [0.16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.328 seconds
Total inference time: 1.594 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.532 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.3020000000000005 seconds
Total inference time: 1.594 seconds
AUC ROC: 0.985041
Total revision time: 3.3020000000000005
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:57:07
{'Learning time': 3.3020000000000005, 'Inference time': 1.594, 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'CLL': -0.124249, 'parameter_20': {'Learning time': 0.885, 'Inference time': 1.393, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.349243, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.6392070123615109;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.49932275605826126;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.3758491322444214;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.28401811356076057;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.28407322469510254;  // std dev = 0,143, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(A), actor(B) )
%   | then return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.28365761849457327;  // std dev = 0,486, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2302177500782213;  // std dev = 0,125, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07877675473109179;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.24903888178267083;  // std dev = 0,450, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1921107820685644;  // std dev = 0,109, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.21979558252930353;  // std dev = 0,411, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.16413637244823603;  // std dev = 0,097, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.19502559012702272;  // std dev = 0,375, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.14290410034152284;  // std dev = 0,086, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.17402968832433666;  // std dev = 0,341, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.977561
   AUC PR    = 0.504309
   CLL	      = -0.242594
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.956 seconds
Total inference time: 1.465 seconds
AUC ROC: 0.977561


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:57:11
{'Learning time': 1.956, 'Inference time': 1.465, 'AUC ROC': 0.977561, 'AUC PR': 0.504309, 'Recall': 1.0, 'CLL': -0.242594, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.848575
   AUC PR    = 0.136922
   CLL	      = -0.236206
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.657 seconds
Total inference time: 0.856 seconds
AUC ROC: 0.848575


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:57:13
{'Learning time': 0.657, 'Inference time': 0.856, 'AUC ROC': 0.848575, 'AUC PR': 0.136922, 'Recall': 0.0, 'CLL': -0.236206, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.6393989350995116;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5426919143120583;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.43099286828776007;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.32784349372229826;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783635;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24607639161015318;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926093;  // std dev = 1,05e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.18568882989429153;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839683;  // std dev = 1,18e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1418657924041094;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109179;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.10984242247455098;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.08608032379653505;  // std dev = 2,339, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420274;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.06815142566519763;  // std dev = 0,413, 32,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.337895
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.881 seconds
Total inference time: 1.639 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.86
   AUC PR    = 0.78125
   CLL	      = -0.363647
   Precision = 0.78125 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.877193


Total scoring time: 0.554 seconds
Parameter learned model CLL: -0.363647


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.67e-08, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 18, 0], 'true,true': [0.413, 7, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.339, 7, 25], 'false': [0.0, 18, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [6.45e-09, 18, 0], 'true,true': [0.413, 7, 25]}]]
[{'': [0.1708984375000011, -3.0839528461809902e-18], 'true': [0.1708984375000011, nan]}, {'': [0.17089843749999933, 0.0], 'true': [0.17089843749999933, nan]}, {'': [0.17089843750000042, 1.5419764230904953e-17], 'true': [0.17089843750000042, nan]}, {'': [0.17089843749999994, -4.625929269271485e-18], 'true': [0.17089843749999994, nan]}, {'': [0.1708984375, 6.1679056923619804e-18], 'true': [0.1708984375, nan]}, {'': [0.1708984375, 7.709882115452476e-18], 'true': [0.1708984375, nan]}, {'': [0.17089843749999994, 0.0], 'true': [0.17089843749999994, nan]}, {'': [0.17089843750000006, -7.709882115452476e-19], 'true': [0.17089843750000006, nan]}, {'': [0.17089843749999997, -1.5419764230904951e-18], 'true': [0.17089843749999997, nan], 'true,true': [0.17089843749999997, nan]}, {'': [0.17089843750000003, 2.3129646346357427e-18], 'true': [0.17089843750000003, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783635;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.09269127618926093;  // std dev = 1,05e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839683;  // std dev = 1,18e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.07877675473109179;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420274;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.288 seconds
Total inference time: 1.564 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.588 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.311 seconds
Total inference time: 1.564 seconds
AUC ROC: 0.985041
Total revision time: 3.311
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:57:20
{'Learning time': 3.311, 'Inference time': 1.564, 'parameter_25': {'Learning time': 0.881, 'Inference time': 1.639, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.337895, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'CLL': -0.124249, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( female(A) )
%   | then return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.6622329172201352;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.7194734122109542;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.5154428111118985;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.3875647182006322;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.4175135841583098;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.29398103437200096;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 1,67e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.2288562690978686;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.2551722425694894;  // std dev = 2,11e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109176;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.18306311556471894;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.20010430940854934;  // std dev = 0,111, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.3083833873737528;  // std dev = 0,576, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.17006415331858027;  // std dev = 0,097, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.27692056160294914;  // std dev = 0,544, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202618;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.14744215943120179;  // std dev = 0,087, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06419184008202618;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.24879969001797733;  // std dev = 0,506, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.977561
   AUC PR    = 0.504309
   CLL	      = -0.334946
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.711 seconds
Total inference time: 1.463 seconds
AUC ROC: 0.977561


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:57:23
{'Learning time': 1.711, 'Inference time': 1.463, 'AUC ROC': 0.977561, 'AUC PR': 0.504309, 'Recall': 1.0, 'CLL': -0.334946, 'F1': 0.278997, 'Precision': [0.162113, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */


Results
   AUC ROC   = 0.848575
   AUC PR    = 0.136922
   CLL	      = -0.236324
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.665 seconds
Total inference time: 0.951 seconds
AUC ROC: 0.848575


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:57:25
{'Learning time': 0.665, 'Inference time': 0.951, 'AUC ROC': 0.848575, 'AUC PR': 0.136922, 'Recall': 0.0, 'CLL': -0.236324, 'F1': nan, 'Precision': [nan, 0.5]}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5724346493852266;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.48767788391726297;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3912569620992536;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3005711547884894;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.22629823971521876;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16984358676510128;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12813320688246752;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09743184803714998;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.07468131696953094;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.057651940521137104;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.367591
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.815 seconds
Total inference time: 1.157 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.8
   AUC PR    = 0.714286
   CLL	      = -0.440744
   Precision = 0.714286 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.833333


Total scoring time: 0.489 seconds
Parameter learned model CLL: -0.440744


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.86e-09, 3, 0], 'true,true': [0.452, 2, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.195, 2, 5], 'false': [0.0, 3, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [1.32e-09, 3, 0], 'true,true': [0.452, 2, 5]}]]
[{'': [0.20408163265306106, 0.0], 'true': [0.20408163265306106, nan]}, {'': [0.20408163265306115, 0.0], 'true': [0.20408163265306115, nan]}, {'': [0.20408163265306115, 2.3129646346357427e-18], 'true': [0.20408163265306115, nan]}, {'': [0.2040816326530612, -1.1564823173178713e-18], 'true': [0.2040816326530612, nan]}, {'': [0.20408163265306128, 2.3129646346357427e-18], 'true': [0.20408163265306128, nan]}, {'': [0.2040816326530612, 0.0], 'true': [0.2040816326530612, nan]}, {'': [0.20408163265306126, 0.0], 'true': [0.20408163265306126, nan]}, {'': [0.2040816326530612, 1.1564823173178713e-18], 'true': [0.2040816326530612, nan]}, {'': [0.20408163265306123, -5.782411586589357e-19], 'true': [0.20408163265306123, nan], 'true,true': [0.20408163265306123, nan]}, {'': [0.2040816326530612, 5.782411586589357e-19], 'true': [0.2040816326530612, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5724346493852266;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.48767788391726297;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3912569620992536;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3005711547884894;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.22629823971521876;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.16984358676510128;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12813320688246752;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09743184803714998;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07468131696953094;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.057651940521137104;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.367591
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.987 seconds
Total inference time: 1.062 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.8
   AUC PR    = 0.714286
   CLL	      = -0.440744
   Precision = 0.714286 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.833333


Total scoring time: 0.46 seconds
Refined model CLL: -0.440744


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.367591
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.751 seconds
Total inference time: 1.157 seconds
AUC ROC: 0.85431
Total revision time: 2.751
Best scored revision CLL: -0.440744


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:57:31
{'Learning time': 2.751, 'Inference time': 1.157, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.367591, 'parameter_5': {'Learning time': 0.815, 'Inference time': 1.157, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.367591, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.41642853892569953;  // std dev = 0,334, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.19890208353793024;  // std dev = 0,212, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12747659482650647;  // std dev = 0,067, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.3844334334677746;  // std dev = 0,779, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26661161944434675;  // std dev = 0,260, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.19455218326305354;  // std dev = 0,272, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12529111250474018;  // std dev = 0,111, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.24435911290272652;  // std dev = 0,673, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17667315962243427;  // std dev = 0,215, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.18428532830377678;  // std dev = 0,299, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.14319852135366565;  // std dev = 0,210, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1628671932017418;  // std dev = 0,271, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12802581381259773;  // std dev = 0,167, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.14908789676106404;  // std dev = 0,543, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.10365242961323504;  // std dev = 0,186, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1533364308462902;  // std dev = 0,279, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.123781
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.212 seconds
Total inference time: 1.034 seconds
AUC ROC: 0.998942


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:57:33
{'Learning time': 1.212, 'Inference time': 1.034, 'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'Recall': 1.0, 'CLL': -0.123781, 'F1': 0.957447, 'Precision': [0.918367, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.173549
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.506 seconds
Total inference time: 0.719 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:57:35
{'Learning time': 0.506, 'Inference time': 0.719, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 0.0, 'CLL': -0.173549, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.6914822684328455;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.46125983910675544;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.34884632569484214;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423424;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.12179491558002802;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.09745354768081678;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.0789523387255512;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.465961
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.853 seconds
Total inference time: 1.176 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.535 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.291, 2, 10], 'false': [0.0, 8, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [0.1388888888888887, nan]}, {'': [0.13888888888888914, 0.0], 'true': [0.13888888888888914, nan]}, {'': [0.1388888888888891, -1.734723475976807e-18], 'true': [0.1388888888888891, nan]}, {'': [0.138888888888889, 1.734723475976807e-18], 'true': [0.138888888888889, nan]}, {'': [0.1388888888888888, 0.0], 'true': [0.1388888888888888, nan]}, {'': [0.13888888888888892, 1.734723475976807e-18], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888887, 8.673617379884035e-19], 'true': [0.13888888888888887, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan], 'true,true': [0.1388888888888889, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5724346493852266;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.48767788391726297;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3912569620992536;  // std dev = 0,452, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2789755602157208;  // std dev = 0,759, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.4196187738361084;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.3516112347597973;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.20156699845049375;  // std dev = 0,444, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.14131401713494404;  // std dev = 0,739, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.2656132217454915;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.24882485289270181;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.0919711025297828;  // std dev = 0,438, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.20526376826748094;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.07065362572134008;  // std dev = 0,438, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.043616109823597114;  // std dev = 0,713, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.16496971806145108;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.1676193341248341;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.02274261164293626;  // std dev = 0,433, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.914296
   AUC PR    = 0.364429
   CLL	      = -0.384786
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.226 seconds
Total inference time: 1.212 seconds
AUC ROC: 0.914296


Results scoring model
   AUC ROC   = 0.975
   AUC PR    = 0.971683
   CLL	      = -0.260797
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.487 seconds
Refined model CLL: -0.260797


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.914296
   AUC PR    = 0.364429
   CLL	      = -0.384786
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 3.101 seconds
Total inference time: 1.212 seconds
AUC ROC: 0.914296
Total revision time: 3.101
Best scored revision CLL: -0.260797


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:57:41
{'Learning time': 3.101, 'Inference time': 1.212, 'AUC ROC': 0.914296, 'AUC PR': 0.364429, 'Recall': 1.0, 'CLL': -0.384786, 'parameter_10': {'Learning time': 0.853, 'Inference time': 1.176, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.465961, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.5155129923615089;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.26919646597369673;  // std dev = 0,235, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.14945766425666812;  // std dev = 0,127, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.38854292568974114;  // std dev = 1,05e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.21590731103509686;  // std dev = 0,218, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.1335651194079704;  // std dev = 0,119, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.301117089704821;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.1743536833091278;  // std dev = 0,208, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.12052610320000645;  // std dev = 0,111, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.13718399468218476;  // std dev = 0,573, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.2704291694486284;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09449864731158572;  // std dev = 0,136, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.21750169531359456;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.11007276768654808;  // std dev = 0,175, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.10859411179982349;  // std dev = 0,117, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.18275584585057425;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.09246185728380839;  // std dev = 0,173, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return -0.09986867703490102;  // std dev = 0,111, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.06936816932475304;  // std dev = 0,480, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.1876412681413494;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( female(B) )
%   | then return -0.10052927609204167;  // std dev = 0,117, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07668656869219286;  // std dev = 0,131, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.136171
   Precision = 0.333333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.5


Total learning time: 1.52 seconds
Total inference time: 1.127 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:57:44
{'Learning time': 1.52, 'Inference time': 1.127, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.136171, 'F1': 0.5, 'Precision': [0.333333, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.96877
   AUC PR    = 0.275129
   CLL	      = -0.172192
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.598 seconds
Total inference time: 0.729 seconds
AUC ROC: 0.96877


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:57:45
{'Learning time': 0.598, 'Inference time': 0.729, 'AUC ROC': 0.96877, 'AUC PR': 0.275129, 'Recall': 0.0, 'CLL': -0.172192, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.7405018762759829;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6249475655895571;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4893127157293236;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3686658221249617;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.27804969755906545;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.21383763039487166;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16826633465571472;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13518176386613595;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.11050708250003544;  // std dev = 1,328, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.09163300171566749;  // std dev = 0,322, 17,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.514146
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.921 seconds
Total inference time: 1.104 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.933333
   AUC PR    = 0.882353
   CLL	      = -0.244323
   Precision = 0.882353 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9375


Total scoring time: 0.525 seconds
Parameter learned model CLL: -0.244323


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.322, 2, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.328, 2, 15], 'false': [2.63e-09, 13, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [6.97e-09, 13, 0], 'true,true': [0.322, 2, 15]}]]
[{'': [0.10380622837370206, -1.2810265668751807e-17], 'true': [0.10380622837370206, nan]}, {'': [0.10380622837370226, 4.270088556250602e-18], 'true': [0.10380622837370226, nan]}, {'': [0.10380622837370232, 8.540177112501205e-18], 'true': [0.10380622837370232, nan]}, {'': [0.10380622837370244, -2.135044278125301e-18], 'true': [0.10380622837370244, nan]}, {'': [0.10380622837370246, 2.135044278125301e-18], 'true': [0.10380622837370246, nan]}, {'': [0.10380622837370239, 4.270088556250602e-18], 'true': [0.10380622837370239, nan]}, {'': [0.10380622837370244, 1.0675221390626506e-18], 'true': [0.10380622837370244, nan]}, {'': [0.10380622837370246, 0.0], 'true': [0.10380622837370246, nan]}, {'': [0.10380622837370243, 5.337610695313253e-19], 'true': [0.10380622837370243, nan], 'true,true': [0.10380622837370243, nan]}, {'': [0.10380622837370243, 3.736327486719277e-18], 'true': [0.10380622837370243, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.6359267128772901;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5398498420741675;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4289562725350853;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.320974549240982;  // std dev = 0,273, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.42366226990235945;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.3420969658276638;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.22375551733006205;  // std dev = 0,410, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.269716718326672;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.1693676837404798;  // std dev = 0,411, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.12588598186669028;  // std dev = 0,266, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.2244362169519798;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.19914240118932958;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.08293761777502469;  // std dev = 0,407, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.16927061289767353;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.0656562176266766;  // std dev = 0,407, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.14678081991487457;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.05239726051962669;  // std dev = 0,407, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.914296
   AUC PR    = 0.364429
   CLL	      = -0.423683
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.52 seconds
Total inference time: 1.3 seconds
AUC ROC: 0.914296


Results scoring model
   AUC ROC   = 0.984444
   AUC PR    = 0.982174
   CLL	      = -0.21917
   Precision = 0.882353 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.9375


Total scoring time: 0.512 seconds
Refined model CLL: -0.21917


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.914296
   AUC PR    = 0.364429
   CLL	      = -0.423683
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 3.478 seconds
Total inference time: 1.3 seconds
AUC ROC: 0.914296
Total revision time: 3.478
Best scored revision CLL: -0.21917


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:57:52
{'Learning time': 3.478, 'Inference time': 1.3, 'AUC ROC': 0.914296, 'AUC PR': 0.364429, 'Recall': 1.0, 'CLL': -0.423683, 'parameter_15': {'Learning time': 0.921, 'Inference time': 1.104, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.514146, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.7470378239884012;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6302322013528495;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.4930252128087158;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.4824334235202735;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.30215582557027737;  // std dev = 0,216, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( female(A) )
%   | then return -0.18479037888621427;  // std dev = 0,372, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.3652315706441569;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.23989465091318823;  // std dev = 0,199, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( female(A) )
%   | then return -0.16302370933922639;  // std dev = 0,345, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.2853736932648163;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.19265038674685891;  // std dev = 0,190, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( female(A) )
%   | then return -0.14537861742401592;  // std dev = 0,319, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.2026335343098908;  // std dev = 0,155, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else return -0.09072679378354634;  // std dev = 0,155, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.19687087300598038;  // std dev = 7,45e-09, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.13111922082857777;  // std dev = 0,165, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( female(A) )
%   | then return -0.13649269174238915;  // std dev = 0,345, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.07243916795560418;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.10321526865519876;  // std dev = 0,182, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.1975873237219202;  // std dev = 1,05e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( female(B) )
%   | then return -0.09617313661071497;  // std dev = 0,117, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07598775862557938;  // std dev = 0,130, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.15367628267850553;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.08990528955270977;  // std dev = 0,146, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( female(A) )
%   | then return -0.12602284645289694;  // std dev = 0,348, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.06278178344368927;  // std dev = 0,001, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.150242
   Precision = 0.333333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.5


Total learning time: 1.746 seconds
Total inference time: 1.213 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:57:55
{'Learning time': 1.746, 'Inference time': 1.213, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.150242, 'F1': 0.5, 'Precision': [0.333333, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.7470378239884012;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.96877
   AUC PR    = 0.275129
   CLL	      = -0.172138
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.638 seconds
Total inference time: 0.74 seconds
AUC ROC: 0.96877


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:57:57
{'Learning time': 0.638, 'Inference time': 0.74, 'AUC ROC': 0.96877, 'AUC PR': 0.275129, 'Recall': 0.0, 'CLL': -0.172138, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.7277141524908164;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6145965951068212;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4820310770235995;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.36348006169997665;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.27380696439698715;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2099390251949393;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16449338179098782;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13147590894712874;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.1068656588370264;  // std dev = 1,615, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.08806971003324962;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.501098
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.89 seconds
Total inference time: 1.185 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.925
   AUC PR    = 0.869565
   CLL	      = -0.259756
   Precision = 0.869565 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.930233


Total scoring time: 0.591 seconds
Parameter learned model CLL: -0.259756


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.49e-08, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.615, 3, 20], 'false': [0.0, 17, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 17, 0], 'true,true': [0.337, 3, 20]}]]
[{'': [0.11342155009451807, -3.2653618371328133e-18], 'true': [0.11342155009451807, nan]}, {'': [0.1134215500945183, 0.0], 'true': [0.1134215500945183, nan]}, {'': [0.11342155009451824, 1.3061447348531253e-17], 'true': [0.11342155009451824, nan]}, {'': [0.11342155009451785, -8.163404592832034e-18], 'true': [0.11342155009451785, nan]}, {'': [0.1134215500945179, 4.89804275569922e-18], 'true': [0.1134215500945179, nan]}, {'': [0.1134215500945179, 8.163404592832034e-18], 'true': [0.1134215500945179, nan]}, {'': [0.11342155009451796, -2.44902137784961e-18], 'true': [0.11342155009451796, nan]}, {'': [0.11342155009451796, 0.0], 'true': [0.11342155009451796, nan]}, {'': [0.11342155009451795, -8.163404592832033e-19], 'true': [0.11342155009451795, nan], 'true,true': [0.11342155009451795, nan]}, {'': [0.11342155009451797, 3.2653618371328133e-18], 'true': [0.11342155009451797, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.184 seconds
Total inference time: 1.216 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.52 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.185 seconds
Total inference time: 1.216 seconds
AUC ROC: 0.998942
Total revision time: 3.185
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:58:03
{'Learning time': 3.185, 'Inference time': 1.216, 'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'Recall': 1.0, 'CLL': -0.068112, 'parameter_20': {'Learning time': 0.89, 'Inference time': 1.185, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.501098, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'F1': 0.957447, 'Precision': [0.918367, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.7470378239884012;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6302322013528495;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.7194734122109542;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.4930252128087158;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.3713223124091624;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.4175135841583098;  // std dev = 4,21e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.34896935105668636;  // std dev = 0,155, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return -0.19588189957111052;  // std dev = 0,461, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2747204004937864;  // std dev = 0,136, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A) )
%   | then return -0.17420926197757058;  // std dev = 0,433, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2236846461978678;  // std dev = 0,119, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A) )
%   | then return -0.156301960475227;  // std dev = 0,404, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.18737653836339946;  // std dev = 0,105, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A) )
%   | then return -0.1412955846135025;  // std dev = 0,377, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1605840271237828;  // std dev = 0,093, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return -0.128575269622979;  // std dev = 0,352, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.140156843264805;  // std dev = 0,083, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A) )
%   | then return -0.1176881225612871;  // std dev = 0,329, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.103611
   Precision = 0.333333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.5


Total learning time: 1.681 seconds
Total inference time: 1.176 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:58:06
{'Learning time': 1.681, 'Inference time': 1.176, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.103611, 'F1': 0.5, 'Precision': [0.333333, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.7470378239884012;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 0.96877
   AUC PR    = 0.275129
   CLL	      = -0.172138
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.665 seconds
Total inference time: 0.754 seconds
AUC ROC: 0.96877


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:58:08
{'Learning time': 0.665, 'Inference time': 0.754, 'AUC ROC': 0.96877, 'AUC PR': 0.275129, 'Recall': 0.0, 'CLL': -0.172138, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.691482268432845;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5851860008555363;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4612598391067552;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.34884632569484253;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.19945264276423427;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109179;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1217949155800278;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.09745354768081699;  // std dev = 2,041, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.07895233872555117;  // std dev = 0,373, 30,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.465961
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.958 seconds
Total inference time: 1.241 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.582 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.49e-08, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.39e-08, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 20, 0], 'true,true': [0.373, 5, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.041, 5, 25], 'false': [0.0, 20, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [6.45e-09, 20, 0], 'true,true': [0.373, 5, 25]}]]
[{'': [0.13888888888888987, 2.7755575615628915e-18], 'true': [0.13888888888888987, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888912, 1.1102230246251566e-17], 'true': [0.13888888888888912, nan]}, {'': [0.1388888888888888, -1.3877787807814458e-18], 'true': [0.1388888888888888, nan]}, {'': [0.13888888888888884, 6.938893903907228e-18], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888892, 9.714451465470119e-18], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.1388888888888889, -1.3877787807814458e-18], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888892, -2.7755575615628915e-18], 'true': [0.13888888888888892, nan], 'true,true': [0.13888888888888892, nan]}, {'': [0.1388888888888889, 2.0816681711721684e-18], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109179;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.351 seconds
Total inference time: 1.21 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.563 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.4539999999999997 seconds
Total inference time: 1.21 seconds
AUC ROC: 0.998942
Total revision time: 3.4539999999999997
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:58:14
{'Learning time': 3.4539999999999997, 'Inference time': 1.21, 'parameter_25': {'Learning time': 0.958, 'Inference time': 1.241, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.465961, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'Recall': 1.0, 'CLL': -0.068112, 'F1': 0.957447, 'Precision': [0.918367, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.10159632948783635;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.09269127618926094;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2785687033350102;  // std dev = 0,122, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return -0.18700148129627672;  // std dev = 0,558, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.22629147811133535;  // std dev = 0,106, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( female(A) )
%   | then return -0.16893841859498734;  // std dev = 0,533, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.18921531360960395;  // std dev = 0,093, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return -0.1537032503496247;  // std dev = 0,506, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07324622576333704;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1619309282090585;  // std dev = 0,082, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( female(A) )
%   | then return -0.14066098684607922;  // std dev = 0,480, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.06842697784420272;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1411760626423842;  // std dev = 0,073, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( female(A) )
%   | then return -0.12936812069655482;  // std dev = 0,455, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.06419184008202619;  // std dev = 6,97e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.118543
   Precision = 0.28125 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.439024


Total learning time: 1.827 seconds
Total inference time: 1.233 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:58:17
{'Learning time': 1.827, 'Inference time': 1.233, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.118543, 'F1': 0.439024, 'Precision': [0.28125, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */


Results
   AUC ROC   = 0.96877
   AUC PR    = 0.275129
   CLL	      = -0.172111
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.667 seconds
Total inference time: 0.766 seconds
AUC ROC: 0.96877


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:58:19
{'Learning time': 0.667, 'Inference time': 0.766, 'AUC ROC': 0.96877, 'AUC PR': 0.275129, 'Recall': 0.0, 'CLL': -0.172111, 'F1': nan, 'Precision': [nan, 0.5]}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.4831489350995123;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4136573287083126;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3366053739648666;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.26297558544868993;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20032545170291094;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15079889954054382;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11312434025950242;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08492715391619823;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.06391587871034281;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.04824192700154653;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.291954
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.798 seconds
Total inference time: 1.084 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.625
   CLL	      = -0.543944
   Precision = 0.625 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.769231


Total scoring time: 0.479 seconds
Parameter learned model CLL: -0.543944


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.369, 3, 5], 'false': [0.0, 2, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}]]
[{'': [0.23437499999999983, 0.0], 'true': [0.23437499999999983, nan]}, {'': [0.2343749999999998, 0.0], 'true': [0.2343749999999998, nan]}, {'': [0.234375, 0.0], 'true': [0.234375, nan]}, {'': [0.23437500000000006, 0.0], 'true': [0.23437500000000006, nan]}, {'': [0.234375, 0.0], 'true': [0.234375, nan]}, {'': [0.23437500000000003, 0.0], 'true': [0.23437500000000003, nan]}, {'': [0.23437500000000003, 0.0], 'true': [0.23437500000000003, nan]}, {'': [0.23437499999999997, 0.0], 'true': [0.23437499999999997, nan]}, {'': [0.234375, 0.0], 'true': [0.234375, nan], 'true,true': [0.234375, nan]}, {'': [0.23437499999999997, 0.0], 'true': [0.23437499999999997, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.18 seconds
Total inference time: 1.195 seconds
AUC ROC: 0.999276


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.475 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 2.932 seconds
Total inference time: 1.195 seconds
AUC ROC: 0.999276
Total revision time: 2.932
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:58:25
{'Learning time': 2.932, 'Inference time': 1.195, 'AUC ROC': 0.999276, 'AUC PR': 0.9375, 'Recall': 1.0, 'CLL': -0.066646, 'parameter_5': {'Learning time': 0.798, 'Inference time': 1.084, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.291954, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'F1': 0.967742, 'Precision': [0.9375, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.977547
   AUC PR    = 0.326087
   CLL	      = -0.154459
   Precision = 0.326087 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.491803


Total learning time: 1.054 seconds
Total inference time: 0.947 seconds
AUC ROC: 0.977547


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:58:27
{'Learning time': 1.054, 'Inference time': 0.947, 'AUC ROC': 0.977547, 'AUC PR': 0.326087, 'Recall': 1.0, 'CLL': -0.154459, 'F1': 0.491803, 'Precision': [0.326087, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.977547
   AUC PR    = 0.326087
   CLL	      = -0.1668
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.488 seconds
Total inference time: 0.71 seconds
AUC ROC: 0.977547


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:58:29
{'Learning time': 0.488, 'Inference time': 0.71, 'AUC ROC': 0.977547, 'AUC PR': 0.326087, 'Recall': 0.0, 'CLL': -0.1668, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.6273797043302815;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5328490890947368;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4239325089396988;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3229819329672577;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24247055537624246;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.18270684819255756;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.13920656791416966;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1073857272638388;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.0837849901638278;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.06600674956054416;  // std dev = 0,421, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.387196
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.849 seconds
Total inference time: 1.097 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.85
   AUC PR    = 0.769231
   CLL	      = -0.377538
   Precision = 0.769231 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.869565


Total scoring time: 0.528 seconds
Parameter learned model CLL: -0.377538


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 7, 0], 'true,true': [0.421, 3, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.519, 3, 10], 'false': [2.63e-09, 7, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 7, 0], 'true,true': [0.421, 3, 10]}]]
[{'': [0.1775147928994082, -7.93016446160826e-18], 'true': [0.1775147928994082, nan]}, {'': [0.1775147928994084, -1.982541115402065e-18], 'true': [0.1775147928994084, nan]}, {'': [0.177514792899408, -1.982541115402065e-18], 'true': [0.177514792899408, nan]}, {'': [0.17751479289940836, 0.0], 'true': [0.17751479289940836, nan]}, {'': [0.1775147928994082, 0.0], 'true': [0.1775147928994082, nan]}, {'': [0.17751479289940816, 9.912705577010326e-19], 'true': [0.17751479289940816, nan]}, {'': [0.17751479289940827, -9.912705577010326e-19], 'true': [0.17751479289940827, nan]}, {'': [0.17751479289940827, 9.912705577010326e-19], 'true': [0.17751479289940827, nan]}, {'': [0.17751479289940827, 9.912705577010326e-19], 'true': [0.17751479289940827, nan], 'true,true': [0.17751479289940827, nan]}, {'': [0.1775147928994083, -4.956352788505163e-19], 'true': [0.1775147928994083, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.252 seconds
Total inference time: 1.19 seconds
AUC ROC: 0.999276


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.552 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 3.181 seconds
Total inference time: 1.19 seconds
AUC ROC: 0.999276
Total revision time: 3.181
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:58:35
{'Learning time': 3.181, 'Inference time': 1.19, 'AUC ROC': 0.999276, 'AUC PR': 0.9375, 'Recall': 1.0, 'CLL': -0.066646, 'parameter_10': {'Learning time': 0.849, 'Inference time': 1.097, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.387196, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'F1': 0.967742, 'Precision': [0.9375, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.4287937217502085;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( female(B), actor(A) )
%   | then return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.2521962768761045;  // std dev = 0,391, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.32836965075149493;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( female(B), actor(A) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.21858076915840105;  // std dev = 0,355, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.2603909064144059;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( female(B), actor(A) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.19135930991885605;  // std dev = 0,322, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.21343740305801004;  // std dev = 9,13e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(B), actor(A) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.16911667723973467;  // std dev = 0,292, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.17979070574610245;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(B), actor(A) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.15077955359158743;  // std dev = 0,265, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( female(A) )
%   | | then return 0.15478462764393408;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( female(B), actor(A) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.1355241276670247;  // std dev = 0,242, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.998906
   AUC PR    = 0.897839
   CLL	      = -0.072802
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.753 seconds
Total inference time: 1.302 seconds
AUC ROC: 0.998906


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:58:38
{'Learning time': 1.753, 'Inference time': 1.302, 'AUC ROC': 0.998906, 'AUC PR': 0.897839, 'Recall': 1.0, 'CLL': -0.072802, 'F1': 0.967742, 'Precision': [0.9375, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.975728
   AUC PR    = 0.303381
   CLL	      = -0.167301
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.61 seconds
Total inference time: 0.718 seconds
AUC ROC: 0.975728


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:58:40
{'Learning time': 0.61, 'Inference time': 0.718, 'AUC ROC': 0.975728, 'AUC PR': 0.303381, 'Recall': 0.0, 'CLL': -0.167301, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5399671169176942;  // std dev = 0,466, 22,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46084995018555497;  // std dev = 0,466, 22,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.371617857245754;  // std dev = 0,466, 22,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2871102631561468;  // std dev = 0,466, 22,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2168742729696479;  // std dev = 0,466, 22,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1627226088688056;  // std dev = 0,466, 22,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12231596689351484;  // std dev = 0,466, 22,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09242484417946101;  // std dev = 0,466, 22,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.07025615584949726;  // std dev = 2,185, 22,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.05370308085320005;  // std dev = 0,466, 22,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.326155
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.875 seconds
Total inference time: 1.254 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.766667
   AUC PR    = 0.681818
   CLL	      = -0.478079
   Precision = 0.681818 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.810811


Total scoring time: 0.512 seconds
Parameter learned model CLL: -0.478079


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.466, 7, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.466, 7, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.466, 7, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.466, 7, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.466, 7, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.466, 7, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.466, 7, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 8, 0], 'true,true': [0.466, 7, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.185, 7, 15], 'false': [0.0, 8, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.466, 7, 15]}]]
[{'': [0.21694214876033016, -6.938893903907228e-18], 'true': [0.21694214876033016, nan]}, {'': [0.2169421487603304, 0.0], 'true': [0.2169421487603304, nan]}, {'': [0.21694214876033022, -1.734723475976807e-18], 'true': [0.21694214876033022, nan]}, {'': [0.21694214876033052, 1.734723475976807e-18], 'true': [0.21694214876033052, nan]}, {'': [0.2169421487603306, 0.0], 'true': [0.2169421487603306, nan]}, {'': [0.21694214876033052, 1.734723475976807e-18], 'true': [0.21694214876033052, nan]}, {'': [0.21694214876033052, 0.0], 'true': [0.21694214876033052, nan]}, {'': [0.21694214876033058, 8.673617379884035e-19], 'true': [0.21694214876033058, nan]}, {'': [0.21694214876033052, 0.0], 'true': [0.21694214876033052, nan], 'true,true': [0.21694214876033052, nan]}, {'': [0.21694214876033052, 0.0], 'true': [0.21694214876033052, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.257 seconds
Total inference time: 1.233 seconds
AUC ROC: 0.999276


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.498 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 3.1420000000000003 seconds
Total inference time: 1.233 seconds
AUC ROC: 0.999276
Total revision time: 3.1420000000000003
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:58:46
{'Learning time': 3.1420000000000003, 'Inference time': 1.233, 'AUC ROC': 0.999276, 'AUC PR': 0.9375, 'Recall': 1.0, 'CLL': -0.066646, 'parameter_15': {'Learning time': 0.875, 'Inference time': 1.254, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.326155, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'F1': 0.967742, 'Precision': [0.9375, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.6189976143448207;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.7194734122109543;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( female(A) )
%   | then return 0.4851287515461648;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.36568225360444984;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.41751358415830986;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.27560196347331406;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.21158287903019785;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.2551722425694894;  // std dev = 1,49e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.2477083215253023;  // std dev = 0,157, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( female(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.2888243556388588;  // std dev = 0,515, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.20480491903976727;  // std dev = 0,137, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( female(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.25545584002092836;  // std dev = 0,478, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.17366854477450275;  // std dev = 0,121, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( female(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.22672067273373506;  // std dev = 0,440, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15028085196596966;  // std dev = 0,108, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( female(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.20194948280239464;  // std dev = 0,401, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.998906
   AUC PR    = 0.897839
   CLL	      = -0.087284
   Precision = 0.459184 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.629371


Total learning time: 1.672 seconds
Total inference time: 1.106 seconds
AUC ROC: 0.998906


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:58:49
{'Learning time': 1.672, 'Inference time': 1.106, 'AUC ROC': 0.998906, 'AUC PR': 0.897839, 'Recall': 1.0, 'CLL': -0.087284, 'F1': 0.629371, 'Precision': [0.459184, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */


Results
   AUC ROC   = 0.975728
   AUC PR    = 0.303381
   CLL	      = -0.167161
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.637 seconds
Total inference time: 0.724 seconds
AUC ROC: 0.975728


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:58:50
{'Learning time': 0.637, 'Inference time': 0.724, 'AUC ROC': 0.975728, 'AUC PR': 0.303381, 'Recall': 0.0, 'CLL': -0.167161, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5033102254220925;  // std dev = 0,478, 31,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4304386407365384;  // std dev = 0,478, 31,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.34912632896074897;  // std dev = 0,478, 31,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2716364944461118;  // std dev = 0,478, 31,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20622700091970794;  // std dev = 0,478, 31,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1549753570755534;  // std dev = 0,478, 31,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11626501404343466;  // std dev = 0,478, 31,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08742521180860459;  // std dev = 0,478, 31,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.06598222816494018;  // std dev = 2,664, 31,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.04998968842731064;  // std dev = 0,478, 31,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.303642
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.908 seconds
Total inference time: 1.171 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.725
   AUC PR    = 0.645161
   CLL	      = -0.520457
   Precision = 0.645161 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.784314


Total scoring time: 0.541 seconds
Parameter learned model CLL: -0.520457


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.478, 11, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.478, 11, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.478, 11, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 9, 0], 'true,true': [0.478, 11, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.478, 11, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 9, 0], 'true,true': [0.478, 11, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.478, 11, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 9, 0], 'true,true': [0.478, 11, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.664, 11, 20], 'false': [0.0, 9, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 9, 0], 'true,true': [0.478, 11, 20]}]]
[{'': [0.22892819979188353, -9.25185853854297e-18], 'true': [0.22892819979188353, nan]}, {'': [0.2289281997918831, 0.0], 'true': [0.2289281997918831, nan]}, {'': [0.2289281997918831, -1.5419764230904951e-18], 'true': [0.2289281997918831, nan]}, {'': [0.2289281997918833, 3.0839528461809902e-18], 'true': [0.2289281997918833, nan]}, {'': [0.22892819979188347, 0.0], 'true': [0.22892819979188347, nan]}, {'': [0.2289281997918835, 1.5419764230904951e-18], 'true': [0.2289281997918835, nan]}, {'': [0.2289281997918835, 0.0], 'true': [0.2289281997918835, nan]}, {'': [0.22892819979188353, 7.709882115452476e-19], 'true': [0.22892819979188353, nan]}, {'': [0.22892819979188342, 0.0], 'true': [0.22892819979188342, nan], 'true,true': [0.22892819979188342, nan]}, {'': [0.22892819979188328, 7.709882115452476e-19], 'true': [0.22892819979188328, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.343 seconds
Total inference time: 1.219 seconds
AUC ROC: 0.999276


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.517 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 3.3089999999999997 seconds
Total inference time: 1.219 seconds
AUC ROC: 0.999276
Total revision time: 3.3089999999999997
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:58:57
{'Learning time': 3.3089999999999997, 'Inference time': 1.219, 'AUC ROC': 0.999276, 'AUC PR': 0.9375, 'Recall': 1.0, 'CLL': -0.066646, 'parameter_20': {'Learning time': 0.908, 'Inference time': 1.171, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.303642, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'F1': 0.967742, 'Precision': [0.9375, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.6392070123615109;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.49932275605826126;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.3758491322444214;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.4175135841583098;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.28401811356076057;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839683;  // std dev = 1,29e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.219396647293074;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.2551722425694894;  // std dev = 2,11e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109179;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.17369760260917727;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.1405548082677505;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.17709649774527736;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420274;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.11581980560984703;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.15274385809367094;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.16229239018964992;  // std dev = 0,140, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A) )
%   | then return -0.31050676473228134;  // std dev = 0,603, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.986566
   AUC PR    = 0.626295
   CLL	      = -0.132926
   Precision = 0.326087 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.491803


Total learning time: 1.623 seconds
Total inference time: 1.058 seconds
AUC ROC: 0.986566


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:59:00
{'Learning time': 1.623, 'Inference time': 1.058, 'AUC ROC': 0.986566, 'AUC PR': 0.626295, 'Recall': 1.0, 'CLL': -0.132926, 'F1': 0.491803, 'Precision': [0.326087, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */


Results
   AUC ROC   = 0.975728
   AUC PR    = 0.303381
   CLL	      = -0.167081
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.674 seconds
Total inference time: 0.732 seconds
AUC ROC: 0.975728


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:59:01
{'Learning time': 0.674, 'Inference time': 0.732, 'AUC ROC': 0.975728, 'AUC PR': 0.303381, 'Recall': 0.0, 'CLL': -0.167081, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,true,false;haswordvenue(F, D).;false;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;false
0;true,true;haswordauthor(E, C).;false;true
0;true;haswordtitle(B, D), haswordauthor(E, D).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
1;true,true;author(E, D), title(E, B).;true;false
1;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
1;true,true,true;samebib(E, F), title(F, A).;false;false
1;true;haswordauthor(D, C).;true;true
1;true,false,true;haswordvenue(I, G).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
2;true;haswordauthor(D, C).;false;true
2;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
2;true,false,true;haswordvenue(G, E).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
3;true;haswordauthor(D, C).;false;true
3;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
3;true,false,true;haswordvenue(G, E).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,true,false;haswordvenue(F, D).;false;false
5;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
5;true,true;haswordauthor(E, C).;false;true
5;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
5;true,false,true;haswordvenue(I, G).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
7;true,true;author(E, D), title(E, A).;true;false
7;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
7;true,true,true;samebib(E, F), title(F, B).;false;false
7;true;haswordauthor(D, C).;true;true
7;true,false,true;author(I, H), title(I, A).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,true,false;author(F, E), title(F, B).;false;false
8;true,false;haswordtitle(B, G), haswordauthor(H, G).;true;false
8;true,true;haswordauthor(E, C).;false;true
8;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
8;true,false,true;haswordvenue(I, G).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false;haswordtitle(B, E), haswordauthor(F, E).;true;true
9;true;haswordauthor(D, C).;false;true
9;true,false,false;haswordtitle(A, H), haswordauthor(I, H).;false;false
9;true,false,true;haswordvenue(G, E).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.5160436719416167;  // std dev = 0,474, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4410172152320886;  // std dev = 0,474, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3569786026652371;  // std dev = 0,474, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.27704910799296667;  // std dev = 0,474, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2099334601884335;  // std dev = 0,474, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15763922235926214;  // std dev = 0,474, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11831241706708218;  // std dev = 0,474, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08909060691305648;  // std dev = 0,474, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.06738710244275631;  // std dev = 2,924, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, B) )
%   | then return 0.05119720620292709;  // std dev = 0,474, 38,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.311273
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.912 seconds
Total inference time: 1.167 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.74
   AUC PR    = 0.657895
   CLL	      = -0.505696
   Precision = 0.657895 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.793651


Total scoring time: 0.548 seconds
Parameter learned model CLL: -0.505696


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 12, 0], 'true,true': [0.474, 13, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 12, 0], 'true,true': [0.474, 13, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 12, 0], 'true,true': [0.474, 13, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 12, 0], 'true,true': [0.474, 13, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 12, 0], 'true,true': [0.474, 13, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 12, 0], 'true,true': [0.474, 13, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 12, 0], 'true,true': [0.474, 13, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 12, 0], 'true,true': [0.474, 13, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.924, 13, 25], 'false': [2.63e-09, 12, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, B)'}, {'true,false': [0.0, 0, 0], 'false': [5.89e-09, 12, 0], 'true,true': [0.474, 13, 25]}]]
[{'': [0.2250692520775636, -1.1564823173178714e-17], 'true': [0.2250692520775636, nan]}, {'': [0.22506925207756168, 2.3129646346357427e-18], 'true': [0.22506925207756168, nan]}, {'': [0.22506925207756245, 6.938893903907228e-18], 'true': [0.22506925207756245, nan]}, {'': [0.22506925207756226, 0.0], 'true': [0.22506925207756226, nan]}, {'': [0.22506925207756204, 2.3129646346357427e-18], 'true': [0.22506925207756204, nan]}, {'': [0.22506925207756226, 2.3129646346357427e-18], 'true': [0.22506925207756226, nan]}, {'': [0.22506925207756243, 1.1564823173178713e-18], 'true': [0.22506925207756243, nan]}, {'': [0.2250692520775625, 1.1564823173178713e-18], 'true': [0.2250692520775625, nan]}, {'': [0.22506925207756237, 5.782411586589357e-19], 'true': [0.22506925207756237, nan], 'true,true': [0.22506925207756237, nan]}, {'': [0.22506925207756226, 2.8912057932946786e-18], 'true': [0.22506925207756226, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.292 seconds
Total inference time: 1.243 seconds
AUC ROC: 0.999276


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.542 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 3.2939999999999996 seconds
Total inference time: 1.243 seconds
AUC ROC: 0.999276
Total revision time: 3.2939999999999996
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:59:08
{'Learning time': 3.2939999999999996, 'Inference time': 1.243, 'parameter_25': {'Learning time': 0.912, 'Inference time': 1.167, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.311273, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'AUC ROC': 0.999276, 'AUC PR': 0.9375, 'Recall': 1.0, 'CLL': -0.066646, 'F1': 0.967742, 'Precision': [0.9375, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.7748156017661789;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.6526478931012827;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.7194734122109542;  // std dev = 5,16e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.508738411682717;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.38266873164552506;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.4175135841583098;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 1,05e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.2897830208139342;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 1,67e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.22484413364919764;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.2551722425694894;  // std dev = 2,11e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109176;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.17907321293961084;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.14591312396794645;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.1770964977452774;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420275;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.12115344807147437;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.10214883395718277;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */


Results
   AUC ROC   = 0.975728
   AUC PR    = 0.303381
   CLL	      = -0.148341
   Precision = 0.326087 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.491803


Total learning time: 1.65 seconds
Total inference time: 0.978 seconds
AUC ROC: 0.975728


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:59:11
{'Learning time': 1.65, 'Inference time': 0.978, 'AUC ROC': 0.975728, 'AUC PR': 0.303381, 'Recall': 1.0, 'CLL': -0.148341, 'F1': 0.491803, 'Precision': [0.326087, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.7748156017661789;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */


Results
   AUC ROC   = 0.975728
   AUC PR    = 0.303381
   CLL	      = -0.16703
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.67 seconds
Total inference time: 0.72 seconds
AUC ROC: 0.975728


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:59:12
{'Learning time': 0.67, 'Inference time': 0.72, 'AUC ROC': 0.975728, 'AUC PR': 0.303381, 'Recall': 0.0, 'CLL': -0.16703, 'F1': nan, 'Precision': [nan, 0.5]}


