Starting experiment #1 for 54_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 698
Source train neg examples: 27996

WILL Produced-Tree #1
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.5959538131482889;  // std dev = 0,440, 328,000 (wgt'ed) examples reached here.  /* #neg=86 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.1007551744895291;  // std dev = 3,793, 365,000 (wgt'ed) examples reached here.  /* #neg=350 #pos=15 */
%   | | | else return 0.24276431971489695;  // std dev = 2,481, 26,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.04569721874664178;  // std dev = 4,754, 260,000 (wgt'ed) examples reached here.  /* #neg=235 #pos=25 */
%   | | | else return 0.28549016222544943;  // std dev = 15,078, 929,000 (wgt'ed) examples reached here.  /* #neg=532 #pos=397 */
%   else return -0.1418510649004878;  // std dev = 0,000, 124,000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #2
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.4484039238704698;  // std dev = 0,464, 370,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.09085853652905564;  // std dev = 3,796, 383,000 (wgt'ed) examples reached here.  /* #neg=368 #pos=15 */
%   | | | else return 0.13845633318378786;  // std dev = 2,622, 32,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.03910262019637476;  // std dev = 4,751, 257,000 (wgt'ed) examples reached here.  /* #neg=232 #pos=25 */
%   | | | else return 0.26083971421773716;  // std dev = 14,896, 900,000 (wgt'ed) examples reached here.  /* #neg=503 #pos=397 */
%   else return -0.12544463852839105;  // std dev = 8,30e-08, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #3
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.6209181538019585;  // std dev = 2,11e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1834048940579593;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.4159691851514885;  // std dev = 0,441, 329,000 (wgt'ed) examples reached here.  /* #neg=87 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.07932537469520315;  // std dev = 3,793, 368,000 (wgt'ed) examples reached here.  /* #neg=353 #pos=15 */
%   | | | else return 0.11764698521874367;  // std dev = 2,622, 32,000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.03714155658798349;  // std dev = 4,757, 264,000 (wgt'ed) examples reached here.  /* #neg=239 #pos=25 */
%   | | | else return 0.21758015619228374;  // std dev = 14,915, 903,000 (wgt'ed) examples reached here.  /* #neg=506 #pos=397 */
%   else return -0.1123163781936062;  // std dev = 9,19e-08, 125,000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #4
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordtitle(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.26525593726870655;  // std dev = 0,459, 370,000 (wgt'ed) examples reached here.  /* #neg=119 #pos=251 */
%   | | else if ( haswordvenue(G, D) )
%   | | | then return -0.07349210214405391;  // std dev = 3,798, 390,000 (wgt'ed) examples reached here.  /* #neg=375 #pos=15 */
%   | | | else return 0.1308530822165845;  // std dev = 2,560, 29,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | then if ( haswordvenue(J, H) )
%   | | | then return -0.06905148186870971;  // std dev = 3,758, 256,000 (wgt'ed) examples reached here.  /* #neg=241 #pos=15 */
%   | | | else return 0.6415855373620596;  // std dev = 1,519, 13,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0.1645180592299217;  // std dev = 0,495, 931,000 (wgt'ed) examples reached here.  /* #neg=534 #pos=397 */
%   else return -0.10159632948783637;  // std dev = 0,000, 120,000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #5
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.403061015716315;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.19598243189080652;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return 0.20028584499805838;  // std dev = 0,466, 355,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.06826738950334615;  // std dev = 3,801, 410,000 (wgt'ed) examples reached here.  /* #neg=395 #pos=15 */
%   | | | else return 0.048909778843612084;  // std dev = 2,673, 35,000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.02789821083823261;  // std dev = 4,591, 252,000 (wgt'ed) examples reached here.  /* #neg=227 #pos=25 */
%   | | | else return 0.11732604895228989;  // std dev = 15,275, 963,000 (wgt'ed) examples reached here.  /* #neg=566 #pos=397 */
%   else return -0.09269127618926086;  // std dev = 7,07e-08, 116,000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #6
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.16825612975267523;  // std dev = 0,445, 364,000 (wgt'ed) examples reached here.  /* #neg=113 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( author(G, F), title(G, A) )
%   | | | then return 0.06805073223947966;  // std dev = 1,581, 18,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return -0.05820059833806468;  // std dev = 4,384, 406,000 (wgt'ed) examples reached here.  /* #neg=384 #pos=22 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.03230817111513676;  // std dev = 4,600, 282,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=25 */
%   | | | else return 0.09407603438300743;  // std dev = 15,253, 959,000 (wgt'ed) examples reached here.  /* #neg=562 #pos=397 */
%   else return -0.0851847513883968;  // std dev = 6,99e-08, 138,000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #7
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.1368047812702176;  // std dev = 0,444, 356,000 (wgt'ed) examples reached here.  /* #neg=105 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.05342702747482709;  // std dev = 3,787, 367,000 (wgt'ed) examples reached here.  /* #neg=352 #pos=15 */
%   | | | else return 0.06790080067495226;  // std dev = 2,640, 33,000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | else return 0.061376974875571096;  // std dev = 0,459, 1.192,000 (wgt'ed) examples reached here.  /* #neg=770 #pos=422 */
%   else return -0.07877675473109154;  // std dev = 7,38e-08, 131,000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #8
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.11146646801429332;  // std dev = 0,438, 354,000 (wgt'ed) examples reached here.  /* #neg=103 #pos=251 */
%   | else if ( haswordtitle(A, E), haswordauthor(F, E) )
%   | | then if ( haswordvenue(G, E) )
%   | | | then return -0.05131723150826966;  // std dev = 3,792, 391,000 (wgt'ed) examples reached here.  /* #neg=376 #pos=15 */
%   | | | else return 0.030217967056716716;  // std dev = 2,687, 36,000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | else if ( haswordtitle(B, H), haswordauthor(I, H) )
%   | | | then return -0.03413553859129928;  // std dev = 4,605, 271,000 (wgt'ed) examples reached here.  /* #neg=246 #pos=25 */
%   | | | else return 0.08649119188869084;  // std dev = 14,896, 900,000 (wgt'ed) examples reached here.  /* #neg=503 #pos=397 */
%   else return -0.07324622576333714;  // std dev = 3,80e-08, 119,000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #9
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.22929163377974854;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.2330709910238414;  // std dev = 2,11e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( author(G, D), title(G, A) )
%   | | | then return -0.41014740934441657;  // std dev = 1,247, 9,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.10609190689490117;  // std dev = 7,923, 325,000 (wgt'ed) examples reached here.  /* #neg=85 #pos=240 */
%   | else if ( haswordtitle(A, H), haswordauthor(I, H) )
%   | | then if ( haswordvenue(J, H) )
%   | | | then return -0.04750342689030041;  // std dev = 3,793, 394,000 (wgt'ed) examples reached here.  /* #neg=379 #pos=15 */
%   | | | else return 0.10391139321159974;  // std dev = 2,535, 28,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | else if ( haswordtitle(B, K), haswordauthor(L, K) )
%   | | | then return -0.035806427137093866;  // std dev = 4,621, 289,000 (wgt'ed) examples reached here.  /* #neg=264 #pos=25 */
%   | | | else return 0.0494911807976718;  // std dev = 15,120, 936,000 (wgt'ed) examples reached here.  /* #neg=539 #pos=397 */
%   else return -0.06842697784420264;  // std dev = 6,14e-08, 134,000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #10
% FOR sametitle(A, B):
%   if ( haswordtitle(A, C), haswordtitle(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), title(E, B) )
%   | | then if ( samebib(E, F), title(F, A) )
%   | | | then return 0.1912966220667952;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.19401617507723842;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.06363281947182077;  // std dev = 0,448, 337,000 (wgt'ed) examples reached here.  /* #neg=95 #pos=242 */
%   | else if ( haswordtitle(A, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(I, G) )
%   | | | then return -0.04464637397484175;  // std dev = 3,795, 400,000 (wgt'ed) examples reached here.  /* #neg=385 #pos=15 */
%   | | | else return 0.04920045884813482;  // std dev = 2,603, 31,000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else if ( haswordtitle(B, J), haswordauthor(K, J) )
%   | | | then return -0.02664895944802266;  // std dev = 4,611, 271,000 (wgt'ed) examples reached here.  /* #neg=246 #pos=25 */
%   | | | else return 0.04946553913272935;  // std dev = 14,966, 911,000 (wgt'ed) examples reached here.  /* #neg=514 #pos=397 */
%   else return -0.06419184008202626;  // std dev = 0,000, 127,000 (wgt'ed) examples reached here.  /* #neg=127 */


Starting fold 1

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos	 examples: 56
Target test neg examples: 3308

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4831489350995123;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4136573287083126;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3366053739648666;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.26297558544868993;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.20032545170291094;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.15079889954054382;  // std dev = 1,369, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11312434025950242;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08492715391619823;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.06391587871034281;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.04824192700154653;  // std dev = 0,484, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.301314
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.792 seconds
Total inference time: 1.587 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.625
   CLL	      = -0.543944
   Precision = 0.625 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.769231


Total scoring time: 0.476 seconds
Parameter learned model CLL: -0.543944


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.369, 3, 5], 'false': [0.0, 2, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 2, 0], 'true,true': [0.484, 3, 5]}]]
[{'': [0.23437499999999983, 0.0], 'true': [0.23437499999999983, nan]}, {'': [0.2343749999999998, 0.0], 'true': [0.2343749999999998, nan]}, {'': [0.234375, 0.0], 'true': [0.234375, nan]}, {'': [0.23437500000000006, 0.0], 'true': [0.23437500000000006, nan]}, {'': [0.234375, 0.0], 'true': [0.234375, nan]}, {'': [0.23437500000000003, 0.0], 'true': [0.23437500000000003, nan], 'true,true': [0.23437500000000003, nan]}, {'': [0.23437500000000003, 0.0], 'true': [0.23437500000000003, nan]}, {'': [0.23437499999999997, 0.0], 'true': [0.23437499999999997, nan]}, {'': [0.234375, 0.0], 'true': [0.234375, nan]}, {'': [0.23437499999999997, 0.0], 'true': [0.23437499999999997, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.071 seconds
Total inference time: 1.249 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.479 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.818 seconds
Total inference time: 1.249 seconds
AUC ROC: 0.999547
Total revision time: 2.818
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:22:22
{'Learning time': 2.818, 'Inference time': 1.249, 'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'Recall': 1.0, 'CLL': -0.065262, 'parameter_5': {'Learning time': 0.792, 'Inference time': 1.587, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.301314, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'F1': 0.973913, 'Precision': [0.949153, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.982164
   AUC PR    = 0.321839
   CLL	      = -0.13584
   Precision = 0.321839 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.486957


Total learning time: 1.044 seconds
Total inference time: 1.064 seconds
AUC ROC: 0.982164


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:22:25
{'Learning time': 1.044, 'Inference time': 1.064, 'AUC ROC': 0.982164, 'AUC PR': 0.321839, 'Recall': 1.0, 'CLL': -0.13584, 'F1': 0.486957, 'Precision': [0.321839, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.982164
   AUC PR    = 0.321839
   CLL	      = -0.159815
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.404 seconds
Total inference time: 0.64 seconds
AUC ROC: 0.982164


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:22:26
{'Learning time': 0.404, 'Inference time': 0.64, 'AUC ROC': 0.982164, 'AUC PR': 0.321839, 'Recall': 0.0, 'CLL': -0.159815, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.44638422921715937;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.382955427940009;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3134863926750183;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.24686056424534744;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.18939831465027204;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.14324053978445067;  // std dev = 2,029, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.10764416962019872;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08074344532804135;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.060585260580884905;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.04551511900055642;  // std dev = 0,492, 17,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.279778
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.658 seconds
Total inference time: 1.44 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.65
   AUC PR    = 0.588235
   CLL	      = -0.587251
   Precision = 0.588235 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.740741


Total scoring time: 0.511 seconds
Parameter learned model CLL: -0.587251


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.492, 7, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.492, 7, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 3, 0], 'true,true': [0.492, 7, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.492, 7, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 3, 0], 'true,true': [0.492, 7, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.029, 7, 10], 'false': [0.0, 3, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.492, 7, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [1.86e-09, 3, 0], 'true,true': [0.492, 7, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 3, 0], 'true,true': [0.492, 7, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.32e-09, 3, 0], 'true,true': [0.492, 7, 10]}]]
[{'': [0.24221453287197228, 0.0], 'true': [0.24221453287197228, nan]}, {'': [0.2422145328719721, 0.0], 'true': [0.2422145328719721, nan]}, {'': [0.24221453287197214, 2.3129646346357427e-18], 'true': [0.24221453287197214, nan]}, {'': [0.24221453287197225, -1.1564823173178713e-18], 'true': [0.24221453287197225, nan]}, {'': [0.2422145328719722, 2.3129646346357427e-18], 'true': [0.2422145328719722, nan]}, {'': [0.2422145328719724, 0.0], 'true': [0.2422145328719724, nan], 'true,true': [0.2422145328719724, nan]}, {'': [0.24221453287197234, 0.0], 'true': [0.24221453287197234, nan]}, {'': [0.24221453287197225, 1.1564823173178713e-18], 'true': [0.24221453287197225, nan]}, {'': [0.24221453287197228, -5.782411586589357e-19], 'true': [0.24221453287197228, nan]}, {'': [0.24221453287197234, 5.782411586589357e-19], 'true': [0.24221453287197234, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.192 seconds
Total inference time: 1.286 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.497 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 2.8579999999999997 seconds
Total inference time: 1.286 seconds
AUC ROC: 0.999547
Total revision time: 2.8579999999999997
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:22:32
{'Learning time': 2.8579999999999997, 'Inference time': 1.286, 'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'Recall': 1.0, 'CLL': -0.065262, 'parameter_10': {'Learning time': 0.658, 'Inference time': 1.44, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.279778, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'F1': 0.973913, 'Precision': [0.949153, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(A) )
%   | | then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.3211800329464989;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.27879115883856154;  // std dev = 0,490, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.25549168322416005;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.2456101403850857;  // std dev = 0,453, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(A) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.20998333859006602;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.21737014514045308;  // std dev = 0,414, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1772619637847085;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.19330424005304617;  // std dev = 0,378, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.068877
   Precision = 0.509091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.674699


Total learning time: 1.597 seconds
Total inference time: 1.269 seconds
AUC ROC: 0.999765


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:22:35
{'Learning time': 1.597, 'Inference time': 1.269, 'AUC ROC': 0.999765, 'AUC PR': 0.983476, 'Recall': 1.0, 'CLL': -0.068877, 'F1': 0.674699, 'Precision': [0.509091, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.159995
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.577 seconds
Total inference time: 0.813 seconds
AUC ROC: 0.983055


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:22:37
{'Learning time': 0.577, 'Inference time': 0.813, 'AUC ROC': 0.983055, 'AUC PR': 0.338212, 'Recall': 0.0, 'CLL': -0.159995, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.43507201202258927;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3734825345357927;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.30629640883248077;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.24181001711684688;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.18597744284462292;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.14091067754238773;  // std dev = 2,519, 26,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.10600294889696144;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.07953504271505459;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.059658172402264995;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.044781147389761466;  // std dev = 0,494, 26,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.273453
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.857 seconds
Total inference time: 1.483 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.633333
   AUC PR    = 0.576923
   CLL	      = -0.60073
   Precision = 0.576923 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.731707


Total scoring time: 0.525 seconds
Parameter learned model CLL: -0.60073


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.494, 11, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.494, 11, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.494, 11, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.494, 11, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.494, 11, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.519, 11, 15], 'false': [0.0, 4, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.494, 11, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.494, 11, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.494, 11, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.494, 11, 15]}]]
[{'': [0.24408284023668597, 0.0], 'true': [0.24408284023668597, nan]}, {'': [0.24408284023668614, 0.0], 'true': [0.24408284023668614, nan]}, {'': [0.2440828402366862, 0.0], 'true': [0.2440828402366862, nan]}, {'': [0.2440828402366866, 0.0], 'true': [0.2440828402366866, nan]}, {'': [0.24408284023668653, 0.0], 'true': [0.24408284023668653, nan]}, {'': [0.2440828402366862, 0.0], 'true': [0.2440828402366862, nan], 'true,true': [0.2440828402366862, nan]}, {'': [0.24408284023668647, 0.0], 'true': [0.24408284023668647, nan]}, {'': [0.2440828402366862, 0.0], 'true': [0.2440828402366862, nan]}, {'': [0.24408284023668647, 0.0], 'true': [0.24408284023668647, nan]}, {'': [0.24408284023668642, 0.0], 'true': [0.24408284023668642, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.312 seconds
Total inference time: 1.432 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.508 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 3.202 seconds
Total inference time: 1.432 seconds
AUC ROC: 0.999547
Total revision time: 3.202
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:22:44
{'Learning time': 3.202, 'Inference time': 1.432, 'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'Recall': 1.0, 'CLL': -0.065262, 'parameter_15': {'Learning time': 0.857, 'Inference time': 1.483, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.273453, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'F1': 0.973913, 'Precision': [0.949153, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7470378239884012;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7194734122109543;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.6302322013528495;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.4930252128087158;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.41751358415830986;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.3713223124091624;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.2802444957903803;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 1,29e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.215871968382499;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.17024717710075593;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.21504367139988706;  // std dev = 0,137, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.24287280723558513;  // std dev = 0,588, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.18118705820450132;  // std dev = 0,121, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.21971235672504674;  // std dev = 0,559, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0.15598673308908745;  // std dev = 0,107, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.19954733908472405;  // std dev = 0,527, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.084645
   Precision = 0.321839 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.486957


Total learning time: 1.616 seconds
Total inference time: 1.342 seconds
AUC ROC: 0.999765


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:22:47
{'Learning time': 1.616, 'Inference time': 1.342, 'AUC ROC': 0.999765, 'AUC PR': 0.983476, 'Recall': 1.0, 'CLL': -0.084645, 'F1': 0.486957, 'Precision': [0.321839, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7470378239884012;  // std dev = 0,314, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.159918
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.644 seconds
Total inference time: 0.798 seconds
AUC ROC: 0.983055


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:22:48
{'Learning time': 0.644, 'Inference time': 0.798, 'AUC ROC': 0.983055, 'AUC PR': 0.338212, 'Recall': 0.0, 'CLL': -0.159918, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.48314893509951184;  // std dev = 0,484, 32,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4136573287083127;  // std dev = 0,484, 32,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.33660537396486667;  // std dev = 0,484, 32,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.26297558544868976;  // std dev = 0,484, 32,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.200325451702911;  // std dev = 0,484, 32,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.15079889954054396;  // std dev = 2,739, 32,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11312434025950255;  // std dev = 0,484, 32,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.08492715391619826;  // std dev = 0,484, 32,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.06391587871034268;  // std dev = 0,484, 32,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.04824192700154656;  // std dev = 0,484, 32,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.301314
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.902 seconds
Total inference time: 1.466 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.7
   AUC PR    = 0.625
   CLL	      = -0.543944
   Precision = 0.625 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.769231


Total scoring time: 0.55 seconds
Parameter learned model CLL: -0.543944


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.484, 12, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.484, 12, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.484, 12, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.484, 12, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.484, 12, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.739, 12, 20], 'false': [3.73e-09, 8, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.484, 12, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 8, 0], 'true,true': [0.484, 12, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.484, 12, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.484, 12, 20]}]]
[{'': [0.23437500000000003, -6.938893903907228e-18], 'true': [0.23437500000000003, nan]}, {'': [0.23437499999999964, 0.0], 'true': [0.23437499999999964, nan]}, {'': [0.2343750000000001, -1.734723475976807e-18], 'true': [0.2343750000000001, nan]}, {'': [0.23437500000000028, 1.734723475976807e-18], 'true': [0.23437500000000028, nan]}, {'': [0.23437500000000003, 0.0], 'true': [0.23437500000000003, nan]}, {'': [0.23437500000000008, 1.734723475976807e-18], 'true': [0.23437500000000008, nan], 'true,true': [0.23437500000000008, nan]}, {'': [0.23437500000000014, 0.0], 'true': [0.23437500000000014, nan]}, {'': [0.23437499999999994, 8.673617379884035e-19], 'true': [0.23437499999999994, nan]}, {'': [0.23437499999999983, 0.0], 'true': [0.23437499999999983, nan]}, {'': [0.234375, 0.0], 'true': [0.234375, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.433 seconds
Total inference time: 1.354 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.515 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 3.4 seconds
Total inference time: 1.354 seconds
AUC ROC: 0.999547
Total revision time: 3.4
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:22:55
{'Learning time': 3.4, 'Inference time': 1.354, 'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'Recall': 1.0, 'CLL': -0.065262, 'parameter_20': {'Learning time': 0.902, 'Inference time': 1.466, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.301314, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'F1': 0.973913, 'Precision': [0.949153, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.7748156017661789;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.6526478931012827;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.508738411682717;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.41751358415830986;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.38266873164552506;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.2897830208139342;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839683;  // std dev = 1,29e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 1,83e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.22484413364919764;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109179;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.17907321293961084;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.14591312396794645;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420274;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.12115344807147437;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.16231835551338886;  // std dev = 0,115, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.2142570386075177;  // std dev = 0,671, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.991781
   AUC PR    = 0.7084
   CLL	      = -0.118503
   Precision = 0.321839 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.486957


Total learning time: 1.813 seconds
Total inference time: 1.186 seconds
AUC ROC: 0.991781


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:22:58
{'Learning time': 1.813, 'Inference time': 1.186, 'AUC ROC': 0.991781, 'AUC PR': 0.7084, 'Recall': 1.0, 'CLL': -0.118503, 'F1': 0.486957, 'Precision': [0.321839, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.7748156017661789;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.159886
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.659 seconds
Total inference time: 0.845 seconds
AUC ROC: 0.983055


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:23:00
{'Learning time': 0.659, 'Inference time': 0.845, 'AUC ROC': 0.983055, 'AUC PR': 0.338212, 'Recall': 0.0, 'CLL': -0.159886, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5338246107751872;  // std dev = 0,468, 37,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.45576301035379385;  // std dev = 0,468, 37,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.3678730484528311;  // std dev = 0,468, 37,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.2845396114124684;  // std dev = 0,468, 37,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.21509363731724196;  // std dev = 0,468, 37,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.1614060721245532;  // std dev = 2,847, 37,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12126697216071876;  // std dev = 0,468, 37,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.09154176142204681;  // std dev = 0,468, 37,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0694895393725013;  // std dev = 0,468, 37,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0530287679600064;  // std dev = 0,468, 37,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.857618
   AUC PR    = 0.056112
   CLL	      = -0.333651
   Precision = 0.056112 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.106262


Total learning time: 0.901 seconds
Total inference time: 1.597 seconds
AUC ROC: 0.857618


Results scoring model
   AUC ROC   = 0.76
   AUC PR    = 0.675676
   CLL	      = -0.485158
   Precision = 0.675676 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.806452


Total scoring time: 0.617 seconds
Parameter learned model CLL: -0.485158


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.468, 12, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 13, 0], 'true,true': [0.468, 12, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 13, 0], 'true,true': [0.468, 12, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.468, 12, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 13, 0], 'true,true': [0.468, 12, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.847, 12, 25], 'false': [7.45e-09, 13, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 13, 0], 'true,true': [0.468, 12, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 13, 0], 'true,true': [0.468, 12, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 13, 0], 'true,true': [0.468, 12, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.97e-09, 13, 0], 'true,true': [0.468, 12, 25]}]]
[{'': [0.21913805697589603, -1.2810265668751807e-17], 'true': [0.21913805697589603, nan]}, {'': [0.21913805697589483, 4.270088556250602e-18], 'true': [0.21913805697589483, nan]}, {'': [0.21913805697589542, 8.540177112501205e-18], 'true': [0.21913805697589542, nan]}, {'': [0.21913805697589517, -2.135044278125301e-18], 'true': [0.21913805697589517, nan]}, {'': [0.21913805697589456, 2.135044278125301e-18], 'true': [0.21913805697589456, nan]}, {'': [0.21913805697589483, 4.270088556250602e-18], 'true': [0.21913805697589483, nan], 'true,true': [0.21913805697589483, nan]}, {'': [0.21913805697589492, 1.0675221390626506e-18], 'true': [0.21913805697589492, nan]}, {'': [0.2191380569758949, 0.0], 'true': [0.2191380569758949, nan]}, {'': [0.2191380569758949, 5.337610695313253e-19], 'true': [0.2191380569758949, nan]}, {'': [0.21913805697589483, 3.736327486719277e-18], 'true': [0.21913805697589483, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.1015963294878363;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */


Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.309 seconds
Total inference time: 1.433 seconds
AUC ROC: 0.999547


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.584 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999547
   AUC PR    = 0.949153
   CLL	      = -0.065262
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 3.411 seconds
Total inference time: 1.433 seconds
AUC ROC: 0.999547
Total revision time: 3.411
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 00:23:07
{'Learning time': 3.411, 'Inference time': 1.433, 'parameter_25': {'Learning time': 0.901, 'Inference time': 1.597, 'AUC ROC': 0.857618, 'AUC PR': 0.056112, 'Recall': 1.0, 'CLL': -0.333651, 'F1': 0.106262, 'Precision': [0.056112, 0.5]}, 'AUC ROC': 0.999547, 'AUC PR': 0.949153, 'Recall': 1.0, 'CLL': -0.065262, 'F1': 0.973913, 'Precision': [0.949153, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.6622329172201352;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 1,05e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.5154428111118985;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.3875647182006322;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 1,18e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.29398103437200096;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.2920349799096258;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.30202725427262445;  // std dev = 0,009, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A), actor(B) )
%   | then return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.39154244827150736;  // std dev = 0,613, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.24237808330359928;  // std dev = 0,008, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.3344282306864612;  // std dev = 0,550, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.20067825702122127;  // std dev = 0,007, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.2854619777948667;  // std dev = 0,485, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.17040825490236322;  // std dev = 0,006, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.2446712686479669;  // std dev = 0,424, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06085612769357864;  // std dev = 0,052, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return 0.10764771862292369;  // std dev = 0,140, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.10696815859974161;  // std dev = 0,145, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */


Results
   AUC ROC   = 0.999765
   AUC PR    = 0.983476
   CLL	      = -0.081045
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total learning time: 1.98 seconds
Total inference time: 1.41 seconds
AUC ROC: 0.999765


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN-B), Time: 00:23:11
{'Learning time': 1.98, 'Inference time': 1.41, 'AUC ROC': 0.999765, 'AUC PR': 0.983476, 'Recall': 1.0, 'CLL': -0.081045, 'F1': 0.973913, 'Precision': [0.949153, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( female(A) )
%   | then return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.14185106490048774;  // std dev = 1,49e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */


Results
   AUC ROC   = 0.983055
   AUC PR    = 0.338212
   CLL	      = -0.16
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.713 seconds
Total inference time: 0.873 seconds
AUC ROC: 0.983055


Dataset: 54_cora_imdb, Fold: 1, Type: Scratch (RDN), Time: 00:23:13
{'Learning time': 0.713, 'Inference time': 0.873, 'AUC ROC': 0.983055, 'AUC PR': 0.338212, 'Recall': 0.0, 'CLL': -0.16, 'F1': nan, 'Precision': [nan, 0.5]}


Starting fold 2

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos	 examples: 58
Target test neg examples: 3423

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4175135841583099;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.598989
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.783 seconds
Total inference time: 1.368 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.476 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [5.27e-09, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 5], 'false': [0.0, 5, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.86e-09, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}]]
[{'': [0.0, -2.7755575615628915e-18], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'true': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.0], 'true': [4.4408920985006264e-17, nan]}, {'': [-2.2204460492503132e-17, 0.0], 'true': [-2.2204460492503132e-17, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'true,true': [0.0, nan]}, {'': [-5.551115123125783e-18, -1.3877787807814458e-18], 'true': [-5.551115123125783e-18, nan]}, {'': [0.0, -6.938893903907229e-19], 'true': [0.0, nan]}, {'': [0.0, 6.938893903907229e-19], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.598989
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.63 seconds
Total inference time: 1.375 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.474 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.598989
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 2.3629999999999995 seconds
Total inference time: 1.368 seconds
AUC ROC: 0.868098
Total revision time: 2.3629999999999995
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:23:18
{'Learning time': 2.3629999999999995, 'Inference time': 1.368, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.598989, 'parameter_5': {'Learning time': 0.783, 'Inference time': 1.368, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.598989, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.973999
   AUC PR    = 0.245763
   CLL	      = -0.168993
   Precision = 0.245763 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.394558


Total learning time: 1.055 seconds
Total inference time: 1.04 seconds
AUC ROC: 0.973999


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:23:21
{'Learning time': 1.055, 'Inference time': 1.04, 'AUC ROC': 0.973999, 'AUC PR': 0.245763, 'Recall': 1.0, 'CLL': -0.168993, 'F1': 0.394558, 'Precision': [0.245763, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.973999
   AUC PR    = 0.245763
   CLL	      = -0.162966
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.503 seconds
Total inference time: 0.814 seconds
AUC ROC: 0.973999


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:23:22
{'Learning time': 0.503, 'Inference time': 0.814, 'AUC ROC': 0.973999, 'AUC PR': 0.245763, 'Recall': 0.0, 'CLL': -0.162966, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6465415686654066;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5044629797645588;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.37956420580342304;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2871467034260754;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.22234379807937285;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.17659966289556142;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14344282165366493;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11869034739602338;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09970391597144293;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.499454
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.844 seconds
Total inference time: 1.508 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.95
   AUC PR    = 0.909091
   CLL	      = -0.211616
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.539 seconds
Parameter learned model CLL: -0.211616


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [0.953, 1, 10], 'false': [3.73e-09, 9, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 9, 0], 'true,true': [0.287, 1, 10]}]]
[{'': [0.0826446280991734, -9.25185853854297e-18], 'true': [0.0826446280991734, nan]}, {'': [0.08264462809917372, 0.0], 'true': [0.08264462809917372, nan]}, {'': [0.08264462809917372, -1.5419764230904951e-18], 'true': [0.08264462809917372, nan]}, {'': [0.08264462809917356, 3.0839528461809902e-18], 'true': [0.08264462809917356, nan]}, {'': [0.08264462809917347, 0.0], 'true': [0.08264462809917347, nan]}, {'': [0.08264462809917356, 1.5419764230904951e-18], 'true': [0.08264462809917356, nan], 'true,true': [0.08264462809917356, nan]}, {'': [0.08264462809917356, 0.0], 'true': [0.08264462809917356, nan]}, {'': [0.08264462809917358, 7.709882115452476e-19], 'true': [0.08264462809917358, nan]}, {'': [0.08264462809917356, 0.0], 'true': [0.08264462809917356, nan]}, {'': [0.08264462809917356, 7.709882115452476e-19], 'true': [0.08264462809917356, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.25176837314502193;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 7,45e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.19047961032437172;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.14620194507639933;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527736;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.11389369465607464;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.08989956180301868;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.0717481021516045;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.871367
   AUC PR    = 0.062774
   CLL	      = -0.464814
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.19 seconds
Total inference time: 1.543 seconds
AUC ROC: 0.871367


Results scoring model
   AUC ROC   = 0.98
   AUC PR    = 0.978432
   CLL	      = -0.193539
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.489 seconds
Refined model CLL: -0.193539


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.871367
   AUC PR    = 0.062774
   CLL	      = -0.464814
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 3.062 seconds
Total inference time: 1.543 seconds
AUC ROC: 0.871367
Total revision time: 3.062
Best scored revision CLL: -0.193539


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:23:29
{'Learning time': 3.062, 'Inference time': 1.543, 'AUC ROC': 0.871367, 'AUC PR': 0.062774, 'Recall': 1.0, 'CLL': -0.464814, 'parameter_10': {'Learning time': 0.844, 'Inference time': 1.508, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.499454, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7473839334745777;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5504898020630853;  // std dev = 0,756, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.13957479719472818;  // std dev = 0,120, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5835404111048867;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.43745017651144524;  // std dev = 0,712, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.12383398221297538;  // std dev = 0,110, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.09927914675036353;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.12908244754963397;  // std dev = 0,163, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(A) )
%   | then return 0.3466217053284543;  // std dev = 0,226, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.4884798107632401;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3559839867818517;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.24497356269313436;  // std dev = 0,557, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( female(A) )
%   | then return -0.14923789244313654;  // std dev = 0,146, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.08912818282890833;  // std dev = 0,003, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.08215885219986713;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.11742846402823999;  // std dev = 0,202, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(A) )
%   | then return 0.20491082131526062;  // std dev = 0,182, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.3144185420474793;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.23980795980915426;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.14514044619741712;  // std dev = 0,473, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07319029459340946;  // std dev = 0,006, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.14344546010343373;  // std dev = 0,167, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.06965145943116226;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.10682548449610758;  // std dev = 0,220, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(A) )
%   | then return 0.13447179168935794;  // std dev = 0,158, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.22459246050143888;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.06527136611499929;  // std dev = 0,003, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.09782585301607909;  // std dev = 0,206, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( female(A) )
%   | then return 0.11311239438840086;  // std dev = 0,160, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.18790302793216695;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.16231206948514154;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.07551252234913783;  // std dev = 0,382, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( female(A) )
%   | then return -0.13827098930320295;  // std dev = 0,200, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.057572947469711845;  // std dev = 0,009, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.174351
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.503 seconds
Total inference time: 1.392 seconds
AUC ROC: 0.999617


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:23:32
{'Learning time': 1.503, 'Inference time': 1.392, 'AUC ROC': 0.999617, 'AUC PR': 0.971227, 'Recall': 1.0, 'CLL': -0.174351, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */


Results
   AUC ROC   = 0.972045
   AUC PR    = 0.229945
   CLL	      = -0.163044
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.65 seconds
Total inference time: 0.837 seconds
AUC ROC: 0.972045


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:23:34
{'Learning time': 0.65, 'Inference time': 0.837, 'AUC ROC': 0.972045, 'AUC PR': 0.229945, 'Recall': 0.0, 'CLL': -0.163044, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.7956489350995123;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6694131893798132;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5204603507259603;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3912519545392304;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2971751345678791;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.2319331449240747;  // std dev = 0,968, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.18613927539734212;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15301076558102492;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1282672079716729;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.109246465337187;  // std dev = 0,242, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.528671
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.854 seconds
Total inference time: 1.49 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.966667
   AUC PR    = 0.9375
   CLL	      = -0.176114
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 0.539 seconds
Parameter learned model CLL: -0.176114


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 14, 0], 'true,true': [0.242, 1, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 14, 0], 'true,true': [0.242, 1, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 14, 0], 'true,true': [0.242, 1, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 14, 0], 'true,true': [0.242, 1, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 14, 0], 'true,true': [0.242, 1, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [0.968, 1, 15], 'false': [8.33e-09, 14, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 14, 0], 'true,true': [0.242, 1, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 14, 0], 'true,true': [0.242, 1, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 14, 0], 'true,true': [0.242, 1, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.97e-09, 14, 0], 'true,true': [0.242, 1, 15]}]]
[{'': [0.05859374999999978, -1.1895246692412391e-17], 'true': [0.05859374999999978, nan]}, {'': [0.05859375, 3.96508223080413e-18], 'true': [0.05859375, nan]}, {'': [0.05859375000000022, 9.912705577010326e-18], 'true': [0.05859375000000022, nan]}, {'': [0.05859375000000003, -3.96508223080413e-18], 'true': [0.05859375000000003, nan]}, {'': [0.058593750000000014, 3.96508223080413e-18], 'true': [0.058593750000000014, nan]}, {'': [0.058593749999999986, 4.956352788505163e-18], 'true': [0.058593749999999986, nan], 'true,true': [0.058593749999999986, nan]}, {'': [0.058593750000000056, -9.912705577010326e-19], 'true': [0.058593750000000056, nan]}, {'': [0.05859375000000003, 9.912705577010326e-19], 'true': [0.05859375000000003, nan]}, {'': [0.05859374999999999, 9.912705577010326e-19], 'true': [0.05859374999999999, nan]}, {'': [0.05859374999999999, 3.469446951953614e-18], 'true': [0.05859374999999999, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.6045267906174348;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.4749335700127619;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11231637819360636;  // std dev = 1,18e-08, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830986;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.3584548159137827;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.2697478132793615;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2551722425694894;  // std dev = 1,83e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.2062525881598365;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.08518475138839686;  // std dev = 8,33e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.16095555079641394;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07877675473109172;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527736;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.12802275604229368;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.10349083403071088;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.08478440748267765;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.06419184008202619;  // std dev = 6,97e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.871367
   AUC PR    = 0.062774
   CLL	      = -0.497769
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 1.229 seconds
Total inference time: 1.511 seconds
AUC ROC: 0.871367


Results scoring model
   AUC ROC   = 0.986667
   AUC PR    = 0.985199
   CLL	      = -0.166635
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 0.509 seconds
Refined model CLL: -0.166635


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.871367
   AUC PR    = 0.062774
   CLL	      = -0.497769
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 3.131 seconds
Total inference time: 1.511 seconds
AUC ROC: 0.871367
Total revision time: 3.131
Best scored revision CLL: -0.166635


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:23:41
{'Learning time': 3.131, 'Inference time': 1.511, 'AUC ROC': 0.871367, 'AUC PR': 0.062774, 'Recall': 1.0, 'CLL': -0.497769, 'parameter_15': {'Learning time': 0.854, 'Inference time': 1.49, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.528671, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7392070123615109;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.598770833533905;  // std dev = 0,296, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.13511237775054122;  // std dev = 0,130, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5750887498568714;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.4718039069034324;  // std dev = 0,277, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.12023056323885802;  // std dev = 0,120, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.10000275146381621;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.12166786739546412;  // std dev = 0,061, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.3676125577247433;  // std dev = 0,194, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.46786344351765513;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.34523359692773653;  // std dev = 2,11e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.26577406162454015;  // std dev = 0,219, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( actor(A), actor(B) )
%   | then return -0.0901075979709084;  // std dev = 0,003, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.13882331205849185;  // std dev = 0,166, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B) )
%   then if ( female(A) )
%   | then return 0.21908824553042625;  // std dev = 0,158, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.2968462635198825;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( female(B) )
%   | then return -0.08267432559727367;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.10912592902108997;  // std dev = 0,077, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.07661705314700609;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.09953509833168989;  // std dev = 0,072, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.17766977866697306;  // std dev = 0,159, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.23881132650347947;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.2006801428316034;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.129577278157358;  // std dev = 0,168, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( female(A) )
%   | then return -0.13670209917497647;  // std dev = 0,233, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.06892429082041238;  // std dev = 0,007, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then if ( female(B) )
%   | then return -0.06609852020909528;  // std dev = 0,004, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.08979501652293204;  // std dev = 0,077, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( female(A) )
%   | then return 0.12254415414008528;  // std dev = 0,144, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.17834568483439772;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15377781254259337;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.09032598140681343;  // std dev = 0,155, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( actor(A), actor(B) )
%   | then return -0.05913038327984208;  // std dev = 0,009, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.12834137861003203;  // std dev = 0,239, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.999617
   AUC PR    = 0.971227
   CLL	      = -0.179686
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.852 seconds
Total inference time: 1.598 seconds
AUC ROC: 0.999617


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:23:44
{'Learning time': 1.852, 'Inference time': 1.598, 'AUC ROC': 0.999617, 'AUC PR': 0.971227, 'Recall': 1.0, 'CLL': -0.179686, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */


Results
   AUC ROC   = 0.972045
   AUC PR    = 0.229945
   CLL	      = -0.163012
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.65 seconds
Total inference time: 0.817 seconds
AUC ROC: 0.972045


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:23:46
{'Learning time': 0.65, 'Inference time': 0.817, 'AUC ROC': 0.972045, 'AUC PR': 0.229945, 'Recall': 0.0, 'CLL': -0.163012, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.7277141524908164;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6145965951068212;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4820310770235995;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.36348006169997665;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.27380696439698715;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.2099390251949393;  // std dev = 1,615, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.16449338179098782;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.13147590894712874;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.1068656588370264;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08806971003324962;  // std dev = 0,337, 23,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.461502
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.895 seconds
Total inference time: 1.355 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.925
   AUC PR    = 0.869565
   CLL	      = -0.259756
   Precision = 0.869565 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.930233


Total scoring time: 0.595 seconds
Parameter learned model CLL: -0.259756


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.49e-08, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.615, 3, 20], 'false': [1.18e-08, 17, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 17, 0], 'true,true': [0.337, 3, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 17, 0], 'true,true': [0.337, 3, 20]}]]
[{'': [0.11342155009451807, -3.2653618371328133e-18], 'true': [0.11342155009451807, nan]}, {'': [0.1134215500945183, 0.0], 'true': [0.1134215500945183, nan]}, {'': [0.11342155009451824, 1.3061447348531253e-17], 'true': [0.11342155009451824, nan]}, {'': [0.11342155009451785, -8.163404592832034e-18], 'true': [0.11342155009451785, nan]}, {'': [0.1134215500945179, 4.89804275569922e-18], 'true': [0.1134215500945179, nan]}, {'': [0.1134215500945179, 8.163404592832034e-18], 'true': [0.1134215500945179, nan], 'true,true': [0.1134215500945179, nan]}, {'': [0.11342155009451796, -2.44902137784961e-18], 'true': [0.11342155009451796, nan]}, {'': [0.11342155009451796, 0.0], 'true': [0.11342155009451796, nan]}, {'': [0.11342155009451795, -8.163404592832033e-19], 'true': [0.11342155009451795, nan]}, {'': [0.11342155009451797, 3.2653618371328133e-18], 'true': [0.11342155009451797, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1418510649004878;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839138;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360635;  // std dev = 1,49e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783631;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839685;  // std dev = 1,18e-08, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109173;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 0,000, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 17,000 (wgt'ed) examples reached here.  /* #neg=17 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.159 seconds
Total inference time: 1.459 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.509 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.158 seconds
Total inference time: 1.459 seconds
AUC ROC: 0.999416
Total revision time: 3.158
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:23:53
{'Learning time': 3.158, 'Inference time': 1.459, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.065794, 'parameter_20': {'Learning time': 0.895, 'Inference time': 1.355, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.461502, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.7748156017661789;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.6526478931012827;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.7194734122109543;  // std dev = 2,98e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.508738411682717;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.38266873164552506;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.41751358415830986;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.34953432600306444;  // std dev = 0,117, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.09269127618926096;  // std dev = 5,27e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.22623936860512883;  // std dev = 0,463, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.27495232585485835;  // std dev = 0,102, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(A), actor(B) )
%   | then return -0.08518475138839686;  // std dev = 7,45e-09, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.19966332936089945;  // std dev = 0,431, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.22375421646309057;  // std dev = 0,089, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return -0.1676664556649044;  // std dev = 0,398, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.07472132793226298;  // std dev = 0,024, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.18736861198063628;  // std dev = 0,078, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07164953028129577;  // std dev = 0,010, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.16406889906311528;  // std dev = 0,366, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1605396156516176;  // std dev = 0,069, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06702804579511033;  // std dev = 0,010, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.14759546889798206;  // std dev = 0,338, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.14009609491543026;  // std dev = 0,061, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( female(A) )
%   | then return -0.12829559304797494;  // std dev = 0,309, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.0593066081098347;  // std dev = 0,032, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.999214
   AUC PR    = 0.910741
   CLL	      = -0.089986
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.711 seconds
Total inference time: 1.359 seconds
AUC ROC: 0.999214


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:23:56
{'Learning time': 1.711, 'Inference time': 1.359, 'AUC ROC': 0.999214, 'AUC PR': 0.910741, 'Recall': 1.0, 'CLL': -0.089986, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then return 0.7748156017661789;  // std dev = 0,276, 12,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */


Results
   AUC ROC   = 0.972045
   AUC PR    = 0.229945
   CLL	      = -0.163002
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.696 seconds
Total inference time: 0.811 seconds
AUC ROC: 0.972045


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:23:57
{'Learning time': 0.696, 'Inference time': 0.811, 'AUC ROC': 0.972045, 'AUC PR': 0.229945, 'Recall': 0.0, 'CLL': -0.163002, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.7510060779566546;  // std dev = 0,309, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6334388006627018;  // std dev = 0,309, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.49527628460126966;  // std dev = 0,309, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360638;  // std dev = 1,29e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.37293740086802796;  // std dev = 0,309, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783635;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.28158599771884046;  // std dev = 0,309, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.21712112238891784;  // std dev = 1,637, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839682;  // std dev = 1,49e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.17146739766500346;  // std dev = 0,309, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109179;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.13834329703224094;  // std dev = 0,309, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11362859447436831;  // std dev = 0,309, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420275;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09470178274038468;  // std dev = 0,309, 28,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202622;  // std dev = 5,27e-09, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */


Results
   AUC ROC   = 0.868098
   AUC PR    = 0.060354
   CLL	      = -0.483495
   Precision = 0.060354 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.113837


Total learning time: 0.917 seconds
Total inference time: 1.638 seconds
AUC ROC: 0.868098


Results scoring model
   AUC ROC   = 0.94
   AUC PR    = 0.892857
   CLL	      = -0.231548
   Precision = 0.892857 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.943396


Total scoring time: 0.562 seconds
Parameter learned model CLL: -0.231548


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 22, 0], 'true,true': [0.309, 3, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 22, 0], 'true,true': [0.309, 3, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.29e-08, 22, 0], 'true,true': [0.309, 3, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 22, 0], 'true,true': [0.309, 3, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 22, 0], 'true,true': [0.309, 3, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.637, 3, 25], 'false': [1.49e-08, 22, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 22, 0], 'true,true': [0.309, 3, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 22, 0], 'true,true': [0.309, 3, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 22, 0], 'true,true': [0.309, 3, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 22, 0], 'true,true': [0.309, 3, 25]}]]
[{'': [0.09566326530612335, 5.046468293750712e-18], 'true': [0.09566326530612335, nan]}, {'': [0.09566326530612208, -2.523234146875356e-18], 'true': [0.09566326530612208, nan]}, {'': [0.09566326530612211, 7.569702440626067e-18], 'true': [0.09566326530612211, nan]}, {'': [0.0956632653061226, -1.261617073437678e-18], 'true': [0.0956632653061226, nan]}, {'': [0.09566326530612247, 6.308085367188389e-18], 'true': [0.09566326530612247, nan]}, {'': [0.09566326530612246, 1.0092936587501423e-17], 'true': [0.09566326530612246, nan], 'true,true': [0.09566326530612246, nan]}, {'': [0.09566326530612243, 0.0], 'true': [0.09566326530612243, nan]}, {'': [0.09566326530612247, -1.8924256101565167e-18], 'true': [0.09566326530612247, nan]}, {'': [0.09566326530612246, -3.784851220313033e-18], 'true': [0.09566326530612246, nan]}, {'': [0.09566326530612243, 1.261617073437678e-18], 'true': [0.09566326530612243, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048774;  // std dev = 1,05e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839138;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360638;  // std dev = 1,29e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783635;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839682;  // std dev = 1,49e-08, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109179;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420275;  // std dev = 0,000, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202622;  // std dev = 5,27e-09, 22,000 (wgt'ed) examples reached here.  /* #neg=22 */


Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 1.244 seconds
Total inference time: 1.812 seconds
AUC ROC: 0.999416


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.542 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999416
   AUC PR    = 0.935484
   CLL	      = -0.065794
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total learning time: 3.2649999999999997 seconds
Total inference time: 1.812 seconds
AUC ROC: 0.999416
Total revision time: 3.2649999999999997
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 00:24:05
{'Learning time': 3.2649999999999997, 'Inference time': 1.812, 'parameter_25': {'Learning time': 0.917, 'Inference time': 1.638, 'AUC ROC': 0.868098, 'AUC PR': 0.060354, 'Recall': 1.0, 'CLL': -0.483495, 'F1': 0.113837, 'Precision': [0.060354, 0.5]}, 'AUC ROC': 0.999416, 'AUC PR': 0.935484, 'Recall': 1.0, 'CLL': -0.065794, 'F1': 0.966667, 'Precision': [0.935484, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.657810671461647;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.7194734122109542;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360639;  // std dev = 7,45e-09, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.5123505661168763;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.3853022650638632;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.4175135841583098;  // std dev = 4,21e-08, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.34387002780297515;  // std dev = 0,121, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.18241638735226698;  // std dev = 0,491, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.27108352672102315;  // std dev = 0,106, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( female(A) )
%   | then return -0.16892952264220687;  // std dev = 0,459, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.08307948092691053;  // std dev = 0,012, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.22103538176136278;  // std dev = 0,092, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return -0.15179203274875086;  // std dev = 0,432, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07696671407469756;  // std dev = 0,012, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.1853866081760051;  // std dev = 0,081, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07031839787399048;  // std dev = 0,019, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.14108988261950037;  // std dev = 0,402, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1590444107731208;  // std dev = 0,071, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06585946898745533;  // std dev = 0,018, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.12823888097015787;  // std dev = 0,378, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.13893429543480806;  // std dev = 0,064, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( female(A) )
%   | then return -0.11995650670739734;  // std dev = 0,352, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.060928605650132514;  // std dev = 0,023, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.999214
   AUC PR    = 0.910741
   CLL	      = -0.094307
   Precision = 0.308511 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.471545


Total learning time: 1.906 seconds
Total inference time: 1.54 seconds
AUC ROC: 0.999214


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN-B), Time: 00:24:09
{'Learning time': 1.906, 'Inference time': 1.54, 'AUC ROC': 0.999214, 'AUC PR': 0.910741, 'Recall': 1.0, 'CLL': -0.094307, 'F1': 0.471545, 'Precision': [0.308511, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,49e-08, 24,000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return 0.7812258581764353;  // std dev = 0,266, 13,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */


Results
   AUC ROC   = 0.972045
   AUC PR    = 0.229945
   CLL	      = -0.162998
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.667 seconds
Total inference time: 0.833 seconds
AUC ROC: 0.972045


Dataset: 54_cora_imdb, Fold: 2, Type: Scratch (RDN), Time: 00:24:10
{'Learning time': 0.667, 'Inference time': 0.833, 'AUC ROC': 0.972045, 'AUC PR': 0.229945, 'Recall': 0.0, 'CLL': -0.162998, 'F1': nan, 'Precision': [nan, 0.5]}


Starting fold 3

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos	 examples: 178
Target test neg examples: 3543

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328455;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555361;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46125983910675533;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3488463256948422;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354184;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12179491558002796;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081688;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07895233872555124;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.370681
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.808 seconds
Total inference time: 1.57 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.499 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [0.913, 1, 5], 'false': [0.0, 4, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}]]
[{'': [0.1388888888888887, 0.0], 'true': [0.1388888888888887, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888898, 0.0], 'true': [0.13888888888888898, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan], 'true,true': [0.13888888888888887, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888892, 0.0], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15451336627983223;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12179491558002796;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09745354768081688;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07895233872555124;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.370681
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.626 seconds
Total inference time: 1.364 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.484 seconds
Refined model CLL: -0.302866


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.370681
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 2.417 seconds
Total inference time: 1.57 seconds
AUC ROC: 0.888089
Total revision time: 2.417
Best scored revision CLL: -0.302866


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:24:16
{'Learning time': 2.417, 'Inference time': 1.57, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.370681, 'parameter_5': {'Learning time': 0.808, 'Inference time': 1.57, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.370681, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 0.976 seconds
Total inference time: 1.075 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:24:19
{'Learning time': 0.976, 'Inference time': 1.075, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 1.0, 'CLL': -0.575892, 'F1': 0.278997, 'Precision': [0.162113, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.471 seconds
Total inference time: 0.904 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:24:20
{'Learning time': 0.471, 'Inference time': 0.904, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 0.0, 'CLL': -0.236693, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328455;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46125983910675544;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.34884632569484214;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.19945264276423424;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12179491558002802;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081678;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0789523387255512;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.370681
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.833 seconds
Total inference time: 1.688 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.517 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.291, 2, 10], 'false': [3.73e-09, 8, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [0.1388888888888887, nan]}, {'': [0.13888888888888914, 0.0], 'true': [0.13888888888888914, nan]}, {'': [0.1388888888888891, -1.734723475976807e-18], 'true': [0.1388888888888891, nan]}, {'': [0.138888888888889, 1.734723475976807e-18], 'true': [0.138888888888889, nan]}, {'': [0.1388888888888888, 0.0], 'true': [0.1388888888888888, nan]}, {'': [0.13888888888888892, 1.734723475976807e-18], 'true': [0.13888888888888892, nan], 'true,true': [0.13888888888888892, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888887, 8.673617379884035e-19], 'true': [0.13888888888888887, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6359267128772901;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5398498420741675;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3293194512490402;  // std dev = 0,783, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.5261784947573075;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.4732900013584101;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.30768102842424505;  // std dev = 0,406, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.14336088988829893;  // std dev = 0,747, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.32278207687145644;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.3266023392902869;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.15785213073751725;  // std dev = 0,397, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.04992601663253288;  // std dev = 0,725, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.20897294953648732;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.24971721476827324;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.08040669196170319;  // std dev = 0,392, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.002100467758357122;  // std dev = 0,706, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.14796125126860615;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.20555359419532682;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.03855880679860693;  // std dev = 0,387, 9,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.961332
   AUC PR    = 0.696032
   CLL	      = -0.332345
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 1.151 seconds
Total inference time: 1.458 seconds
AUC ROC: 0.961332


Results scoring model
   AUC ROC   = 0.965
   AUC PR    = 0.955495
   CLL	      = -0.268646
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.51 seconds
Refined model CLL: -0.268646


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.961332
   AUC PR    = 0.696032
   CLL	      = -0.332345
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 3.011 seconds
Total inference time: 1.458 seconds
AUC ROC: 0.961332
Total revision time: 3.011
Best scored revision CLL: -0.268646


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:24:27
{'Learning time': 3.011, 'Inference time': 1.458, 'AUC ROC': 0.961332, 'AUC PR': 0.696032, 'Recall': 1.0, 'CLL': -0.332345, 'parameter_10': {'Learning time': 0.833, 'Inference time': 1.688, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.370681, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.216 seconds
Total inference time: 1.125 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:24:29
{'Learning time': 1.216, 'Inference time': 1.125, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 1.0, 'CLL': -0.575892, 'F1': 0.278997, 'Precision': [0.162113, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.528 seconds
Total inference time: 0.873 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:24:31
{'Learning time': 0.528, 'Inference time': 0.873, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 0.0, 'CLL': -0.236693, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6476226193100386;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5494185715067316;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.43580662724469027;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.331164704788703;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.24856222263410194;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.18776859068219615;  // std dev = 1,777, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14373883200944887;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11158581592814869;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08771890601691956;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.069690398723165;  // std dev = 0,408, 19,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.342811
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.886 seconds
Total inference time: 1.394 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.866667
   AUC PR    = 0.789474
   CLL	      = -0.354119
   Precision = 0.789474 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.882353


Total scoring time: 0.523 seconds
Parameter learned model CLL: -0.354119


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.777, 4, 15], 'false': [5.27e-09, 11, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 11, 0], 'true,true': [0.408, 4, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 11, 0], 'true,true': [0.408, 4, 15]}]]
[{'': [0.16620498614958412, -1.0092936587501423e-17], 'true': [0.16620498614958412, nan]}, {'': [0.16620498614958432, 2.523234146875356e-18], 'true': [0.16620498614958432, nan]}, {'': [0.16620498614958465, 5.046468293750712e-18], 'true': [0.16620498614958465, nan]}, {'': [0.16620498614958448, 0.0], 'true': [0.16620498614958448, nan]}, {'': [0.16620498614958454, 0.0], 'true': [0.16620498614958454, nan]}, {'': [0.16620498614958443, 2.523234146875356e-18], 'true': [0.16620498614958443, nan], 'true,true': [0.16620498614958443, nan]}, {'': [0.16620498614958445, 0.0], 'true': [0.16620498614958445, nan]}, {'': [0.16620498614958445, 6.30808536718839e-19], 'true': [0.16620498614958445, nan]}, {'': [0.16620498614958445, 6.30808536718839e-19], 'true': [0.16620498614958445, nan]}, {'': [0.1662049861495845, 2.523234146875356e-18], 'true': [0.1662049861495845, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360638;  // std dev = 7,45e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783628;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.151 seconds
Total inference time: 1.651 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.526 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.0860000000000003 seconds
Total inference time: 1.651 seconds
AUC ROC: 0.985041
Total revision time: 3.0860000000000003
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:24:38
{'Learning time': 3.0860000000000003, 'Inference time': 1.651, 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'CLL': -0.124249, 'parameter_15': {'Learning time': 0.886, 'Inference time': 1.394, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.342811, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.219 seconds
Total inference time: 1.052 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:24:40
{'Learning time': 1.219, 'Inference time': 1.052, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 1.0, 'CLL': -0.575892, 'F1': 0.278997, 'Precision': [0.162113, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.529 seconds
Total inference time: 0.866 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:24:42
{'Learning time': 0.529, 'Inference time': 0.866, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 0.0, 'CLL': -0.236693, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6581489350995119;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4419486100244409;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3354113949509431;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.25176837314502193;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.1904796103243717;  // std dev = 2,000, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14620194507639978;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11389369465607484;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08989956180301853;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07174810215160449;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.349243
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.918 seconds
Total inference time: 1.377 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.341891
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total scoring time: 0.542 seconds
Parameter learned model CLL: -0.341891


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.39e-08, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.0, 5, 20], 'false': [9.13e-09, 15, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.9e-09, 15, 0], 'true,true': [0.4, 5, 20]}]]
[{'': [0.16000000000000014, -1.4802973661668754e-17], 'true': [0.16000000000000014, nan]}, {'': [0.15999999999999975, 3.7007434154171884e-18], 'true': [0.15999999999999975, nan]}, {'': [0.16000000000000014, 1.295260195396016e-17], 'true': [0.16000000000000014, nan]}, {'': [0.16000000000000036, -5.551115123125783e-18], 'true': [0.16000000000000036, nan]}, {'': [0.16, 3.7007434154171884e-18], 'true': [0.16, nan]}, {'': [0.16000000000000006, 5.551115123125783e-18], 'true': [0.16000000000000006, nan], 'true,true': [0.16000000000000006, nan]}, {'': [0.15999999999999998, -1.8503717077085942e-18], 'true': [0.15999999999999998, nan]}, {'': [0.15999999999999998, 9.251858538542971e-19], 'true': [0.15999999999999998, nan]}, {'': [0.15999999999999998, 9.251858538542971e-19], 'true': [0.15999999999999998, nan]}, {'': [0.16, 4.163336342344337e-18], 'true': [0.16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.207 seconds
Total inference time: 1.429 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.53 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.197 seconds
Total inference time: 1.429 seconds
AUC ROC: 0.985041
Total revision time: 3.197
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:24:49
{'Learning time': 3.197, 'Inference time': 1.429, 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'CLL': -0.124249, 'parameter_20': {'Learning time': 0.918, 'Inference time': 1.377, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.349243, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783634;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926093;  // std dev = 1,18e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839683;  // std dev = 1,39e-08, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109179;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420274;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 6,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.206 seconds
Total inference time: 1.129 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:24:51
{'Learning time': 1.206, 'Inference time': 1.129, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 1.0, 'CLL': -0.575892, 'F1': 0.278997, 'Precision': [0.162113, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.549 seconds
Total inference time: 0.868 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:24:53
{'Learning time': 0.549, 'Inference time': 0.868, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 0.0, 'CLL': -0.236693, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6646005480027375;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.563285584736772;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4457024086767857;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3380124605859271;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2537478665917126;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.19216930606222232;  // std dev = 2,200, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839683;  // std dev = 1,29e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14774895224836107;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109179;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1153515711182683;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09128345998966082;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420274;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07305937331670807;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 0.888089
   AUC PR    = 0.183316
   CLL	      = -0.353264
   Precision = 0.183316 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.309835


Total learning time: 0.9 seconds
Total inference time: 1.582 seconds
AUC ROC: 0.888089


Results scoring model
   AUC ROC   = 0.88
   AUC PR    = 0.806452
   CLL	      = -0.334376
   Precision = 0.806452 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.892857


Total scoring time: 0.563 seconds
Parameter learned model CLL: -0.334376


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.67e-08, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.2, 6, 25], 'false': [1.29e-08, 19, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.45e-09, 19, 0], 'true,true': [0.395, 6, 25]}]]
[{'': [0.15608740894901246, 0.0], 'true': [0.15608740894901246, nan]}, {'': [0.15608740894901107, 0.0], 'true': [0.15608740894901107, nan]}, {'': [0.1560874089490117, 1.460819769243627e-17], 'true': [0.1560874089490117, nan]}, {'': [0.1560874089490113, -5.843279076974508e-18], 'true': [0.1560874089490113, nan]}, {'': [0.15608740894901157, 7.304098846218135e-18], 'true': [0.15608740894901157, nan]}, {'': [0.1560874089490115, 8.764918615461762e-18], 'true': [0.1560874089490115, nan], 'true,true': [0.1560874089490115, nan]}, {'': [0.15608740894901146, -7.304098846218135e-19], 'true': [0.15608740894901146, nan]}, {'': [0.15608740894901138, -7.304098846218135e-19], 'true': [0.15608740894901138, nan]}, {'': [0.15608740894901135, -2.1912296538654404e-18], 'true': [0.15608740894901135, nan]}, {'': [0.15608740894901152, 2.1912296538654404e-18], 'true': [0.15608740894901152, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839683;  // std dev = 1,29e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109179;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420274;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 1.229 seconds
Total inference time: 1.292 seconds
AUC ROC: 0.985041


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.551 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985041
   AUC PR    = 0.626761
   CLL	      = -0.124249
   Precision = 0.626761 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.770563


Total learning time: 3.2430000000000003 seconds
Total inference time: 1.292 seconds
AUC ROC: 0.985041
Total revision time: 3.2430000000000003
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 00:24:59
{'Learning time': 3.2430000000000003, 'Inference time': 1.292, 'parameter_25': {'Learning time': 0.9, 'Inference time': 1.582, 'AUC ROC': 0.888089, 'AUC PR': 0.183316, 'Recall': 1.0, 'CLL': -0.353264, 'F1': 0.309835, 'Precision': [0.183316, 0.5]}, 'AUC ROC': 0.985041, 'AUC PR': 0.626761, 'Recall': 1.0, 'CLL': -0.124249, 'F1': 0.770563, 'Precision': [0.626761, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360639;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783635;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926096;  // std dev = 9,13e-09, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839682;  // std dev = 1,75e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109176;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420276;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202622;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.575892
   Precision = 0.162113 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.278997


Total learning time: 1.231 seconds
Total inference time: 1.115 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN-B), Time: 00:25:02
{'Learning time': 1.231, 'Inference time': 1.115, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 1.0, 'CLL': -0.575892, 'F1': 0.278997, 'Precision': [0.162113, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */


Results
   AUC ROC   = 0.870167
   AUC PR    = 0.162113
   CLL	      = -0.236693
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.595 seconds
Total inference time: 0.849 seconds
AUC ROC: 0.870167


Dataset: 54_cora_imdb, Fold: 3, Type: Scratch (RDN), Time: 00:25:04
{'Learning time': 0.595, 'Inference time': 0.849, 'AUC ROC': 0.870167, 'AUC PR': 0.162113, 'Recall': 0.0, 'CLL': -0.236693, 'F1': nan, 'Precision': [nan, 0.5]}


Starting fold 4

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos	 examples: 45
Target test neg examples: 1891

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.4175135841583099;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.65144
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.784 seconds
Total inference time: 1.205 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.476 seconds
Parameter learned model CLL: -0.094637


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [5.27e-09, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 5], 'false': [0.0, 5, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.86e-09, 5, 0], 'true,true': [0.0, 0, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 5, 0], 'true,true': [0.0, 0, 5]}]]
[{'': [0.0, -2.7755575615628915e-18], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan]}, {'': [-4.4408920985006264e-17, 0.0], 'true': [-4.4408920985006264e-17, nan]}, {'': [4.4408920985006264e-17, 0.0], 'true': [4.4408920985006264e-17, nan]}, {'': [-2.2204460492503132e-17, 0.0], 'true': [-2.2204460492503132e-17, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan], 'true,true': [0.0, nan]}, {'': [-5.551115123125783e-18, -1.3877787807814458e-18], 'true': [-5.551115123125783e-18, nan]}, {'': [0.0, -6.938893903907229e-19], 'true': [0.0, nan]}, {'': [0.0, 6.938893903907229e-19], 'true': [0.0, nan]}, {'': [0.0, 0.0], 'true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.65144
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.654 seconds
Total inference time: 1.062 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.481 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.65144
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 2.395 seconds
Total inference time: 1.205 seconds
AUC ROC: 0.85431
Total revision time: 2.395
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:25:09
{'Learning time': 2.395, 'Inference time': 1.205, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.65144, 'parameter_5': {'Learning time': 0.784, 'Inference time': 1.205, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.65144, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( female(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( female(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( female(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( female(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( female(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( female(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( female(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( female(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( female(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( female(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.604707
   AUC PR    = 0.029221
   CLL	      = -1.658134
   Precision = 0.029221 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.056782


Total learning time: 1.073 seconds
Total inference time: 0.94 seconds
AUC ROC: 0.604707


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:25:11
{'Learning time': 1.073, 'Inference time': 0.94, 'AUC ROC': 0.604707, 'AUC PR': 0.029221, 'Recall': 1.0, 'CLL': -1.658134, 'F1': 0.056782, 'Precision': [0.029221, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( female(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.604707
   AUC PR    = 0.029221
   CLL	      = -0.311201
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.503 seconds
Total inference time: 0.728 seconds
AUC ROC: 0.604707


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:25:13
{'Learning time': 0.503, 'Inference time': 0.728, 'AUC ROC': 0.604707, 'AUC PR': 0.029221, 'Recall': 0.0, 'CLL': -0.311201, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.7672398441904213;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6465415686654066;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.5044629797645588;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.37956420580342304;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2871467034260754;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.22234379807937285;  // std dev = 0,953, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.17659966289556142;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14344282165366493;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.11869034739602338;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09970391597144293;  // std dev = 0,287, 11,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.542565
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.845 seconds
Total inference time: 1.096 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.95
   AUC PR    = 0.909091
   CLL	      = -0.211616
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.512 seconds
Parameter learned model CLL: -0.211616


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [0.953, 1, 10], 'false': [3.73e-09, 9, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 9, 0], 'true,true': [0.287, 1, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 9, 0], 'true,true': [0.287, 1, 10]}]]
[{'': [0.0826446280991734, -9.25185853854297e-18], 'true': [0.0826446280991734, nan]}, {'': [0.08264462809917372, 0.0], 'true': [0.08264462809917372, nan]}, {'': [0.08264462809917372, -1.5419764230904951e-18], 'true': [0.08264462809917372, nan]}, {'': [0.08264462809917356, 3.0839528461809902e-18], 'true': [0.08264462809917356, nan]}, {'': [0.08264462809917347, 0.0], 'true': [0.08264462809917347, nan]}, {'': [0.08264462809917356, 1.5419764230904951e-18], 'true': [0.08264462809917356, nan], 'true,true': [0.08264462809917356, nan]}, {'': [0.08264462809917356, 0.0], 'true': [0.08264462809917356, nan]}, {'': [0.08264462809917358, 7.709882115452476e-19], 'true': [0.08264462809917358, nan]}, {'': [0.08264462809917356, 0.0], 'true': [0.08264462809917356, nan]}, {'': [0.08264462809917356, 7.709882115452476e-19], 'true': [0.08264462809917356, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6189976143448207;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4851287515461648;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.11231637819360639;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.36568225360444984;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.10159632948783627;  // std dev = 5,27e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.27560196347331406;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.09269127618926097;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.21158287903019785;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.16608044254560703;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.07877675473109173;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.13303193637503513;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.10839224498101034;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.06842697784420272;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.08956128580326395;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.0641918400820262;  // std dev = 2,63e-09, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */


Results
   AUC ROC   = 0.857665
   AUC PR    = 0.078721
   CLL	      = -0.538619
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 1.217 seconds
Total inference time: 1.187 seconds
AUC ROC: 0.857665


Results scoring model
   AUC ROC   = 0.965
   AUC PR    = 0.955495
   CLL	      = -0.20564
   Precision = 0.909091 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.952381


Total scoring time: 0.5 seconds
Refined model CLL: -0.20564


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.857665
   AUC PR    = 0.078721
   CLL	      = -0.538619
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 3.074 seconds
Total inference time: 1.187 seconds
AUC ROC: 0.857665
Total revision time: 3.074
Best scored revision CLL: -0.20564


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:25:19
{'Learning time': 3.074, 'Inference time': 1.187, 'AUC ROC': 0.857665, 'AUC PR': 0.078721, 'Recall': 1.0, 'CLL': -0.538619, 'parameter_10': {'Learning time': 0.845, 'Inference time': 1.096, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.542565, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.203547
   Precision = 0.255682 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.40724


Total learning time: 1.112 seconds
Total inference time: 0.96 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:25:21
{'Learning time': 1.112, 'Inference time': 0.96, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 1.0, 'CLL': -0.203547, 'F1': 0.40724, 'Precision': [0.255682, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.173677
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.521 seconds
Total inference time: 0.711 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:25:23
{'Learning time': 0.521, 'Inference time': 0.711, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 0.0, 'CLL': -0.173677, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328457;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46125983910675533;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3488463256948421;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.1994526427642342;  // std dev = 1,581, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12179491558002797;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081678;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07895233872555117;  // std dev = 0,373, 18,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.465961
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.912 seconds
Total inference time: 1.235 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.514 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.581, 3, 15], 'false': [5.27e-09, 12, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 12, 0], 'true,true': [0.373, 3, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.89e-09, 12, 0], 'true,true': [0.373, 3, 15]}]]
[{'': [0.1388888888888886, -1.1564823173178714e-17], 'true': [0.1388888888888886, nan]}, {'': [0.13888888888888898, 2.3129646346357427e-18], 'true': [0.13888888888888898, nan]}, {'': [0.1388888888888892, 6.938893903907228e-18], 'true': [0.1388888888888892, nan]}, {'': [0.1388888888888891, 0.0], 'true': [0.1388888888888891, nan]}, {'': [0.13888888888888884, 2.3129646346357427e-18], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888895, 2.3129646346357427e-18], 'true': [0.13888888888888895, nan], 'true,true': [0.13888888888888895, nan]}, {'': [0.13888888888888884, 1.1564823173178713e-18], 'true': [0.13888888888888884, nan]}, {'': [0.1388888888888889, 1.1564823173178713e-18], 'true': [0.1388888888888889, nan]}, {'': [0.1388888888888889, 5.782411586589357e-19], 'true': [0.1388888888888889, nan]}, {'': [0.1388888888888889, 2.8912057932946786e-18], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.11231637819360636;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.236 seconds
Total inference time: 1.226 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.524 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.186 seconds
Total inference time: 1.226 seconds
AUC ROC: 0.998942
Total revision time: 3.186
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:25:29
{'Learning time': 3.186, 'Inference time': 1.226, 'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'Recall': 1.0, 'CLL': -0.068112, 'parameter_15': {'Learning time': 0.912, 'Inference time': 1.235, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.465961, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'F1': 0.957447, 'Precision': [0.918367, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.203547
   Precision = 0.255682 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.40724


Total learning time: 1.283 seconds
Total inference time: 0.933 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:25:31
{'Learning time': 1.283, 'Inference time': 0.933, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 1.0, 'CLL': -0.203547, 'F1': 0.40724, 'Precision': [0.255682, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */


Results
   AUC ROC   = 0.965362
   AUC PR    = 0.255682
   CLL	      = -0.173677
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.534 seconds
Total inference time: 0.719 seconds
AUC ROC: 0.965362


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:25:33
{'Learning time': 0.534, 'Inference time': 0.719, 'AUC ROC': 0.965362, 'AUC PR': 0.255682, 'Recall': 0.0, 'CLL': -0.173677, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328453;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4612598391067553;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3488463256948424;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.19945264276423416;  // std dev = 1,826, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12179491558002786;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081692;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07895233872555119;  // std dev = 0,373, 24,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.465961
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.926 seconds
Total inference time: 1.096 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.597 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.39e-08, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [9.13e-09, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.826, 4, 20], 'false': [1.05e-08, 16, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 16, 0], 'true,true': [0.373, 4, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 16, 0], 'true,true': [0.373, 4, 20]}]]
[{'': [0.13888888888888906, -6.938893903907228e-18], 'true': [0.13888888888888906, nan]}, {'': [0.13888888888888937, 3.469446951953614e-18], 'true': [0.13888888888888937, nan]}, {'': [0.13888888888888917, 1.214306433183765e-17], 'true': [0.13888888888888917, nan]}, {'': [0.1388888888888889, -6.938893903907228e-18], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888887, 5.204170427930421e-18], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888895, 6.938893903907228e-18], 'true': [0.13888888888888895, nan], 'true,true': [0.13888888888888895, nan]}, {'': [0.13888888888888884, -1.734723475976807e-18], 'true': [0.13888888888888884, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888892, 0.0], 'true': [0.13888888888888892, nan]}, {'': [0.1388888888888889, 3.469446951953614e-18], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.10159632948783631;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.268 seconds
Total inference time: 1.254 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.516 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.3070000000000004 seconds
Total inference time: 1.254 seconds
AUC ROC: 0.998942
Total revision time: 3.3070000000000004
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:25:39
{'Learning time': 3.3070000000000004, 'Inference time': 1.254, 'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'Recall': 1.0, 'CLL': -0.068112, 'parameter_20': {'Learning time': 0.926, 'Inference time': 1.096, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.465961, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'F1': 0.957447, 'Precision': [0.918367, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.7914822684328456;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.6045267906174348;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.6660633000779167;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360635;  // std dev = 1,67e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.4749335700127619;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.5181199435476403;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.469730932466424;  // std dev = 0,092, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(A), actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.2694561645570463;  // std dev = 0,461, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.35659623612874214;  // std dev = 0,086, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926098;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(A), actor(B) )
%   | then return -0.09269127618926097;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.22936845669777864;  // std dev = 0,412, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2796452512897499;  // std dev = 0,076, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(A), actor(B) )
%   | then return -0.08518475138839687;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.19785271574318977;  // std dev = 0,367, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2269713249936301;  // std dev = 0,066, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07877675473109172;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.1728031499628469;  // std dev = 0,328, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.18966371870817791;  // std dev = 0,058, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(A), actor(B) )
%   | then return -0.07324622576333704;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.1526452673428925;  // std dev = 0,295, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.16223886883772431;  // std dev = 0,052, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.1362141328469489;  // std dev = 0,267, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.14139497543690843;  // std dev = 0,046, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(A), actor(B) )
%   | then return -0.06419184008202619;  // std dev = 5,27e-09, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.12265063698205547;  // std dev = 0,243, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.998684
   AUC PR    = 0.897867
   CLL	      = -0.080506
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.795 seconds
Total inference time: 1.202 seconds
AUC ROC: 0.998684


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:25:42
{'Learning time': 1.795, 'Inference time': 1.202, 'AUC ROC': 0.998684, 'AUC PR': 0.897867, 'Recall': 1.0, 'CLL': -0.080506, 'F1': 0.957447, 'Precision': [0.918367, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.7914822684328456;  // std dev = 0,249, 15,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */


Results
   AUC ROC   = 0.963505
   AUC PR    = 0.244543
   CLL	      = -0.173631
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.683 seconds
Total inference time: 0.736 seconds
AUC ROC: 0.963505


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:25:44
{'Learning time': 0.683, 'Inference time': 0.736, 'AUC ROC': 0.963505, 'AUC PR': 0.244543, 'Recall': 0.0, 'CLL': -0.173631, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.7202179006167531;  // std dev = 0,345, 29,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.6085217109713611;  // std dev = 0,345, 29,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4777509955252211;  // std dev = 0,345, 29,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360636;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.36044631943547073;  // std dev = 0,345, 29,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783634;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2713503404475882;  // std dev = 0,345, 29,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926103;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.20770277309800755;  // std dev = 1,857, 29,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839683;  // std dev = 1,49e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1623436795949032;  // std dev = 0,345, 29,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109179;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12937503660631344;  // std dev = 0,345, 29,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.10481024994743236;  // std dev = 0,345, 29,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420275;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08606678613426849;  // std dev = 0,345, 29,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 5,27e-09, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */


Results
   AUC ROC   = 0.85431
   AUC PR    = 0.075503
   CLL	      = -0.493609
   Precision = 0.075503 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.140406


Total learning time: 0.931 seconds
Total inference time: 1.233 seconds
AUC ROC: 0.85431


Results scoring model
   AUC ROC   = 0.92
   AUC PR    = 0.862069
   CLL	      = -0.268746
   Precision = 0.862069 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.925926


Total scoring time: 0.618 seconds
Parameter learned model CLL: -0.268746


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.05e-08, 21, 0], 'true,true': [0.345, 4, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 21, 0], 'true,true': [0.345, 4, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.29e-08, 21, 0], 'true,true': [0.345, 4, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 21, 0], 'true,true': [0.345, 4, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 21, 0], 'true,true': [0.345, 4, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.857, 4, 25], 'false': [1.49e-08, 21, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 21, 0], 'true,true': [0.345, 4, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 21, 0], 'true,true': [0.345, 4, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 21, 0], 'true,true': [0.345, 4, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 21, 0], 'true,true': [0.345, 4, 25]}]]
[{'': [0.11890606420927562, 5.28677630773884e-18], 'true': [0.11890606420927562, nan]}, {'': [0.1189060642092747, -2.64338815386942e-18], 'true': [0.1189060642092747, nan]}, {'': [0.1189060642092746, 7.93016446160826e-18], 'true': [0.1189060642092746, nan]}, {'': [0.11890606420927455, -2.64338815386942e-18], 'true': [0.11890606420927455, nan]}, {'': [0.11890606420927473, -7.93016446160826e-18], 'true': [0.11890606420927473, nan]}, {'': [0.11890606420927466, 1.057355261547768e-17], 'true': [0.11890606420927466, nan], 'true,true': [0.11890606420927466, nan]}, {'': [0.11890606420927474, 0.0], 'true': [0.11890606420927474, nan]}, {'': [0.11890606420927476, -1.32169407693471e-18], 'true': [0.11890606420927476, nan]}, {'': [0.1189060642092747, -2.64338815386942e-18], 'true': [0.1189060642092747, nan]}, {'': [0.11890606420927462, 1.32169407693471e-18], 'true': [0.11890606420927462, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.12544463852839138;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.11231637819360636;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783634;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.09269127618926103;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839683;  // std dev = 1,49e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109179;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07324622576333704;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420275;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.0641918400820262;  // std dev = 5,27e-09, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.251 seconds
Total inference time: 1.105 seconds
AUC ROC: 0.998942


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.539 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 3.339 seconds
Total inference time: 1.105 seconds
AUC ROC: 0.998942
Total revision time: 3.339
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 00:25:50
{'Learning time': 3.339, 'Inference time': 1.105, 'parameter_25': {'Learning time': 0.931, 'Inference time': 1.233, 'AUC ROC': 0.85431, 'AUC PR': 0.075503, 'Recall': 1.0, 'CLL': -0.493609, 'F1': 0.140406, 'Precision': [0.075503, 0.5]}, 'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'Recall': 1.0, 'CLL': -0.068112, 'F1': 0.957447, 'Precision': [0.918367, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360636;  // std dev = 1,29e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783634;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926103;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839683;  // std dev = 1,49e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109179;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420275;  // std dev = 0,000, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 5,27e-09, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.068112
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total learning time: 1.544 seconds
Total inference time: 0.939 seconds
AUC ROC: 0.998942


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN-B), Time: 00:25:53
{'Learning time': 1.544, 'Inference time': 0.939, 'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'Recall': 1.0, 'CLL': -0.068112, 'F1': 0.957447, 'Precision': [0.918367, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.998942
   AUC PR    = 0.918367
   CLL	      = -0.160872
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.626 seconds
Total inference time: 0.717 seconds
AUC ROC: 0.998942


Dataset: 54_cora_imdb, Fold: 4, Type: Scratch (RDN), Time: 00:25:55
{'Learning time': 0.626, 'Inference time': 0.717, 'AUC ROC': 0.998942, 'AUC PR': 0.918367, 'Recall': 0.0, 'CLL': -0.160872, 'F1': nan, 'Precision': [nan, 0.5]}


Starting fold 5

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos	 examples: 45
Target test neg examples: 2071

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328455;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555361;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46125983910675533;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3488463256948422;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354184;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12179491558002796;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081688;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07895233872555124;  // std dev = 0,373, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.439577
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.805 seconds
Total inference time: 1.156 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.485 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [0.913, 1, 5], 'false': [0.0, 4, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 4, 0], 'true,true': [0.373, 1, 5]}]]
[{'': [0.1388888888888887, 0.0], 'true': [0.1388888888888887, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888898, 0.0], 'true': [0.13888888888888898, nan]}, {'': [0.13888888888888884, 0.0], 'true': [0.13888888888888884, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan], 'true,true': [0.13888888888888887, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888892, 0.0], 'true': [0.13888888888888892, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.09269127618926096;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.08518475138839687;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.15451336627983223;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.12179491558002796;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333704;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.09745354768081688;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420272;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then return 0.07895233872555124;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.0641918400820262;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.439577
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.664 seconds
Total inference time: 1.096 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.481 seconds
Refined model CLL: -0.302866


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.439577
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 2.435 seconds
Total inference time: 1.156 seconds
AUC ROC: 0.864075
Total revision time: 2.435
Best scored revision CLL: -0.302866


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:26:00
{'Learning time': 2.435, 'Inference time': 1.156, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.439577, 'parameter_5': {'Learning time': 0.805, 'Inference time': 1.156, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.439577, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.7194734122109545;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.32071184716014967;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.25517224256948945;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.20975771563253556;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.17709649774527736;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.15274385809367097;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.13400703000801117;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.977547
   AUC PR    = 0.326087
   CLL	      = -0.154459
   Precision = 0.326087 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.491803


Total learning time: 1.059 seconds
Total inference time: 0.954 seconds
AUC ROC: 0.977547


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:26:02
{'Learning time': 1.059, 'Inference time': 0.954, 'AUC ROC': 0.977547, 'AUC PR': 0.326087, 'Recall': 1.0, 'CLL': -0.154459, 'F1': 0.491803, 'Precision': [0.326087, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */


Results
   AUC ROC   = 0.977547
   AUC PR    = 0.326087
   CLL	      = -0.1668
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.502 seconds
Total inference time: 0.737 seconds
AUC ROC: 0.977547


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:26:04
{'Learning time': 0.502, 'Inference time': 0.737, 'AUC ROC': 0.977547, 'AUC PR': 0.326087, 'Recall': 0.0, 'CLL': -0.1668, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6914822684328455;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5851860008555358;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.46125983910675544;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.34884632569484214;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.26212705508354195;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.19945264276423424;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.15451336627983223;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.12179491558002802;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09745354768081678;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0789523387255512;  // std dev = 0,373, 12,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.439577
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.854 seconds
Total inference time: 1.291 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.9
   AUC PR    = 0.833333
   CLL	      = -0.302866
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.529 seconds
Parameter learned model CLL: -0.302866


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.291, 2, 10], 'false': [3.73e-09, 8, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 8, 0], 'true,true': [0.373, 2, 10]}]]
[{'': [0.1388888888888887, -6.938893903907228e-18], 'true': [0.1388888888888887, nan]}, {'': [0.13888888888888914, 0.0], 'true': [0.13888888888888914, nan]}, {'': [0.1388888888888891, -1.734723475976807e-18], 'true': [0.1388888888888891, nan]}, {'': [0.138888888888889, 1.734723475976807e-18], 'true': [0.138888888888889, nan]}, {'': [0.1388888888888888, 0.0], 'true': [0.1388888888888888, nan]}, {'': [0.13888888888888892, 1.734723475976807e-18], 'true': [0.13888888888888892, nan], 'true,true': [0.13888888888888892, nan]}, {'': [0.13888888888888887, 0.0], 'true': [0.13888888888888887, nan]}, {'': [0.13888888888888887, 8.673617379884035e-19], 'true': [0.13888888888888887, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}, {'': [0.1388888888888889, 0.0], 'true': [0.1388888888888889, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), female(A) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.6081489350995123;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5170719622367218;  // std dev = 0,433, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.3768076399735596;  // std dev = 0,799, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.5197153100255172;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11231637819360639;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.46146904859710713;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.29309571934050394;  // std dev = 0,425, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.10159632948783627;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.1808155669375434;  // std dev = 0,760, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.32268956078828737;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.09269127618926097;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.31072873546060353;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.14547886534168888;  // std dev = 0,418, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.24834783651963965;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.11135188603079743;  // std dev = 0,419, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.07877675473109173;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.042633146218950514;  // std dev = 0,726, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.18507508132605038;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A), director(B) )
%   | then return 0.19806626695767582;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.05036427836226873;  // std dev = 0,413, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.06842697784420272;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( female(A) )
%   | then return 0.009079035147438862;  // std dev = 0,713, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.13542644264406836;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.0641918400820262;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.963174
   AUC PR    = 0.630648
   CLL	      = -0.370853
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 1.265 seconds
Total inference time: 1.314 seconds
AUC ROC: 0.963174


Results scoring model
   AUC ROC   = 0.97
   AUC PR    = 0.964132
   CLL	      = -0.267332
   Precision = 0.833333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.909091


Total scoring time: 0.548 seconds
Refined model CLL: -0.267332


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.963174
   AUC PR    = 0.630648
   CLL	      = -0.370853
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 3.1959999999999997 seconds
Total inference time: 1.314 seconds
AUC ROC: 0.963174
Total revision time: 3.1959999999999997
Best scored revision CLL: -0.267332


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:26:10
{'Learning time': 3.1959999999999997, 'Inference time': 1.314, 'AUC ROC': 0.963174, 'AUC PR': 0.630648, 'Recall': 1.0, 'CLL': -0.370853, 'parameter_10': {'Learning time': 0.854, 'Inference time': 1.291, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.439577, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783628;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0641918400820262;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.97972
   AUC PR    = 0.348837
   CLL	      = -0.145678
   Precision = 0.348837 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.517241


Total learning time: 1.158 seconds
Total inference time: 0.98 seconds
AUC ROC: 0.97972


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:26:13
{'Learning time': 1.158, 'Inference time': 0.98, 'AUC ROC': 0.97972, 'AUC PR': 0.348837, 'Recall': 1.0, 'CLL': -0.145678, 'F1': 0.517241, 'Precision': [0.348837, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.97972
   AUC PR    = 0.348837
   CLL	      = -0.16597
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.524 seconds
Total inference time: 0.747 seconds
AUC ROC: 0.97972


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:26:14
{'Learning time': 0.524, 'Inference time': 0.747, 'AUC ROC': 0.97972, 'AUC PR': 0.348837, 'Recall': 0.0, 'CLL': -0.16597, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6081489350995123;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5170719622367218;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4125724528826601;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3151786576185066;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2367600938643422;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.17806945427207488;  // std dev = 1,936, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1351367176422346;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.10367175113685514;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08034833303035907;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.0628221418175815;  // std dev = 0,433, 20,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.372802
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.868 seconds
Total inference time: 1.143 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.833333
   AUC PR    = 0.75
   CLL	      = -0.399699
   Precision = 0.75 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.857143


Total scoring time: 0.515 seconds
Parameter learned model CLL: -0.399699


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 10, 0], 'true,true': [0.433, 5, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [5.27e-09, 10, 0], 'true,true': [0.433, 5, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 10, 0], 'true,true': [0.433, 5, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 10, 0], 'true,true': [0.433, 5, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 10, 0], 'true,true': [0.433, 5, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [1.936, 5, 15], 'false': [3.73e-09, 10, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 10, 0], 'true,true': [0.433, 5, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 10, 0], 'true,true': [0.433, 5, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [2.63e-09, 10, 0], 'true,true': [0.433, 5, 15]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 10, 0], 'true,true': [0.433, 5, 15]}]]
[{'': [0.18749999999999964, -1.1102230246251566e-17], 'true': [0.18749999999999964, nan]}, {'': [0.18750000000000008, 2.7755575615628915e-18], 'true': [0.18750000000000008, nan]}, {'': [0.18749999999999994, 0.0], 'true': [0.18749999999999994, nan]}, {'': [0.1874999999999999, 1.3877787807814458e-18], 'true': [0.1874999999999999, nan]}, {'': [0.18749999999999986, 0.0], 'true': [0.18749999999999986, nan]}, {'': [0.18750000000000003, 1.3877787807814458e-18], 'true': [0.18750000000000003, nan], 'true,true': [0.18750000000000003, nan]}, {'': [0.1875, 0.0], 'true': [0.1875, nan]}, {'': [0.18749999999999994, 6.938893903907229e-19], 'true': [0.18749999999999994, nan]}, {'': [0.1875, 6.938893903907229e-19], 'true': [0.1875, nan]}, {'': [0.18750000000000006, 1.3877787807814458e-18], 'true': [0.18750000000000006, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.8581489350995123;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109542;  // std dev = 5,16e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.4175135841583098;  // std dev = 4,71e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.10159632948783628;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.32071184716014967;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.09269127618926097;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.2551722425694894;  // std dev = 2,36e-08, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.20975771563253562;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07877675473109172;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.17709649774527741;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07324622576333704;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.06842697784420272;  // std dev = 2,63e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06419184008202619;  // std dev = 3,73e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */


Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.113 seconds
Total inference time: 1.271 seconds
AUC ROC: 0.999276


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.527 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 3.023 seconds
Total inference time: 1.271 seconds
AUC ROC: 0.999276
Total revision time: 3.023
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:26:20
{'Learning time': 3.023, 'Inference time': 1.271, 'AUC ROC': 0.999276, 'AUC PR': 0.9375, 'Recall': 1.0, 'CLL': -0.066646, 'parameter_15': {'Learning time': 0.868, 'Inference time': 1.143, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.372802, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'F1': 0.967742, 'Precision': [0.9375, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.5851860008555361;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.46125983910675533;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360639;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.3488463256948422;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.41751358415830986;  // std dev = 3,65e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1015963294878363;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.26212705508354184;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.3207118471601497;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926096;  // std dev = 7,45e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.19945264276423433;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.2551722425694894;  // std dev = 1,83e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839687;  // std dev = 3,73e-09, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.3211800329464989;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2097577156325356;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( female(A) )
%   | then return -0.27879115883856154;  // std dev = 0,490, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.25549168322416005;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.17709649774527736;  // std dev = 7,45e-09, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( female(A) )
%   | then return -0.2456101403850857;  // std dev = 0,453, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.20998333859006602;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15274385809367094;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( female(A) )
%   | then return -0.21737014514045308;  // std dev = 0,414, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( female(A) )
%   | | then return 0.1772619637847085;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13400703000801117;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( female(A) )
%   | then return -0.19330424005304617;  // std dev = 0,378, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.092129
   Precision = 0.505618 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.671642


Total learning time: 1.737 seconds
Total inference time: 1.275 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:26:23
{'Learning time': 1.737, 'Inference time': 1.275, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.092129, 'F1': 0.671642, 'Precision': [0.505618, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.979012
   AUC PR    = 0.338166
   CLL	      = -0.16647
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.606 seconds
Total inference time: 0.818 seconds
AUC ROC: 0.979012


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:26:25
{'Learning time': 0.606, 'Inference time': 0.818, 'AUC ROC': 0.979012, 'AUC PR': 0.338166, 'Recall': 0.0, 'CLL': -0.16647, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6581489350995119;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.5580193346218546;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4419486100244409;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3354113949509431;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.25176837314502193;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.1904796103243717;  // std dev = 2,000, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14620194507639978;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.11389369465607484;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.08989956180301853;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07174810215160449;  // std dev = 0,400, 25,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.411462
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.945 seconds
Total inference time: 1.22 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.875
   AUC PR    = 0.8
   CLL	      = -0.341891
   Precision = 0.8 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.888889


Total scoring time: 0.557 seconds
Parameter learned model CLL: -0.341891


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.39e-08, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.45e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.0, 5, 20], 'false': [9.13e-09, 15, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [3.73e-09, 15, 0], 'true,true': [0.4, 5, 20]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [7.9e-09, 15, 0], 'true,true': [0.4, 5, 20]}]]
[{'': [0.16000000000000014, -1.4802973661668754e-17], 'true': [0.16000000000000014, nan]}, {'': [0.15999999999999975, 3.7007434154171884e-18], 'true': [0.15999999999999975, nan]}, {'': [0.16000000000000014, 1.295260195396016e-17], 'true': [0.16000000000000014, nan]}, {'': [0.16000000000000036, -5.551115123125783e-18], 'true': [0.16000000000000036, nan]}, {'': [0.16, 3.7007434154171884e-18], 'true': [0.16, nan]}, {'': [0.16000000000000006, 5.551115123125783e-18], 'true': [0.16000000000000006, nan], 'true,true': [0.16000000000000006, nan]}, {'': [0.15999999999999998, -1.8503717077085942e-18], 'true': [0.15999999999999998, nan]}, {'': [0.15999999999999998, 9.251858538542971e-19], 'true': [0.15999999999999998, nan]}, {'': [0.15999999999999998, 9.251858538542971e-19], 'true': [0.15999999999999998, nan]}, {'': [0.16, 4.163336342344337e-18], 'true': [0.16, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.8581489350995122;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.1418510649004878;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109543;  // std dev = 7,30e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.12544463852839138;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415830986;  // std dev = 5,16e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.10159632948783631;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926098;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.3207118471601496;  // std dev = 2,11e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.09269127618926094;  // std dev = 7,45e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.25517224256948945;  // std dev = 1,49e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.08518475138839685;  // std dev = 9,13e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.2097577156325356;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07877675473109177;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07877675473109173;  // std dev = 0,000, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527744;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.07324622576333704;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1527438580936708;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06842697784420272;  // std dev = 3,73e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06419184008202619;  // std dev = 7,90e-09, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */


Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.293 seconds
Total inference time: 1.301 seconds
AUC ROC: 0.999276


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.546 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 3.341 seconds
Total inference time: 1.301 seconds
AUC ROC: 0.999276
Total revision time: 3.341
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:26:31
{'Learning time': 3.341, 'Inference time': 1.301, 'AUC ROC': 0.999276, 'AUC PR': 0.9375, 'Recall': 1.0, 'CLL': -0.066646, 'parameter_20': {'Learning time': 0.945, 'Inference time': 1.22, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.411462, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'F1': 0.967742, 'Precision': [0.9375, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.1418510649004878;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6189976143448207;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.6622329172201352;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.12544463852839138;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.4851287515461648;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.5154428111118985;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.11231637819360636;  // std dev = 1,05e-08, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783628;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.47008442702053976;  // std dev = 0,068, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.38397359541806103;  // std dev = 0,347, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3567563725999887;  // std dev = 0,063, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.09269127618926096;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.3103425001781339;  // std dev = 0,293, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.27970212675009265;  // std dev = 0,055, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 5,27e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.25513258431854596;  // std dev = 0,248, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.2269797644181339;  // std dev = 0,048, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(B) )
%   | then return -0.07877675473109172;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.21390386007474615;  // std dev = 0,211, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.18965032015643618;  // std dev = 0,042, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 3,73e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.1827195693829929;  // std dev = 0,183, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.1622160806035648;  // std dev = 0,037, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 2,63e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.15867647840508145;  // std dev = 0,160, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.14136868053957402;  // std dev = 0,033, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 5,89e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.13975902130012507;  // std dev = 0,142, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.069711
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.964 seconds
Total inference time: 1.241 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:26:35
{'Learning time': 1.964, 'Inference time': 1.241, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.069711, 'F1': 1.0, 'Precision': [1.0, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.7331489350995123;  // std dev = 0,331, 8,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.7867203636709409;  // std dev = 0,258, 14,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.1418510649004878;  // std dev = 0,000, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.979012
   AUC PR    = 0.338166
   CLL	      = -0.166464
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.703 seconds
Total inference time: 0.787 seconds
AUC ROC: 0.979012


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:26:37
{'Learning time': 0.703, 'Inference time': 0.787, 'AUC ROC': 0.979012, 'AUC PR': 0.338166, 'Recall': 0.0, 'CLL': -0.166464, 'F1': nan, 'Precision': [nan, 0.5]}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
0;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
0;true,true;author(E, D), title(E, B).;true;false
0;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
0;true,true,true;samebib(E, F), title(F, A).;false;false
0;true;haswordauthor(D, C).;true;true
0;true,false,true;haswordvenue(I, G).;false;false
1;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
1;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
1;true;haswordauthor(D, C).;false;true
1;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
1;true,false,true;haswordvenue(G, E).;false;false
2;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
2;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
2;true,true;author(E, D), title(E, B).;true;false
2;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
2;true,true,true;samebib(E, F), title(F, A).;false;false
2;true;haswordauthor(D, C).;true;true
2;true,false,true;haswordvenue(I, G).;false;false
3;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
3;true,true,false;haswordvenue(G, D).;false;false
3;true,false;haswordtitle(B, H), haswordauthor(I, H).;true;false
3;true,true;haswordauthor(F, C).;false;true
3;true;haswordtitle(A, D), haswordauthor(E, D).;true;true
3;true,false,true;haswordvenue(J, H).;false;false
4;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
4;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
4;true,true;author(E, D), title(E, B).;true;false
4;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
4;true,true,true;samebib(E, F), title(F, A).;false;false
4;true;haswordauthor(D, C).;true;true
4;true,false,true;haswordvenue(I, G).;false;false
5;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
5;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
5;true;haswordauthor(D, C).;false;true
5;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
5;true,false,true;author(G, F), title(G, A).;false;false
6;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
6;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;false
6;true;haswordauthor(D, C).;false;true
6;true,false,true;haswordvenue(G, E).;false;false
7;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
7;true,false;haswordtitle(A, E), haswordauthor(F, E).;true;true
7;true;haswordauthor(D, C).;false;true
7;true,false,false;haswordtitle(B, H), haswordauthor(I, H).;false;false
7;true,false,true;haswordvenue(G, E).;false;false
8;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
8;true,false,false;haswordtitle(B, K), haswordauthor(L, K).;false;false
8;true,true;author(E, D), title(E, B).;true;true
8;true,true,false;author(G, D), title(G, A).;false;false
8;true,false;haswordtitle(A, H), haswordauthor(I, H).;true;true
8;true,true,true;samebib(E, F), title(F, A).;false;false
8;true;haswordauthor(D, C).;true;true
8;true,false,true;haswordvenue(J, H).;false;false
9;;sametitle(A, B) :- haswordtitle(A, C), haswordtitle(B, C).;true;false
9;true,false,false;haswordtitle(B, J), haswordauthor(K, J).;false;false
9;true,true;author(E, D), title(E, B).;true;false
9;true,false;haswordtitle(A, G), haswordauthor(H, G).;true;true
9;true,true,true;samebib(E, F), title(F, A).;false;false
9;true;haswordauthor(D, C).;true;true
9;true,false,true;haswordvenue(I, G).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.6646005480027375;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.563285584736772;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.4457024086767857;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.3380124605859271;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.2537478665917126;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then if ( genre(E, F) )
%   | | then return 0.19216930606222232;  // std dev = 2,200, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.08518475138839683;  // std dev = 1,29e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.14774895224836107;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07877675473109179;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( movie(D, A) )
%   | then return 0.1153515711182683;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.07324622576333704;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.09128345998966082;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.06842697784420274;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(D, E) )
%   | then return 0.07305937331670807;  // std dev = 0,395, 31,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 0.864075
   AUC PR    = 0.074013
   CLL	      = -0.416752
   Precision = 0.074013 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.137825


Total learning time: 0.917 seconds
Total inference time: 1.221 seconds
AUC ROC: 0.864075


Results scoring model
   AUC ROC   = 0.88
   AUC PR    = 0.806452
   CLL	      = -0.334376
   Precision = 0.806452 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.892857


Total scoring time: 0.627 seconds
Parameter learned model CLL: -0.334376


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.67e-08, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [1.18e-08, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)', 'true,true': 'genre(E, F)'}, {'true,false': [0.0, 0, 0], 'true,true,true': [2.2, 6, 25], 'false': [1.29e-08, 19, 0], 'true,true,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'movie(D, A)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [0.0, 19, 0], 'true,true': [0.395, 6, 25]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(D, E)'}, {'true,false': [0.0, 0, 0], 'false': [6.45e-09, 19, 0], 'true,true': [0.395, 6, 25]}]]
[{'': [0.15608740894901246, 0.0], 'true': [0.15608740894901246, nan]}, {'': [0.15608740894901107, 0.0], 'true': [0.15608740894901107, nan]}, {'': [0.1560874089490117, 1.460819769243627e-17], 'true': [0.1560874089490117, nan]}, {'': [0.1560874089490113, -5.843279076974508e-18], 'true': [0.1560874089490113, nan]}, {'': [0.15608740894901157, 7.304098846218135e-18], 'true': [0.15608740894901157, nan]}, {'': [0.1560874089490115, 8.764918615461762e-18], 'true': [0.1560874089490115, nan], 'true,true': [0.1560874089490115, nan]}, {'': [0.15608740894901146, -7.304098846218135e-19], 'true': [0.15608740894901146, nan]}, {'': [0.15608740894901138, -7.304098846218135e-19], 'true': [0.15608740894901138, nan]}, {'': [0.15608740894901135, -2.1912296538654404e-18], 'true': [0.15608740894901135, nan]}, {'': [0.15608740894901152, 2.1912296538654404e-18], 'true': [0.15608740894901152, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.858148935099512;  // std dev = 1,33e-07, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.14185106490048777;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.12544463852839138;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.11231637819360639;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.11231637819360635;  // std dev = 1,67e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783627;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.41751358415830997;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.10159632948783635;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.32071184716014955;  // std dev = 2,11e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.09269127618926093;  // std dev = 1,18e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948956;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.08518475138839683;  // std dev = 1,29e-08, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.20975771563253554;  // std dev = 1,49e-08, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109179;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.17709649774527747;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.07324622576333704;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.15274385809367083;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06842697784420274;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.0641918400820262;  // std dev = 6,45e-09, 19,000 (wgt'ed) examples reached here.  /* #neg=19 */


Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 1.428 seconds
Total inference time: 1.161 seconds
AUC ROC: 0.999276


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.094637
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.552 seconds
Refined model CLL: -0.094637


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999276
   AUC PR    = 0.9375
   CLL	      = -0.066646
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total learning time: 3.524 seconds
Total inference time: 1.161 seconds
AUC ROC: 0.999276
Total revision time: 3.524
Best scored revision CLL: -0.094637


Dataset: 54_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 00:26:43
{'Learning time': 3.524, 'Inference time': 1.161, 'parameter_25': {'Learning time': 0.917, 'Inference time': 1.221, 'AUC ROC': 0.864075, 'AUC PR': 0.074013, 'Recall': 1.0, 'CLL': -0.416752, 'F1': 0.137825, 'Precision': [0.074013, 0.5]}, 'AUC ROC': 0.999276, 'AUC PR': 0.9375, 'Recall': 1.0, 'CLL': -0.066646, 'F1': 0.967742, 'Precision': [0.9375, 0.5]}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7993254056877476;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.6392070123615109;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.6723676618346616;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else return -0.12544463852839138;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.49932275605826126;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.5225238410881435;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else return -0.11231637819360638;  // std dev = 1,05e-08, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( female(A) )
%   | then return 0.3758491322444214;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.3927742928882807;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else return -0.10159632948783635;  // std dev = 0,000, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3669348471495574;  // std dev = 0,064, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.09269127618926097;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(B) )
%   | then return -0.09269127618926094;  // std dev = 9,13e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.45044921761174833;  // std dev = 0,439, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08518475138839687;  // std dev = 2,63e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.28657467259253216;  // std dev = 0,057, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(B) )
%   | then return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.36691098210792905;  // std dev = 0,375, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.23174478585674776;  // std dev = 0,049, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(B) )
%   | then return -0.07877675473109173;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.3001545206003515;  // std dev = 0,315, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.19308135022310235;  // std dev = 0,043, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.248950102217163;  // std dev = 0,266, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.16477703576831373;  // std dev = 0,038, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.06842697784420272;  // std dev = 1,86e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(B) )
%   | then return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.21004053363511285;  // std dev = 0,227, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.14334064988129316;  // std dev = 0,034, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.0641918400820262;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( actor(B) )
%   | then return -0.06419184008202619;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.1802276559821551;  // std dev = 0,196, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.071984
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.864 seconds
Total inference time: 1.259 seconds
AUC ROC: 1.0


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN-B), Time: 00:26:47
{'Learning time': 1.864, 'Inference time': 1.259, 'AUC ROC': 1.0, 'AUC PR': 1.0, 'Recall': 1.0, 'CLL': -0.071984, 'F1': 1.0, 'Precision': [1.0, 0.5]}


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( female(A) )
%   | then return 0.7581489350995123;  // std dev = 0,300, 10,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7993254056877476;  // std dev = 0,235, 17,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else return -0.14185106490048777;  // std dev = 7,45e-09, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */


Results
   AUC ROC   = 0.979012
   AUC PR    = 0.338166
   CLL	      = -0.166359
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.729 seconds
Total inference time: 0.778 seconds
AUC ROC: 0.979012


Dataset: 54_cora_imdb, Fold: 5, Type: Scratch (RDN), Time: 00:26:48
{'Learning time': 0.729, 'Inference time': 0.778, 'AUC ROC': 0.979012, 'AUC PR': 0.338166, 'Recall': 0.0, 'CLL': -0.166359, 'F1': nan, 'Precision': [nan, 0.5]}


