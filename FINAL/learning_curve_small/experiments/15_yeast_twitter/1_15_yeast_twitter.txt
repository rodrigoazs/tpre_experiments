Starting experiment #1 for 15_yeast_twitter

Start learning from source dataset

Source train facts examples: 15015
Source train pos examples: 369
Source train neg examples: 51477

WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then return 0.8581489350995124;  // std dev = 0,000, 57,000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( interaction(D, A), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D) )
%   | | then return 0.8581489350995123;  // std dev = 0,000, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( interaction(A, F), complex(A, G) )
%   | | then if ( interaction(A, A) )
%   | | | then return -0.1418510649004877;  // std dev = 1,83e-08, 25,000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.11044251308116418;  // std dev = 6,413, 218,000 (wgt'ed) examples reached here.  /* #neg=163 #pos=55 */
%   | | else if ( interaction(A, A) )
%   | | | then return -0.14185106490048774;  // std dev = 1,05e-08, 21,000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.1689059072110614;  // std dev = 12,700, 753,000 (wgt'ed) examples reached here.  /* #neg=519 #pos=234 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( phenotype(A, D), interaction(E, C) )
%   | then if ( phenotype(C, D) )
%   | | then return 0.7194734122109542;  // std dev = 5,96e-08, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( enzyme(A, F) )
%   | | | then return -0.2805265877890456;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.4467461394836814;  // std dev = 1,477, 11,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else return 0.7247900911641819;  // std dev = 0,072, 29,000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( interaction(A, A) )
%   | then return -0.12544463852839124;  // std dev = 4,08e-08, 45,000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( interaction(G, A), enzyme(G, H) )
%   | | then if ( enzyme(A, H) )
%   | | | then return -0.09241851639787145;  // std dev = 1,678, 42,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=3 */
%   | | | else return 0.13686156499274357;  // std dev = 6,712, 216,000 (wgt'ed) examples reached here.  /* #neg=151 #pos=65 */
%   | | else if ( enzyme(A, I), location(A, J) )
%   | | | then return 0.2019786129583372;  // std dev = 7,478, 243,000 (wgt'ed) examples reached here.  /* #neg=154 #pos=89 */
%   | | | else return 0.16184919727809768;  // std dev = 10,093, 472,000 (wgt'ed) examples reached here.  /* #neg=317 #pos=155 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( enzyme(A, C), location(A, D) )
%   then if ( enzyme(E, C), recursion_proteinclass(E, B) )
%   | then return 0.7655845498089617;  // std dev = 0,121, 128,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=127 */
%   | else return -0.1811846201077253;  // std dev = 0,326, 210,000 (wgt'ed) examples reached here.  /* #neg=210 */
%   else if ( interaction(A, F), recursion_proteinclass(F, B) )
%   | then if ( interaction(G, A), interaction(G, G) )
%   | | then if ( interaction(A, A) )
%   | | | then return 0.554744368470304;  // std dev = 0,003, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.044094836610188946;  // std dev = 0,821, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.6683496696861938;  // std dev = 0,191, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( complex(A, H) )
%   | | then if ( complex(I, H), recursion_proteinclass(I, B) )
%   | | | then return 0.7814861187773618;  // std dev = 0,718, 65,000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return -0.17333425014726553;  // std dev = 0,522, 199,000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else if ( interaction(J, A), phenotype(J, K) )
%   | | | then return 0.10707828091954695;  // std dev = 7,547, 281,000 (wgt'ed) examples reached here.  /* #neg=198 #pos=83 */
%   | | | else return 0.15263457321349083;  // std dev = 5,825, 153,000 (wgt'ed) examples reached here.  /* #neg=101 #pos=52 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( interaction(C, A), complex(C, D) )
%   then if ( interaction(E, C), recursion_proteinclass(E, B) )
%   | then return 0.45978393978048054;  // std dev = 0,317, 67,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=59 */
%   | else if ( interaction(A, F), complex(F, D) )
%   | | then return -0.06530386509220609;  // std dev = 0,243, 157,000 (wgt'ed) examples reached here.  /* #neg=139 #pos=18 */
%   | | else if ( interaction(G, C), complex(A, H) )
%   | | | then return 0.03971188764981074;  // std dev = 4,325, 153,000 (wgt'ed) examples reached here.  /* #neg=115 #pos=38 */
%   | | | else return 0.10166300504400587;  // std dev = 7,194, 283,000 (wgt'ed) examples reached here.  /* #neg=192 #pos=91 */
%   else if ( interaction(A, I), recursion_proteinclass(I, B) )
%   | then return 0.4825407905302914;  // std dev = 0,061, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( interaction(A, J), enzyme(A, K) )
%   | | then if ( complex(J, L) )
%   | | | then return 0.1477049440524943;  // std dev = 3,146, 59,000 (wgt'ed) examples reached here.  /* #neg=37 #pos=22 */
%   | | | else return 0.25343413486623223;  // std dev = 1,558, 14,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else if ( interaction(M, A), recursion_proteinclass(M, B) )
%   | | | then return 0.5051125401623063;  // std dev = 0,239, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.09049487757117534;  // std dev = 8,055, 358,000 (wgt'ed) examples reached here.  /* #neg=252 #pos=106 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( interaction(C, D), interaction(D, C) )
%   | then if ( interaction(A, D) )
%   | | then return 0.33269946107340675;  // std dev = 0,056, 31,000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.1125108963616672;  // std dev = 0,559, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.43753675671203596;  // std dev = 0,078, 23,000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( interaction(E, A), recursion_proteinclass(E, B) )
%   | then if ( interaction(E, E), location(E, F) )
%   | | then return -0.28388528501555005;  // std dev = 0,672, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.35356816617214404;  // std dev = 0,070, 22,000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( interaction(A, G), interaction(H, A) )
%   | | then if ( interaction(G, I), interaction(I, J) )
%   | | | then return 0.020232025231268068;  // std dev = 6,209, 310,000 (wgt'ed) examples reached here.  /* #neg=241 #pos=69 */
%   | | | else return 0.10114118739609865;  // std dev = 3,748, 80,000 (wgt'ed) examples reached here.  /* #neg=54 #pos=26 */
%   | | else if ( phenotype(A, K), interaction(A, L) )
%   | | | then return 0.13121045384545993;  // std dev = 3,322, 62,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
%   | | | else return 0.07268350755450476;  // std dev = 10,038, 573,000 (wgt'ed) examples reached here.  /* #neg=402 #pos=171 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( location(A, C), interaction(A, D) )
%   then if ( interaction(D, A), phenotype(D, E) )
%   | then return 0.040181680388847986;  // std dev = 0,314, 168,000 (wgt'ed) examples reached here.  /* #neg=117 #pos=51 */
%   | else return 0.06999159079125113;  // std dev = 0,381, 394,000 (wgt'ed) examples reached here.  /* #neg=257 #pos=137 */
%   else if ( interaction(F, A), location(F, G) )
%   | then if ( interaction(H, F), interaction(F, H) )
%   | | then if ( complex(F, I), complex(H, I) )
%   | | | then return 0.0797223778755759;  // std dev = 5,255, 148,000 (wgt'ed) examples reached here.  /* #neg=100 #pos=48 */
%   | | | else return 0.14872300486374038;  // std dev = 5,054, 135,000 (wgt'ed) examples reached here.  /* #neg=80 #pos=55 */
%   | | else if ( recursion_proteinclass(F, B) )
%   | | | then return 0.2928950918625469;  // std dev = 0,214, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.04835046872457523;  // std dev = 5,873, 212,000 (wgt'ed) examples reached here.  /* #neg=151 #pos=61 */
%   | else if ( interaction(A, J), phenotype(J, K) )
%   | | then return 0.05629506302901088;  // std dev = 0,890, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( location(A, L) )
%   | | | then return 0.24817686150656293;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.4162181955010033;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( interaction(A, C), enzyme(C, D) )
%   then if ( interaction(E, A), recursion_proteinclass(E, B) )
%   | then return 0.19212747968079225;  // std dev = 0,190, 24,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else if ( recursion_proteinclass(C, B), complex(A, F) )
%   | | then return 0.29079025283337606;  // std dev = 0,095, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( phenotype(A, G), complex(A, H) )
%   | | | then return 0.04237533269232971;  // std dev = 2,847, 72,000 (wgt'ed) examples reached here.  /* #neg=52 #pos=20 */
%   | | | else return -0.027542063133132295;  // std dev = 4,667, 175,000 (wgt'ed) examples reached here.  /* #neg=138 #pos=37 */
%   else if ( interaction(A, I), complex(A, J) )
%   | then return 0.02556181176327591;  // std dev = 0,334, 154,000 (wgt'ed) examples reached here.  /* #neg=106 #pos=48 */
%   | else if ( complex(A, K), enzyme(A, L) )
%   | | then if ( enzyme(M, L), recursion_proteinclass(M, B) )
%   | | | then return 0.5526127871391231;  // std dev = 0,636, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.2021787810016295;  // std dev = 0,120, 34,000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( interaction(N, A), phenotype(N, P) )
%   | | | then return 0.07170398590652975;  // std dev = 8,248, 386,000 (wgt'ed) examples reached here.  /* #neg=252 #pos=134 */
%   | | | else return 0.04368985414453038;  // std dev = 6,666, 246,000 (wgt'ed) examples reached here.  /* #neg=168 #pos=78 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( complex(C, D) )
%   | then return 0.2659643490934737;  // std dev = 0,074, 35,000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return 0.15849703124978787;  // std dev = 0,272, 25,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   else if ( location(A, E), complex(A, F) )
%   | then if ( location(G, E), recursion_proteinclass(G, B) )
%   | | then if ( complex(G, H) )
%   | | | then return 0.26242420713096276;  // std dev = 4,827, 177,000 (wgt'ed) examples reached here.  /* #neg=65 #pos=112 */
%   | | | else return -0.167135804280787;  // std dev = 0,226, 43,000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.17424021627089378;  // std dev = 0,532, 253,000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else if ( interaction(I, A), interaction(J, I) )
%   | | then if ( interaction(A, I), recursion_proteinclass(J, B) )
%   | | | then return 0.6214018333286733;  // std dev = 1,018, 21,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.006919791609717683;  // std dev = 8,769, 470,000 (wgt'ed) examples reached here.  /* #neg=343 #pos=127 */
%   | | else if ( interaction(K, A), enzyme(A, L) )
%   | | | then return 0.21343285991236197;  // std dev = 1,764, 19,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | | else return 0.0974069611533794;  // std dev = 5,094, 118,000 (wgt'ed) examples reached here.  /* #neg=75 #pos=43 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( interaction(A, A) )
%   then if ( interaction(A, C), recursion_proteinclass(C, B) )
%   | then return 0.18557275794795555;  // std dev = 0,149, 24,000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.11160975977267804;  // std dev = 0,216, 55,000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else if ( enzyme(A, D) )
%   | then if ( enzyme(E, D), recursion_proteinclass(E, B) )
%   | | then if ( complex(A, F), phenotype(E, G) )
%   | | | then return 0.39827465733104334;  // std dev = 1,065, 51,000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.5120678732259071;  // std dev = 1,680, 78,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   | | else return -0.20183549744595047;  // std dev = 0,068, 273,000 (wgt'ed) examples reached here.  /* #neg=273 */
%   | else if ( interaction(H, A), interaction(I, H) )
%   | | then if ( recursion_proteinclass(I, B), interaction(A, J) )
%   | | | then return 0.4063234620405892;  // std dev = 1,860, 41,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=37 */
%   | | | else return 0.005597498125476031;  // std dev = 8,334, 464,000 (wgt'ed) examples reached here.  /* #neg=335 #pos=129 */
%   | | else if ( interaction(A, K), phenotype(K, L) )
%   | | | then return 0.04058743305328976;  // std dev = 3,196, 62,000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
%   | | | else return 0.10678556826109102;  // std dev = 4,006, 75,000 (wgt'ed) examples reached here.  /* #neg=46 #pos=29 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then return 0.104395979083816;  // std dev = 0,222, 62,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=57 */
%   else if ( complex(A, D), interaction(E, A) )
%   | then if ( interaction(F, E), recursion_proteinclass(F, B) )
%   | | then if ( complex(F, D) )
%   | | | then return 0.37092045502174686;  // std dev = 0,457, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.1764276811439426;  // std dev = 0,400, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( interaction(A, E) )
%   | | | then return -0.12330434003022579;  // std dev = 0,281, 71,000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | | else return -0.003634699212970496;  // std dev = 4,435, 269,000 (wgt'ed) examples reached here.  /* #neg=200 #pos=69 */
%   | else if ( enzyme(A, G) )
%   | | then if ( enzyme(H, G), recursion_proteinclass(H, B) )
%   | | | then return 0.36547274683198605;  // std dev = 2,239, 79,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=74 */
%   | | | else return -0.1817344823832805;  // std dev = 0,600, 164,000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else if ( interaction(I, A), phenotype(I, J) )
%   | | | then return 0.02429984243211366;  // std dev = 7,045, 264,000 (wgt'ed) examples reached here.  /* #neg=183 #pos=81 */
%   | | | else return 0.06295712289769563;  // std dev = 5,917, 173,000 (wgt'ed) examples reached here.  /* #neg=111 #pos=62 */


Starting fold 1

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 16128

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false,false,true;interaction(A, A).;false;false
0;false,false;interaction(A, F), complex(A, G).;true;true
0;false,true;interaction(E, D).;false;false
0;false;interaction(D, A), recursion_proteinclass(D, B).;true;true
0;false,false,false;interaction(A, A).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true,true,false;enzyme(A, F).;false;false
1;false,false;interaction(G, A), enzyme(G, H).;true;true
1;false,false,true;enzyme(A, H).;false;false
1;true;phenotype(A, D), interaction(E, C).;true;false
1;false;interaction(A, A).;false;true
1;true,true;phenotype(C, D).;false;true
1;false,false,false;enzyme(A, I), location(A, J).;false;false
2;;proteinclass(A, B) :- enzyme(A, C), location(A, D).;true;true
2;false,false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
2;false,false;complex(A, H).;true;true
2;false,true,true;interaction(A, A).;false;false
2;true;enzyme(E, C), recursion_proteinclass(E, B).;false;false
2;false,true;interaction(G, A), interaction(G, G).;true;false
2;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
2;false,false,false;interaction(J, A), phenotype(J, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), complex(C, D).;true;true
3;false,false,true;complex(J, L).;false;false
3;false,false;interaction(A, J), enzyme(A, K).;true;true
3;true,false;interaction(A, F), complex(F, D).;false;true
3;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
3;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
3;false,false,false;interaction(M, A), recursion_proteinclass(M, B).;false;false
3;true,false,false;interaction(G, C), complex(A, H).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;false,false,true;interaction(G, I), interaction(I, J).;false;false
4;false,false;interaction(A, G), interaction(H, A).;true;true
4;true;interaction(C, D), interaction(D, C).;true;false
4;false,true;interaction(E, E), location(E, F).;false;false
4;false;interaction(E, A), recursion_proteinclass(E, B).;true;true
4;true,true;interaction(A, D).;false;false
4;false,false,false;phenotype(A, K), interaction(A, L).;false;false
5;;proteinclass(A, B) :- location(A, C), interaction(A, D).;true;true
5;false,false;interaction(A, J), phenotype(J, K).;false;true
5;false,true,true;complex(F, I), complex(H, I).;false;false
5;true;interaction(D, A), phenotype(D, E).;false;false
5;false,true;interaction(H, F), interaction(F, H).;true;true
5;false;interaction(F, A), location(F, G).;true;true
5;false,false,false;location(A, L).;false;false
5;false,true,false;recursion_proteinclass(F, B).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
6;false,false;complex(A, K), enzyme(A, L).;true;true
6;true,false;recursion_proteinclass(C, B), complex(A, F).;false;true
6;true;interaction(E, A), recursion_proteinclass(E, B).;false;true
6;false;interaction(A, I), complex(A, J).;false;true
6;false,false,false;interaction(N, A), phenotype(N, P).;false;false
6;true,false,false;phenotype(A, G), complex(A, H).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;false,false,true;interaction(A, I), recursion_proteinclass(J, B).;false;false
7;false,false;interaction(I, A), interaction(J, I).;true;true
7;false,true,true;complex(G, H).;false;false
7;true;complex(C, D).;false;false
7;false,true;location(G, E), recursion_proteinclass(G, B).;true;false
7;false;location(A, E), complex(A, F).;true;true
7;false,false,false;interaction(K, A), enzyme(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, A).;true;true
8;false,false,true;recursion_proteinclass(I, B), interaction(A, J).;false;false
8;false,false;interaction(H, A), interaction(I, H).;true;true
8;false,true,true;complex(A, F), phenotype(E, G).;false;false
8;true;interaction(A, C), recursion_proteinclass(C, B).;false;false
8;false,true;enzyme(E, D), recursion_proteinclass(E, B).;true;false
8;false;enzyme(A, D).;true;true
8;false,false,false;interaction(A, K), phenotype(K, L).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
9;false,false;enzyme(A, G).;true;true
9;false,true,true;complex(F, D).;false;false
9;false,true;interaction(F, E), recursion_proteinclass(F, B).;true;true
9;false;complex(A, D), interaction(E, A).;true;true
9;false,false,false;interaction(I, A), phenotype(I, J).;false;false
9;false,true,false;interaction(A, E).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0.12123413375004777;  // std dev = 0,421, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.639069357318775;  // std dev = 0,250, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.16511980541786664;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.1393598625826224;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(C, D) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.492920764527674;  // std dev = 0,292, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A), tweets(F, D) )
%   | | then return -0.13957087804956508;  // std dev = 0,018, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then if ( follows(D, A) )
%   | | then return 0.28707914459016437;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.33231262773754566;  // std dev = 0,111, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( follows(H, F), follows(I, H) )
%   | | | then return 2.5977193230936985E-4;  // std dev = 0,679, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, C) )
%   | then return 0.0757359062263669;  // std dev = 0,751, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else return 0.3444138310142365;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.21375246452007987;  // std dev = 0,006, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.2712875958344423;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.011580758290247618;  // std dev = 0,660, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.11675220636841344;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.1902872803189066;  // std dev = 0,036, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G) )
%   | | | then return 0.5989399972977374;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.13731984315777723;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(H, A), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10524074105139844;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(C, B) )
%   | then if ( tweets(A, D) )
%   | | then return 0.26413076617269443;  // std dev = 0,230, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15460802719747824;  // std dev = 0,004, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(F, B), follows(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11662480158230495;  // std dev = 0,023, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13054074085928255;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D) )
%   | | | then return 0.2695887218600026;  // std dev = 0,165, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, A) )
%   | | | then return -0.10990852368074606;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return -0.08610330507719635;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.992686
   AUC PR    = 0.342752
   CLL	      = -0.132332
   Precision = 0.334356 at threshold = 0.5
   Recall    = 0.865079
   F1        = 0.482301


Total learning time: 1.089 seconds
Total inference time: 20.244 seconds
AUC ROC: 0.992686


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.139578
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.706 seconds
Parameter learned model CLL: -0.139578


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, A)', 'false,false': 'follows(E, A), tweets(A, F)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 1, 0], 'true': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.894, 4, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false,false': 'follows(A, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.421, 5, 2], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 3]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false,false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,false': 'tweets(A, E)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, G)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [0.0, 0, 0], 'true': [0.25, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 4, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), tweets(C, D)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'true,false': 'follows(F, A), tweets(F, D)'}, {'true,true': [0.292, 0, 5], 'false': [0.0, 0, 0], 'true,false,true': [0.018, 5, 0], 'true,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(H, F), follows(I, H)', 'false,false': 'follows(F, A), follows(A, G)', 'true': 'follows(D, C), follows(C, D)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'true,true': 'follows(D, A)'}, {'true,true,false': [0.111, 0, 3], 'false,false,true,true': [0.679, 5, 1], 'false,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'true,true,true': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(A, C)'}, {'true,false': [0.0, 0, 1], 'false': [0.0, 0, 0], 'true,true': [0.751, 5, 4]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(A, D), recursion_accounttype(D, B)', 'true,false': 'recursion_accounttype(C, B), tweets(A, E)', 'true,false,false': 'tweets(A, F)'}, {'true,true': [0.006, 0, 3], 'true,false,false,false': [0.0, 1, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false,true': [0.66, 4, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(H, A), recursion_accounttype(I, B)', 'false,false': 'follows(A, H), follows(H, I)', 'false,true,true': 'tweets(F, G)', 'true': 'tweets(C, D)', 'false,true': 'recursion_accounttype(F, B)', 'false': 'tweets(A, E)'}, {'false,true,true,true': [0.0, 0, 1], 'false,false,true,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true,false': [0.0, 4, 0], 'false,false,true,false': [0.0, 1, 0], 'true,true': [0.036, 0, 4], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,true': 'tweets(A, D)', 'false,false': 'follows(A, E), follows(E, F)', 'false': 'recursion_accounttype(C, B)', 'false,false,true': 'recursion_accounttype(F, B), follows(G, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0], 'false,true,true': [0.23, 0, 3], 'true': [0.0, 0, 0], 'false,false,true,false': [0.023, 5, 0], 'false,true,false': [0.004, 0, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'recursion_accounttype(G, B)', 'false,true,true': 'tweets(F, D)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false': 'tweets(A, D), follows(A, E)', 'false,false,false': 'follows(A, H)', 'false,true,false': 'follows(E, A)'}, {'false,true,true,true': [0.165, 0, 2], 'false,true,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 1, 0], 'false,false,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 4, 0], 'true': [0.013, 0, 3], 'false,false,false,false': [0.0, 0, 0], 'false,true,true,false': [0.0, 0, 0]}]]
[{'': [0.0, 0.13888888888888892], 'false,false,true': [nan, 0.16000000000000003], 'false,false': [0.16000000000000003, 0.0], 'false': [nan, 0.13888888888888892], 'false,false,false': [nan, 0.0]}, {'': [0.0, 0.17763708698395414], 'true': [0.0, nan], 'false,false': [0.17763708698395414, nan], 'false': [nan, 0.17763708698395414]}, {'': [0.0124836562351609, 0.00010617194478000358], 'false,false,true': [nan, 0.0], 'false,false': [0.0, 0.0], 'false': [nan, 0.00010617194478000358], 'false,false,false': [0.0, nan]}, {'': [0.10855905836979232, nan], 'true': [0.017030464656075585, 6.481311848203496e-05], 'true,false': [6.481311848203496e-05, nan]}, {'': [0.0034527397460249604, 0.07680560547150438], 'false,false,true': [0.07680560547150438, nan], 'false,false': [0.07680560547150438, nan], 'true': [0.0034527397460249604, nan], 'false': [nan, 0.07680560547150438], 'true,true': [0.0, 0.004092135995288848]}, {'': [0.06284351664077514, nan], 'true': [0.06260734687402963, 0.0]}, {'': [0.05874563761422776, nan], 'true': [1.2951603821485339e-05, 0.07382567948495032], 'true,false': [0.0, 0.07484213470272941], 'true,false,false': [0.08706567000692843, 0.0]}, {'': [0.00032355274872077067, 0.07411947216944609], 'false,false,true': [nan, 0.0], 'false,false': [0.0, nan], 'false,true,true': [0.0, nan], 'true': [0.00032355274872077067, nan], 'false,true': [0.0, 0.0], 'false': [0.08673256842681278, 0.0]}, {'': [nan, 0.035173246181562465], 'false,true': [0.01764763007841516, 8.736759163147784e-06], 'false,false': [0.00010910177558838274, nan], 'false': [0.013470928035346358, 0.00010910177558838274], 'false,false,true': [nan, 0.00010910177558838274]}, {'': [5.311020190196247e-05, 0.03262903797882898], 'false,false': [nan, 0.0], 'false,true,true': [0.013669799728147206, nan], 'false,true': [0.013669799728147206, 0.0], 'false': [0.036560635325608014, 0.0], 'false,false,false': [0.0, nan], 'false,true,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(E, A), tweets(A, F).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(C, E), recursion_accounttype(E, B).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(D, A).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
6;;accounttype(A, B) :- follows(A, D), recursion_accounttype(D, B).;true;true
6;false,false;tweets(A, F).;true;true
6;false;recursion_accounttype(C, B), tweets(A, E).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false,true;recursion_accounttype(F, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;true;tweets(A, D).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
9;false;tweets(A, D), follows(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(D, A), tweets(A, E) )
%   | then return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.12123413375004777;  // std dev = 0,421, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.639069357318775;  // std dev = 0,250, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, D) )
%   | then return -0.16511980541786664;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.1393598625826224;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, D), recursion_accounttype(D, B) )
%   then return 0.492920764527674;  // std dev = 0,292, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.13957087804956508;  // std dev = 0,018, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.32100425695070034;  // std dev = 0,118, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else return 2.5977193230936985E-4;  // std dev = 0,679, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2562980404469659;  // std dev = 0,105, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 2.2612136473661634E-4;  // std dev = 0,679, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18438525572351994;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( recursion_accounttype(D, B), tweets(A, E) )
%   | then return 0.4555258088897926;  // std dev = 0,232, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.12732484587908227;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10918804480865693;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17039319826065286;  // std dev = 0,042, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.5081530540610826;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.11383566223540642;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.09901209463078561;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.2334721249027767;  // std dev = 0,186, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.13685116140842146;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else return -0.10038239146187189;  // std dev = 0,011, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11816078022620591;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.23905441735861022;  // std dev = 0,128, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.09394720334226206;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.08259163399092234;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.992905
   AUC PR    = 0.36567
   CLL	      = -0.111997
   Precision = 0.329513 at threshold = 0.5
   Recall    = 0.912698
   F1        = 0.484211


Total learning time: 1.03 seconds
Total inference time: 13.908 seconds
AUC ROC: 0.992905


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.12339
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.652 seconds
Refined model CLL: -0.12339


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992905
   AUC PR    = 0.36567
   CLL	      = -0.111997
   Precision = 0.329513 at threshold = 0.5
   Recall    = 0.912698
   F1        = 0.484211


Total learning time: 3.4770000000000003 seconds
Total inference time: 13.908 seconds
AUC ROC: 0.992905
Total revision time: 3.4770000000000003
Best scored revision CLL: -0.12339


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:01:38
{'CLL': -0.111997, 'AUC ROC': 0.992905, 'F1': 0.484211, 'Recall': 0.912698, 'Precision': [0.329513, 0.5], 'parameter_5': {'CLL': -0.132332, 'AUC ROC': 0.992686, 'F1': 0.482301, 'Recall': 0.865079, 'Precision': [0.334356, 0.5], 'Inference time': 20.244, 'Learning time': 1.089, 'AUC PR': 0.342752}, 'Inference time': 13.908, 'Learning time': 3.4770000000000003, 'AUC PR': 0.36567}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.02176788419240575;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.01904987294481035;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.01663677639228948;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.014502864105143046;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.01262239661487466;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.010970321301480393;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.009522764707203951;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.00825735549633603;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.007153411981729964;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */


Results
   AUC ROC   = 0.821553
   AUC PR    = 0.268139
   CLL	      = -0.194047
   Precision = 0.398058 at threshold = 0.5
   Recall    = 0.650794
   F1        = 0.493976


Total learning time: 1.07 seconds
Total inference time: 3.031 seconds
AUC ROC: 0.821553


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:01:42
{'CLL': -0.194047, 'AUC ROC': 0.821553, 'F1': 0.493976, 'Recall': 0.650794, 'Precision': [0.398058, 0.5], 'Inference time': 3.031, 'Learning time': 1.07, 'AUC PR': 0.268139}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */


Results
   AUC ROC   = 0.821553
   AUC PR    = 0.268139
   CLL	      = -0.168281
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.699 seconds
Total inference time: 2.041 seconds
AUC ROC: 0.821553


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:01:45
{'CLL': -0.168281, 'AUC ROC': 0.821553, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.041, 'Learning time': 0.699, 'AUC PR': 0.268139}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false,false,true;interaction(A, A).;false;false
0;false,false;interaction(A, F), complex(A, G).;true;true
0;false,true;interaction(E, D).;false;false
0;false;interaction(D, A), recursion_proteinclass(D, B).;true;true
0;false,false,false;interaction(A, A).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true,true,false;enzyme(A, F).;false;false
1;false,false;interaction(G, A), enzyme(G, H).;true;true
1;false,false,true;enzyme(A, H).;false;false
1;true;phenotype(A, D), interaction(E, C).;true;false
1;false;interaction(A, A).;false;true
1;true,true;phenotype(C, D).;false;true
1;false,false,false;enzyme(A, I), location(A, J).;false;false
2;;proteinclass(A, B) :- enzyme(A, C), location(A, D).;true;true
2;false,false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
2;false,false;complex(A, H).;true;true
2;false,true,true;interaction(A, A).;false;false
2;true;enzyme(E, C), recursion_proteinclass(E, B).;false;false
2;false,true;interaction(G, A), interaction(G, G).;true;false
2;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
2;false,false,false;interaction(J, A), phenotype(J, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), complex(C, D).;true;true
3;false,false,true;complex(J, L).;false;false
3;false,false;interaction(A, J), enzyme(A, K).;true;true
3;true,false;interaction(A, F), complex(F, D).;false;true
3;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
3;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
3;false,false,false;interaction(M, A), recursion_proteinclass(M, B).;false;false
3;true,false,false;interaction(G, C), complex(A, H).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;false,false,true;interaction(G, I), interaction(I, J).;false;false
4;false,false;interaction(A, G), interaction(H, A).;true;true
4;true;interaction(C, D), interaction(D, C).;true;false
4;false,true;interaction(E, E), location(E, F).;false;false
4;false;interaction(E, A), recursion_proteinclass(E, B).;true;true
4;true,true;interaction(A, D).;false;false
4;false,false,false;phenotype(A, K), interaction(A, L).;false;false
5;;proteinclass(A, B) :- location(A, C), interaction(A, D).;true;true
5;false,false;interaction(A, J), phenotype(J, K).;false;true
5;false,true,true;complex(F, I), complex(H, I).;false;false
5;true;interaction(D, A), phenotype(D, E).;false;false
5;false,true;interaction(H, F), interaction(F, H).;true;true
5;false;interaction(F, A), location(F, G).;true;true
5;false,false,false;location(A, L).;false;false
5;false,true,false;recursion_proteinclass(F, B).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
6;false,false;complex(A, K), enzyme(A, L).;true;true
6;true,false;recursion_proteinclass(C, B), complex(A, F).;false;true
6;true;interaction(E, A), recursion_proteinclass(E, B).;false;true
6;false;interaction(A, I), complex(A, J).;false;true
6;false,false,false;interaction(N, A), phenotype(N, P).;false;false
6;true,false,false;phenotype(A, G), complex(A, H).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;false,false,true;interaction(A, I), recursion_proteinclass(J, B).;false;false
7;false,false;interaction(I, A), interaction(J, I).;true;true
7;false,true,true;complex(G, H).;false;false
7;true;complex(C, D).;false;false
7;false,true;location(G, E), recursion_proteinclass(G, B).;true;false
7;false;location(A, E), complex(A, F).;true;true
7;false,false,false;interaction(K, A), enzyme(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, A).;true;true
8;false,false,true;recursion_proteinclass(I, B), interaction(A, J).;false;false
8;false,false;interaction(H, A), interaction(I, H).;true;true
8;false,true,true;complex(A, F), phenotype(E, G).;false;false
8;true;interaction(A, C), recursion_proteinclass(C, B).;false;false
8;false,true;enzyme(E, D), recursion_proteinclass(E, B).;true;false
8;false;enzyme(A, D).;true;true
8;false,false,false;interaction(A, K), phenotype(K, L).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
9;false,false;enzyme(A, G).;true;true
9;false,true,true;complex(F, D).;false;false
9;false,true;interaction(F, E), recursion_proteinclass(F, B).;true;true
9;false;complex(A, D), interaction(E, A).;true;true
9;false,false,false;interaction(I, A), phenotype(I, J).;false;false
9;false,true,false;interaction(A, E).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.016851064900487787;  // std dev = 0,935, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0.08631024870812352;  // std dev = 0,414, 12,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else return 0.46779830577216797;  // std dev = 0,432, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6500601050454361;  // std dev = 0,351, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.15844796803269373;  // std dev = 0,051, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.1891502933850809;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(C, D) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.4794157729176289;  // std dev = 0,324, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A), tweets(F, D) )
%   | | then return -0.07968161035397198;  // std dev = 0,505, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(C, G), tweets(A, H) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.26465894161898856;  // std dev = 0,603, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.4561114056146175;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(J, A) )
%   | | then if ( tweets(J, K) )
%   | | | then return -0.181309480653678;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.6044382610659229;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then if ( follows(D, A) )
%   | | then return 0.317312134804169;  // std dev = 0,042, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.3236808225325625;  // std dev = 0,125, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.413867295489883;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( follows(H, F), follows(I, H) )
%   | | | then return -0.04354536571679489;  // std dev = 0,732, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(J, A) )
%   | | | then return -0.15593237346070404;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.29533677788930585;  // std dev = 0,621, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, C) )
%   | then return 0.043225444549660784;  // std dev = 0,858, 13,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | else return 0.2039095177325509;  // std dev = 0,397, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return -0.2526184865279271;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5610648932738528;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.3832485469873378;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2302205391522884;  // std dev = 0,051, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.27478939440211747;  // std dev = 0,049, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.03142036654145177;  // std dev = 0,725, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.15126770879469356;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(G, A), tweets(A, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, I) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0.10690059906709823;  // std dev = 0,445, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.29754185151715984;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.19595473554070808;  // std dev = 0,065, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G) )
%   | | | then return 0.4426565733020372;  // std dev = 0,298, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.12472611826816417;  // std dev = 0,036, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(H, A), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.16393874390675958;  // std dev = 0,076, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3959233407301409;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.23929058592608088;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(C, B) )
%   | then if ( tweets(A, D) )
%   | | then return 0.2337395902448307;  // std dev = 0,348, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20357325731077375;  // std dev = 0,124, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(F, B), follows(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1187703604366219;  // std dev = 0,085, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.14221914038065794;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12919776356313473;  // std dev = 0,006, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D) )
%   | | | then return 0.33531749260352733;  // std dev = 0,217, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, A) )
%   | | | then return -0.09587631797863472;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.1892199010132283;  // std dev = 0,095, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.1291747523222627;  // std dev = 0,063, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.12573591536040776;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.991526
   AUC PR    = 0.29001
   CLL	      = -0.164769
   Precision = 0.336986 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.501018


Total learning time: 3.419 seconds
Total inference time: 24.4 seconds
AUC ROC: 0.991526


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.142992
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.864 seconds
Parameter learned model CLL: -0.142992


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, A)', 'false,false': 'follows(F, A), tweets(A, G)', 'false,true': 'follows(D, E)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'true': [0.0, 0, 6], 'false,false,false,false': [1.095, 3, 2], 'false,false,true,false': [0.935, 7, 1], 'false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false,false': 'follows(A, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.414, 9, 3], 'false,true': [0.0, 0, 0], 'false,false,false': [0.432, 1, 2], 'true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 5]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false,false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,false': 'tweets(A, E)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, G)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 3, 0], 'false,false,false,false': [0.0, 0, 0], 'true': [0.351, 0, 10], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.051, 7, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), tweets(C, D)', 'false,false,true': 'tweets(J, K)', 'false,false': 'follows(J, A)', 'true,false': 'follows(F, A), tweets(F, D)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'false': 'follows(I, A), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, L), recursion_accounttype(L, B)', 'true,false,false': 'follows(C, G), tweets(A, H)'}, {'false,false,true,true': [0.0, 1, 0], 'true,false,true': [0.505, 8, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 1], 'true,false,false,false': [0.603, 1, 1], 'true,false,false,true': [0.0, 0, 0], 'true,true': [0.324, 0, 6], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(H, F), follows(I, H)', 'false,false': 'follows(F, A), follows(A, G)', 'true': 'follows(D, C), follows(C, D)', 'false,true': 'follows(E, E)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'true,true': 'follows(D, A)', 'false,false,false': 'follows(J, A)'}, {'true,true,false': [0.125, 0, 4], 'false,false,true,true': [0.732, 8, 1], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 1, 0], 'false,true,true': [0.0, 0, 0], 'true,true,true': [0.042, 0, 2], 'false,false,false,false': [0.621, 1, 2], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false,false': 'follows(G, A)', 'false,true,true': 'tweets(D, F), tweets(E, F)', 'true': 'follows(A, C)', 'false,true': 'follows(D, E), follows(E, D)', 'false': 'follows(A, D)', 'false,true,false': 'recursion_accounttype(D, B)'}, {'false,true,true,true': [0.0, 1, 0], 'false,true,false,false': [0.0, 0, 1], 'false,false,false': [0.0, 0, 1], 'true,false': [0.397, 1, 3], 'false,false,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'true,true': [0.858, 8, 5], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false,false': 'tweets(A, I)', 'true,false': 'recursion_accounttype(C, B), tweets(A, E)', 'true': 'follows(A, D), recursion_accounttype(D, B)', 'false': 'follows(G, A), tweets(A, H)', 'false,false,false': 'follows(A, J)', 'true,false,false': 'tweets(A, F)'}, {'false,false,true': [0.0, 0, 0], 'true,false,true': [0.049, 0, 2], 'false,false,false,true': [0.445, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 1], 'true,false,false,false': [0.0, 2, 0], 'true,false,false,true': [0.725, 7, 1], 'true,true': [0.051, 0, 5]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(H, A), recursion_accounttype(I, B)', 'false,false': 'follows(A, H), follows(H, I)', 'false,true,true': 'tweets(F, G)', 'true': 'tweets(C, D)', 'false,true': 'recursion_accounttype(F, B)', 'false': 'tweets(A, E)', 'false,false,false': 'follows(A, J)'}, {'false,true,true,true': [0.298, 0, 2], 'false,false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 1], 'false,true,false': [0.036, 7, 0], 'false,false,false,false': [0.0, 0, 1], 'false,false,true,false': [0.076, 3, 0], 'true,true': [0.065, 0, 6], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false,true': 'recursion_accounttype(F, B), follows(G, A)', 'false,false': 'follows(A, E), follows(E, F)', 'false,true': 'tweets(A, D)', 'false': 'recursion_accounttype(C, B)', 'false,false,false': 'follows(H, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 1, 0], 'false,true,true': [0.348, 0, 6], 'true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,true,false': [0.085, 9, 0], 'false,true,false': [0.124, 0, 4]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'recursion_accounttype(G, B)', 'false,true,true': 'tweets(F, D)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false': 'tweets(A, D), follows(A, E)', 'false,false,false': 'follows(A, H)', 'false,true,false': 'follows(E, A)'}, {'false,true,true,true': [0.217, 0, 2], 'false,true,false,false': [0.0, 0, 0], 'false,false,false,true': [0.063, 3, 0], 'false,false,true': [0.095, 0, 3], 'false,true,false,true': [0.0, 6, 0], 'true': [0.006, 0, 5], 'false,false,false,false': [0.0, 1, 0], 'false,true,true,false': [0.0, 0, 0]}]]
[{'': [-1.4802973661668753e-16, 0.20408163265306126], 'false,false,true': [nan, 0.10937500000000004], 'false,false': [0.10937500000000004, 0.23999999999999994], 'false,true': [0.0, nan], 'false': [0.0, 0.1775147928994083], 'false,false,false': [nan, 0.24000000000000005]}, {'': [8.881784197001253e-17, 0.19771354520387235], 'true': [8.881784197001253e-17, nan], 'false,false': [0.1714335708956627, 0.18640693229071126], 'false': [nan, 0.1977135452038724]}, {'': [0.012334651863758506, 0.00046203959186931763], 'false,false,true': [nan, 0.0003772667252001649], 'false,false': [0.0003772667252001649, 0.0], 'false': [nan, 0.00046203959186931763], 'false,false,false': [0.0, nan]}, {'': [0.11027090594726496, 0.11618952843517606], 'false,false,true': [0.0, nan], 'false,false': [0.0, 0.0], 'true,false': [0.02828206839825224, 0.18189090052942108], 'true': [0.017541936848789574, 0.07384952120883481], 'false': [0.0, 0.15434987840436315], 'false,false,false': [nan, 0.0], 'true,false,false': [nan, 0.18189090052942108]}, {'': [0.0029079205776319506, 0.09679494459034484], 'false,false,true': [0.059554867876274876, nan], 'false,false': [0.059554867876274876, 0.1344817855498382], 'true': [0.0029079205776319506, nan], 'false,true': [nan, 0.0], 'false': [0.0, 0.09349564422845044], 'true,true': [0.0008831677186495468, 0.003906776945995893], 'false,false,false': [0.0, 0.12839808565974475]}, {'': [0.057234063542166445, 0.12200290887598182], 'false,false': [nan, 0.0], 'false,true,true': [0.0, nan], 'true': [0.05666341530816546, 0.03934444513382409], 'false,true': [0.0, 0.0], 'false': [0.1655201606414119, 0.0], 'false,true,false': [nan, 0.0]}, {'': [0.05430173927711847, 0.07416462767853399], 'false,false': [nan, 0.07416462767853399], 'true,false': [0.001218702568636168, 0.05487564498084639], 'true': [0.0005177944354688102, 0.061074255068166834], 'false': [nan, 0.07416462767853399], 'false,false,false': [0.09913224580589158, 0.0], 'true,false,false': [0.06572187913702485, 0.0]}, {'': [0.0006959056163196078, 0.06352800801707488], 'false,false,true': [nan, 0.001932576630808892], 'false,false': [0.001932576630808892, 0.0061334549693772], 'false,true,true': [0.04429707071714856, nan], 'true': [0.0006959056163196078, nan], 'false,true': [0.04429707071714856, 0.00018590274251076882], 'false': [0.06562941737524813, 0.0592656323237558], 'false,false,false': [0.0, 0.0]}, {'': [nan, 0.036689184630862716], 'false,false,true': [nan, 0.0008106294567020043], 'false,false': [0.0008106294567020043, 0.0], 'false,true': [0.020167534172103402, 0.0038212164281134844], 'false': [0.013847408908752645, 0.0007790525863095504], 'false,false,false': [0.0, nan]}, {'': [6.965676663417408e-06, 0.034142883044112386], 'false,false': [0.0030269218266096944, 0.0009891689561341635], 'false,true,true': [0.023650287057913638, nan], 'false,true': [0.023650287057913638, 0.0], 'false': [0.04077409094279693, 0.026555170975260108], 'false,false,false': [0.0013159355415996675, 0.0], 'false,true,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, D), recursion_accounttype(D, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C), tweets(C, D).;true;true
3;false,false;follows(J, A).;true;true
3;false;follows(I, A), recursion_accounttype(I, B).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(D, A).;true;true
4;false,false;follows(F, A), follows(A, G).;true;true
4;false;follows(A, E), recursion_accounttype(E, B).;true;true
4;false,false,false;follows(J, A).;true;true
5;;accounttype(A, B) :- follows(C, A).;true;true
5;false,true;follows(D, E), follows(E, D).;true;true
5;false;follows(A, D).;true;true
6;;accounttype(A, B) :- follows(C, A).;true;true
6;true;follows(A, D), recursion_accounttype(D, B).;true;true
6;false;follows(A, J).;true;true
6;true,false;recursion_accounttype(C, B), tweets(A, E).;true;true
6;true,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false,true;recursion_accounttype(F, B).;true;true
7;false,false;follows(A, H), follows(H, I).;true;true
7;false;tweets(A, E).;true;true
7;false,false,false;follows(A, J).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E), follows(E, F).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
9;false,false;recursion_accounttype(G, B).;true;true
9;false;tweets(A, D), follows(A, E).;true;true
9;false,false,false;follows(A, H).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.0581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.5248156017661788;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,11e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10092203251355424;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.4391259459435582;  // std dev = 1,082, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.6958258470411239;  // std dev = 0,175, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, E) )
%   | then return -0.14823884880171154;  // std dev = 0,094, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.17566610823425433;  // std dev = 0,155, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(C, D) )
%   then if ( follows(A, E), follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.4780367320397184;  // std dev = 0,271, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11456666264122795;  // std dev = 0,063, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.28443654409559194;  // std dev = 0,642, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.4518742673828853;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then return -0.18985325477242598;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.5350008119867022;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.32627411054604566;  // std dev = 0,070, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.3503672465818476;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A), follows(A, G) )
%   | | then return -0.023698873406923362;  // std dev = 0,227, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.1623538936463718;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.18026373459735356;  // std dev = 0,621, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2493173396694334;  // std dev = 0,029, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.021149064927223026;  // std dev = 0,228, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else return 0.14745897722809875;  // std dev = 0,355, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, G), follows(G, F) )
%   | | then return -0.3665550735172585;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0.4195873291375234;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.36007654326142413;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2056478008961931;  // std dev = 0,025, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.26244020678761093;  // std dev = 0,023, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.020564539602783337;  // std dev = 0,694, 8,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.08299166255945135;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, G) )
%   | then return 0.01792505715378931;  // std dev = 0,430, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0.2818894639995134;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1843553007600521;  // std dev = 0,057, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.4121453611695957;  // std dev = 0,308, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.11079672173324036;  // std dev = 0,026, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return -0.14790833240552662;  // std dev = 0,174, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.3182165282673458;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.22846518730543686;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2061737449210236;  // std dev = 0,113, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F) )
%   | | then return -0.09323924973505054;  // std dev = 0,044, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.13150590291216496;  // std dev = 0,158, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.14343190809051348;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11980849034867269;  // std dev = 0,005, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.32297151418155384;  // std dev = 0,220, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.08567602754755362;  // std dev = 0,040, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.1742298354204959;  // std dev = 0,053, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.11815148822133874;  // std dev = 0,144, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.1266946606778993;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.989698
   AUC PR    = 0.278179
   CLL	      = -0.163484
   Precision = 0.336257 at threshold = 0.5
   Recall    = 0.912698
   F1        = 0.491453


Total learning time: 2.683 seconds
Total inference time: 57.126 seconds
AUC ROC: 0.989698


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.133734
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.005 seconds
Refined model CLL: -0.133734


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.989698
   AUC PR    = 0.278179
   CLL	      = -0.163484
   Precision = 0.336257 at threshold = 0.5
   Recall    = 0.912698
   F1        = 0.491453


Total learning time: 7.971 seconds
Total inference time: 57.126 seconds
AUC ROC: 0.989698
Total revision time: 7.971
Best scored revision CLL: -0.133734


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:03:15
{'CLL': -0.163484, 'AUC ROC': 0.989698, 'F1': 0.491453, 'Recall': 0.912698, 'Precision': [0.336257, 0.5], 'Inference time': 57.126, 'Learning time': 7.971, 'AUC PR': 0.278179, 'parameter_10': {'CLL': -0.164769, 'AUC ROC': 0.991526, 'F1': 0.501018, 'Recall': 0.97619, 'Precision': [0.336986, 0.5], 'Inference time': 24.4, 'Learning time': 3.419, 'AUC PR': 0.29001}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08165239320886175;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.3209254696911421;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.46442399628951403;  // std dev = 0,210, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(E, A) )
%   | | | then return -0.10159632948783633;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1394299350303831;  // std dev = 0,920, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.18370900472044752;  // std dev = 0,201, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.34342762965032503;  // std dev = 0,821, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.35663051655170247;  // std dev = 0,206, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(E, A) )
%   | | | then return -0.09269127618926098;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11552583757871311;  // std dev = 0,917, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.15984131731644935;  // std dev = 0,181, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2622896772988335;  // std dev = 0,821, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2662122869055097;  // std dev = 0,106, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.16265335327480546;  // std dev = 0,371, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08056196543539336;  // std dev = 0,962, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else return 0.24555371973885132;  // std dev = 0,637, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.24210755881849444;  // std dev = 0,212, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(E, A) )
%   | | | then return -0.07944879393850521;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07170126944059965;  // std dev = 0,902, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.1512253557087847;  // std dev = 0,214, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.16640687873239307;  // std dev = 0,737, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1873252828164619;  // std dev = 0,112, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, D) )
%   | | | then return -0.07383427496307043;  // std dev = 0,014, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07625799262104353;  // std dev = 0,928, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.20201503497718296;  // std dev = 0,359, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.17130880997241385;  // std dev = 0,570, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17996965673168291;  // std dev = 0,197, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(E, A) )
%   | | | then return -0.06894585501084466;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.039337730410295826;  // std dev = 0,897, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.14061935166893016;  // std dev = 0,233, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.11387141007490185;  // std dev = 0,664, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.14376886067316766;  // std dev = 0,112, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, D) )
%   | | | then return -0.06465308642776414;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04694797623606532;  // std dev = 0,917, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.1843999502061381;  // std dev = 0,354, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.12491512447254904;  // std dev = 0,521, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */


Results
   AUC ROC   = 0.902431
   AUC PR    = 0.260394
   CLL	      = -0.291874
   Precision = 0.037856 at threshold = 0.5
   Recall    = 0.801587
   F1        = 0.072298


Total learning time: 7.056 seconds
Total inference time: 7.624 seconds
AUC ROC: 0.902431


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:03:30
{'CLL': -0.291874, 'AUC ROC': 0.902431, 'F1': 0.072298, 'Recall': 0.801587, 'Precision': [0.037856, 0.5], 'Inference time': 7.624, 'Learning time': 7.056, 'AUC PR': 0.260394}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */


Results
   AUC ROC   = 0.868535
   AUC PR    = 0.272368
   CLL	      = -0.174929
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.231 seconds
Total inference time: 2.724 seconds
AUC ROC: 0.868535


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:03:35
{'CLL': -0.174929, 'AUC ROC': 0.868535, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.724, 'Learning time': 1.231, 'AUC PR': 0.272368}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false,false,true;interaction(A, A).;false;false
0;false,false;interaction(A, F), complex(A, G).;true;true
0;false,true;interaction(E, D).;false;false
0;false;interaction(D, A), recursion_proteinclass(D, B).;true;true
0;false,false,false;interaction(A, A).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true,true,false;enzyme(A, F).;false;false
1;false,false;interaction(G, A), enzyme(G, H).;true;true
1;false,false,true;enzyme(A, H).;false;false
1;true;phenotype(A, D), interaction(E, C).;true;false
1;false;interaction(A, A).;false;true
1;true,true;phenotype(C, D).;false;true
1;false,false,false;enzyme(A, I), location(A, J).;false;false
2;;proteinclass(A, B) :- enzyme(A, C), location(A, D).;true;true
2;false,false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
2;false,false;complex(A, H).;true;true
2;false,true,true;interaction(A, A).;false;false
2;true;enzyme(E, C), recursion_proteinclass(E, B).;false;false
2;false,true;interaction(G, A), interaction(G, G).;true;false
2;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
2;false,false,false;interaction(J, A), phenotype(J, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), complex(C, D).;true;true
3;false,false,true;complex(J, L).;false;false
3;false,false;interaction(A, J), enzyme(A, K).;true;true
3;true,false;interaction(A, F), complex(F, D).;false;true
3;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
3;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
3;false,false,false;interaction(M, A), recursion_proteinclass(M, B).;false;false
3;true,false,false;interaction(G, C), complex(A, H).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;false,false,true;interaction(G, I), interaction(I, J).;false;false
4;false,false;interaction(A, G), interaction(H, A).;true;true
4;true;interaction(C, D), interaction(D, C).;true;false
4;false,true;interaction(E, E), location(E, F).;false;false
4;false;interaction(E, A), recursion_proteinclass(E, B).;true;true
4;true,true;interaction(A, D).;false;false
4;false,false,false;phenotype(A, K), interaction(A, L).;false;false
5;;proteinclass(A, B) :- location(A, C), interaction(A, D).;true;true
5;false,false;interaction(A, J), phenotype(J, K).;false;true
5;false,true,true;complex(F, I), complex(H, I).;false;false
5;true;interaction(D, A), phenotype(D, E).;false;false
5;false,true;interaction(H, F), interaction(F, H).;true;true
5;false;interaction(F, A), location(F, G).;true;true
5;false,false,false;location(A, L).;false;false
5;false,true,false;recursion_proteinclass(F, B).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
6;false,false;complex(A, K), enzyme(A, L).;true;true
6;true,false;recursion_proteinclass(C, B), complex(A, F).;false;true
6;true;interaction(E, A), recursion_proteinclass(E, B).;false;true
6;false;interaction(A, I), complex(A, J).;false;true
6;false,false,false;interaction(N, A), phenotype(N, P).;false;false
6;true,false,false;phenotype(A, G), complex(A, H).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;false,false,true;interaction(A, I), recursion_proteinclass(J, B).;false;false
7;false,false;interaction(I, A), interaction(J, I).;true;true
7;false,true,true;complex(G, H).;false;false
7;true;complex(C, D).;false;false
7;false,true;location(G, E), recursion_proteinclass(G, B).;true;false
7;false;location(A, E), complex(A, F).;true;true
7;false,false,false;interaction(K, A), enzyme(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, A).;true;true
8;false,false,true;recursion_proteinclass(I, B), interaction(A, J).;false;false
8;false,false;interaction(H, A), interaction(I, H).;true;true
8;false,true,true;complex(A, F), phenotype(E, G).;false;false
8;true;interaction(A, C), recursion_proteinclass(C, B).;false;false
8;false,true;enzyme(E, D), recursion_proteinclass(E, B).;true;false
8;false;enzyme(A, D).;true;true
8;false,false,false;interaction(A, K), phenotype(K, L).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
9;false,false;enzyme(A, G).;true;true
9;false,true,true;complex(F, D).;false;false
9;false,true;interaction(F, E), recursion_proteinclass(F, B).;true;true
9;false;complex(A, D), interaction(E, A).;true;true
9;false,false,false;interaction(I, A), phenotype(I, J).;false;false
9;false,true,false;interaction(A, E).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.039967116917694;  // std dev = 1,279, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2581489350995123;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0.023142466867314776;  // std dev = 0,374, 16,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else return 0.5273364947365771;  // std dev = 0,447, 7,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.656743472461717;  // std dev = 0,417, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.15515259910603751;  // std dev = 0,038, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.17965176363446156;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.26609727207066;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then return 0.46679810376566544;  // std dev = 0,415, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, F), tweets(F, D) )
%   | | then return -0.07694542315021749;  // std dev = 0,671, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else if ( follows(G, C), tweets(A, H) )
%   | | | then return -0.15791005974189176;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return 0.4397371461239007;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, J) )
%   | | then if ( tweets(J, K) )
%   | | | then return 0.3370634406480942;  // std dev = 0,680, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(L, A), recursion_accounttype(L, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.31985181769361776;  // std dev = 0,658, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(A, D) )
%   | | then return 0.3123170058911664;  // std dev = 0,033, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.28881136947009833;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.583925857945303;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.28881136947009833;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( follows(F, H), follows(H, I) )
%   | | | then return -0.056458526103528174;  // std dev = 0,740, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return -0.12249758000130313;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.26147751649697004;  // std dev = 0,665, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17728374137539996;  // std dev = 0,896, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, A) )
%   | then return 0.04877627669282076;  // std dev = 0,897, 15,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | else return 0.16431845484060706;  // std dev = 0,825, 8,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(D, E) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.11662823979226912;  // std dev = 0,599, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.20561972750700855;  // std dev = 0,367, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.22072805432754397;  // std dev = 0,017, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.39907188278471706;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, F) )
%   | | | then return -8.630349922926217E-4;  // std dev = 0,876, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.004447028893272154;  // std dev = 0,631, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(A, G), tweets(A, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.21305575099405072;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.1768466886113657;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.5252921546909863;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.15659086249886744;  // std dev = 0,632, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.21244658072580885;  // std dev = 0,114, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G) )
%   | | | then return 0.3638213524047521;  // std dev = 0,402, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.1288747633374907;  // std dev = 0,039, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, H), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.03625871616710313;  // std dev = 0,440, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.07738949548985093;  // std dev = 0,843, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(C, B) )
%   | then if ( tweets(A, D) )
%   | | then return 0.24089836007872886;  // std dev = 0,408, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2863392251199371;  // std dev = 0,266, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B), follows(A, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12014496169203857;  // std dev = 0,056, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.2553803456643661;  // std dev = 0,191, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.41486821065793916;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.11987299249807364;  // std dev = 0,027, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D) )
%   | | | then return 0.5042934974429818;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return -0.09739119398397013;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.04459204690769638;  // std dev = 0,298, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.2840724714604736;  // std dev = 0,137, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.13338891012980728;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.32534448298061475;  // std dev = 0,009, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.992082
   AUC PR    = 0.32402
   CLL	      = -0.158528
   Precision = 0.340541 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.508065


Total learning time: 2.308 seconds
Total inference time: 20.97 seconds
AUC ROC: 0.992082


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.169232
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.838 seconds
Parameter learned model CLL: -0.169232


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, A)', 'false,false': 'follows(A, F), tweets(A, G)', 'false,true': 'follows(E, D)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'true': [0.0, 0, 7], 'false,false,false,false': [1.549, 6, 4], 'false,false,true,false': [1.279, 9, 2], 'false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false,false': 'follows(E, A)', 'false': 'follows(A, A)'}, {'false,false,true': [0.374, 13, 3], 'false,true': [0.0, 0, 0], 'false,false,false': [0.447, 2, 5], 'true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 7]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false,false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,false': 'tweets(A, E)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,false,false': [0.0, 2, 0], 'true': [0.417, 0, 15], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.038, 11, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), tweets(C, D)', 'false,false,true': 'tweets(J, K)', 'false,false': 'follows(A, J)', 'true,false': 'follows(A, F), tweets(F, D)', 'true': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, I), recursion_accounttype(I, B)', 'false,false,false': 'follows(L, A), recursion_accounttype(L, B)', 'true,false,false': 'follows(G, C), tweets(A, H)'}, {'false,false,true,true': [0.68, 1, 2], 'true,false,true': [0.671, 11, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.658, 1, 2], 'false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,true': [0.415, 0, 9], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, H), follows(H, I)', 'false,false': 'follows(A, F), follows(G, A)', 'true': 'follows(C, D), follows(D, C)', 'false,true': 'follows(E, E)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'true,true': 'follows(A, D)', 'false,false,false': 'follows(A, J)'}, {'true,true,false': [0.0, 0, 4], 'false,false,true,true': [0.74, 10, 1], 'true,false': [0.0, 0, 1], 'false,false,false,true': [0.665, 1, 2], 'false,true,true': [0.0, 0, 0], 'true,true,true': [0.033, 0, 2], 'false,false,false,false': [0.896, 3, 3], 'false,false,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 0, 2]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false,false': 'follows(A, G)', 'false,true,true': 'tweets(D, F), tweets(E, F)', 'true': 'follows(C, A)', 'false,true': 'follows(E, D), follows(D, E)', 'false': 'follows(D, A)'}, {'false,true,true,true': [0.599, 2, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.367, 1, 2], 'true,false': [0.825, 3, 5], 'false,true,false': [0.0, 0, 0], 'true,true': [0.897, 9, 6], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false,false,true': 'recursion_accounttype(J, B)', 'false,false': 'tweets(A, I)', 'true,false': 'recursion_accounttype(C, B), tweets(A, E)', 'true': 'follows(D, A), recursion_accounttype(D, B)', 'false': 'follows(A, G), tweets(A, H)', 'false,false,false': 'follows(K, A)', 'true,false,false': 'tweets(A, F)'}, {'false,false,true,true': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [0.632, 1, 2], 'false,true': [0.0, 0, 0], 'true,false,false,false': [0.631, 3, 2], 'true,false,false,true': [0.876, 9, 2], 'true,true': [0.017, 0, 6], 'false,false,true,false': [0.0, 2, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, H), recursion_accounttype(I, B)', 'false,false': 'follows(H, A), follows(I, H)', 'false,true,true': 'tweets(F, G)', 'true': 'tweets(C, D)', 'false,true': 'recursion_accounttype(F, B)', 'false': 'tweets(A, E)', 'false,false,false': 'follows(J, A)'}, {'false,true,true,true': [0.402, 0, 4], 'false,false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,false': [0.039, 11, 0], 'false,false,false,false': [0.843, 2, 3], 'false,false,true,false': [0.44, 2, 1], 'true,true': [0.114, 0, 7], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false,true': 'recursion_accounttype(F, B), follows(A, G)', 'false,false': 'follows(E, A), follows(F, E)', 'false,true': 'tweets(A, D)', 'false': 'recursion_accounttype(C, B)', 'false,false,false': 'follows(A, H)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.191, 2, 0], 'false,true,true': [0.408, 0, 8], 'true': [0.0, 0, 0], 'false,false,false,false': [0.0, 1, 0], 'false,false,true,false': [0.056, 12, 0], 'false,true,false': [0.266, 0, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'recursion_accounttype(G, B)', 'false,true,true': 'tweets(F, D)', 'false,true': 'follows(F, E), recursion_accounttype(F, B)', 'false': 'tweets(A, D), follows(E, A)', 'false,false,false': 'follows(H, A)', 'false,true,false': 'follows(A, E)'}, {'false,true,true,true': [0.0, 0, 1], 'false,true,false,false': [0.298, 4, 1], 'false,false,false,true': [0.0, 2, 0], 'false,false,true': [0.137, 0, 6], 'false,true,false,true': [0.0, 7, 0], 'true': [0.027, 0, 7], 'false,false,false,false': [0.009, 2, 0], 'false,true,true,false': [0.0, 0, 0]}]]
[{'': [-2.5376526277146434e-16, 0.22684310018903578], 'false,false,true': [nan, 0.14876033057851243], 'false,false': [0.14876033057851243, 0.23999999999999994], 'false,true': [0.0, nan], 'false': [0.0, 0.20408163265306123], 'false,false,false': [nan, 0.23999999999999985]}, {'': [6.344131569286608e-17, 0.21167213655551226], 'true': [6.344131569286608e-17, nan], 'false,false': [0.13961117171815904, 0.19954004881249723], 'false': [nan, 0.21167213655551256]}, {'': [0.011612853654147888, 0.0014928685281044185], 'false,false,true': [nan, 0.00013337979168684652], 'false,false': [0.00013337979168684652, 0.0018682064821982022], 'false': [nan, 0.0014928685281044149], 'false,false,false': [0.0, 0.0]}, {'': [0.1010135220946059, 0.12952090741838598], 'false,false,true': [0.15418477111811443, nan], 'false,false': [0.15418477111811443, 0.14434452214433593], 'true,false': [0.03755339638378901, 0.0], 'true': [0.01912292534439206, 0.03299131188550346], 'false': [0.0, 0.14933870662240697], 'false,false,false': [nan, 0.14434452214433593], 'true,false,false': [0.0, nan]}, {'': [0.010368741041195229, 0.0990944473406555], 'false,false,true': [0.04979835973188855, 0.0], 'false,false': [0.04598164033087593, 0.139780338019925], 'true': [0.0003069527464219142, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, 0.10368019163622298], 'true,true': [0.0005525149435594429, 0.0], 'false,false,false': [0.14718942452084482, 0.1337129308463913]}, {'': [0.0676275727353954, 0.11094871175885654], 'false,false': [nan, 0.13477958441879492], 'false,true,true': [0.08968149231289588, nan], 'true': [0.053678142869931236, 0.08507623529979201], 'false,true': [0.08968149231289588, nan], 'false': [0.08968149231289588, 0.13477958441879492]}, {'': [0.06487019876325055, 0.10750771150561349], 'false,false,true': [0.0, 0.0], 'false,false': [0.03378309164672342, 0.12534137675773857], 'true,false': [0.0, 0.07278089025560219], 'true': [5.0621334900330384e-05, 0.07740457743333343], 'false': [nan, 0.10750771150561349], 'false,false,false': [0.0, 0.13313667496095016], 'true,false,false': [0.06968615738352085, 0.07958047162823709]}, {'': [0.0018511897139705167, 0.07831544198632562], 'false,false,true': [nan, 0.06454551174915135], 'false,false': [0.06454551174915134, 0.14222374386738332], 'false,true,true': [0.04032285894149609, nan], 'true': [0.0018511897139705167, nan], 'false,true': [0.04032285894149609, 0.0001389715510465118], 'false': [0.05832568084880956, 0.11349090862172521], 'false,false,false': [nan, 0.14222374386738332]}, {'': [nan, 0.05696631876678128], 'false,false,true': [nan, 0.0002569401392532843], 'false,false': [0.0002569401392532843, 0.01784127829443251], 'false,true': [0.020793243422858453, 0.010084558096753127], 'false': [0.016309780688804086, 0.009452817134760054], 'false,false,false': [0.018283124414912727, 0.0]}, {'': [0.00010777256405867479, 0.050569457177274034], 'false,false': [0.003138231733888173, 0.009232379347506363], 'false,true,false': [0.0, 0.017713353162410492], 'false,true': [0.0, 0.008058141926138882], 'false': [0.03129874072452411, 0.06884463779996867], 'false,false,false': [0.0, 4.128772077190146e-05], 'false,true,true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;false;follows(D, A), recursion_accounttype(D, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false,false;follows(G, A).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(C, A), tweets(C, D).;true;true
3;true;follows(E, C), recursion_accounttype(E, B).;true;true
3;false;follows(A, I), recursion_accounttype(I, B).;true;true
3;true,false;follows(A, F), tweets(F, D).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false,false,true;follows(F, H), follows(H, I).;true;true
4;false,false;follows(A, F), follows(G, A).;true;true
4;true;follows(C, D), follows(D, C).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;true,true;follows(A, D).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;false,false;follows(K, A).;true;true
6;true,false;recursion_accounttype(C, B), tweets(A, E).;true;true
6;true;follows(D, A), recursion_accounttype(D, B).;true;true
6;false,true;recursion_accounttype(J, B).;true;true
6;false;tweets(A, I).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false,true;recursion_accounttype(F, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false,false;follows(A, H).;true;true
8;false;follows(E, A), follows(F, E).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false,false;recursion_accounttype(G, B).;true;true
9;false,true,false;follows(A, E).;true;true
9;false,true;follows(F, E), recursion_accounttype(F, B).;true;true
9;false;tweets(A, D), follows(E, A).;true;true
9;false,false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.1438632208137979;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.5248156017661789;  // std dev = 1,155, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,11e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.7996369572269167;  // std dev = 0,098, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1602812702651022;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, G) )
%   | | then return 0.5160900577342101;  // std dev = 0,850, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.448295606241962;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then return 0.614094519128161;  // std dev = 0,118, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6911272707676137;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, G) )
%   | then return -0.12483813082361207;  // std dev = 0,045, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(H, A) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.3115731236608882;  // std dev = 0,010, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.4175135841583099;  // std dev = 1,49e-08, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.4841456636801612;  // std dev = 0,134, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), tweets(G, D) )
%   | | then return -0.07070061450640254;  // std dev = 0,138, 12,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else return -0.10045910075163464;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.4530552988526182;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.2673113520053105;  // std dev = 0,894, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(A, D) )
%   | | then return 0.3328222557405046;  // std dev = 0,017, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.40102891402549845;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3063722754372038;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( follows(F, H), follows(H, I) )
%   | | | then return -0.05666346009732075;  // std dev = 0,522, 11,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return -0.09424812661261811;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08895058857395306;  // std dev = 0,443, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2002166402202337;  // std dev = 0,871, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(C, A) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2729112042007955;  // std dev = 0,045, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.09518682770720611;  // std dev = 0,020, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.04174770898648337;  // std dev = 0,553, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.1782398166020932;  // std dev = 0,215, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then return -0.009997704291933512;  // std dev = 0,295, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.283376948904189;  // std dev = 0,682, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.21311203318843833;  // std dev = 0,027, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.2544306378121838;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.04738143623213041;  // std dev = 0,643, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.20357979494226833;  // std dev = 0,355, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.24721727790981507;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.09853227769634182;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(J, A) )
%   | | then return 0.3095194862036389;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.0991560235146685;  // std dev = 0,617, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.18476457311179018;  // std dev = 0,028, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1926247049845907;  // std dev = 0,048, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then return 0.2939992838151373;  // std dev = 0,208, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return -0.09561509353256648;  // std dev = 0,041, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.0987351477248864;  // std dev = 0,018, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, H) )
%   | | then return -0.039821718458019656;  // std dev = 0,427, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.11910576525708676;  // std dev = 0,636, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.1513228686205098;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15329709020439597;  // std dev = 0,012, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return 0.2543774456096856;  // std dev = 0,159, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.27750618408197986;  // std dev = 0,070, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A), follows(I, H) )
%   | then if ( tweets(A, J), follows(A, K) )
%   | | then if ( follows(A, L), follows(K, L) )
%   | | | then return -0.07657437065504112;  // std dev = 0,016, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.10044162123587533;  // std dev = 0,007, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07663971517425354;  // std dev = 0,011, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, M) )
%   | | then return -0.19887589246062476;  // std dev = 0,137, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.45777700104453084;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.13436147008680172;  // std dev = 0,005, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1330061971605594;  // std dev = 0,010, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, F), follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.32567331691048496;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.0808832493168725;  // std dev = 0,033, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.03583468190753716;  // std dev = 0,203, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.21495780935550876;  // std dev = 0,084, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.06604704091370292;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.3020307227386191;  // std dev = 0,065, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.992007
   AUC PR    = 0.315807
   CLL	      = -0.144796
   Precision = 0.344538 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.509317


Total learning time: 5.242 seconds
Total inference time: 22.907 seconds
AUC ROC: 0.992007


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.137128
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.79 seconds
Refined model CLL: -0.137128


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.992007
   AUC PR    = 0.315807
   CLL	      = -0.144796
   Precision = 0.344538 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.509317


Total learning time: 9.178 seconds
Total inference time: 22.907 seconds
AUC ROC: 0.992007
Total revision time: 9.178
Best scored revision CLL: -0.137128


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:04:28
{'CLL': -0.144796, 'AUC ROC': 0.992007, 'F1': 0.509317, 'Recall': 0.97619, 'Precision': [0.344538, 0.5], 'parameter_15': {'CLL': -0.158528, 'AUC ROC': 0.992082, 'F1': 0.508065, 'Recall': 1.0, 'Precision': [0.340541, 0.5], 'Inference time': 20.97, 'Learning time': 2.308, 'AUC PR': 0.32402}, 'Inference time': 22.907, 'Learning time': 9.178, 'AUC PR': 0.315807}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.7194734122109544;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7791549383723032;  // std dev = 0,120, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.7719311725229709;  // std dev = 0,092, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1425121317634051;  // std dev = 0,058, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, G) )
%   | | then return 0.514096059621727;  // std dev = 0,787, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.41851933418886933;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6227352080229738;  // std dev = 0,165, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.6135883201698946;  // std dev = 0,128, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1259991485119518;  // std dev = 0,052, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, G) )
%   | | then return 0.4108272425099871;  // std dev = 0,765, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.33263323690721186;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4743533893332073;  // std dev = 0,175, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.10805031386808871;  // std dev = 0,034, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.46601525975050145;  // std dev = 0,138, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12036756313361321;  // std dev = 0,025, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, H) )
%   | | then return 0.31507813363392434;  // std dev = 0,752, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2550691310717243;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, C) )
%   | | then return 0.3849661295227644;  // std dev = 0,159, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.29336954533440174;  // std dev = 0,034, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1019769664109258;  // std dev = 0,043, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(A, F) )
%   | then return 0.2378657033725761;  // std dev = 0,748, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.19221839577690727;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.24315332146841317;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.28922868526063095;  // std dev = 0,126, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.08943485205490494;  // std dev = 0,028, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.28662896647594155;  // std dev = 0,101, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09876254495118461;  // std dev = 0,021, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, H) )
%   | | then return 0.179781892603224;  // std dev = 0,748, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.14420121106525322;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.20123043283435527;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.23448932483764787;  // std dev = 0,110, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.07982324398655237;  // std dev = 0,023, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.0418672389928848;  // std dev = 0,378, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.08357650190508098;  // std dev = 0,595, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then return -0.09450538806374685;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.21127566674060413;  // std dev = 0,864, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.20912510858878738;  // std dev = 0,160, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.16548137533497265;  // std dev = 0,022, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.0694595334485798;  // std dev = 0,001, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.02476385112724731;  // std dev = 0,418, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.2101727379741101;  // std dev = 0,344, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then return -0.0022818259839438096;  // std dev = 0,293, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.16430801790535396;  // std dev = 0,865, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.1450110089284896;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.18358437035507388;  // std dev = 0,116, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.19966065602158198;  // std dev = 0,110, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.0788190803311324;  // std dev = 0,057, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, G) )
%   | | then return 0.10752473126567408;  // std dev = 0,631, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.018792644952754605;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, D) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B), follows(C, A) )
%   | | then return 0.11954879531686333;  // std dev = 0,024, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.24318438454477634;  // std dev = 0,056, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(A, D) )
%   | | | then return -0.06607417073284107;  // std dev = 0,025, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.03611636341733028;  // std dev = 0,192, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.1906139887623248;  // std dev = 0,337, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(F, A), tweets(A, G) )
%   | then return -0.005755754774249562;  // std dev = 0,259, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.11652634305422423;  // std dev = 0,861, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.974726
   AUC PR    = 0.273309
   CLL	      = -0.247202
   Precision = 0.046875 at threshold = 0.5
   Recall    = 0.97619
   F1        = 0.089455


Total learning time: 6.234 seconds
Total inference time: 10.7 seconds
AUC ROC: 0.974726


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:04:46
{'CLL': -0.247202, 'AUC ROC': 0.974726, 'F1': 0.089455, 'Recall': 0.97619, 'Precision': [0.046875, 0.5], 'Inference time': 10.7, 'Learning time': 6.234, 'AUC PR': 0.273309}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.19148226843284552;  // std dev = 0,816, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.6914822684328455;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.865397
   AUC PR    = 0.194257
   CLL	      = -0.169307
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.702 seconds
Total inference time: 2.411 seconds
AUC ROC: 0.865397


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:04:50
{'CLL': -0.169307, 'AUC ROC': 0.865397, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.411, 'Learning time': 1.702, 'AUC PR': 0.194257}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false,false,true;interaction(A, A).;false;false
0;false,false;interaction(A, F), complex(A, G).;true;true
0;false,true;interaction(E, D).;false;false
0;false;interaction(D, A), recursion_proteinclass(D, B).;true;true
0;false,false,false;interaction(A, A).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true,true,false;enzyme(A, F).;false;false
1;false,false;interaction(G, A), enzyme(G, H).;true;true
1;false,false,true;enzyme(A, H).;false;false
1;true;phenotype(A, D), interaction(E, C).;true;false
1;false;interaction(A, A).;false;true
1;true,true;phenotype(C, D).;false;true
1;false,false,false;enzyme(A, I), location(A, J).;false;false
2;;proteinclass(A, B) :- enzyme(A, C), location(A, D).;true;true
2;false,false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
2;false,false;complex(A, H).;true;true
2;false,true,true;interaction(A, A).;false;false
2;true;enzyme(E, C), recursion_proteinclass(E, B).;false;false
2;false,true;interaction(G, A), interaction(G, G).;true;false
2;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
2;false,false,false;interaction(J, A), phenotype(J, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), complex(C, D).;true;true
3;false,false,true;complex(J, L).;false;false
3;false,false;interaction(A, J), enzyme(A, K).;true;true
3;true,false;interaction(A, F), complex(F, D).;false;true
3;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
3;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
3;false,false,false;interaction(M, A), recursion_proteinclass(M, B).;false;false
3;true,false,false;interaction(G, C), complex(A, H).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;false,false,true;interaction(G, I), interaction(I, J).;false;false
4;false,false;interaction(A, G), interaction(H, A).;true;true
4;true;interaction(C, D), interaction(D, C).;true;false
4;false,true;interaction(E, E), location(E, F).;false;false
4;false;interaction(E, A), recursion_proteinclass(E, B).;true;true
4;true,true;interaction(A, D).;false;false
4;false,false,false;phenotype(A, K), interaction(A, L).;false;false
5;;proteinclass(A, B) :- location(A, C), interaction(A, D).;true;true
5;false,false;interaction(A, J), phenotype(J, K).;false;true
5;false,true,true;complex(F, I), complex(H, I).;false;false
5;true;interaction(D, A), phenotype(D, E).;false;false
5;false,true;interaction(H, F), interaction(F, H).;true;true
5;false;interaction(F, A), location(F, G).;true;true
5;false,false,false;location(A, L).;false;false
5;false,true,false;recursion_proteinclass(F, B).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
6;false,false;complex(A, K), enzyme(A, L).;true;true
6;true,false;recursion_proteinclass(C, B), complex(A, F).;false;true
6;true;interaction(E, A), recursion_proteinclass(E, B).;false;true
6;false;interaction(A, I), complex(A, J).;false;true
6;false,false,false;interaction(N, A), phenotype(N, P).;false;false
6;true,false,false;phenotype(A, G), complex(A, H).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;false,false,true;interaction(A, I), recursion_proteinclass(J, B).;false;false
7;false,false;interaction(I, A), interaction(J, I).;true;true
7;false,true,true;complex(G, H).;false;false
7;true;complex(C, D).;false;false
7;false,true;location(G, E), recursion_proteinclass(G, B).;true;false
7;false;location(A, E), complex(A, F).;true;true
7;false,false,false;interaction(K, A), enzyme(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, A).;true;true
8;false,false,true;recursion_proteinclass(I, B), interaction(A, J).;false;false
8;false,false;interaction(H, A), interaction(I, H).;true;true
8;false,true,true;complex(A, F), phenotype(E, G).;false;false
8;true;interaction(A, C), recursion_proteinclass(C, B).;false;false
8;false,true;enzyme(E, D), recursion_proteinclass(E, B).;true;false
8;false;enzyme(A, D).;true;true
8;false,false,false;interaction(A, K), phenotype(K, L).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
9;false,false;enzyme(A, G).;true;true
9;false,true,true;complex(F, D).;false;false
9;false,true;interaction(F, E), recursion_proteinclass(F, B).;true;true
9;false;complex(A, D), interaction(E, A).;true;true
9;false,false,false;interaction(I, A), phenotype(I, J).;false;false
9;false,true,false;interaction(A, E).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.00851773156715447;  // std dev = 1,317, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.274815601766179;  // std dev = 1,708, 12,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.7194734122109543;  // std dev = 1,05e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return -0.002238481081959936;  // std dev = 0,349, 19,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else return 0.44948168837783253;  // std dev = 0,462, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6487161498140367;  // std dev = 0,477, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.15410336430872434;  // std dev = 0,091, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.17837106225336205;  // std dev = 5,27e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.2543200999968218;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then return 0.4515222822214335;  // std dev = 0,440, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, F), tweets(F, D) )
%   | | then return -0.08267880399985213;  // std dev = 0,681, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(G, C), tweets(A, H) )
%   | | | then return -0.15689347482717864;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return 0.4609927331457522;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, J) )
%   | | then if ( tweets(J, K) )
%   | | | then return 0.14110442160162312;  // std dev = 0,908, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(L, A), recursion_accounttype(L, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.40157649521099903;  // std dev = 0,705, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(A, D) )
%   | | then return 0.31254310959508236;  // std dev = 0,066, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.29362127403430216;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5934032315333531;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.29362127403430216;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( follows(F, H), follows(H, I) )
%   | | | then return -0.06444843999448154;  // std dev = 0,764, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return -0.11430135059566723;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.11430697635316209;  // std dev = 0,897, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.22379157714460166;  // std dev = 0,950, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, A) )
%   | then return 0.05646019434696127;  // std dev = 1,002, 21,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | else return 0.13591120691340827;  // std dev = 1,033, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(D, E) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.11384168761406697;  // std dev = 0,602, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.25522972263673416;  // std dev = 0,338, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.22356270208316323;  // std dev = 0,012, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.33464008522433597;  // std dev = 0,111, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.033312830462554184;  // std dev = 1,018, 15,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return 0.009518107034985124;  // std dev = 0,681, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   else if ( follows(A, G), tweets(A, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.30257393713392844;  // std dev = 0,122, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.18230825632281727;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.5223728462015106;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.12916917674923867;  // std dev = 0,635, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.20851617986856344;  // std dev = 0,147, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G) )
%   | | | then return 0.38675227556626834;  // std dev = 0,470, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.13436656012070752;  // std dev = 0,171, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, H), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.009222771452850345;  // std dev = 0,465, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.10388363123322612;  // std dev = 0,846, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(C, B) )
%   | then if ( tweets(A, D) )
%   | | then return 0.2293356152988892;  // std dev = 0,509, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2970966199779913;  // std dev = 0,302, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B), follows(A, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11239543731700842;  // std dev = 0,079, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.21035813362308362;  // std dev = 0,142, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.44611700414476263;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.12309985028396239;  // std dev = 0,035, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D) )
%   | | | then return 0.5338807423153422;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return -0.08821707081931404;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.03711673266702866;  // std dev = 0,318, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.27793906452374434;  // std dev = 0,284, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.12914259217817403;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.24176602360091656;  // std dev = 0,131, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.992131
   AUC PR    = 0.333265
   CLL	      = -0.141163
   Precision = 0.340541 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.508065


Total learning time: 1.615 seconds
Total inference time: 21.532 seconds
AUC ROC: 0.992131


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.164517
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.854 seconds
Parameter learned model CLL: -0.164517


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, A)', 'false,false': 'follows(A, F), tweets(A, G)', 'false,true': 'follows(E, D)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'true': [0.0, 0, 11], 'false,false,false,false': [1.708, 7, 5], 'false,false,true,false': [1.317, 13, 2], 'false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false,false': 'follows(E, A)', 'false': 'follows(A, A)'}, {'false,false,true': [0.349, 16, 3], 'false,true': [0.0, 0, 0], 'false,false,false': [0.462, 4, 7], 'true,false': [0.0, 0, 0], 'true,true': [1.05e-08, 0, 10]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false,false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,false': 'tweets(A, E)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [5.27e-09, 3, 0], 'false,false,false,false': [0.0, 2, 0], 'true': [0.477, 0, 20], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.091, 15, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), tweets(C, D)', 'false,false,true': 'tweets(J, K)', 'false,false': 'follows(A, J)', 'true,false': 'follows(A, F), tweets(F, D)', 'true': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, I), recursion_accounttype(I, B)', 'false,false,false': 'follows(L, A), recursion_accounttype(L, B)', 'true,false,false': 'follows(G, C), tweets(A, H)'}, {'false,false,true,true': [0.908, 3, 2], 'true,false,true': [0.681, 14, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.705, 1, 3], 'false,true': [0.0, 0, 2], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true': [0.0, 2, 0], 'true,true': [0.44, 0, 12], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, H), follows(H, I)', 'false,false': 'follows(A, F), follows(G, A)', 'true': 'follows(C, D), follows(D, C)', 'false,true': 'follows(E, E)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'true,true': 'follows(A, D)', 'false,false,false': 'follows(A, J)'}, {'true,true,false': [0.0, 0, 4], 'false,false,true,true': [0.764, 13, 1], 'true,false': [0.0, 0, 1], 'false,false,false,true': [0.897, 3, 2], 'false,true,true': [0.0, 0, 0], 'true,true,true': [0.066, 0, 6], 'false,false,false,false': [0.95, 3, 4], 'false,false,true,false': [0.0, 1, 0], 'false,true,false': [0.0, 0, 2]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false,false': 'follows(A, G)', 'false,true,true': 'tweets(D, F), tweets(E, F)', 'true': 'follows(C, A)', 'false,true': 'follows(E, D), follows(D, E)', 'false': 'follows(D, A)'}, {'false,true,true,true': [0.602, 2, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.338, 1, 3], 'true,false': [1.033, 5, 6], 'false,true,false': [0.0, 0, 0], 'true,true': [1.002, 12, 9], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false,false,true': 'recursion_accounttype(J, B)', 'false,false': 'tweets(A, I)', 'true,false': 'recursion_accounttype(C, B), tweets(A, E)', 'true': 'follows(D, A), recursion_accounttype(D, B)', 'false': 'follows(A, G), tweets(A, H)', 'false,false,false': 'follows(K, A)', 'true,false,false': 'tweets(A, F)'}, {'false,false,true,true': [0.122, 0, 2], 'true,false,true': [0.111, 0, 2], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [0.635, 1, 2], 'false,true': [0.0, 0, 0], 'true,false,false,false': [0.681, 4, 2], 'true,false,false,true': [1.018, 13, 2], 'true,true': [0.012, 0, 9], 'false,false,true,false': [0.0, 2, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, H), recursion_accounttype(I, B)', 'false,false': 'follows(H, A), follows(I, H)', 'false,true,true': 'tweets(F, G)', 'true': 'tweets(C, D)', 'false,true': 'recursion_accounttype(F, B)', 'false': 'tweets(A, E)', 'false,false,false': 'follows(J, A)'}, {'false,true,true,true': [0.47, 0, 5], 'false,false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,false': [0.171, 15, 0], 'false,false,false,false': [0.846, 2, 3], 'false,false,true,false': [0.465, 3, 1], 'true,true': [0.147, 0, 11], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false,true': 'recursion_accounttype(F, B), follows(A, G)', 'false,false': 'follows(E, A), follows(F, E)', 'false,true': 'tweets(A, D)', 'false': 'recursion_accounttype(C, B)', 'false,false,false': 'follows(A, H)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.142, 4, 0], 'false,true,true': [0.509, 0, 13], 'true': [0.0, 0, 0], 'false,false,false,false': [0.0, 1, 0], 'false,false,true,false': [0.079, 15, 0], 'false,true,false': [0.302, 0, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'recursion_accounttype(G, B)', 'false,true,true': 'tweets(F, D)', 'false,true': 'follows(F, E), recursion_accounttype(F, B)', 'false': 'tweets(A, D), follows(E, A)', 'false,false,false': 'follows(H, A)', 'false,true,false': 'follows(A, E)'}, {'false,true,true,true': [0.0, 0, 1], 'false,true,false,false': [0.318, 4, 1], 'false,false,false,true': [0.0, 3, 0], 'false,false,true': [0.284, 0, 8], 'false,true,false,true': [0.0, 9, 0], 'true': [0.035, 0, 10], 'false,false,false,false': [0.131, 4, 0], 'false,true,true,false': [0.0, 0, 0]}]]
[{'': [-1.6148698540002277e-16, 0.21403091557669426], 'false,false,true': [nan, 0.11555555555555559], 'false,false': [0.11555555555555559, 0.2430555555555555], 'false,true': [0.0, nan], 'false': [0.0, 0.19204389574759945], 'false,false,false': [nan, 0.24305555555555536]}, {'': [8.881784197001253e-17, 0.20274655371833908], 'true': [8.881784197001253e-17, nan], 'false,false': [0.12147728783811275, 0.21388836962410035], 'false': [nan, 0.20274655371833902]}, {'': [0.011363937888544128, 0.0013189491868899228], 'false,false,true': [nan, 0.0005505562034424575], 'false,false': [0.0005505562034424575, 0.001384381520197786], 'false': [nan, 0.0013189491868899228], 'false,false,false': [9.25185853854297e-18, 0.0]}, {'': [0.09447598985547055, 0.14012303033743514], 'false,false,true': [0.16501583642197026, nan], 'false,false': [0.16501583642197026, 0.12433122753967815], 'true,false': [0.030886103280532446, 0.0], 'true': [0.016100000932867047, 0.02782418981839455], 'false': [0.0, 0.16368581300030172], 'false,false,false': [nan, 0.12433122753967815], 'true,false,false': [0.0, nan]}, {'': [0.00734400769465487, 0.09827986360192477], 'false,false,true': [0.041689930602067486, 0.0], 'false,false': [0.03906524357408848, 0.14521248987607568], 'true': [0.0005155716398244192, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, 0.10117733421872745], 'true,true': [0.0007160717219784063, 0.0], 'false,false,false': [0.16096544655742157, 0.12896584553980323]}, {'': [0.066088200666742, 0.10753892132258827], 'false,false': [nan, 0.11446953085299225], 'false,true,true': [0.09061302356839881, nan], 'true': [0.047765901429445444, 0.09692458146947978], 'false,true': [0.09061302356839881, nan], 'false': [0.09061302356839881, 0.11446953085299225]}, {'': [0.0639489160690477, 0.10317014901056476], 'false,false,true': [0.007383719021339746, 0.0], 'false,false': [0.062469544893526116, 0.12986987488854462], 'true,false': [0.006152249999257731, 0.07178190976738444], 'true': [1.656696748582166e-05, 0.07612112245313045], 'false': [nan, 0.10317014901056476], 'false,false,false': [0.0, 0.13450755176704327], 'true,false,false': [0.06904541284434419, 0.07731280264147235]}, {'': [0.0019530568197699424, 0.07759939399663249], 'false,false,true': [nan, 0.05404919078787719], 'false,false': [0.054049190787877184, 0.14328471624443162], 'false,true,true': [0.04424012239271906, nan], 'true': [0.0019530568197699424, nan], 'false,true': [0.04424012239271906, 0.001939936276518454], 'false': [0.06343339047577161, 0.10678326254240371], 'false,false,false': [nan, 0.14328471624443162]}, {'': [nan, 0.053355223485406465], 'false,false,true': [nan, 0.000418299852143017], 'false,false': [0.000418299852143017, 0.012907030165865741], 'false,true': [0.019894566765408052, 0.013010300170765305], 'false': [0.018529651936573188, 0.007488896716041351], 'false,false,false': [0.005017338701400621, 0.0]}, {'': [0.00012195750967668451, 0.04856301548259489], 'false,false': [0.010096306344297742, 0.005553700731497897], 'false,true,false': [-3.0839528461809902e-18, 0.020233583402362004], 'false,true': [0.0, 0.00782580022108595], 'false': [0.029992295753280735, 0.06329289932349819], 'false,false,false': [0.0, 0.004282960292078503], 'false,true,true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;false;follows(D, A), recursion_accounttype(D, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false,false;follows(G, A).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(C, A), tweets(C, D).;true;true
3;true;follows(E, C), recursion_accounttype(E, B).;true;true
3;false;follows(A, I), recursion_accounttype(I, B).;true;true
3;true,false;follows(A, F), tweets(F, D).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false,false,true;follows(F, H), follows(H, I).;true;true
4;false,false;follows(A, F), follows(G, A).;true;true
4;true;follows(C, D), follows(D, C).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;true,true;follows(A, D).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, A), recursion_accounttype(D, B).;true;true
6;false,false;follows(K, A).;true;true
6;false;tweets(A, I).;true;true
6;false,true;recursion_accounttype(J, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;false,true;recursion_accounttype(F, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false,false;follows(A, H).;true;true
8;false;follows(E, A), follows(F, E).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false,false;recursion_accounttype(G, B).;true;true
9;false,true,false;follows(A, E).;true;true
9;false,true;follows(F, E), recursion_accounttype(F, B).;true;true
9;false;tweets(A, D), follows(E, A).;true;true
9;false,false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.024815601766178873;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.7152917922423694;  // std dev = 0,926, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.7739861877370903;  // std dev = 0,101, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.13841406782563773;  // std dev = 0,022, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.20863175297817302;  // std dev = 0,933, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.5807172668079108;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then return 0.6560461767977407;  // std dev = 0,139, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6156742128309073;  // std dev = 0,042, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, G) )
%   | then return -0.12194710904268756;  // std dev = 0,067, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(H, A) )
%   | | then return -0.11773662635584536;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.2633897498771845;  // std dev = 0,160, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.41751358415830986;  // std dev = 2,98e-08, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.46120399089083797;  // std dev = 0,144, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), tweets(G, D) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return -0.10565632307896018;  // std dev = 0,024, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.06001647990401795;  // std dev = 0,392, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.1007206558540568;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return 0.5192837140746085;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.13693336268601375;  // std dev = 0,026, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.34058247506141015;  // std dev = 0,720, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(A, D) )
%   | | then return 0.3442206233095284;  // std dev = 0,081, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3662826389015701;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.31126910908536;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( follows(F, H), follows(H, I) )
%   | | | then return -0.05621885890935208;  // std dev = 0,548, 14,000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return -0.10628846090901747;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12156575902381035;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.18695731530841503;  // std dev = 0,846, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then return 0.2529510973069285;  // std dev = 0,006, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.30399927609175464;  // std dev = 0,022, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), follows(F, D) )
%   | | then return -0.08837266721113288;  // std dev = 0,012, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.08676341042142335;  // std dev = 0,538, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.10698206776308651;  // std dev = 0,023, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(I, A), tweets(A, J) )
%   | | then return -0.016374584211150484;  // std dev = 0,306, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.22357778378328086;  // std dev = 0,272, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2109299171829335;  // std dev = 0,024, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.08216029457321677;  // std dev = 0,014, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.01310444689360569;  // std dev = 0,569, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.08418705433187626;  // std dev = 0,381, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.15406699761811574;  // std dev = 0,296, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.2742723428739472;  // std dev = 0,032, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10722733786870384;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(J, A) )
%   | | then return 0.2356476338351221;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.032524897186909096;  // std dev = 0,647, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.17554823496054472;  // std dev = 0,005, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.22853838106619015;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then return 0.27670384704498696;  // std dev = 0,216, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), follows(H, A) )
%   | | | then return -0.08742403592340774;  // std dev = 0,049, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.10569675968115182;  // std dev = 0,020, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.08512984941648312;  // std dev = 0,022, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.10749240392867492;  // std dev = 0,688, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15321205839461668;  // std dev = 0,012, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.19075900217398203;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.2883629293445404;  // std dev = 0,128, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22797519090126706;  // std dev = 0,082, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), follows(H, G) )
%   | then if ( follows(I, A), follows(A, I) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return -0.06934145283529038;  // std dev = 0,005, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.09715975389478643;  // std dev = 0,014, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.08617166517713105;  // std dev = 0,006, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, K) )
%   | | then return -0.0963521544194742;  // std dev = 0,019, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.5308991209168483;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.13437427209388236;  // std dev = 0,011, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.32634396111725705;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.07428037074357037;  // std dev = 0,039, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.03135561020740052;  // std dev = 0,215, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.17056970309933683;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19109616111094582;  // std dev = 0,073, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.06911184579557257;  // std dev = 0,011, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.1684661251703738;  // std dev = 0,267, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.985457
   AUC PR    = 0.301085
   CLL	      = -0.14319
   Precision = 0.337243 at threshold = 0.5
   Recall    = 0.912698
   F1        = 0.492505


Total learning time: 4.19 seconds
Total inference time: 24.842 seconds
AUC ROC: 0.985457


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.124732
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.921 seconds
Refined model CLL: -0.124732


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.985457
   AUC PR    = 0.301085
   CLL	      = -0.14319
   Precision = 0.337243 at threshold = 0.5
   Recall    = 0.912698
   F1        = 0.492505


Total learning time: 7.580000000000001 seconds
Total inference time: 24.842 seconds
AUC ROC: 0.985457
Total revision time: 7.580000000000001
Best scored revision CLL: -0.124732


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:05:45
{'CLL': -0.14319, 'AUC ROC': 0.985457, 'F1': 0.492505, 'Recall': 0.912698, 'Precision': [0.337243, 0.5], 'Inference time': 24.842, 'Learning time': 7.580000000000001, 'AUC PR': 0.301085, 'parameter_20': {'CLL': -0.141163, 'AUC ROC': 0.992131, 'F1': 0.508065, 'Recall': 1.0, 'Precision': [0.340541, 0.5], 'Inference time': 21.532, 'Learning time': 1.615, 'AUC PR': 0.333265}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), follows(F, D) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(I, A), tweets(A, J) )
%   | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 4,21e-08, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), follows(F, D) )
%   | | then return -0.12544463852839138;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(I, A), tweets(A, J) )
%   | | then return 0.09446743783575562;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.6045267906174348;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.682813397214732;  // std dev = 0,257, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.12912574677286592;  // std dev = 0,081, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6540084905912288;  // std dev = 0,171, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1617240280180545;  // std dev = 0,121, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.15475674778234996;  // std dev = 0,731, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.45112404620323804;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5353476337043623;  // std dev = 0,300, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.4758448482522586;  // std dev = 0,101, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.1047497375076632;  // std dev = 0,038, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.020340300900372425;  // std dev = 0,750, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.15103461387064643;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.3571764736467644;  // std dev = 0,919, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.3207118471601497;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.41454910801822453;  // std dev = 0,294, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.36206426423834975;  // std dev = 0,091, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.09533731092455282;  // std dev = 0,035, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.01738352995998298;  // std dev = 0,752, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.13267123095912017;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.26892470360214743;  // std dev = 0,919, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then return 0.24042458689029475;  // std dev = 0,051, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3124769569256636;  // std dev = 0,259, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.39932362445920183;  // std dev = 0,336, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10836342063373322;  // std dev = 0,147, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return 0.058511490961918114;  // std dev = 0,471, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.1883536484875643;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.206314788960534;  // std dev = 0,014, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2686516870767217;  // std dev = 0,230, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.25545786915057594;  // std dev = 0,119, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(F, A), tweets(A, H) )
%   | | | then return -0.03689702797623628;  // std dev = 0,657, 10,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.0953882399192315;  // std dev = 0,058, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return -0.107304146605093;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15865071446518383;  // std dev = 0,916, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.17457305970999026;  // std dev = 0,013, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.22213713216170047;  // std dev = 0,201, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.21092758615050325;  // std dev = 0,102, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.0772514202238642;  // std dev = 0,043, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.015435885289864932;  // std dev = 0,661, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.09745016521854559;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.1264402199838409;  // std dev = 0,917, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then return 0.14286385595754073;  // std dev = 0,044, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1809048986924533;  // std dev = 0,171, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.1785568794379279;  // std dev = 0,089, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.07193310949088928;  // std dev = 0,040, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.013328213249402884;  // std dev = 0,662, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.08920888383065638;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.10237623747323309;  // std dev = 0,917, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.1313219940483511;  // std dev = 0,015, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.163878444262298;  // std dev = 0,156, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.28361625855443634;  // std dev = 0,381, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(E, G) )
%   | | | then return -0.06196473329815371;  // std dev = 0,006, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.11275352432781305;  // std dev = 0,098, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.21135604471676456;  // std dev = 0,050, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10000223492120335;  // std dev = 0,021, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.013662420092993677;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.969043
   AUC PR    = 0.246435
   CLL	      = -0.201557
   Precision = 0.065272 at threshold = 0.5
   Recall    = 0.81746
   F1        = 0.120892


Total learning time: 4.596 seconds
Total inference time: 7.465 seconds
AUC ROC: 0.969043


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:05:57
{'CLL': -0.201557, 'AUC ROC': 0.969043, 'F1': 0.120892, 'Recall': 0.81746, 'Precision': [0.065272, 0.5], 'Inference time': 7.465, 'Learning time': 4.596, 'AUC PR': 0.246435}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), follows(F, D) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(I, A), tweets(A, J) )
%   | | then return 0.10814893509951219;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.7152917922423694;  // std dev = 0,350, 7,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */


Results
   AUC ROC   = 0.845818
   AUC PR    = 0.194117
   CLL	      = -0.164953
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.57 seconds
Total inference time: 2.491 seconds
AUC ROC: 0.845818


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:06:01
{'CLL': -0.164953, 'AUC ROC': 0.845818, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.491, 'Learning time': 1.57, 'AUC PR': 0.194117}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false,false,true;interaction(A, A).;false;false
0;false,false;interaction(A, F), complex(A, G).;true;true
0;false,true;interaction(E, D).;false;false
0;false;interaction(D, A), recursion_proteinclass(D, B).;true;true
0;false,false,false;interaction(A, A).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true,true,false;enzyme(A, F).;false;false
1;false,false;interaction(G, A), enzyme(G, H).;true;true
1;false,false,true;enzyme(A, H).;false;false
1;true;phenotype(A, D), interaction(E, C).;true;false
1;false;interaction(A, A).;false;true
1;true,true;phenotype(C, D).;false;true
1;false,false,false;enzyme(A, I), location(A, J).;false;false
2;;proteinclass(A, B) :- enzyme(A, C), location(A, D).;true;true
2;false,false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
2;false,false;complex(A, H).;true;true
2;false,true,true;interaction(A, A).;false;false
2;true;enzyme(E, C), recursion_proteinclass(E, B).;false;false
2;false,true;interaction(G, A), interaction(G, G).;true;false
2;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
2;false,false,false;interaction(J, A), phenotype(J, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), complex(C, D).;true;true
3;false,false,true;complex(J, L).;false;false
3;false,false;interaction(A, J), enzyme(A, K).;true;true
3;true,false;interaction(A, F), complex(F, D).;false;true
3;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
3;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
3;false,false,false;interaction(M, A), recursion_proteinclass(M, B).;false;false
3;true,false,false;interaction(G, C), complex(A, H).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;false,false,true;interaction(G, I), interaction(I, J).;false;false
4;false,false;interaction(A, G), interaction(H, A).;true;true
4;true;interaction(C, D), interaction(D, C).;true;false
4;false,true;interaction(E, E), location(E, F).;false;false
4;false;interaction(E, A), recursion_proteinclass(E, B).;true;true
4;true,true;interaction(A, D).;false;false
4;false,false,false;phenotype(A, K), interaction(A, L).;false;false
5;;proteinclass(A, B) :- location(A, C), interaction(A, D).;true;true
5;false,false;interaction(A, J), phenotype(J, K).;false;true
5;false,true,true;complex(F, I), complex(H, I).;false;false
5;true;interaction(D, A), phenotype(D, E).;false;false
5;false,true;interaction(H, F), interaction(F, H).;true;true
5;false;interaction(F, A), location(F, G).;true;true
5;false,false,false;location(A, L).;false;false
5;false,true,false;recursion_proteinclass(F, B).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
6;false,false;complex(A, K), enzyme(A, L).;true;true
6;true,false;recursion_proteinclass(C, B), complex(A, F).;false;true
6;true;interaction(E, A), recursion_proteinclass(E, B).;false;true
6;false;interaction(A, I), complex(A, J).;false;true
6;false,false,false;interaction(N, A), phenotype(N, P).;false;false
6;true,false,false;phenotype(A, G), complex(A, H).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;false,false,true;interaction(A, I), recursion_proteinclass(J, B).;false;false
7;false,false;interaction(I, A), interaction(J, I).;true;true
7;false,true,true;complex(G, H).;false;false
7;true;complex(C, D).;false;false
7;false,true;location(G, E), recursion_proteinclass(G, B).;true;false
7;false;location(A, E), complex(A, F).;true;true
7;false,false,false;interaction(K, A), enzyme(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, A).;true;true
8;false,false,true;recursion_proteinclass(I, B), interaction(A, J).;false;false
8;false,false;interaction(H, A), interaction(I, H).;true;true
8;false,true,true;complex(A, F), phenotype(E, G).;false;false
8;true;interaction(A, C), recursion_proteinclass(C, B).;false;false
8;false,true;enzyme(E, D), recursion_proteinclass(E, B).;true;false
8;false;enzyme(A, D).;true;true
8;false,false,false;interaction(A, K), phenotype(K, L).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
9;false,false;enzyme(A, G).;true;true
9;false,true,true;complex(F, D).;false;false
9;false,true;interaction(F, E), recursion_proteinclass(F, B).;true;true
9;false;complex(A, D), interaction(E, A).;true;true
9;false,false,false;interaction(I, A), phenotype(I, J).;false;false
9;false,true,false;interaction(A, E).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.030739953789376686;  // std dev = 1,333, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.32873717039363;  // std dev = 2,058, 17,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.7194734122109542;  // std dev = 1,49e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0.09603566660429243;  // std dev = 0,426, 27,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | | else return 0.3549083551785868;  // std dev = 0,469, 11,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6289924320692696;  // std dev = 1,017, 26,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.16175309646499975;  // std dev = 0,082, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.20177663226735382;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.24668811705783125;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(C, D) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.4210850959330217;  // std dev = 0,903, 16,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(F, A), tweets(F, D) )
%   | | then return -0.10650388258025062;  // std dev = 0,526, 17,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( follows(C, G), tweets(A, H) )
%   | | | then return -0.1769746850593466;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.48420599857182367;  // std dev = 0,759, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.489489118127699;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(J, A) )
%   | | then if ( tweets(J, K) )
%   | | | then return -0.014528678123739763;  // std dev = 0,710, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.4136770386514077;  // std dev = 0,713, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then if ( follows(D, A) )
%   | | then return 0.3261404424885285;  // std dev = 0,054, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3275767558849112;  // std dev = 0,143, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.3445978839132473;  // std dev = 0,099, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( follows(H, F), follows(I, H) )
%   | | | then return -0.05559403918379951;  // std dev = 1,108, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return -0.11889235849453786;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.012193274050900644;  // std dev = 0,711, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.27375081737176915;  // std dev = 1,218, 11,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, C) )
%   | then return 0.02935919459333557;  // std dev = 1,152, 25,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | else return 0.1417744111338561;  // std dev = 1,078, 12,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.11565429772099407;  // std dev = 0,843, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.49706951230308816;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(G, A) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.2533020970974591;  // std dev = 0,341, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.24214169060711493;  // std dev = 0,075, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.2918345174705466;  // std dev = 0,056, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.042409340159333155;  // std dev = 1,044, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return -0.08394489771841691;  // std dev = 0,774, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( follows(G, A), tweets(A, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3660446157433933;  // std dev = 0,192, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.21006231638967107;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.18613942313163795;  // std dev = 0,627, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1270523798298567;  // std dev = 0,641, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.20413965344410592;  // std dev = 0,080, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G) )
%   | | | then return 0.39122133831456557;  // std dev = 0,481, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.13025744322439994;  // std dev = 0,118, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(H, A), recursion_accounttype(I, B) )
%   | | | then return -0.39285444613655285;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.029551766504991573;  // std dev = 0,649, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.33293704239489064;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.13884820259168573;  // std dev = 0,873, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(C, B) )
%   | then if ( tweets(A, D) )
%   | | then return 0.23231038974204216;  // std dev = 0,534, 17,000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.23963674339770014;  // std dev = 0,695, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(F, B), follows(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.127858511223591;  // std dev = 0,262, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.16162280553863156;  // std dev = 0,089, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.46097651185597216;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13482848607353304;  // std dev = 0,054, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D) )
%   | | | then return 0.32946482397593047;  // std dev = 0,252, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, A) )
%   | | | then return -0.08869117809569203;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.03295757412190222;  // std dev = 0,569, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.20176399810062506;  // std dev = 0,681, 9,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.1776886322513439;  // std dev = 0,184, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.19213977154544784;  // std dev = 0,187, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.991474
   AUC PR    = 0.289281
   CLL	      = -0.157338
   Precision = 0.337017 at threshold = 0.5
   Recall    = 0.968254
   F1        = 0.5


Total learning time: 1.563 seconds
Total inference time: 19.533 seconds
AUC ROC: 0.991474


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.184266
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.876 seconds
Parameter learned model CLL: -0.184266


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, A)', 'false,false': 'follows(F, A), tweets(A, G)', 'false,true': 'follows(D, E)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true': [2.11e-08, 0, 3], 'true': [0.0, 0, 12], 'false,false,false,false': [2.058, 9, 8], 'false,false,true,false': [1.333, 16, 2], 'false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false,false': 'follows(A, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.426, 20, 7], 'false,true': [0.0, 0, 0], 'false,false,false': [0.469, 5, 6], 'true,false': [0.0, 0, 0], 'true,true': [1.49e-08, 0, 12]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false,false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,false': 'tweets(A, E)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, G)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 4, 0], 'false,false,false,false': [0.0, 2, 0], 'true': [1.017, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.082, 18, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), tweets(C, D)', 'false,false,true': 'tweets(J, K)', 'false,false': 'follows(J, A)', 'true,false': 'follows(F, A), tweets(F, D)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'false': 'follows(I, A), recursion_accounttype(I, B)', 'false,false,false': 'follows(A, L), recursion_accounttype(L, B)', 'true,false,false': 'follows(C, G), tweets(A, H)'}, {'false,false,true,true': [0.71, 4, 1], 'true,false,true': [0.526, 16, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.713, 1, 3], 'false,true': [0.0, 0, 2], 'true,false,false,false': [0.759, 1, 3], 'true,false,false,true': [0.0, 2, 0], 'true,true': [0.903, 1, 15], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(H, F), follows(I, H)', 'false,false': 'follows(F, A), follows(A, G)', 'true': 'follows(D, C), follows(C, D)', 'false,true': 'follows(E, E)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'true,true': 'follows(D, A)', 'false,false,false': 'follows(J, A)'}, {'true,true,false': [0.143, 0, 9], 'false,false,true,true': [1.108, 16, 2], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.711, 4, 1], 'false,true,true': [0.0, 0, 0], 'true,true,true': [0.054, 0, 3], 'false,false,false,false': [1.218, 4, 7], 'false,false,true,false': [0.0, 1, 0], 'false,true,false': [0.099, 0, 3]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false,false': 'follows(G, A)', 'false,true,true': 'tweets(D, F), tweets(E, F)', 'true': 'follows(A, C)', 'false,true': 'follows(D, E), follows(E, D)', 'false': 'follows(A, D)', 'false,true,false': 'recursion_accounttype(D, B)'}, {'false,true,true,true': [0.843, 3, 4], 'false,true,false,false': [0.0, 0, 2], 'false,false,false': [0.341, 1, 3], 'true,false': [1.078, 6, 6], 'false,false,true': [0.0, 0, 0], 'false,true,false,true': [0.0, 0, 0], 'true,true': [1.152, 15, 10], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false,false,true': 'recursion_accounttype(J, B)', 'false,false': 'tweets(A, I)', 'true,false': 'recursion_accounttype(C, B), tweets(A, E)', 'true': 'follows(A, D), recursion_accounttype(D, B)', 'false': 'follows(G, A), tweets(A, H)', 'false,false,false': 'follows(A, K)', 'true,false,false': 'tweets(A, F)'}, {'false,false,true,true': [0.192, 0, 4], 'true,false,true': [0.056, 0, 3], 'false,false,false,true': [0.627, 1, 3], 'false,false,false,false': [0.641, 1, 2], 'false,true': [0.0, 0, 0], 'true,false,false,false': [0.774, 5, 1], 'true,false,false,true': [1.044, 16, 2], 'true,true': [0.075, 0, 10], 'false,false,true,false': [0.0, 2, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(H, A), recursion_accounttype(I, B)', 'false,false': 'follows(A, H), follows(H, I)', 'false,true,true': 'tweets(F, G)', 'true': 'tweets(C, D)', 'false,true': 'recursion_accounttype(F, B)', 'false': 'tweets(A, E)', 'false,false,false': 'follows(A, J)'}, {'false,true,true,true': [0.481, 0, 7], 'false,false,true,true': [0.0, 1, 0], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 1], 'false,true,false': [0.118, 18, 0], 'false,false,false,false': [0.873, 2, 3], 'false,false,true,false': [0.649, 4, 2], 'true,true': [0.08, 0, 12], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false,true': 'recursion_accounttype(F, B), follows(G, A)', 'false,false': 'follows(A, E), follows(E, F)', 'false,true': 'tweets(A, D)', 'false': 'recursion_accounttype(C, B)', 'false,false,false': 'follows(H, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.089, 5, 0], 'false,true,true': [0.534, 0, 17], 'true': [0.0, 0, 0], 'false,false,false,false': [0.0, 1, 0], 'false,false,true,false': [0.262, 18, 0], 'false,true,false': [0.695, 1, 8]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'recursion_accounttype(G, B)', 'false,true,true': 'tweets(F, D)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false': 'tweets(A, D), follows(A, E)', 'false,false,false': 'follows(A, H)', 'false,true,false': 'follows(E, A)'}, {'false,true,true,true': [0.252, 0, 3], 'false,true,false,false': [0.569, 4, 2], 'false,false,false,true': [0.184, 4, 0], 'false,false,true': [0.681, 1, 8], 'false,true,false,true': [0.0, 11, 0], 'true': [0.054, 0, 12], 'false,false,false,false': [0.187, 5, 0], 'false,true,true,false': [0.0, 0, 0]}]]
[{'': [-1.4802973661668753e-16, 0.22506925207756218], 'false,false,true': [nan, 0.09876543209876548], 'false,false': [0.09876543209876548, 0.24913494809688577], 'false,true': [1.4802973661668753e-16, nan], 'false': [1.4802973661668753e-16, 0.20408163265306128], 'false,false,false': [nan, 0.24913494809688583]}, {'': [2.220446049250313e-16, 0.20626159152981288], 'true': [2.220446049250313e-16, nan], 'false,false': [0.18118276682220916, 0.2202027367206392], 'false': [nan, 0.20626159152981308]}, {'': [0.03979524950489026, 0.0009614436591284803], 'false,false,true': [nan, 0.0003764285458165305], 'false,false': [0.0003764285458165305, 0.0004482314369078459], 'false': [nan, 0.0009614436591284664], 'false,false,false': [0.0, 0.0]}, {'': [0.11826041182256188, 0.14368256234327073], 'false,false,true': [0.10074483591895009, nan], 'false,false': [0.10074483591895009, 0.12707050431539588], 'true,false': [0.016254305274289144, 0.19320129686689377], 'true': [0.05098545977362659, 0.0888561405766047], 'false': [0.0, 0.15771924060846124], 'false,false,false': [nan, 0.12707050431539588], 'true,false,false': [0.0, 0.1440819798313468]}, {'': [0.0019452073442855304, 0.11214154977546538], 'false,false,true': [0.0682586743389891, 0.0], 'false,false': [0.06486589145160784, 0.14180019751078327], 'true': [0.0019452073442855304, nan], 'false,true': [nan, 0.0032750339570281803], 'false': [0.0032750339570281803, 0.11472812966402164], 'true,true': [0.0009687748632281612, 0.002270169088928125], 'false,false,false': [0.10108395502461878, 0.1347563231404348]}, {'': [0.07003776905304711, 0.10847713204469701], 'false,false': [nan, 0.11624695138581428], 'false,true,true': [0.10159575639679304, nan], 'true': [0.05304639820424577, 0.0968978225714829], 'false,true': [0.10159575639679304, 0.0], 'false': [0.10416319229387444, 0.11624695138581428], 'false,true,false': [nan, 0.0]}, {'': [0.06766950739776585, 0.09917548590847126], 'false,false,true': [0.009237287437554892, 0.0], 'false,false': [0.07991356879209686, 0.11560537265933128], 'true,false': [0.0010512950388138302, 0.07073727549496577], 'true': [0.0005566966694576459, 0.07472458966806893], 'false': [nan, 0.09917548590847126], 'false,false,false': [0.09823354031913473, 0.13677279938750964], 'true,false,false': [0.06060896842931732, 0.09982829478560318]}, {'': [0.0005318759980682449, 0.08298016133921973], 'false,false,true': [0.0, 0.07026682497618426], 'false,false': [0.07639060553397094, 0.13215376996207925], 'false,true,true': [0.03310535615349454, nan], 'true': [0.0005318759980682449, nan], 'false,true': [0.03310535615349454, 0.0007684012674656812], 'false': [0.06464587674597913, 0.11799084082399464], 'false,false,false': [0.0, 0.1523061109984694]}, {'': [nan, 0.05574302958374507], 'false,false,true': [nan, 0.0038160586443025204], 'false,false': [0.0038160586443025204, 0.013751660033531296], 'false,true': [0.0167600562998855, 0.053624547358438676], 'false': [0.02953299010574096, 0.007612163334109874], 'false,false,false': [0.001566551792582821, 0.0]}, {'': [0.00024177793397431313, 0.05298860481647736], 'false,false': [0.05159367998728344, 0.007719248192132877], 'false,true,false': [0.0, 0.053993035682871005], 'false,true': [0.02120884385028134, 0.02243593525299407], 'false': [0.040202712588932724, 0.0671918533870583], 'false,false,false': [0.008508258721053007, 0.006995224023708951], 'false,true,true': [0.02120884385028134, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, D), recursion_accounttype(D, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false,false;follows(A, G).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C), tweets(C, D).;true;true
3;true;follows(C, E), recursion_accounttype(E, B).;true;true
3;false;follows(I, A), recursion_accounttype(I, B).;true;true
3;true,false;follows(F, A), tweets(F, D).;true;true
3;true,false,false;follows(C, G), tweets(A, H).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(D, A).;true;true
4;false,false;follows(F, A), follows(A, G).;true;true
4;false;follows(A, E), recursion_accounttype(E, B).;true;true
4;false,false,true;follows(H, F), follows(I, H).;true;true
5;;accounttype(A, B) :- follows(C, A).;true;true
5;false,true;follows(D, E), follows(E, D).;true;true
5;false;follows(A, D).;true;true
6;;accounttype(A, B) :- follows(C, A).;true;true
6;true;follows(A, D), recursion_accounttype(D, B).;true;true
6;false;tweets(A, I).;true;true
6;true,false;recursion_accounttype(C, B), tweets(A, E).;true;true
6;false,true;recursion_accounttype(J, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false,false,true;follows(H, A), recursion_accounttype(I, B).;true;true
7;false,false;follows(A, H), follows(H, I).;true;true
7;false,true;recursion_accounttype(F, B).;true;true
7;false;tweets(A, E).;true;true
7;false,false,false;follows(A, J).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false,false;follows(H, A).;true;true
8;false;follows(A, E), follows(E, F).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
9;false;tweets(A, D), follows(A, E).;true;true
9;false,true,false;follows(E, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0,866, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.6914822684328454;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109542;  // std dev = 5,16e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.13619297845188008;  // std dev = 0,102, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.02330812826579413;  // std dev = 0,815, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109544;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.02330812826579413;  // std dev = 0,815, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.4054932000970828;  // std dev = 1,675, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.5553664367462845;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.6245381390644577;  // std dev = 0,169, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3004165953542991;  // std dev = 0,624, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7009156629405557;  // std dev = 0,124, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, I) )
%   | then return -0.13427450420441678;  // std dev = 0,166, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, J) )
%   | | then return -0.1483780615231106;  // std dev = 0,110, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.25410367484126806;  // std dev = 0,109, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(C, D) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.43771242102737457;  // std dev = 0,208, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.23248532930352725;  // std dev = 0,608, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5123430242949659;  // std dev = 0,190, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), tweets(H, D) )
%   | | then return -0.07428245341719893;  // std dev = 0,123, 17,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( follows(C, I), tweets(A, J) )
%   | | | then return -0.219149020160164;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.3497828254179688;  // std dev = 0,661, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(K, A), recursion_accounttype(K, B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(L, A), tweets(A, M) )
%   | | then return -0.1137680039759655;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.2670765874980218;  // std dev = 0,832, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.31263596874520455;  // std dev = 0,018, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.37184931117432535;  // std dev = 0,102, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.3455026045788088;  // std dev = 0,110, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then if ( follows(J, H), follows(K, J) )
%   | | | then return -0.040027789646354575;  // std dev = 0,877, 18,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | | else return -0.1064906230615784;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(L, A), tweets(A, M) )
%   | | | then return -0.10279151539494624;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.18336854822030488;  // std dev = 1,196, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26332720461329073;  // std dev = 0,033, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return -0.11007537090477734;  // std dev = 0,203, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.004016701465484732;  // std dev = 0,583, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.17331294399090372;  // std dev = 0,562, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.015766326334792875;  // std dev = 0,486, 5,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(A, H) )
%   | then if ( follows(H, I), follows(I, H) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.06055794438853953;  // std dev = 0,566, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.11597703139278283;  // std dev = 0,553, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3702737731064212;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.19832445149535186;  // std dev = 0,663, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.22970662931022212;  // std dev = 0,042, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.2022044097319007;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.06431071413799043;  // std dev = 0,647, 17,000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return 0.043977765758382636;  // std dev = 0,697, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.3188639634889678;  // std dev = 0,145, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.2234185007564352;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(A, J) )
%   | | then return 0.1406483423046399;  // std dev = 0,579, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.08798980992095418;  // std dev = 0,626, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18052885434870677;  // std dev = 0,025, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.43471430266079264;  // std dev = 0,210, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.25529358572911637;  // std dev = 0,127, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.08884552553017343;  // std dev = 0,054, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.16027866597224652;  // std dev = 0,066, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(I, A), recursion_accounttype(J, B) )
%   | | | then return -0.26706675256048035;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.01007462351437241;  // std dev = 0,582, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.26077109698024603;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.07879583462643328;  // std dev = 0,765, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.1587235400866652;  // std dev = 0,052, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.022586769080946978;  // std dev = 0,295, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2622764747851615;  // std dev = 0,226, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.14738148468147214;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1739881769755445;  // std dev = 0,043, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.296778350233851;  // std dev = 0,212, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, H), follows(H, I) )
%   | then return -0.10486970287853081;  // std dev = 0,072, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(J, A) )
%   | | then return -0.12137189198635019;  // std dev = 0,119, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.4646657534092702;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.13211682260524435;  // std dev = 0,045, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.17069958943318575;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.24850261904008017;  // std dev = 0,176, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.06993594611127327;  // std dev = 0,029, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.005027379165104419;  // std dev = 0,425, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then return -0.11075305284679877;  // std dev = 0,129, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, I), follows(J, A) )
%   | | | then return 0.0037300604105011516;  // std dev = 0,227, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06215186969433652;  // std dev = 0,797, 9,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */


Results
   AUC ROC   = 0.989153
   AUC PR    = 0.303412
   CLL	      = -0.150697
   Precision = 0.108929 at threshold = 0.5
   Recall    = 0.968254
   F1        = 0.195827


Total learning time: 6.203 seconds
Total inference time: 25.958 seconds
AUC ROC: 0.989153


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.156989
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.94 seconds
Refined model CLL: -0.156989


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.989153
   AUC PR    = 0.303412
   CLL	      = -0.150697
   Precision = 0.108929 at threshold = 0.5
   Recall    = 0.968254
   F1        = 0.195827


Total learning time: 9.581999999999999 seconds
Total inference time: 25.958 seconds
AUC ROC: 0.989153
Total revision time: 9.581999999999999
Best scored revision CLL: -0.156989


Dataset: 15_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:06:57
{'CLL': -0.150697, 'AUC ROC': 0.989153, 'F1': 0.195827, 'Recall': 0.968254, 'parameter_25': {'CLL': -0.157338, 'AUC ROC': 0.991474, 'F1': 0.5, 'Recall': 0.968254, 'Precision': [0.337017, 0.5], 'Inference time': 19.533, 'Learning time': 1.563, 'AUC PR': 0.289281}, 'Precision': [0.108929, 0.5], 'Inference time': 25.958, 'Learning time': 9.581999999999999, 'AUC PR': 0.303412}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.6914822684328454;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7226855724118626;  // std dev = 0,037, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.13709824121336678;  // std dev = 0,111, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.021799356996649605;  // std dev = 0,806, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109544;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.021799356996649605;  // std dev = 0,806, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.4004848930818011;  // std dev = 1,573, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5586323062566393;  // std dev = 0,047, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return -0.1218166754487449;  // std dev = 0,101, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.019119884328643384;  // std dev = 0,805, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.606542256816049;  // std dev = 0,063, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1642165210992961;  // std dev = 0,042, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.2060295273964461;  // std dev = 1,166, 9,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.5032996767444644;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.42972897678731675;  // std dev = 0,116, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.47249584605634115;  // std dev = 0,781, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.12383175177581043;  // std dev = 0,127, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.4498253722326834;  // std dev = 0,068, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.15373753898900705;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.3843385881640991;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3294285644926758;  // std dev = 0,107, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.08910617282081781;  // std dev = 4,56e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.15382938129997423;  // std dev = 0,159, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.011499686139667937;  // std dev = 0,702, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(G, I), follows(I, A) )
%   | | | then return -0.13730530197179322;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.2870696072089185;  // std dev = 0,507, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13833400453247607;  // std dev = 0,629, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.25730302876565847;  // std dev = 1,051, 8,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.26137256554617005;  // std dev = 0,095, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D) )
%   | | | then return -0.08094634876573463;  // std dev = 0,006, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.1436973592282225;  // std dev = 0,098, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.3351473197443621;  // std dev = 0,708, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1141381363665684;  // std dev = 0,036, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.31282242490792234;  // std dev = 0,059, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1517441749543224;  // std dev = 3,73e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.22581120187374504;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then return 0.20424080276867795;  // std dev = 7,45e-09, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.24443738870605894;  // std dev = 0,058, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return -0.07496698819485288;  // std dev = 0,005, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.15721636194916377;  // std dev = 0,201, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.006279227771805213;  // std dev = 0,618, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.29508353153459876;  // std dev = 0,213, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12450309397620567;  // std dev = 0,025, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.10727752428927216;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0874211621844558;  // std dev = 0,957, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then return 0.1730394020339342;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.20236824372412246;  // std dev = 0,050, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.06933325512609113;  // std dev = 0,008, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.14070537828049542;  // std dev = 0,181, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.0055236017030068085;  // std dev = 0,617, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.23898505811811155;  // std dev = 0,189, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11156715324615056;  // std dev = 0,022, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return -0.09742806190482804;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06872092735535584;  // std dev = 0,956, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.14791383495054156;  // std dev = 0,013, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.1697543691767313;  // std dev = 0,040, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return -0.06439169394039017;  // std dev = 0,010, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.12726123129218317;  // std dev = 0,163, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.0048566825866322065;  // std dev = 0,616, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.19914362113138817;  // std dev = 0,168, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10098824733522838;  // std dev = 0,020, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return -0.08919026061346362;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.054272928130780995;  // std dev = 0,955, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.14844816658175752;  // std dev = 0,033, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1296078381521652;  // std dev = 0,011, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.060244439622496294;  // std dev = 0,011, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.11564300658821543;  // std dev = 0,148, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.0042685660463541025;  // std dev = 0,615, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.16986045445675024;  // std dev = 0,150, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09218937956849496;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return -0.08220541393388779;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04303270860190398;  // std dev = 0,954, 6,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */


Results
   AUC ROC   = 0.982163
   AUC PR    = 0.315901
   CLL	      = -0.150509
   Precision = 0.070972 at threshold = 0.5
   Recall    = 0.880952
   F1        = 0.131361


Total learning time: 6.187 seconds
Total inference time: 6.695 seconds
AUC ROC: 0.982163


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN-B), Time: 00:07:10
{'CLL': -0.150509, 'AUC ROC': 0.982163, 'F1': 0.131361, 'Recall': 0.880952, 'Precision': [0.070972, 0.5], 'Inference time': 6.695, 'Learning time': 6.187, 'AUC PR': 0.315901}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.6914822684328454;  // std dev = 0,913, 6,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */


Results
   AUC ROC   = 0.976309
   AUC PR    = 0.317855
   CLL	      = -0.157515
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 1.156 seconds
Total inference time: 2.752 seconds
AUC ROC: 0.976309


Dataset: 15_yeast_twitter, Fold: 1, Type: Scratch (RDN), Time: 00:07:14
{'CLL': -0.157515, 'AUC ROC': 0.976309, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.752, 'Learning time': 1.156, 'AUC PR': 0.317855}


Starting fold 2

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 24648

Amount of data: 5
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false,false,true;interaction(A, A).;false;false
0;false,false;interaction(A, F), complex(A, G).;true;true
0;false,true;interaction(E, D).;false;false
0;false;interaction(D, A), recursion_proteinclass(D, B).;true;true
0;false,false,false;interaction(A, A).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true,true,false;enzyme(A, F).;false;false
1;false,false;interaction(G, A), enzyme(G, H).;true;true
1;false,false,true;enzyme(A, H).;false;false
1;true;phenotype(A, D), interaction(E, C).;true;false
1;false;interaction(A, A).;false;true
1;true,true;phenotype(C, D).;false;true
1;false,false,false;enzyme(A, I), location(A, J).;false;false
2;;proteinclass(A, B) :- enzyme(A, C), location(A, D).;true;true
2;false,false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
2;false,false;complex(A, H).;true;true
2;false,true,true;interaction(A, A).;false;false
2;true;enzyme(E, C), recursion_proteinclass(E, B).;false;false
2;false,true;interaction(G, A), interaction(G, G).;true;false
2;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
2;false,false,false;interaction(J, A), phenotype(J, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), complex(C, D).;true;true
3;false,false,true;complex(J, L).;false;false
3;false,false;interaction(A, J), enzyme(A, K).;true;true
3;true,false;interaction(A, F), complex(F, D).;false;true
3;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
3;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
3;false,false,false;interaction(M, A), recursion_proteinclass(M, B).;false;false
3;true,false,false;interaction(G, C), complex(A, H).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;false,false,true;interaction(G, I), interaction(I, J).;false;false
4;false,false;interaction(A, G), interaction(H, A).;true;true
4;true;interaction(C, D), interaction(D, C).;true;false
4;false,true;interaction(E, E), location(E, F).;false;false
4;false;interaction(E, A), recursion_proteinclass(E, B).;true;true
4;true,true;interaction(A, D).;false;false
4;false,false,false;phenotype(A, K), interaction(A, L).;false;false
5;;proteinclass(A, B) :- location(A, C), interaction(A, D).;true;true
5;false,false;interaction(A, J), phenotype(J, K).;false;true
5;false,true,true;complex(F, I), complex(H, I).;false;false
5;true;interaction(D, A), phenotype(D, E).;false;false
5;false,true;interaction(H, F), interaction(F, H).;true;true
5;false;interaction(F, A), location(F, G).;true;true
5;false,false,false;location(A, L).;false;false
5;false,true,false;recursion_proteinclass(F, B).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
6;false,false;complex(A, K), enzyme(A, L).;true;true
6;true,false;recursion_proteinclass(C, B), complex(A, F).;false;true
6;true;interaction(E, A), recursion_proteinclass(E, B).;false;true
6;false;interaction(A, I), complex(A, J).;false;true
6;false,false,false;interaction(N, A), phenotype(N, P).;false;false
6;true,false,false;phenotype(A, G), complex(A, H).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;false,false,true;interaction(A, I), recursion_proteinclass(J, B).;false;false
7;false,false;interaction(I, A), interaction(J, I).;true;true
7;false,true,true;complex(G, H).;false;false
7;true;complex(C, D).;false;false
7;false,true;location(G, E), recursion_proteinclass(G, B).;true;false
7;false;location(A, E), complex(A, F).;true;true
7;false,false,false;interaction(K, A), enzyme(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, A).;true;true
8;false,false,true;recursion_proteinclass(I, B), interaction(A, J).;false;false
8;false,false;interaction(H, A), interaction(I, H).;true;true
8;false,true,true;complex(A, F), phenotype(E, G).;false;false
8;true;interaction(A, C), recursion_proteinclass(C, B).;false;false
8;false,true;enzyme(E, D), recursion_proteinclass(E, B).;true;false
8;false;enzyme(A, D).;true;true
8;false,false,false;interaction(A, K), phenotype(K, L).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
9;false,false;enzyme(A, G).;true;true
9;false,true,true;complex(F, D).;false;false
9;false,true;interaction(F, E), recursion_proteinclass(F, B).;true;true
9;false;complex(A, D), interaction(E, A).;true;true
9;false,false,false;interaction(I, A), phenotype(I, J).;false;false
9;false,true,false;interaction(A, E).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0.09164824862862181;  // std dev = 0,415, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.30287776131345834;  // std dev = 0,463, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6633816163501247;  // std dev = 0,222, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.2241730646803866;  // std dev = 0,026, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.13584908581450914;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.1626048137499825;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then return 0.482754318610845;  // std dev = 0,224, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), tweets(F, D) )
%   | | then return -0.13764794239460593;  // std dev = 0,042, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.4938982247419351;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(H, I) )
%   | | | then return 0.09043929862145546;  // std dev = 0,646, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(A, D) )
%   | | then return 0.3287205223588366;  // std dev = 0,063, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.28419273767295883;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( follows(F, H), follows(H, I) )
%   | | | then return 0.046077466833271796;  // std dev = 0,584, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0.07443497673967946;  // std dev = 0,639, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, A) )
%   | then return 0.10170055609417417;  // std dev = 0,617, 6,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.12060510502054278;  // std dev = 0,667, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20886654563108586;  // std dev = 0,005, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.2753527134641809;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.1586169813519017;  // std dev = 0,747, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14118173684559845;  // std dev = 0,048, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.20179834451050738;  // std dev = 0,031, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.17321001365825284;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G) )
%   | | | then return 0.4911567245119099;  // std dev = 0,024, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.24103796174049325;  // std dev = 0,062, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, H), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10744552642538945;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1601273988531297;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(C, B) )
%   | then if ( tweets(A, D) )
%   | | then return 0.24706541701271845;  // std dev = 0,230, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B), follows(A, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11889833894510278;  // std dev = 0,052, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.18919824985699152;  // std dev = 0,070, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.12181780149812993;  // std dev = 0,001, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D) )
%   | | | then return 0.3014189045931651;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return -0.14609471701370494;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.24292768892406524;  // std dev = 0,124, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.08758801729572677;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.16224907769110722;  // std dev = 0,062, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.993959
   AUC PR    = 0.3715
   CLL	      = -0.150398
   Precision = 0.325123 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.469751


Total learning time: 0.992 seconds
Total inference time: 25.496 seconds
AUC ROC: 0.993959


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.158468
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.575 seconds
Parameter learned model CLL: -0.158468


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, A)', 'false,false': 'follows(A, E), tweets(A, F)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 3, 0], 'true': [2.11e-08, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,false': [1.0, 2, 2]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false,false': 'follows(E, A)', 'false': 'follows(A, A)'}, {'false,false,true': [0.415, 3, 1], 'false,true': [0.0, 0, 0], 'false,false,false': [0.463, 2, 2], 'true,false': [0.0, 0, 0], 'true,true': [0.0, 0, 2]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false,false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,false': 'tweets(A, E)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,false,false': [0.0, 1, 0], 'true': [0.222, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.026, 2, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), tweets(C, D)', 'false,false,true': 'tweets(H, I)', 'false,false': 'follows(A, H)', 'true,false': 'follows(A, F), tweets(F, D)', 'true': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, G), recursion_accounttype(G, B)'}, {'false,false,true,true': [0.646, 2, 1], 'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 0], 'true,false,true': [0.042, 3, 0], 'true,true': [0.224, 0, 3], 'true,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, H), follows(H, I)', 'false,false': 'follows(A, F), follows(G, A)', 'true': 'follows(C, D), follows(D, C)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'true,true': 'follows(A, D)', 'false,false,false': 'follows(A, J)'}, {'true,true,false': [0.0, 0, 1], 'false,false,true,true': [0.584, 3, 1], 'true,false': [0.0, 0, 0], 'false,false,false,true': [0.639, 2, 1], 'false,true': [0.0, 0, 0], 'true,true,true': [0.063, 0, 2], 'false,false,false,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, A)'}, {'true,false': [0.667, 2, 2], 'false': [0.0, 0, 0], 'true,true': [0.617, 3, 3]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A), recursion_accounttype(D, B)', 'true,false': 'recursion_accounttype(C, B), tweets(A, E)', 'true,false,false': 'tweets(A, F)'}, {'true,true': [0.005, 0, 2], 'true,false,false,false': [0.048, 3, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false,true': [0.747, 2, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, H), recursion_accounttype(I, B)', 'false,false': 'follows(H, A), follows(I, H)', 'false,true,true': 'tweets(F, G)', 'true': 'tweets(C, D)', 'false,true': 'recursion_accounttype(F, B)', 'false': 'tweets(A, E)', 'false,false,false': 'follows(J, A)'}, {'false,true,true,true': [0.024, 0, 2], 'false,false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,true,false': [0.062, 2, 0], 'false,false,false,false': [0.0, 1, 0], 'false,false,true,false': [0.0, 2, 0], 'true,true': [0.031, 0, 2], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false,true': 'recursion_accounttype(F, B), follows(A, G)', 'false,false': 'follows(E, A), follows(F, E)', 'false,true': 'tweets(A, D)', 'false': 'recursion_accounttype(C, B)', 'false,false,false': 'follows(A, H)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.07, 2, 0], 'false,true,true': [0.23, 0, 5], 'true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,true,false': [0.052, 3, 0], 'false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'recursion_accounttype(G, B)', 'false,true,true': 'tweets(F, D)', 'false,true': 'follows(F, E), recursion_accounttype(F, B)', 'false': 'tweets(A, D), follows(E, A)', 'false,false,false': 'follows(H, A)', 'false,true,false': 'follows(A, E)'}, {'false,true,true,true': [0.0, 0, 1], 'false,true,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,true': [0.124, 0, 2], 'false,true,false,true': [0.0, 1, 0], 'true': [0.001, 0, 2], 'false,false,false,false': [0.062, 2, 0], 'false,true,true,false': [0.0, 0, 0]}]]
[{'': [1.4802973661668753e-16, 0.20408163265306126], 'false,false,true': [nan, 0.25], 'false,false': [0.25, 0.0], 'false': [nan, 0.20408163265306126], 'false,false,false': [nan, 0.0]}, {'': [0.0, 0.20435423419352616], 'true': [0.0, nan], 'false,false': [0.1721293216541677, 0.2142701932183479], 'false': [nan, 0.20435423419352614]}, {'': [0.009874673762696063, 0.0017431828604876798], 'false,false,true': [nan, 0.0003362033541419729], 'false,false': [0.0003362033541419729, 0.00015908199496823353], 'false': [nan, 0.0017431828604876798], 'false,false,false': [0.0, 0.0]}, {'': [0.10483984354941296, 0.134861562259179], 'false,false,true': [0.13912064007899935, nan], 'false,false': [0.13912064007899935, nan], 'true,false': [0.0005761494149022911, nan], 'true': [0.0166540549535857, 0.0005761494149022911], 'false': [0.0, 0.13912064007899935]}, {'': [0.0017624209858061273, 0.1073334178655644], 'false,false,true': [0.08528254306147352, nan], 'false,false': [0.08528254306147352, 0.13627507091782345], 'true': [0.0017624209858061273, nan], 'false': [nan, 0.1073334178655644], 'true,true': [0.001982723609031886, 0.0], 'false,false,false': [0.13627507091782345, nan]}, {'': [0.08272585567099254, nan], 'true': [0.06354769689944872, 0.11127866464624257]}, {'': [0.08017638726085216, nan], 'true': [1.353215879431463e-05, 0.09583143835604203], 'true,false': [0.0, 0.10200498279147655], 'true,false,false': [0.13942289102025687, 0.0007548548105137873]}, {'': [0.0005077728355550917, 0.09280131929204109], 'false,false,true': [nan, 0.0], 'false,false': [0.0, 0.0], 'false,true,true': [0.00027943990301418364, nan], 'true': [0.0004892283663599853, 0.0], 'false,true': [0.00027943990301418364, 0.0019460043947919364], 'false': [0.13513998679296682, 0.0006167510405539339], 'false,false,false': [nan, 0.0]}, {'': [nan, 0.045493537784936776], 'false,false,true': [nan, 0.0009100066442823013], 'false,false': [0.0009100066442823013, 0.002445604290161184], 'false,true': [0.010625741961785585, nan], 'false': [0.010625741961785585, 0.0027103442964465318], 'false,false,false': [0.002445604290161184, nan]}, {'': [7.268840956104611e-07, 0.03935204445693158], 'false,false': [0.007637852509227702, 0.002350075384599618], 'false,true,true': [0.0, nan], 'false,true': [0.0, 0.0], 'false': [0.05006711038092422, 0.03418174634758814], 'false,false,false': [0.0, 0.0019130137995179083], 'false,true,false': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;false;follows(A, E), tweets(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false,false;follows(G, A).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(C, A), tweets(C, D).;true;true
3;true;follows(E, C), recursion_accounttype(E, B).;true;true
3;false;follows(A, G), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(A, D).;true;true
6;;accounttype(A, B) :- follows(D, A), recursion_accounttype(D, B).;true;true
6;false,false;tweets(A, F).;true;true
6;false;recursion_accounttype(C, B), tweets(A, E).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D).;true;true
7;false,false;follows(H, A), follows(I, H).;true;true
7;false;tweets(A, E).;true;true
7;false,true;recursion_accounttype(F, B).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(E, A), follows(F, E).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false,true;follows(F, E), recursion_accounttype(F, B).;true;true
9;false,false;recursion_accounttype(G, B).;true;true
9;false;tweets(A, D), follows(E, A).;true;true
9;false,false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, D), tweets(A, E) )
%   | then return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109545;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( tweets(A, D) )
%   | then return 0.3908875910706989;  // std dev = 1,065, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6454023416503618;  // std dev = 0,186, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, D) )
%   | then return -0.25904013032099293;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(E, A) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then return 0.4638698122921597;  // std dev = 0,167, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.13855963333133134;  // std dev = 0,091, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.47640781474043237;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.09531349168321168;  // std dev = 0,623, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.3148478993093076;  // std dev = 0,057, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return 0.16081940984824533;  // std dev = 0,744, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.09663018781300452;  // std dev = 0,017, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(D, A) )
%   | then return 0.17288299909728377;  // std dev = 0,482, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.19026810045207643;  // std dev = 0,576, 3,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.08852601662362274;  // std dev = 0,016, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2018735713637917;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( recursion_accounttype(D, B), tweets(A, E) )
%   | then return 0.38243183961934585;  // std dev = 0,168, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.2717764998327447;  // std dev = 0,035, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.08164497108741649;  // std dev = 0,015, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.18000244322226866;  // std dev = 0,012, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.17129188472341061;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then return 0.35562646031641565;  // std dev = 0,057, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.2215574521052866;  // std dev = 0,031, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.07011182363745018;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.08697839691513867;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20338882255612978;  // std dev = 0,148, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(D, A), follows(E, D) )
%   | then return -0.09939733623535298;  // std dev = 0,083, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.1425266982701722;  // std dev = 0,088, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.12395185509594875;  // std dev = 0,000669, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.2085879118053401;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.15347629017743028;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.20463922881960728;  // std dev = 0,096, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.059834019340509734;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.12645136457308656;  // std dev = 0,079, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.993948
   AUC PR    = 0.358628
   CLL	      = -0.142339
   Precision = 0.322738 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.467257


Total learning time: 1.001 seconds
Total inference time: 14.621 seconds
AUC ROC: 0.993948


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.132243
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.567 seconds
Refined model CLL: -0.132243


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993948
   AUC PR    = 0.358628
   CLL	      = -0.142339
   Precision = 0.322738 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.467257


Total learning time: 3.135 seconds
Total inference time: 14.621 seconds
AUC ROC: 0.993948
Total revision time: 3.135
Best scored revision CLL: -0.132243


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:07:58
{'CLL': -0.142339, 'AUC ROC': 0.993948, 'F1': 0.467257, 'Recall': 0.846154, 'Precision': [0.322738, 0.5], 'parameter_5': {'CLL': -0.150398, 'AUC ROC': 0.993959, 'F1': 0.469751, 'Recall': 0.846154, 'Precision': [0.325123, 0.5], 'Inference time': 25.496, 'Learning time': 0.992, 'AUC PR': 0.3715}, 'Inference time': 14.621, 'Learning time': 3.135, 'AUC PR': 0.358628}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.308741135785635;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2564123687585864;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.20613740734453975;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.32071184716014967;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.16162857548414666;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.25517224256948945;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.12455597792081964;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.20975771563253554;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.09492800936730683;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.17709649774527736;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.0718608885005586;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.15274385809367097;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.05418307375954945;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.13400703000801117;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.04076025323305622;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.646536
   AUC PR    = 0.124626
   CLL	      = -0.496376
   Precision = 0.288991 at threshold = 0.5
   Recall    = 0.403846
   F1        = 0.336898


Total learning time: 1.661 seconds
Total inference time: 6.861 seconds
AUC ROC: 0.646536


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:08:07
{'CLL': -0.496376, 'AUC ROC': 0.646536, 'F1': 0.336898, 'Recall': 0.403846, 'Precision': [0.288991, 0.5], 'Inference time': 6.861, 'Learning time': 1.661, 'AUC PR': 0.124626}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.646536
   AUC PR    = 0.124626
   CLL	      = -0.201367
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.644 seconds
Total inference time: 2.624 seconds
AUC ROC: 0.646536


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:08:11
{'CLL': -0.201367, 'AUC ROC': 0.646536, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.624, 'Learning time': 0.644, 'AUC PR': 0.124626}


Amount of data: 10
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false,false,true;interaction(A, A).;false;false
0;false,false;interaction(A, F), complex(A, G).;true;true
0;false,true;interaction(E, D).;false;false
0;false;interaction(D, A), recursion_proteinclass(D, B).;true;true
0;false,false,false;interaction(A, A).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true,true,false;enzyme(A, F).;false;false
1;false,false;interaction(G, A), enzyme(G, H).;true;true
1;false,false,true;enzyme(A, H).;false;false
1;true;phenotype(A, D), interaction(E, C).;true;false
1;false;interaction(A, A).;false;true
1;true,true;phenotype(C, D).;false;true
1;false,false,false;enzyme(A, I), location(A, J).;false;false
2;;proteinclass(A, B) :- enzyme(A, C), location(A, D).;true;true
2;false,false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
2;false,false;complex(A, H).;true;true
2;false,true,true;interaction(A, A).;false;false
2;true;enzyme(E, C), recursion_proteinclass(E, B).;false;false
2;false,true;interaction(G, A), interaction(G, G).;true;false
2;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
2;false,false,false;interaction(J, A), phenotype(J, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), complex(C, D).;true;true
3;false,false,true;complex(J, L).;false;false
3;false,false;interaction(A, J), enzyme(A, K).;true;true
3;true,false;interaction(A, F), complex(F, D).;false;true
3;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
3;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
3;false,false,false;interaction(M, A), recursion_proteinclass(M, B).;false;false
3;true,false,false;interaction(G, C), complex(A, H).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;false,false,true;interaction(G, I), interaction(I, J).;false;false
4;false,false;interaction(A, G), interaction(H, A).;true;true
4;true;interaction(C, D), interaction(D, C).;true;false
4;false,true;interaction(E, E), location(E, F).;false;false
4;false;interaction(E, A), recursion_proteinclass(E, B).;true;true
4;true,true;interaction(A, D).;false;false
4;false,false,false;phenotype(A, K), interaction(A, L).;false;false
5;;proteinclass(A, B) :- location(A, C), interaction(A, D).;true;true
5;false,false;interaction(A, J), phenotype(J, K).;false;true
5;false,true,true;complex(F, I), complex(H, I).;false;false
5;true;interaction(D, A), phenotype(D, E).;false;false
5;false,true;interaction(H, F), interaction(F, H).;true;true
5;false;interaction(F, A), location(F, G).;true;true
5;false,false,false;location(A, L).;false;false
5;false,true,false;recursion_proteinclass(F, B).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
6;false,false;complex(A, K), enzyme(A, L).;true;true
6;true,false;recursion_proteinclass(C, B), complex(A, F).;false;true
6;true;interaction(E, A), recursion_proteinclass(E, B).;false;true
6;false;interaction(A, I), complex(A, J).;false;true
6;false,false,false;interaction(N, A), phenotype(N, P).;false;false
6;true,false,false;phenotype(A, G), complex(A, H).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;false,false,true;interaction(A, I), recursion_proteinclass(J, B).;false;false
7;false,false;interaction(I, A), interaction(J, I).;true;true
7;false,true,true;complex(G, H).;false;false
7;true;complex(C, D).;false;false
7;false,true;location(G, E), recursion_proteinclass(G, B).;true;false
7;false;location(A, E), complex(A, F).;true;true
7;false,false,false;interaction(K, A), enzyme(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, A).;true;true
8;false,false,true;recursion_proteinclass(I, B), interaction(A, J).;false;false
8;false,false;interaction(H, A), interaction(I, H).;true;true
8;false,true,true;complex(A, F), phenotype(E, G).;false;false
8;true;interaction(A, C), recursion_proteinclass(C, B).;false;false
8;false,true;enzyme(E, D), recursion_proteinclass(E, B).;true;false
8;false;enzyme(A, D).;true;true
8;false,false,false;interaction(A, K), phenotype(K, L).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
9;false,false;enzyme(A, G).;true;true
9;false,true,true;complex(F, D).;false;false
9;false,true;interaction(F, E), recursion_proteinclass(F, B).;true;true
9;false;complex(A, D), interaction(E, A).;true;true
9;false,false,false;interaction(I, A), phenotype(I, J).;false;false
9;false,true,false;interaction(A, E).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.15814893509951225;  // std dev = 1,449, 10,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 0.04514039612070488;  // std dev = 0,397, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.3174005208121302;  // std dev = 0,463, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6436466213033009;  // std dev = 0,373, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.17438998154110005;  // std dev = 0,039, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.13048121489904563;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.1645919999712744;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then return 0.4892182307268638;  // std dev = 0,389, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, F), tweets(F, D) )
%   | | then return -0.0787749619442077;  // std dev = 0,505, 9,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.49520112805647165;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(H, I) )
%   | | | then return 0.11270981051511035;  // std dev = 0,676, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(A, D) )
%   | | then return 0.31598786270114804;  // std dev = 0,071, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.28690015153993476;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.4152037805196972;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.28690015153993487;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( follows(F, H), follows(H, I) )
%   | | | then return 0.019549075996527582;  // std dev = 0,940, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0.09357180478588718;  // std dev = 0,668, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, A) )
%   | then return 0.08786262982134092;  // std dev = 1,015, 15,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | else return 0.17066774111014466;  // std dev = 0,710, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.22612564700619733;  // std dev = 0,063, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.26873447690145424;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.061207632795672026;  // std dev = 1,086, 10,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.1448711762510749;  // std dev = 0,063, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.19938026673633003;  // std dev = 0,057, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.17646792903743402;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G) )
%   | | | then return 0.471912802468783;  // std dev = 0,336, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.17125056955239532;  // std dev = 0,093, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, H), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.10494710872997509;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.17408267266580718;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(C, B) )
%   | then if ( tweets(A, D) )
%   | | then return 0.2580845160430924;  // std dev = 0,416, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.1530656984866383;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B), follows(A, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1255565906911468;  // std dev = 0,049, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.18814839625954494;  // std dev = 0,053, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.12674282808747975;  // std dev = 0,052, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D) )
%   | | | then return 0.39298767624064856;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return -0.12152542839355988;  // std dev = 3,73e-09, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.2657286777251965;  // std dev = 0,162, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.08518238799450459;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.16129998152169858;  // std dev = 0,047, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.994253
   AUC PR    = 0.390646
   CLL	      = -0.140807
   Precision = 0.329208 at threshold = 0.5
   Recall    = 0.852564
   F1        = 0.475


Total learning time: 1.236 seconds
Total inference time: 26.572 seconds
AUC ROC: 0.994253


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.156234
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.83 seconds
Parameter learned model CLL: -0.156234


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, A)', 'false,false': 'follows(A, F), tweets(A, G)', 'false,true': 'follows(E, D)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'true': [0.0, 0, 6], 'false,false,false,false': [0.0, 3, 0], 'false,false,true,false': [1.449, 7, 3], 'false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false,false': 'follows(E, A)', 'false': 'follows(A, A)'}, {'false,false,true': [0.397, 8, 2], 'false,true': [0.0, 0, 0], 'false,false,false': [0.463, 2, 2], 'true,false': [0.0, 0, 1], 'true,true': [0.0, 0, 5]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false,false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,false': 'tweets(A, E)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,false,false': [0.0, 1, 0], 'true': [0.373, 0, 10], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.039, 7, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), tweets(C, D)', 'false,false,true': 'tweets(H, I)', 'false,false': 'follows(A, H)', 'true,false': 'follows(A, F), tweets(F, D)', 'true': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, G), recursion_accounttype(G, B)'}, {'false,false,true,true': [0.676, 2, 1], 'false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 0], 'true,false,true': [0.505, 8, 1], 'true,true': [0.389, 0, 7], 'true,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, H), follows(H, I)', 'false,false': 'follows(A, F), follows(G, A)', 'true': 'follows(C, D), follows(D, C)', 'false,true': 'follows(E, E)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'true,true': 'follows(A, D)', 'false,false,false': 'follows(A, J)'}, {'true,true,false': [0.0, 0, 2], 'false,false,true,true': [0.94, 8, 2], 'true,false': [0.0, 0, 1], 'false,false,false,true': [0.668, 2, 1], 'false,true,true': [0.0, 0, 0], 'true,true,true': [0.071, 0, 3], 'false,false,false,false': [0.0, 0, 0], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, A)'}, {'true,false': [0.71, 2, 3], 'false': [0.0, 0, 0], 'true,true': [1.015, 8, 7]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, A), recursion_accounttype(D, B)', 'true,false': 'recursion_accounttype(C, B), tweets(A, E)', 'true,false,false': 'tweets(A, F)'}, {'true,true': [0.063, 0, 6], 'true,false,false,false': [0.063, 3, 0], 'false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false,true': [1.086, 7, 3]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, H), recursion_accounttype(I, B)', 'false,false': 'follows(H, A), follows(I, H)', 'false,true,true': 'tweets(F, G)', 'true': 'tweets(C, D)', 'false,true': 'recursion_accounttype(F, B)', 'false': 'tweets(A, E)', 'false,false,false': 'follows(J, A)'}, {'false,true,true,true': [0.336, 0, 4], 'false,false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,true,false': [0.093, 7, 0], 'false,false,false,false': [0.0, 1, 0], 'false,false,true,false': [0.0, 2, 0], 'true,true': [0.057, 0, 5], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false,true': 'recursion_accounttype(F, B), follows(A, G)', 'false,false': 'follows(E, A), follows(F, E)', 'false,true': 'tweets(A, D)', 'false': 'recursion_accounttype(C, B)', 'false,false,false': 'follows(A, H)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.053, 2, 0], 'false,true,true': [0.416, 0, 9], 'true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,true,false': [0.049, 8, 0], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'recursion_accounttype(G, B)', 'false,true,true': 'tweets(F, D)', 'false,true': 'follows(F, E), recursion_accounttype(F, B)', 'false': 'tweets(A, D), follows(E, A)', 'false,false,false': 'follows(H, A)', 'false,true,false': 'follows(A, E)'}, {'false,true,true,true': [0.0, 0, 2], 'false,true,false,false': [0.0, 0, 0], 'false,false,false,true': [0.0, 2, 0], 'false,false,true': [0.162, 0, 2], 'false,true,false,true': [3.73e-09, 6, 0], 'true': [0.052, 0, 6], 'false,false,false,false': [0.047, 2, 0], 'false,true,true,false': [0.0, 0, 0]}]]
[{'': [-1.4802973661668753e-16, 0.20408163265306106], 'false,false,true': [nan, 0.20999999999999988], 'false,false': [0.20999999999999988, 0.0], 'false,true': [0.0, nan], 'false': [0.0, 0.1775147928994083], 'false,false,false': [nan, 0.0]}, {'': [7.401486830834377e-17, 0.18879579483886502], 'true': [0.0, 0.0], 'false,false': [0.1572748135115583, 0.21465140851642434], 'false': [nan, 0.18879579483886508]}, {'': [0.013883559734223727, 0.0004485054193086258], 'false,false,true': [nan, 0.00021228186403009417], 'false,false': [0.00021228186403009417, 0.00025856570183195593], 'false': [nan, 0.0004485054193086258], 'false,false,false': [0.0, 0.0]}, {'': [0.10479718659714157, 0.1415617712558509], 'false,false,true': [0.15217412634250296, nan], 'false,false': [0.15217412634250296, nan], 'true,false': [0.0283421504471674, nan], 'true': [0.021624868647084794, 0.0283421504471674], 'false': [0.0, 0.15217412634250296]}, {'': [0.002721972915822416, 0.10008365152314558], 'false,false,true': [0.08843337720202034, nan], 'false,false': [0.08843337720202034, 0.14867734366697308], 'true': [0.0012183767144613778, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, 0.10330849923430348], 'true,true': [0.0016921898811963487, 0.0], 'false,false,false': [0.14867734366697308, nan]}, {'': [0.07797186146310738, nan], 'true': [0.06865988024216062, 0.10076529028428434]}, {'': [0.0751912817168485, nan], 'true': [0.0006575794384179323, 0.09581386388819203], 'true,false': [0.0, 0.09853647624835243], 'true,false,false': [0.11790634755567364, 0.0013021804510313973]}, {'': [0.0006129213354060294, 0.0902540613583593], 'false,false,true': [nan, 0.0], 'false,false': [0.0, 0.0], 'false,true,true': [0.028289276528655843, nan], 'true': [0.0006480097326825196, 0.0], 'false,true': [0.028289276528655843, 0.0012306116112638257], 'false': [0.10679289841651611, 0.0010621613779390078], 'false,false,false': [nan, 0.0]}, {'': [nan, 0.0469130346545851], 'false,false,true': [nan, 0.00030133605182078305], 'false,false': [0.00030133605182078305, 0.0014208900292726132], 'false,true': [0.019239436070026046, 0.0], 'false': [0.018308098146709452, 0.0011520843072010789], 'false,false,false': [0.0014208900292726132, nan]}, {'': [0.00044287661737400324, 0.045227757333677746], 'false,false': [0.013176576476132185, 0.002004538861394357], 'false,true,false': [2.3129646346357427e-18, nan], 'false,true': [0.0, 2.3129646346357427e-18], 'false': [0.04963570028256225, 0.03935023004859048], 'false,false,false': [0.0, 0.0011121337006031497], 'false,true,true': [0.0, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;false,false;follows(A, F), tweets(A, G).;true;true
0;false;follows(D, A), recursion_accounttype(D, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(D, C).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false,false;follows(G, A).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(C, A), tweets(C, D).;true;true
3;false;follows(A, G), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), follows(D, C).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;true,true;follows(A, D).;true;true
6;;accounttype(A, B) :- follows(D, A), recursion_accounttype(D, B).;true;true
6;false,false;tweets(A, F).;true;true
6;false;recursion_accounttype(C, B), tweets(A, E).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D).;true;true
7;false,false;follows(H, A), follows(I, H).;true;true
7;false;tweets(A, E).;true;true
7;false,true;recursion_accounttype(F, B).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;true;tweets(A, D).;true;true
8;false;follows(E, A), follows(F, E).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false,true;follows(F, E), recursion_accounttype(F, B).;true;true
9;false,false;recursion_accounttype(G, B).;true;true
9;false;tweets(A, D), follows(E, A).;true;true
9;false,false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then return 0.15814893509951225;  // std dev = 0,458, 10,000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8082083441399728;  // std dev = 0,102, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.16221334521702105;  // std dev = 5,27e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.5516988708829955;  // std dev = 0,020, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.6616850686323439;  // std dev = 0,123, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, E) )
%   | then return -0.1413570267719246;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(F, A) )
%   | | then return -0.11231637819360639;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.4139891604128485;  // std dev = 0,024, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.013225415344082345;  // std dev = 0,265, 10,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.39698198977733146;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.10541133403349001;  // std dev = 0,536, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(A, D) )
%   | | then return 0.31712643277167346;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3222806796604971;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.3222806796604971;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.2987417829569915;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.5319434460271794;  // std dev = 0,019, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12801376790071556;  // std dev = 0,010, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.10574982495145553;  // std dev = 0,007, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.25449019582988663;  // std dev = 0,012, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.36033846035641137;  // std dev = 0,140, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11439286894188415;  // std dev = 0,003, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.09615984293634573;  // std dev = 0,007, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20605470538618098;  // std dev = 0,028, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( recursion_accounttype(D, B), tweets(A, E) )
%   | then return 0.28833059359301677;  // std dev = 0,103, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.10330635108300992;  // std dev = 0,003, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.08812192052375191;  // std dev = 0,006, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.17455137372383506;  // std dev = 0,019, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.17931700272597195;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then return 0.23212738181526094;  // std dev = 0,094, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0941220961060463;  // std dev = 0,003, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.07897045973775187;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.08594113908106486;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14854385741679804;  // std dev = 0,027, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.19660875191770197;  // std dev = 0,071, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.154375516735199;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), follows(G, F) )
%   | then return -0.08235141924663099;  // std dev = 0,005, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.0861159253468004;  // std dev = 0,009, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.13149477912362892;  // std dev = 0,024, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.18990672005637133;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.079118653737067;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.1452853539149246;  // std dev = 0,044, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.06800538562622888;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.07957921218357608;  // std dev = 0,009, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */


Results
   AUC ROC   = 0.99443
   AUC PR    = 0.382053
   CLL	      = -0.095679
   Precision = 0.323601 at threshold = 0.5
   Recall    = 0.852564
   F1        = 0.469136


Total learning time: 1.985 seconds
Total inference time: 22.169 seconds
AUC ROC: 0.99443


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.106108
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.717 seconds
Refined model CLL: -0.106108


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99443
   AUC PR    = 0.382053
   CLL	      = -0.095679
   Precision = 0.323601 at threshold = 0.5
   Recall    = 0.852564
   F1        = 0.469136


Total learning time: 4.768 seconds
Total inference time: 22.169 seconds
AUC ROC: 0.99443
Total revision time: 4.768
Best scored revision CLL: -0.106108


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:09:05
{'CLL': -0.095679, 'AUC ROC': 0.99443, 'F1': 0.469136, 'Recall': 0.852564, 'Precision': [0.323601, 0.5], 'Inference time': 22.169, 'Learning time': 4.768, 'AUC PR': 0.382053, 'parameter_10': {'CLL': -0.140807, 'AUC ROC': 0.994253, 'F1': 0.475, 'Recall': 0.852564, 'Precision': [0.329208, 0.5], 'Inference time': 26.572, 'Learning time': 1.236, 'AUC PR': 0.390646}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11231637819360639;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.11231637819360639;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.4175135841583099;  // std dev = 1,05e-08, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10159632948783627;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.1015963294878363;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3207118471601497;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.3207118471601496;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09269127618926097;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.09269127618926094;  // std dev = 2,63e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2551722425694894;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08518475138839687;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.08518475138839687;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20975771563253556;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07877675473109173;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07877675473109173;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17709649774527736;  // std dev = 5,27e-09, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07324622576333704;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07324622576333704;  // std dev = 1,86e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15274385809367097;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.15274385809367091;  // std dev = 3,73e-09, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.06842697784420272;  // std dev = 2,63e-09, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.06842697784420272;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.13400703000801117;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.13400703000801112;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0641918400820262;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.0641918400820262;  // std dev = 1,32e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.920157
   AUC PR    = 0.236742
   CLL	      = -0.085775
   Precision = 0.349727 at threshold = 0.5
   Recall    = 0.820513
   F1        = 0.490421


Total learning time: 2.383 seconds
Total inference time: 18.748 seconds
AUC ROC: 0.920157


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:09:26
{'CLL': -0.085775, 'AUC ROC': 0.920157, 'F1': 0.490421, 'Recall': 0.820513, 'Precision': [0.349727, 0.5], 'Inference time': 18.748, 'Learning time': 2.383, 'AUC PR': 0.236742}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.14185106490048777;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.910524
   AUC PR    = 0.246325
   CLL	      = -0.144191
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.78 seconds
Total inference time: 3.856 seconds
AUC ROC: 0.910524


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:09:31
{'CLL': -0.144191, 'AUC ROC': 0.910524, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.856, 'Learning time': 0.78, 'AUC PR': 0.246325}


Amount of data: 15
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false,false,true;interaction(A, A).;false;false
0;false,false;interaction(A, F), complex(A, G).;true;true
0;false,true;interaction(E, D).;false;false
0;false;interaction(D, A), recursion_proteinclass(D, B).;true;true
0;false,false,false;interaction(A, A).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true,true,false;enzyme(A, F).;false;false
1;false,false;interaction(G, A), enzyme(G, H).;true;true
1;false,false,true;enzyme(A, H).;false;false
1;true;phenotype(A, D), interaction(E, C).;true;false
1;false;interaction(A, A).;false;true
1;true,true;phenotype(C, D).;false;true
1;false,false,false;enzyme(A, I), location(A, J).;false;false
2;;proteinclass(A, B) :- enzyme(A, C), location(A, D).;true;true
2;false,false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
2;false,false;complex(A, H).;true;true
2;false,true,true;interaction(A, A).;false;false
2;true;enzyme(E, C), recursion_proteinclass(E, B).;false;false
2;false,true;interaction(G, A), interaction(G, G).;true;false
2;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
2;false,false,false;interaction(J, A), phenotype(J, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), complex(C, D).;true;true
3;false,false,true;complex(J, L).;false;false
3;false,false;interaction(A, J), enzyme(A, K).;true;true
3;true,false;interaction(A, F), complex(F, D).;false;true
3;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
3;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
3;false,false,false;interaction(M, A), recursion_proteinclass(M, B).;false;false
3;true,false,false;interaction(G, C), complex(A, H).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;false,false,true;interaction(G, I), interaction(I, J).;false;false
4;false,false;interaction(A, G), interaction(H, A).;true;true
4;true;interaction(C, D), interaction(D, C).;true;false
4;false,true;interaction(E, E), location(E, F).;false;false
4;false;interaction(E, A), recursion_proteinclass(E, B).;true;true
4;true,true;interaction(A, D).;false;false
4;false,false,false;phenotype(A, K), interaction(A, L).;false;false
5;;proteinclass(A, B) :- location(A, C), interaction(A, D).;true;true
5;false,false;interaction(A, J), phenotype(J, K).;false;true
5;false,true,true;complex(F, I), complex(H, I).;false;false
5;true;interaction(D, A), phenotype(D, E).;false;false
5;false,true;interaction(H, F), interaction(F, H).;true;true
5;false;interaction(F, A), location(F, G).;true;true
5;false,false,false;location(A, L).;false;false
5;false,true,false;recursion_proteinclass(F, B).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
6;false,false;complex(A, K), enzyme(A, L).;true;true
6;true,false;recursion_proteinclass(C, B), complex(A, F).;false;true
6;true;interaction(E, A), recursion_proteinclass(E, B).;false;true
6;false;interaction(A, I), complex(A, J).;false;true
6;false,false,false;interaction(N, A), phenotype(N, P).;false;false
6;true,false,false;phenotype(A, G), complex(A, H).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;false,false,true;interaction(A, I), recursion_proteinclass(J, B).;false;false
7;false,false;interaction(I, A), interaction(J, I).;true;true
7;false,true,true;complex(G, H).;false;false
7;true;complex(C, D).;false;false
7;false,true;location(G, E), recursion_proteinclass(G, B).;true;false
7;false;location(A, E), complex(A, F).;true;true
7;false,false,false;interaction(K, A), enzyme(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, A).;true;true
8;false,false,true;recursion_proteinclass(I, B), interaction(A, J).;false;false
8;false,false;interaction(H, A), interaction(I, H).;true;true
8;false,true,true;complex(A, F), phenotype(E, G).;false;false
8;true;interaction(A, C), recursion_proteinclass(C, B).;false;false
8;false,true;enzyme(E, D), recursion_proteinclass(E, B).;true;false
8;false;enzyme(A, D).;true;true
8;false,false,false;interaction(A, K), phenotype(K, L).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
9;false,false;enzyme(A, G).;true;true
9;false,true,true;complex(F, D).;false;false
9;false,true;interaction(F, E), recursion_proteinclass(F, B).;true;true
9;false;complex(A, D), interaction(E, A).;true;true
9;false,false,false;interaction(I, A), phenotype(I, J).;false;false
9;false,true,false;interaction(A, E).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.024815601766178853;  // std dev = 1,291, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.1438632208137979;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0.13615456626746614;  // std dev = 0,439, 20,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | else return -0.14489878247426094;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6464372542441185;  // std dev = 0,461, 15,000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.16097186183526305;  // std dev = 0,038, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.1794641386603785;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(C, D) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.4860039663032053;  // std dev = 0,496, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(F, A), tweets(F, D) )
%   | | then return -0.14531087595193867;  // std dev = 0,019, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(C, G), tweets(A, H) )
%   | | | then return -0.1494100168525811;  // std dev = 0,011, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.27547260290474557;  // std dev = 0,608, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(J, A) )
%   | | then if ( tweets(J, K) )
%   | | | then return -0.11095185296580158;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then if ( follows(D, A) )
%   | | then return 0.3247142760883019;  // std dev = 0,158, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.28698682947394727;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.28698682947394727;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.28698682947394727;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( follows(H, F), follows(I, H) )
%   | | | then return -0.020471183636753536;  // std dev = 0,985, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(J, A) )
%   | | | then return -0.10047057241571378;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.22716787128115432;  // std dev = 0,788, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, C) )
%   | then return 0.08809662227497139;  // std dev = 1,182, 23,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | else return 0.07012622844366011;  // std dev = 0,229, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.09310715639458726;  // std dev = 0,627, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.5916775156800886;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.21309924318160306;  // std dev = 0,010, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.3231013250136423;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.006263270003918144;  // std dev = 0,952, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.1446576615017734;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(G, A), tweets(A, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.39255537750576647;  // std dev = 0,222, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1809255942574555;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.24904750718914206;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.19698329550755198;  // std dev = 0,096, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.17712134142420388;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G) )
%   | | | then return 0.42928629305102417;  // std dev = 0,381, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.13089144365931255;  // std dev = 0,042, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(H, A), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.14710205409428034;  // std dev = 0,067, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(C, B) )
%   | then if ( tweets(A, D) )
%   | | then return 0.22889987239917073;  // std dev = 0,465, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.15508933969760674;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(F, B), follows(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12261295713017333;  // std dev = 0,066, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.08631314864420186;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12210398819254192;  // std dev = 0,038, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D) )
%   | | | then return 0.3068810680267117;  // std dev = 0,266, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, A) )
%   | | | then return -0.10546644138908706;  // std dev = 0,000364, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.04692293117550639;  // std dev = 0,243, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, H) )
%   | | | then return -0.11660342092072848;  // std dev = 0,056, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07974482827660873;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.993139
   AUC PR    = 0.298935
   CLL	      = -0.140306
   Precision = 0.33584 at threshold = 0.5
   Recall    = 0.858974
   F1        = 0.482883


Total learning time: 1.621 seconds
Total inference time: 24.353 seconds
AUC ROC: 0.993139


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.144565
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.771 seconds
Parameter learned model CLL: -0.144565


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, A)', 'false,false': 'follows(F, A), tweets(A, G)', 'false,true': 'follows(D, E)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 1], 'true': [0.0, 0, 10], 'false,false,false,false': [1.195, 5, 2], 'false,false,true,false': [1.291, 10, 2], 'false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false,false': 'follows(A, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.439, 14, 6], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 1, 0], 'true,false': [0.0, 0, 1], 'true,true': [0.0, 0, 8]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false,false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,false': 'tweets(A, E)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, G)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 4, 0], 'false,false,false,false': [0.0, 0, 0], 'true': [0.461, 0, 15], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.038, 11, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), tweets(C, D)', 'false,false,true': 'tweets(J, K)', 'false,false': 'follows(J, A)', 'true,false': 'follows(F, A), tweets(F, D)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'false': 'follows(I, A), recursion_accounttype(I, B)', 'true,false,false': 'follows(C, G), tweets(A, H)'}, {'false,false,true,true': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0], 'true,false,true': [0.019, 11, 0], 'false,true': [0.0, 0, 0], 'true,false,false,false': [0.608, 1, 1], 'true,false,false,true': [0.011, 2, 0], 'true,true': [0.496, 0, 14], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(H, F), follows(I, H)', 'false,false': 'follows(F, A), follows(A, G)', 'true': 'follows(D, C), follows(C, D)', 'false,true': 'follows(E, E)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'true,true': 'follows(D, A)', 'false,false,false': 'follows(J, A)'}, {'true,true,false': [0.0, 0, 2], 'false,false,true,true': [0.985, 12, 2], 'true,false': [0.0, 0, 1], 'false,false,false,true': [0.0, 1, 0], 'false,true,true': [0.0, 0, 0], 'true,true,true': [0.158, 0, 7], 'false,false,false,false': [0.788, 2, 2], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false,true,true': 'tweets(D, F), tweets(E, F)', 'true': 'follows(A, C)', 'false,true': 'follows(D, E), follows(E, D)', 'false': 'follows(A, D)', 'false,true,false': 'recursion_accounttype(D, B)'}, {'false,true,true,true': [0.627, 2, 2], 'false,true,false,false': [0.0, 0, 1], 'false,false': [0.0, 0, 0], 'true,false': [0.229, 1, 1], 'false,true,false,true': [0.0, 0, 0], 'true,true': [1.182, 12, 11], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false,false,true': 'recursion_accounttype(J, B)', 'false,false': 'tweets(A, I)', 'true,false': 'recursion_accounttype(C, B), tweets(A, E)', 'true': 'follows(A, D), recursion_accounttype(D, B)', 'false': 'follows(G, A), tweets(A, H)', 'false,false,false': 'follows(A, K)', 'true,false,false': 'tweets(A, F)'}, {'false,false,true,true': [0.222, 0, 3], 'true,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 1, 0], 'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 3, 0], 'true,false,false,true': [0.952, 10, 2], 'true,true': [0.01, 0, 8], 'false,false,true,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(H, A), recursion_accounttype(I, B)', 'false,false': 'follows(A, H), follows(H, I)', 'false,true,true': 'tweets(F, G)', 'true': 'tweets(C, D)', 'false,true': 'recursion_accounttype(F, B)', 'false': 'tweets(A, E)'}, {'false,true,true,true': [0.381, 0, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false,true,false': [0.042, 11, 0], 'false,false,true,false': [0.067, 4, 0], 'true,true': [0.096, 0, 9], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false,true': 'recursion_accounttype(F, B), follows(G, A)', 'false,false': 'follows(A, E), follows(E, F)', 'false,true': 'tweets(A, D)', 'false': 'recursion_accounttype(C, B)', 'false,false,false': 'follows(H, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 1, 0], 'false,true,true': [0.465, 0, 14], 'true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,true,false': [0.066, 14, 0], 'false,true,false': [0.0, 0, 1]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'recursion_accounttype(G, B)', 'false,true,true': 'tweets(F, D)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false': 'tweets(A, D), follows(A, E)', 'false,false,false': 'follows(A, H)', 'false,true,false': 'follows(E, A)'}, {'false,true,true,true': [0.266, 0, 5], 'false,true,false,false': [0.243, 1, 1], 'false,false,false,true': [0.056, 4, 0], 'false,false,true': [0.0, 0, 0], 'false,true,false,true': [0.000364, 9, 0], 'true': [0.038, 0, 9], 'false,false,false,false': [0.0, 1, 0], 'false,true,true,false': [0.0, 0, 0]}]]
[{'': [-8.881784197001253e-17, 0.18750000000000003], 'false,false,true': [nan, 0.13888888888888892], 'false,false': [0.13888888888888892, 0.20408163265306123], 'false,true': [0.0, nan], 'false': [0.0, 0.16620498614958432], 'false,false,false': [nan, 0.20408163265306126]}, {'': [0.0, 0.18713403761107614], 'true': [0.0, 0.0], 'false,false': [0.19272926402310903, 0.0], 'false': [nan, 0.18713403761107614]}, {'': [0.014147157158948194, 0.00016438257670232289], 'false,false,true': [nan, 0.00013296757855908346], 'false,false': [0.00013296757855908346, 0.0], 'false': [nan, 0.00016438257670233029], 'false,false,false': [0.0, nan]}, {'': [0.1146513287214533, 0.0], 'false,false,true': [0.0, nan], 'false,false': [0.0, nan], 'true,false': [3.192458474163778e-05, 0.13761426297053447], 'true': [0.017590436345330307, 0.04520892243195978], 'false': [nan, 0.0], 'true,false,false': [5.714087174503099e-05, 0.18490876478339935]}, {'': [0.002789786046956411, 0.09314902111403159], 'false,false,true': [0.06924640272459719, nan], 'false,false': [0.06924640272459719, 0.14147112277277163], 'true': [0.0030136577667738943, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, 0.0946837071095706], 'true,true': [0.0035584005700974703, 0.0], 'false,false,false': [0.0, 0.15536951350834338]}, {'': [0.05805213625052719, 0.11830539427793334], 'false,true,true': [0.09816726221580184, nan], 'true': [0.06079577144898674, 0.02620323121814613], 'false,true': [0.09816726221580184, 0.0], 'false': [0.11830539427793334, nan], 'false,true,false': [nan, 0.0]}, {'': [0.056257243266115156, 0.09893499415477874], 'false,false,true': [0.01647534659853624, 0.0], 'false,false': [0.07402158963161895, 0.0], 'true,false': [0.0, 0.06351077590224628], 'true': [1.3468009418968196e-05, 0.06927214224990877], 'false': [nan, 0.09893499415477874], 'false,false,false': [0.0, nan], 'true,false,false': [0.07555786835819554, -4.625929269271485e-18]}, {'': [0.0009632857676301121, 0.06737299764853277], 'false,false,true': [nan, 0.0011337293558498635], 'false,false': [0.0011337293558498635, nan], 'false,true,true': [0.029083954210171202, nan], 'true': [0.0010308677975880975, 0.0], 'false,true': [0.029083954210171202, 0.0001596452064321352], 'false': [0.07661626645301214, 0.0011337293558498635]}, {'': [nan, 0.03718747887891493], 'false,false,true': [nan, 0.0003149488233077686], 'false,false': [0.0003149488233077686, 0.0], 'false,true': [0.015463713677502402, 0.0], 'false': [0.014771785771569523, 0.00037594096995682835], 'false,false,false': [0.0, nan]}, {'': [0.00016264664294175625, 0.036580879938644464], 'false,false': [nan, 0.0008385020066546331], 'false,true,true': [0.014115457078211269, nan], 'false,true': [0.014115457078211269, 0.008838213036100368], 'false': [0.04227309777241659, 0.000838502006654629], 'false,false,false': [0.0007764163379772558, 0.0], 'false,true,false': [1.4733962707310274e-08, 0.029609861047022207]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, D), recursion_accounttype(D, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;true;follows(C, D).;true;true
1;false;follows(A, E).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C), tweets(C, D).;true;true
3;true;follows(C, E), recursion_accounttype(E, B).;true;true
3;true,false;follows(F, A), tweets(F, D).;true;true
3;true,false,false;follows(C, G), tweets(A, H).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false,false;follows(F, A), follows(A, G).;true;true
4;true;follows(D, C), follows(C, D).;true;true
4;false;follows(A, E), recursion_accounttype(E, B).;true;true
4;true,true;follows(D, A).;true;true
4;false,false,false;follows(J, A).;true;true
5;;accounttype(A, B) :- follows(C, A).;true;true
5;false;follows(D, E), follows(E, D).;true;true
6;;accounttype(A, B) :- follows(C, A).;true;true
6;true,false;recursion_accounttype(C, B), tweets(A, E).;true;true
6;true;follows(A, D), recursion_accounttype(D, B).;true;true
6;false,true;recursion_accounttype(J, B).;true;true
6;false;tweets(A, I).;true;true
6;true,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D).;true;true
7;false;tweets(A, E).;true;true
7;false,true;recursion_accounttype(F, B).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;true;tweets(A, D).;true;true
8;false;follows(A, E), follows(E, F).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
9;false,false;follows(A, H).;true;true
9;false;tweets(A, D), follows(A, E).;true;true
9;false,true,false;follows(E, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.3581489350995122;  // std dev = 1,000, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.7194734122109545;  // std dev = 0,000, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7194734122109545;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7839827341602318;  // std dev = 0,113, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.14219040249448928;  // std dev = 0,082, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.15460362169676048;  // std dev = 0,059, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.544712357951482;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6469421363870659;  // std dev = 0,105, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, E) )
%   | then return -0.12456960221821232;  // std dev = 0,023, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.13557258626343094;  // std dev = 0,053, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(C, D) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.41751358415830986;  // std dev = 2,58e-08, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4096871341001678;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.48839071107377996;  // std dev = 0,109, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), tweets(G, D) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.10420814815279704;  // std dev = 0,039, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.1106063617278233;  // std dev = 0,034, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(C, I), tweets(A, J) )
%   | | | then return -0.14707501377204588;  // std dev = 0,009, 2,000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return 0.17620153422233154;  // std dev = 0,462, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else return -0.10048336949847292;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then if ( follows(D, A) )
%   | | then return 0.31787075530415654;  // std dev = 0,004, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.3247512055908418;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.2863954938393497;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.006326344878094552;  // std dev = 0,647, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.10022165256684508;  // std dev = 0,031, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.09175862597177907;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.13304321893779936;  // std dev = 0,579, 4,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.25555820801182944;  // std dev = 0,000244, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.2506763018310643;  // std dev = 0,009, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return -0.005592920649865288;  // std dev = 0,196, 11,000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.0897735398375657;  // std dev = 0,029, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(G, H), follows(H, G) )
%   | then return 0.13274918111927278;  // std dev = 0,576, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.21039078677901343;  // std dev = 0,000974, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.20341619825059365;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.011009794907807189;  // std dev = 0,653, 12,000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.08439002830793603;  // std dev = 0,026, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, G) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.30832532830899867;  // std dev = 0,132, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.16939885547049927;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else return -0.21584716797520542;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.17644298695400135;  // std dev = 0,002, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.177362188168516;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then return 0.3138063021134118;  // std dev = 0,213, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.09898384104115285;  // std dev = 0,021, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.10397122528420882;  // std dev = 0,093, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.15298332650805854;  // std dev = 0,000332, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.150862384601922;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2527612620583658;  // std dev = 0,184, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.1526965602448902;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(H, A), tweets(H, I) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.08494250042128056;  // std dev = 0,033, 8,000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.07096386398880532;  // std dev = 0,023, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.13760216752819351;  // std dev = 0,039, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07018346980373755;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13052244424541315;  // std dev = 0,011, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.1992191560479291;  // std dev = 0,159, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(E, A) )
%   | | | then return -0.08078061440786988;  // std dev = 0,036, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.04676361689284283;  // std dev = 0,235, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(A, G) )
%   | | then return -0.0869194940332327;  // std dev = 0,074, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06573934019525039;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.993263
   AUC PR    = 0.29712
   CLL	      = -0.120246
   Precision = 0.333333 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.478261


Total learning time: 6.265 seconds
Total inference time: 47.407 seconds
AUC ROC: 0.993263


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.117633
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.028 seconds
Refined model CLL: -0.117633


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993263
   AUC PR    = 0.29712
   CLL	      = -0.120246
   Precision = 0.333333 at threshold = 0.5
   Recall    = 0.846154
   F1        = 0.478261


Total learning time: 9.685 seconds
Total inference time: 47.407 seconds
AUC ROC: 0.993263
Total revision time: 9.685
Best scored revision CLL: -0.117633


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:10:53
{'CLL': -0.120246, 'AUC ROC': 0.993263, 'F1': 0.478261, 'Recall': 0.846154, 'Precision': [0.333333, 0.5], 'parameter_15': {'CLL': -0.140306, 'AUC ROC': 0.993139, 'F1': 0.482883, 'Recall': 0.858974, 'Precision': [0.33584, 0.5], 'Inference time': 24.353, 'Learning time': 1.621, 'AUC PR': 0.298935}, 'Inference time': 47.407, 'Learning time': 9.685, 'AUC PR': 0.29712}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 2,98e-08, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.12544463852839138;  // std dev = 5,27e-09, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.22373365448410584;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.3927941835770488;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.11231637819360638;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.1888683221574974;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.32092546969114216;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.4175135841583099;  // std dev = 2,11e-08, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.49569760437698335;  // std dev = 0,192, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | then return 0.6084265077814611;  // std dev = 0,347, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.15477080728570367;  // std dev = 0,086, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.179404609855487;  // std dev = 0,225, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, A) )
%   | then return 0.31791368897605904;  // std dev = 0,015, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.3858982972595504;  // std dev = 0,181, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | then return 0.47096023616081956;  // std dev = 0,352, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1365634125382756;  // std dev = 0,078, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.15603664857811306;  // std dev = 0,202, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, A) )
%   | then return 0.25327212591884113;  // std dev = 0,013, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.30294787318493954;  // std dev = 0,164, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | then return 0.36579499621024986;  // std dev = 0,319, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1219648621582855;  // std dev = 0,071, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.13766865064550457;  // std dev = 0,183, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(C, D) )
%   | then return 0.20738900932504478;  // std dev = 0,017, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2473465056753115;  // std dev = 0,144, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | then return 0.2908622154616057;  // std dev = 0,278, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11003766668786015;  // std dev = 0,066, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.12292477371639535;  // std dev = 0,167, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(C, A) )
%   | then return 0.17535482028941898;  // std dev = 0,015, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.20565090863743232;  // std dev = 0,127, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | then return 0.2377314159083523;  // std dev = 0,241, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10013375996269165;  // std dev = 0,061, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.11087186420506182;  // std dev = 0,153, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.15083820543827828;  // std dev = 0,017, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.17618423477493872;  // std dev = 0,112, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | then return 0.19924336698664594;  // std dev = 0,210, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.09179367528109725;  // std dev = 0,056, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.10086118841350637;  // std dev = 0,141, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.1325235095862474;  // std dev = 0,015, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.15267331567314432;  // std dev = 0,100, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, E), follows(A, F) )
%   | then if ( tweets(G, E), recursion_accounttype(G, B) )
%   | | then return 0.17056243953797767;  // std dev = 0,185, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08468409948242132;  // std dev = 0,053, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.09243099666820638;  // std dev = 0,130, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.949563
   AUC PR    = 0.34999
   CLL	      = -0.135392
   Precision = 0.343653 at threshold = 0.5
   Recall    = 0.711538
   F1        = 0.463466


Total learning time: 5.097 seconds
Total inference time: 69.133 seconds
AUC ROC: 0.949563


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:12:08
{'CLL': -0.135392, 'AUC ROC': 0.949563, 'F1': 0.463466, 'Recall': 0.711538, 'Precision': [0.343653, 0.5], 'Inference time': 69.133, 'Learning time': 5.097, 'AUC PR': 0.34999}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.2581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.4581489350995122;  // std dev = 1,095, 5,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */


Results
   AUC ROC   = 0.880547
   AUC PR    = 0.262967
   CLL	      = -0.188632
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.887 seconds
Total inference time: 2.227 seconds
AUC ROC: 0.880547


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:12:11
{'CLL': -0.188632, 'AUC ROC': 0.880547, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 2.227, 'Learning time': 0.887, 'AUC PR': 0.262967}


Amount of data: 20
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false,false,true;interaction(A, A).;false;false
0;false,false;interaction(A, F), complex(A, G).;true;true
0;false,true;interaction(E, D).;false;false
0;false;interaction(D, A), recursion_proteinclass(D, B).;true;true
0;false,false,false;interaction(A, A).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true,true,false;enzyme(A, F).;false;false
1;false,false;interaction(G, A), enzyme(G, H).;true;true
1;false,false,true;enzyme(A, H).;false;false
1;true;phenotype(A, D), interaction(E, C).;true;false
1;false;interaction(A, A).;false;true
1;true,true;phenotype(C, D).;false;true
1;false,false,false;enzyme(A, I), location(A, J).;false;false
2;;proteinclass(A, B) :- enzyme(A, C), location(A, D).;true;true
2;false,false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
2;false,false;complex(A, H).;true;true
2;false,true,true;interaction(A, A).;false;false
2;true;enzyme(E, C), recursion_proteinclass(E, B).;false;false
2;false,true;interaction(G, A), interaction(G, G).;true;false
2;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
2;false,false,false;interaction(J, A), phenotype(J, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), complex(C, D).;true;true
3;false,false,true;complex(J, L).;false;false
3;false,false;interaction(A, J), enzyme(A, K).;true;true
3;true,false;interaction(A, F), complex(F, D).;false;true
3;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
3;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
3;false,false,false;interaction(M, A), recursion_proteinclass(M, B).;false;false
3;true,false,false;interaction(G, C), complex(A, H).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;false,false,true;interaction(G, I), interaction(I, J).;false;false
4;false,false;interaction(A, G), interaction(H, A).;true;true
4;true;interaction(C, D), interaction(D, C).;true;false
4;false,true;interaction(E, E), location(E, F).;false;false
4;false;interaction(E, A), recursion_proteinclass(E, B).;true;true
4;true,true;interaction(A, D).;false;false
4;false,false,false;phenotype(A, K), interaction(A, L).;false;false
5;;proteinclass(A, B) :- location(A, C), interaction(A, D).;true;true
5;false,false;interaction(A, J), phenotype(J, K).;false;true
5;false,true,true;complex(F, I), complex(H, I).;false;false
5;true;interaction(D, A), phenotype(D, E).;false;false
5;false,true;interaction(H, F), interaction(F, H).;true;true
5;false;interaction(F, A), location(F, G).;true;true
5;false,false,false;location(A, L).;false;false
5;false,true,false;recursion_proteinclass(F, B).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
6;false,false;complex(A, K), enzyme(A, L).;true;true
6;true,false;recursion_proteinclass(C, B), complex(A, F).;false;true
6;true;interaction(E, A), recursion_proteinclass(E, B).;false;true
6;false;interaction(A, I), complex(A, J).;false;true
6;false,false,false;interaction(N, A), phenotype(N, P).;false;false
6;true,false,false;phenotype(A, G), complex(A, H).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;false,false,true;interaction(A, I), recursion_proteinclass(J, B).;false;false
7;false,false;interaction(I, A), interaction(J, I).;true;true
7;false,true,true;complex(G, H).;false;false
7;true;complex(C, D).;false;false
7;false,true;location(G, E), recursion_proteinclass(G, B).;true;false
7;false;location(A, E), complex(A, F).;true;true
7;false,false,false;interaction(K, A), enzyme(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, A).;true;true
8;false,false,true;recursion_proteinclass(I, B), interaction(A, J).;false;false
8;false,false;interaction(H, A), interaction(I, H).;true;true
8;false,true,true;complex(A, F), phenotype(E, G).;false;false
8;true;interaction(A, C), recursion_proteinclass(C, B).;false;false
8;false,true;enzyme(E, D), recursion_proteinclass(E, B).;true;false
8;false;enzyme(A, D).;true;true
8;false,false,false;interaction(A, K), phenotype(K, L).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
9;false,false;enzyme(A, G).;true;true
9;false,true,true;complex(F, D).;false;false
9;false,true;interaction(F, E), recursion_proteinclass(F, B).;true;true
9;false;complex(A, D), interaction(E, A).;true;true
9;false,false,false;interaction(I, A), phenotype(I, J).;false;false
9;false,true,false;interaction(A, E).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.001006077956655051;  // std dev = 1,309, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.19148226843284566;  // std dev = 1,633, 12,000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then return 0.1330280074840746;  // std dev = 0,441, 27,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | else return -0.14197357824080592;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6492875226987769;  // std dev = 0,540, 20,000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.162164064602526;  // std dev = 0,056, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.18610963660076357;  // std dev = 5,27e-09, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(C, D) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then return 0.493330353063575;  // std dev = 0,600, 19,000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(F, A), tweets(F, D) )
%   | | then return -0.1444858314647508;  // std dev = 0,036, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(C, G), tweets(A, H) )
%   | | | then return -0.15467677541511318;  // std dev = 0,020, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12440644117819015;  // std dev = 0,700, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(J, A) )
%   | | then if ( tweets(J, K) )
%   | | | then return -0.10879282205642557;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then if ( follows(D, A) )
%   | | then return 0.3143330882035067;  // std dev = 0,165, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.28490894972073777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.28490894972073777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.28490894972073777;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( follows(H, F), follows(I, H) )
%   | | | then return -0.03827582664374179;  // std dev = 1,004, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(J, A) )
%   | | | then return -0.09868477424587976;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.2216229406626979;  // std dev = 1,085, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, C) )
%   | then return 0.08227728664353294;  // std dev = 1,262, 29,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=14 */
%   | else return 0.07015617804448496;  // std dev = 0,227, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, D) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.17973197922430173;  // std dev = 0,876, 7,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2011053463683287;  // std dev = 0,589, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2133287130527852;  // std dev = 0,009, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.32510581685930584;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.01827203495046797;  // std dev = 0,972, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.14652955909682502;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(G, A), tweets(A, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.4338289093891044;  // std dev = 0,279, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.21667488049796046;  // std dev = 0,043, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.11990029583468609;  // std dev = 0,513, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.19389944251130767;  // std dev = 0,101, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.17796745196591413;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G) )
%   | | | then return 0.3972974844327803;  // std dev = 0,467, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.13427351647678654;  // std dev = 0,104, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(H, A), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.0548872306536658;  // std dev = 0,570, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(C, B) )
%   | then if ( tweets(A, D) )
%   | | then return 0.22452394505188236;  // std dev = 0,529, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.3109200673735011;  // std dev = 0,220, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(F, B), follows(G, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.12583855083339096;  // std dev = 0,143, 18,000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.08370815372558262;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return -0.1913182072244959;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11980245170816184;  // std dev = 0,046, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D) )
%   | | | then return 0.3001932920013816;  // std dev = 0,298, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, A) )
%   | | | then return -0.09904139077760986;  // std dev = 0,000864, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.02899848249318092;  // std dev = 0,398, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39068918077706105;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.1345237257170617;  // std dev = 0,109, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07750734639167305;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.993491
   AUC PR    = 0.307872
   CLL	      = -0.139437
   Precision = 0.34192 at threshold = 0.5
   Recall    = 0.935897
   F1        = 0.500858


Total learning time: 1.463 seconds
Total inference time: 24.589 seconds
AUC ROC: 0.993491


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.152153
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.773 seconds
Parameter learned model CLL: -0.152153


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, A)', 'false,false': 'follows(F, A), tweets(A, G)', 'false,true': 'follows(D, E)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'true': [0.0, 0, 12], 'false,false,false,false': [1.633, 8, 4], 'false,false,true,false': [1.309, 12, 2], 'false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false,false': 'follows(A, E)', 'false': 'follows(A, A)'}, {'false,false,true': [0.441, 19, 8], 'false,true': [0.0, 0, 0], 'false,false,false': [0.0, 1, 0], 'true,false': [0.0, 0, 1], 'true,true': [0.0, 0, 11]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false,false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,false': 'tweets(A, E)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, G)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [5.27e-09, 5, 0], 'false,false,false,false': [0.0, 0, 0], 'true': [0.54, 0, 20], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.056, 15, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), tweets(C, D)', 'false,false,true': 'tweets(J, K)', 'false,false': 'follows(J, A)', 'true,false': 'follows(F, A), tweets(F, D)', 'true': 'follows(C, E), recursion_accounttype(E, B)', 'false': 'follows(I, A), recursion_accounttype(I, B)', 'true,false,false': 'follows(C, G), tweets(A, H)'}, {'false,false,true,true': [0.0, 1, 0], 'false,false,false': [0.0, 0, 0], 'true,false,true': [0.036, 14, 0], 'false,true': [0.0, 0, 0], 'true,false,false,false': [0.7, 2, 1], 'true,false,false,true': [0.02, 3, 0], 'true,true': [0.6, 0, 19], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(H, F), follows(I, H)', 'false,false': 'follows(F, A), follows(A, G)', 'true': 'follows(D, C), follows(C, D)', 'false,true': 'follows(E, E)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'true,true': 'follows(D, A)', 'false,false,false': 'follows(J, A)'}, {'true,true,false': [0.0, 0, 2], 'false,false,true,true': [1.004, 15, 2], 'true,false': [0.0, 0, 1], 'false,false,false,true': [0.0, 1, 0], 'false,true,true': [0.0, 0, 0], 'true,true,true': [0.165, 0, 9], 'false,false,false,false': [1.085, 4, 4], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 2]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false,true,true': 'tweets(D, F), tweets(E, F)', 'true': 'follows(A, C)', 'false,true': 'follows(D, E), follows(E, D)', 'false': 'follows(A, D)', 'false,true,false': 'recursion_accounttype(D, B)'}, {'false,true,true,true': [0.876, 3, 4], 'false,true,false,false': [0.589, 1, 1], 'false,false': [0.0, 0, 0], 'true,false': [0.227, 1, 1], 'false,true,false,true': [0.0, 0, 0], 'true,true': [1.262, 15, 14], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false,false,true': 'recursion_accounttype(J, B)', 'false,false': 'tweets(A, I)', 'true,false': 'recursion_accounttype(C, B), tweets(A, E)', 'true': 'follows(A, D), recursion_accounttype(D, B)', 'false': 'follows(G, A), tweets(A, H)', 'false,false,false': 'follows(A, K)', 'true,false,false': 'tweets(A, F)'}, {'false,false,true,true': [0.279, 0, 4], 'true,false,true': [0.0, 0, 2], 'false,false,false,true': [0.513, 1, 1], 'false,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'true,false,false,false': [0.0, 4, 0], 'true,false,false,true': [0.972, 12, 2], 'true,true': [0.009, 0, 11], 'false,false,true,false': [0.043, 3, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false,true': 'follows(H, A), recursion_accounttype(I, B)', 'false,false': 'follows(A, H), follows(H, I)', 'false,true,true': 'tweets(F, G)', 'true': 'tweets(C, D)', 'false,true': 'recursion_accounttype(F, B)', 'false': 'tweets(A, E)'}, {'false,true,true,true': [0.467, 0, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false,true,false': [0.104, 15, 0], 'false,false,true,false': [0.57, 5, 1], 'true,true': [0.101, 0, 11], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false,true': 'recursion_accounttype(F, B), follows(G, A)', 'false,false': 'follows(A, E), follows(E, F)', 'false,true': 'tweets(A, D)', 'false': 'recursion_accounttype(C, B)', 'false,false,false': 'follows(H, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 1, 0], 'false,true,true': [0.529, 0, 18], 'true': [0.0, 0, 0], 'false,false,false,false': [0.0, 1, 0], 'false,false,true,false': [0.143, 18, 0], 'false,true,false': [0.22, 0, 2]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false': 'recursion_accounttype(G, B)', 'false,true,true': 'tweets(F, D)', 'false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false': 'tweets(A, D), follows(A, E)', 'false,false,false': 'follows(A, H)', 'false,true,false': 'follows(E, A)'}, {'false,true,true,true': [0.298, 0, 6], 'false,true,false,false': [0.398, 3, 1], 'false,false,false,true': [0.109, 5, 0], 'false,false,true': [0.0, 0, 1], 'false,true,false,true': [0.000864, 11, 0], 'true': [0.046, 0, 12], 'false,false,false,false': [0.0, 1, 0], 'false,true,true,false': [0.0, 0, 0]}]]
[{'': [-1.4802973661668753e-16, 0.2040816326530611], 'false,false,true': [nan, 0.12244897959183677], 'false,false': [0.12244897959183677, 0.22222222222222218], 'false,true': [0.0, nan], 'false': [0.0, 0.17751479289940844], 'false,false,false': [nan, 0.22222222222222207]}, {'': [0.0, 0.19014406191664837], 'true': [-8.074349270001139e-17, 0.0], 'false,false': [0.194485510574828, 0.0], 'false': [nan, 0.19014406191664837]}, {'': [0.014569546418425094, 0.0002662160566274274], 'false,false,true': [nan, 0.00021160713758923514], 'false,false': [0.00021160713758923514, 5.551115123125783e-18], 'false': [nan, 0.0002662160566274385], 'false,false,false': [5.551115123125783e-18, nan]}, {'': [0.1162493215839892, 0.0], 'false,false,true': [0.0, nan], 'false,false': [0.0, nan], 'true,false': [9.074056297699624e-05, 0.10109008438426446], 'true': [0.018921157785732712, 0.03390417852639679], 'false': [nan, 0.0], 'true,false,false': [0.00013147249807009265, 0.16310497537842653]}, {'': [0.002435006040337029, 0.0958153058706246], 'false,false,true': [0.05924044507243325, nan], 'false,false': [0.05924044507243325, 0.1408547727374125], 'true': [0.0026080725853527224, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, 0.09887931612822044], 'true,true': [0.0030302297390861024, 0.0], 'false,false,false': [0.0, 0.14706194908181633]}, {'': [0.05306724413649575, 0.12385152759953029], 'false,true,false': [nan, 0.17362500282425888], 'true': [0.0549431243751239, 0.025729538194567508], 'false,true': [0.10952901893971852, 0.17362500282425888], 'false': [0.12385152759953029, nan], 'false,true,true': [0.10952901893971852, nan]}, {'': [0.05151992349553401, 0.11893432144456807], 'false,false,true': [0.019435146017563104, 0.000607110290048507], 'false,false': [0.11499582800963269, 0.13175856352508392], 'true,false': [0.0, 0.05530354560335289], 'true': [7.191903132616498e-06, 0.0622196852658032], 'false': [nan, 0.11893432144456807], 'false,false,false': [0.13175856352508392, nan], 'true,false,false': [0.06744900474395933, 0.0]}, {'': [0.0008650501339866797, 0.06930256479771726], 'false,false,true': [nan, 0.05408956809507456], 'false,false': [0.05408956809507454, nan], 'false,true,true': [0.031207990195986874, nan], 'true': [0.0009225386950299962, 0.0], 'false,true': [0.031207990195986874, 0.0007257300662984949], 'false': [0.07172548131797593, 0.05408956809507454]}, {'': [nan, 0.04164421654462245], 'false,false,true': [nan, 0.0011293248988639426], 'false,false': [0.0011293248988639426, 0.0028949809035097446], 'false,true': [0.015568284604023201, 0.024259736560902453], 'false': [0.017109215895410236, 0.0013181572272827873], 'false,false,false': [0.0, 0.0]}, {'': [0.0001738582845756236, 0.04136977915373564], 'false,false': [0.0, 0.0024338298368684528], 'false,true,true': [0.014824223526482735, nan], 'false,true': [0.014824223526482735, 0.011520652802646381], 'false': [0.042020306874946324, 0.03465230144248731], 'false,false,false': [0.002378784552346039, 0.0], 'false,true,false': [6.78860799342328e-08, 0.039604521389180754]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
0;false;follows(A, D), recursion_accounttype(D, B).;true;true
1;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
1;true;follows(C, D).;true;true
1;false;follows(A, E).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(A, C), tweets(C, D).;true;true
3;true;follows(C, E), recursion_accounttype(E, B).;true;true
3;true,false;follows(F, A), tweets(F, D).;true;true
3;true,false,false;follows(C, G), tweets(A, H).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;false,false;follows(F, A), follows(A, G).;true;true
4;true;follows(D, C), follows(C, D).;true;true
4;false;follows(A, E), recursion_accounttype(E, B).;true;true
4;true,true;follows(D, A).;true;true
4;false,false,false;follows(J, A).;true;true
6;;accounttype(A, B) :- follows(C, A).;true;true
6;true,false;recursion_accounttype(C, B), tweets(A, E).;true;true
6;true;follows(A, D), recursion_accounttype(D, B).;true;true
6;false,true;recursion_accounttype(J, B).;true;true
6;false;tweets(A, I).;true;true
6;true,false,false;tweets(A, F).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D).;true;true
7;false;tweets(A, E).;true;true
7;false,true;recursion_accounttype(F, B).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false,false;follows(H, A).;true;true
8;false;follows(A, E), follows(E, F).;true;true
9;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
9;false,false;recursion_accounttype(G, B).;true;true
9;false,true,false;follows(E, A).;true;true
9;false,true;follows(E, F), recursion_accounttype(F, B).;true;true
9;false;tweets(A, D), follows(A, E).;true;true
9;false,false,false;follows(A, H).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.1438632208137979;  // std dev = 1,195, 7,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.3581489350995123;  // std dev = 0,500, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.7194734122109544;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E) )
%   | then if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7795960709729262;  // std dev = 0,120, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.137056849107295;  // std dev = 0,064, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.30874113578563506;  // std dev = 0,500, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else return -0.12544463852839138;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.5553664367462846;  // std dev = 0,000, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5454388054050471;  // std dev = 0,012, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then return 0.6558587177931853;  // std dev = 0,123, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7162031823561261;  // std dev = 0,180, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, F) )
%   | then if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.11129188736992633;  // std dev = 0,001, 9,000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.14268162147508495;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.24358763124141355;  // std dev = 5,27e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.15025570524510323;  // std dev = 0,109, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(C, D) )
%   then if ( follows(C, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.41751358415830986;  // std dev = 3,33e-08, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.39740602707583134;  // std dev = 0,029, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.48015345522760755;  // std dev = 0,150, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6027428251126317;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), tweets(H, D) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.10572754772371143;  // std dev = 0,032, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.11121569251888994;  // std dev = 0,028, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(C, J), tweets(A, K) )
%   | | | then return -0.17639384106764625;  // std dev = 0,062, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.061408350853086935;  // std dev = 0,663, 3,000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else return -0.10168987756570586;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(C, D) )
%   | then if ( follows(D, A) )
%   | | then return 0.315363118213041;  // std dev = 0,010, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.32071184716014967;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return 0.3272901150540962;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.29715663731560876;  // std dev = 0,009, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(F, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.015262812205612162;  // std dev = 0,694, 13,000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.10070768722370399;  // std dev = 0,026, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.09276959779748918;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0.14506215222036645;  // std dev = 0,976, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D), tweets(C, D) )
%   | | then return 0.2560204980604903;  // std dev = 0,000929, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.25585084696229016;  // std dev = 0,000831, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.24590854284422273;  // std dev = 0,019, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( tweets(A, F), tweets(E, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3372677037588687;  // std dev = 0,204, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.09396141890236899;  // std dev = 0,031, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.09485911179911935;  // std dev = 0,027, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.11531048625463342;  // std dev = 0,339, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.21000605585154156;  // std dev = 0,003, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.18005600634096264;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.023537785037523608;  // std dev = 0,585, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.08435290010573149;  // std dev = 0,022, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, G) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.3741796794192854;  // std dev = 0,236, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.2296893591442106;  // std dev = 0,035, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.0568507600191806;  // std dev = 0,472, 2,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.17382492440021882;  // std dev = 0,009, 11,000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.1777418194382694;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.2994282512209962;  // std dev = 0,158, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2957176352778149;  // std dev = 0,206, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.08537210446624001;  // std dev = 0,030, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.1916605273799367;  // std dev = 0,031, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.03725687310392212;  // std dev = 0,491, 6,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.153516532378802;  // std dev = 0,000298, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.13270581117610025;  // std dev = 0,034, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(E, A) )
%   | | then return 0.21572448926038895;  // std dev = 0,164, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.30980382804936224;  // std dev = 0,127, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07300758946562035;  // std dev = 0,012, 10,000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.0896559807518926;  // std dev = 0,009, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.195257289804632;  // std dev = 0,104, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(J, A) )
%   | | then return -0.07070444595931445;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1859920112604842;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1305093717219055;  // std dev = 0,011, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.18635311658830978;  // std dev = 0,145, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(E, A) )
%   | | | then return -0.07414717114560204;  // std dev = 0,023, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.03133542730467481;  // std dev = 0,374, 4,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.315267572198471;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.10448343317045553;  // std dev = 0,156, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.06619746546740884;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */


Results
   AUC ROC   = 0.993211
   AUC PR    = 0.29723
   CLL	      = -0.125764
   Precision = 0.343458 at threshold = 0.5
   Recall    = 0.942308
   F1        = 0.503425


Total learning time: 4.417 seconds
Total inference time: 51.101 seconds
AUC ROC: 0.993211


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.124921
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.061 seconds
Refined model CLL: -0.124921


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993211
   AUC PR    = 0.29723
   CLL	      = -0.125764
   Precision = 0.343458 at threshold = 0.5
   Recall    = 0.942308
   F1        = 0.503425


Total learning time: 7.714 seconds
Total inference time: 51.101 seconds
AUC ROC: 0.993211
Total revision time: 7.714
Best scored revision CLL: -0.124921


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:13:35
{'CLL': -0.125764, 'AUC ROC': 0.993211, 'F1': 0.503425, 'Recall': 0.942308, 'Precision': [0.343458, 0.5], 'Inference time': 51.101, 'Learning time': 7.714, 'AUC PR': 0.29723, 'parameter_20': {'CLL': -0.139437, 'AUC ROC': 0.993491, 'F1': 0.500858, 'Recall': 0.935897, 'Precision': [0.34192, 0.5], 'Inference time': 24.589, 'Learning time': 1.463, 'AUC PR': 0.307872}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.1418510649004878;  // std dev = 0,000, 11,000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.41370449065506787;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7261839765030368;  // std dev = 0,077, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109545;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12544463852839138;  // std dev = 7,45e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.3000001837159433;  // std dev = 0,500, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5625068139693232;  // std dev = 0,101, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.5553664367462844;  // std dev = 1,49e-08, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11231637819360635;  // std dev = 1,39e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.24768346554910758;  // std dev = 0,500, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.4233350584062178;  // std dev = 0,106, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.41751358415830997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10159632948783633;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.19817277717198473;  // std dev = 0,500, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.32501117821972664;  // std dev = 0,098, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.32071184716014967;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09269127618926097;  // std dev = 5,27e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.15485270915213206;  // std dev = 0,500, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2583246089461909;  // std dev = 0,088, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.25517224256948945;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08518475138839685;  // std dev = 1,05e-08, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.11906614501789539;  // std dev = 0,500, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.21212152445275442;  // std dev = 0,078, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.20975771563253554;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07877675473109175;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.09061787617821089;  // std dev = 0,500, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17891922033928273;  // std dev = 0,070, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.17709649774527736;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07324622576333704;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.06854134611743778;  // std dev = 0,500, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15418669473846294;  // std dev = 0,063, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.15274385809367097;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.06842697784420272;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.051655292072360075;  // std dev = 0,500, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1351755639966656;  // std dev = 0,057, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.13400703000801117;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.06419184008202618;  // std dev = 5,27e-09, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.03884797356005665;  // std dev = 0,500, 8,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */


Results
   AUC ROC   = 0.955209
   AUC PR    = 0.293737
   CLL	      = -0.257718
   Precision = 0.303665 at threshold = 0.5
   Recall    = 0.74359
   F1        = 0.431227


Total learning time: 3.591 seconds
Total inference time: 10.425 seconds
AUC ROC: 0.955209


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:13:49
{'CLL': -0.257718, 'AUC ROC': 0.955209, 'F1': 0.431227, 'Recall': 0.74359, 'Precision': [0.303665, 0.5], 'Inference time': 10.425, 'Learning time': 3.591, 'AUC PR': 0.293737}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.41370449065506787;  // std dev = 0,497, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */


Results
   AUC ROC   = 0.947936
   AUC PR    = 0.31883
   CLL	      = -0.170758
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.955 seconds
Total inference time: 3.211 seconds
AUC ROC: 0.947936


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:13:54
{'CLL': -0.170758, 'AUC ROC': 0.947936, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.211, 'Learning time': 0.955, 'AUC PR': 0.31883}


Amount of data: 25
******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
0;false,false,true;interaction(A, A).;false;false
0;false,false;interaction(A, F), complex(A, G).;true;true
0;false,true;interaction(E, D).;false;false
0;false;interaction(D, A), recursion_proteinclass(D, B).;true;true
0;false,false,false;interaction(A, A).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
1;true,true,false;enzyme(A, F).;false;false
1;false,false;interaction(G, A), enzyme(G, H).;true;true
1;false,false,true;enzyme(A, H).;false;false
1;true;phenotype(A, D), interaction(E, C).;true;false
1;false;interaction(A, A).;false;true
1;true,true;phenotype(C, D).;false;true
1;false,false,false;enzyme(A, I), location(A, J).;false;false
2;;proteinclass(A, B) :- enzyme(A, C), location(A, D).;true;true
2;false,false,true;complex(I, H), recursion_proteinclass(I, B).;false;false
2;false,false;complex(A, H).;true;true
2;false,true,true;interaction(A, A).;false;false
2;true;enzyme(E, C), recursion_proteinclass(E, B).;false;false
2;false,true;interaction(G, A), interaction(G, G).;true;false
2;false;interaction(A, F), recursion_proteinclass(F, B).;true;true
2;false,false,false;interaction(J, A), phenotype(J, K).;false;false
3;;proteinclass(A, B) :- interaction(C, A), complex(C, D).;true;true
3;false,false,true;complex(J, L).;false;false
3;false,false;interaction(A, J), enzyme(A, K).;true;true
3;true,false;interaction(A, F), complex(F, D).;false;true
3;true;interaction(E, C), recursion_proteinclass(E, B).;false;true
3;false;interaction(A, I), recursion_proteinclass(I, B).;false;true
3;false,false,false;interaction(M, A), recursion_proteinclass(M, B).;false;false
3;true,false,false;interaction(G, C), complex(A, H).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;false,false,true;interaction(G, I), interaction(I, J).;false;false
4;false,false;interaction(A, G), interaction(H, A).;true;true
4;true;interaction(C, D), interaction(D, C).;true;false
4;false,true;interaction(E, E), location(E, F).;false;false
4;false;interaction(E, A), recursion_proteinclass(E, B).;true;true
4;true,true;interaction(A, D).;false;false
4;false,false,false;phenotype(A, K), interaction(A, L).;false;false
5;;proteinclass(A, B) :- location(A, C), interaction(A, D).;true;true
5;false,false;interaction(A, J), phenotype(J, K).;false;true
5;false,true,true;complex(F, I), complex(H, I).;false;false
5;true;interaction(D, A), phenotype(D, E).;false;false
5;false,true;interaction(H, F), interaction(F, H).;true;true
5;false;interaction(F, A), location(F, G).;true;true
5;false,false,false;location(A, L).;false;false
5;false,true,false;recursion_proteinclass(F, B).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
6;false,false;complex(A, K), enzyme(A, L).;true;true
6;true,false;recursion_proteinclass(C, B), complex(A, F).;false;true
6;true;interaction(E, A), recursion_proteinclass(E, B).;false;true
6;false;interaction(A, I), complex(A, J).;false;true
6;false,false,false;interaction(N, A), phenotype(N, P).;false;false
6;true,false,false;phenotype(A, G), complex(A, H).;false;false
7;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
7;false,false,true;interaction(A, I), recursion_proteinclass(J, B).;false;false
7;false,false;interaction(I, A), interaction(J, I).;true;true
7;false,true,true;complex(G, H).;false;false
7;true;complex(C, D).;false;false
7;false,true;location(G, E), recursion_proteinclass(G, B).;true;false
7;false;location(A, E), complex(A, F).;true;true
7;false,false,false;interaction(K, A), enzyme(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, A).;true;true
8;false,false,true;recursion_proteinclass(I, B), interaction(A, J).;false;false
8;false,false;interaction(H, A), interaction(I, H).;true;true
8;false,true,true;complex(A, F), phenotype(E, G).;false;false
8;true;interaction(A, C), recursion_proteinclass(C, B).;false;false
8;false,true;enzyme(E, D), recursion_proteinclass(E, B).;true;false
8;false;enzyme(A, D).;true;true
8;false,false,false;interaction(A, K), phenotype(K, L).;false;false
9;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
9;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
9;false,false;enzyme(A, G).;true;true
9;false,true,true;complex(F, D).;false;false
9;false,true;interaction(F, E), recursion_proteinclass(F, B).;true;true
9;false;complex(A, D), interaction(E, A).;true;true
9;false,false,false;interaction(I, A), phenotype(I, J).;false;false
9;false,true,false;interaction(A, E).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.06648226843284567;  // std dev = 1,990, 24,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2581489350995123;  // std dev = 1,549, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.7194734122109542;  // std dev = 1,49e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then return 2.1942091823100537E-4;  // std dev = 0,352, 24,000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.4451672654981944;  // std dev = 0,476, 13,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6532050311532018;  // std dev = 0,548, 25,000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.16466597060516372;  // std dev = 0,118, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.17629820693295997;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.25036176604070265;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then return 0.46021190057959754;  // std dev = 0,491, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, F), tweets(F, D) )
%   | | then return -0.10733526069246811;  // std dev = 0,516, 19,000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( follows(G, C), tweets(A, H) )
%   | | | then return -0.15364454905337555;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return 0.4609493842761876;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, J) )
%   | | then if ( tweets(J, K) )
%   | | | then return 0.2540363383138667;  // std dev = 1,459, 13,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(A, D) )
%   | | then return 0.33009427220230836;  // std dev = 0,208, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.29089540329215124;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4198249285400171;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, E) )
%   | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0.29089540329215124;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, F), follows(G, A) )
%   | | then if ( follows(F, H), follows(H, I) )
%   | | | then return -0.05132514856381688;  // std dev = 1,044, 21,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, J) )
%   | | | then return 0.23280173065537216;  // std dev = 1,373, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return -0.13470979339289418;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, A) )
%   | then return 0.07348086523567435;  // std dev = 1,373, 35,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=16 */
%   | else return 0.19781864726823767;  // std dev = 1,360, 14,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(D, E) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return -0.11976557674408338;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.22269238633778476;  // std dev = 0,061, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(C, B), tweets(A, E) )
%   | | then return 0.3006670830356926;  // std dev = 0,084, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.015538686452229814;  // std dev = 1,474, 24,000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | | else return 0.12138900740357897;  // std dev = 0,976, 10,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   else if ( follows(A, G), tweets(A, H) )
%   | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1077033905728087;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then return 0.20703140822445537;  // std dev = 0,174, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.17985844879892687;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( tweets(F, G) )
%   | | | then return 0.4490457031219445;  // std dev = 0,473, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else return -0.15926562502962033;  // std dev = 0,348, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, H), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.1568677955869876;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return 0.2546796517593807;  // std dev = 0,696, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, A) )
%   then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(C, B) )
%   | then if ( tweets(A, D) )
%   | | then return 0.24005621329143453;  // std dev = 0,579, 18,000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.2853764587370297;  // std dev = 0,227, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B), follows(A, G) )
%   | | | then return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | | else return -0.11130082440474494;  // std dev = 0,072, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.3099903295722623;  // std dev = 0,133, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1236869960272846;  // std dev = 0,053, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D) )
%   | | | then return 0.39079995442842463;  // std dev = 0,221, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0,000, 0,000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, E) )
%   | | | then return -0.0960698080920704;  // std dev = 0,034, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.07637241495130889;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.2776103012878243;  // std dev = 0,177, 9,000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.12456546129127385;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.24876131345207816;  // std dev = 0,119, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.994067
   AUC PR    = 0.354464
   CLL	      = -0.161437
   Precision = 0.337719 at threshold = 0.5
   Recall    = 0.987179
   F1        = 0.503268


Total learning time: 1.39 seconds
Total inference time: 26.328 seconds
AUC ROC: 0.994067


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.161748
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.789 seconds
Parameter learned model CLL: -0.161748


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, A)', 'false,false': 'follows(A, F), tweets(A, G)', 'false,true': 'follows(E, D)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false,false': 'follows(A, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'true': [0.0, 0, 14], 'false,false,false,false': [1.549, 6, 4], 'false,false,true,false': [1.99, 19, 5], 'false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C)', 'false,false': 'follows(E, A)', 'false': 'follows(A, A)'}, {'false,false,true': [0.352, 20, 4], 'false,true': [0.0, 0, 0], 'false,false,false': [0.476, 5, 8], 'true,false': [0.0, 0, 1], 'true,true': [1.49e-08, 0, 12]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false,false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,false': 'tweets(A, E)', 'false': 'follows(A, D), recursion_accounttype(D, B)', 'false,false,false': 'follows(G, A)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 4, 0], 'false,false,false,false': [0.0, 1, 0], 'true': [0.548, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true,false': [0.118, 20, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), tweets(C, D)', 'false,false,true': 'tweets(J, K)', 'false,false': 'follows(A, J)', 'true,false': 'follows(A, F), tweets(F, D)', 'true': 'follows(E, C), recursion_accounttype(E, B)', 'false': 'follows(A, I), recursion_accounttype(I, B)', 'true,false,false': 'follows(G, C), tweets(A, H)'}, {'false,false,true,true': [1.459, 6, 7], 'false,false,false': [0.0, 0, 0], 'true,false,true': [0.516, 18, 1], 'false,true': [0.0, 0, 1], 'true,false,false,false': [0.0, 0, 0], 'true,false,false,true': [0.0, 1, 0], 'true,true': [0.491, 0, 16], 'false,false,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(F, H), follows(H, I)', 'false,false': 'follows(A, F), follows(G, A)', 'true': 'follows(C, D), follows(D, C)', 'false,true': 'follows(E, E)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'true,true': 'follows(A, D)', 'false,false,false': 'follows(A, J)'}, {'true,true,false': [0.0, 0, 3], 'false,false,true,true': [1.044, 19, 2], 'true,false': [0.0, 0, 1], 'false,false,false,true': [1.373, 5, 7], 'false,true,true': [0.0, 0, 0], 'true,true,true': [0.208, 0, 10], 'false,false,false,false': [0.0, 1, 0], 'false,false,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 0, 2]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, A)', 'false': 'follows(D, A)', 'false,true,true': 'tweets(D, F), tweets(E, F)', 'false,true': 'follows(E, D), follows(D, E)'}, {'false,true,true,true': [0.0, 1, 0], 'false,false': [0.0, 0, 0], 'true,false': [1.36, 5, 9], 'false,true,false': [0.0, 0, 0], 'true,true': [1.373, 19, 16], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, C)', 'false,false,true': 'recursion_accounttype(J, B)', 'false,false': 'tweets(A, I)', 'true,false': 'recursion_accounttype(C, B), tweets(A, E)', 'true': 'follows(D, A), recursion_accounttype(D, B)', 'false': 'follows(A, G), tweets(A, H)', 'true,false,false': 'tweets(A, F)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false': [0.0, 0, 0], 'true,false,true': [0.084, 0, 2], 'false,true': [0.0, 0, 0], 'true,false,false,false': [0.976, 5, 5], 'true,false,false,true': [1.474, 19, 5], 'true,true': [0.061, 0, 13], 'false,false,true,false': [0.0, 1, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false,false,true': 'follows(A, H), recursion_accounttype(I, B)', 'false,false': 'follows(H, A), follows(I, H)', 'false,true,true': 'tweets(F, G)', 'true': 'tweets(C, D)', 'false,true': 'recursion_accounttype(F, B)', 'false': 'tweets(A, E)', 'false,false,false': 'follows(J, A)'}, {'false,true,true,true': [0.473, 0, 7], 'false,false,true,true': [0.0, 0, 0], 'true,false': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,true,false': [0.348, 20, 0], 'false,false,false,false': [0.696, 1, 4], 'false,false,true,false': [0.0, 4, 0], 'true,true': [0.174, 0, 13], 'false,true,true,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(A, A)', 'false,false,true': 'recursion_accounttype(F, B), follows(A, G)', 'false,false': 'follows(E, A), follows(F, E)', 'false,true': 'tweets(A, D)', 'false': 'recursion_accounttype(C, B)', 'false,false,false': 'follows(A, H)'}, {'false,false,true,true': [0.0, 0, 0], 'false,false,false,true': [0.133, 5, 0], 'false,true,true': [0.579, 0, 18], 'true': [0.0, 0, 0], 'false,false,false,false': [0.0, 0, 0], 'false,false,true,false': [0.072, 20, 0], 'false,true,false': [0.227, 0, 7]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false,false': 'recursion_accounttype(G, B)', 'false,true,true': 'tweets(F, D)', 'false,true': 'follows(F, E), recursion_accounttype(F, B)', 'false': 'tweets(A, D), follows(E, A)', 'false,false,false': 'follows(H, A)', 'false,true,false': 'follows(A, E)'}, {'false,true,true,true': [0.221, 0, 3], 'false,true,false,false': [0.0, 1, 0], 'false,false,false,true': [0.0, 4, 0], 'false,false,true': [0.177, 0, 9], 'false,true,false,true': [0.034, 15, 0], 'true': [0.053, 0, 13], 'false,false,false,false': [0.119, 5, 0], 'false,true,true,false': [0.0, 0, 0]}]]
[{'': [-2.5376526277146434e-16, 0.21219135802469086], 'false,false,true': [nan, 0.16493055555555544], 'false,false': [0.16493055555555544, 0.23999999999999985], 'false,true': [0.0, nan], 'false': [0.0, 0.19463667820069208], 'false,false,false': [nan, 0.23999999999999985]}, {'': [1.3664283380001927e-16, 0.2050347641637394], 'true': [2.220446049250313e-16, 0.0], 'false,false': [0.1238868444761763, 0.2264277669722491], 'false': [nan, 0.2050347641637399]}, {'': [0.01199790890320152, 0.0008427882732187752], 'false,false,true': [nan, 0.0006942018534909389], 'false,false': [0.0006942018534909389, 0.0008776657260329834], 'false': [nan, 0.0008427882732187885], 'false,false,false': [0.0, 0.0]}, {'': [0.09435623969149781, 0.1549872824109811], 'false,false,true': [0.1638513090158792, nan], 'false,false': [0.1638513090158792, nan], 'true,false': [0.014037011659386405, 0.0], 'true': [0.01509224853822494, 0.013437027210370527], 'false': [0.0, 0.1638513090158792], 'true,false,false': [0.0, nan]}, {'': [0.004004506750335876, 0.10382780541998736], 'false,false,true': [0.051930822036033844, nan], 'false,false': [0.051930822036033844, 0.1545236530657222], 'true': [0.003615630969375475, 0.0], 'false,true': [nan, 0.0], 'false': [0.0, 0.10661710549578547], 'true,true': [0.004345731493149119, 0.0], 'false,false,false': [0.15701103028466476, 0.0]}, {'': [0.07933819379538548, 0.0], 'true': [0.05383871845299711, 0.13204410783651563], 'false': [0.0, nan], 'false,true,true': [0.0, nan], 'false,true': [0.0, nan]}, {'': [0.07615454741272791, 0.0], 'false,false,true': [nan, 0.0], 'false,false': [0.0, nan], 'true,false': [0.003520496735552048, 0.0958348332636274], 'true': [0.0002901719003568333, 0.09470120525383213], 'false': [nan, 0.0], 'true,false,false': [0.09056693872264436, 0.09524305544810159]}, {'': [0.0022157698778772572, 0.0878069501336921], 'false,false,true': [nan, 0.0], 'false,false': [0.0, 0.09691848494133888], 'false,true,true': [0.03197266435710671, nan], 'true': [0.0023334730200697926, 0.0], 'false,true': [0.03197266435710671, 0.0060618486249770735], 'false': [0.08384390383406544, 0.09566367716921587], 'false,false,false': [nan, 0.09691848494133888]}, {'': [nan, 0.05231728706488086], 'false,false,true': [nan, 0.00025954205637511023], 'false,false': [0.00025954205637511023, 0.0035351737112470304], 'false,true': [0.018621232704421693, 0.00736121165563305], 'false': [0.015882498019646293, 0.007231071501543554], 'false,false,false': [0.0035351737112470304, nan]}, {'': [0.0002133248281732285, 0.0475230961756615], 'false,false': [0.0034656634743618474, 0.005381697137280835], 'false,true,true': [0.01629002942169827, nan], 'false,true': [0.01629002942169827, 9.632085555651496e-05], 'false': [0.03401210394887656, 0.05992478723950973], 'false,false,false': [0.0, 0.0028316727609062455], 'false,true,false': [7.849303989309238e-05, 0.0]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
0;false;follows(D, A), recursion_accounttype(D, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;true;follows(D, C).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false,false;follows(G, A).;true;true
2;false;tweets(A, E).;true;true
3;;accounttype(A, B) :- follows(C, A), tweets(C, D).;true;true
3;true;follows(E, C), recursion_accounttype(E, B).;true;true
3;false;follows(A, I), recursion_accounttype(I, B).;true;true
3;true,false;follows(A, F), tweets(F, D).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false,false;follows(A, F), follows(G, A).;true;true
4;true;follows(C, D), follows(D, C).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;true,true;follows(A, D).;true;true
4;false,false,false;follows(A, J).;true;true
5;;accounttype(A, B) :- follows(A, C).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(D, A), recursion_accounttype(D, B).;true;true
7;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
7;true;tweets(C, D).;true;true
7;false,false;follows(H, A), follows(I, H).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(E, A), follows(F, E).;true;true
9;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
9;false,false;recursion_accounttype(G, B).;true;true
9;false,true,false;follows(A, E).;true;true
9;false,true;follows(F, E), recursion_accounttype(F, B).;true;true
9;false;tweets(A, D), follows(E, A).;true;true
9;false,false,false;follows(H, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.10814893509951218;  // std dev = 1,225, 8,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.28672036367094084;  // std dev = 1,309, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C) )
%   | then return 0.7194734122109542;  // std dev = 5,16e-08, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.7194734122109544;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.781970425023355;  // std dev = 0,125, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1344710156191473;  // std dev = 0,062, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7945284082597269;  // std dev = 0,087, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.18045325972401552;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.551826104817152;  // std dev = 0,007, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(E, A) )
%   | | then return 0.6341710870522919;  // std dev = 0,158, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.6723319697250952;  // std dev = 1,49e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6419486100244409;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A), tweets(H, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return -0.11141958000131759;  // std dev = 9,13e-09, 12,000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.1386770012770245;  // std dev = 4,56e-09, 3,000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.15196384708594735;  // std dev = 0,015, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(K, A) )
%   | | then return -0.12504829063917106;  // std dev = 0,027, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.3580513899755591;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.4150593856332709;  // std dev = 0,007, 12,000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.4858715543986971;  // std dev = 0,165, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), tweets(G, D) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.07065533887470404;  // std dev = 0,507, 15,000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | | else return -0.11201575342266815;  // std dev = 0,025, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10085670572102942;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return 0.4002308205629259;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, J) )
%   | | then if ( tweets(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.5116027312478197;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.13340348817037515;  // std dev = 0,013, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.33227587090031174;  // std dev = 0,685, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.3220191912885903;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.29875814177957816;  // std dev = 0,013, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.32201919128859025;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.4356604108010482;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3043109357702355;  // std dev = 0,000, 2,000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, G), follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.03529973183837304;  // std dev = 0,728, 17,000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | | else return -0.10136356954331369;  // std dev = 0,023, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1611628114714756;  // std dev = 0,985, 12,000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return -0.09207165177788884;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.25606410807622604;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2458663290685154;  // std dev = 0,020, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2793977666825774;  // std dev = 0,066, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.3535462327000586;  // std dev = 0,213, 8,000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11423417473640474;  // std dev = 0,293, 23,000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.23491627035527074;  // std dev = 0,433, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.08465863054707594;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.21130545655663266;  // std dev = 0,020, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.08122856661130794;  // std dev = 0,011, 13,000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.05469262740029561;  // std dev = 0,614, 10,000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.0644354129773628;  // std dev = 0,705, 9,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.18814026605980533;  // std dev = 0,414, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.07832479652738328;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.18523704318049722;  // std dev = 0,017, 10,000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.17960754235884305;  // std dev = 0,008, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1789174957688464;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.04326566583230451;  // std dev = 0,303, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.04979488064268169;  // std dev = 0,534, 6,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.025704287260385955;  // std dev = 0,204, 7,000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.08303714370913957;  // std dev = 0,029, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.14398324732240747;  // std dev = 0,584, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, F) )
%   | | | then return 0.1519827903586417;  // std dev = 0,000, 7,000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1526242789027693;  // std dev = 0,004, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17141991713597032;  // std dev = 0,036, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.25379591092155424;  // std dev = 0,186, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2550756606778378;  // std dev = 0,000787, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.246743537519779;  // std dev = 0,000943, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A), follows(J, I) )
%   | then if ( tweets(A, K), follows(A, L) )
%   | | then return -0.08309605579465007;  // std dev = 0,016, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.07555329002320799;  // std dev = 0,028, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.20510723443814002;  // std dev = 0,239, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1362031877310274;  // std dev = 0,012, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then return 0.24045773578578308;  // std dev = 0,126, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.07699898913318205;  // std dev = 0,057, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.0652244285023777;  // std dev = 0,000, 1,000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.1846931086434168;  // std dev = 0,078, 6,000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2052923541629009;  // std dev = 0,005, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.07176044019576697;  // std dev = 0,025, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.17566515507903296;  // std dev = 0,216, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.993687
   AUC PR    = 0.312821
   CLL	      = -0.146431
   Precision = 0.336207 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.503226


Total learning time: 6.113 seconds
Total inference time: 38.341 seconds
AUC ROC: 0.993687


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.125787
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.951 seconds
Refined model CLL: -0.125787


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993687
   AUC PR    = 0.312821
   CLL	      = -0.146431
   Precision = 0.336207 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.503226


Total learning time: 9.243 seconds
Total inference time: 38.341 seconds
AUC ROC: 0.993687
Total revision time: 9.243
Best scored revision CLL: -0.125787


Dataset: 15_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:15:09
{'CLL': -0.146431, 'AUC ROC': 0.993687, 'F1': 0.503226, 'Recall': 1.0, 'parameter_25': {'CLL': -0.161437, 'AUC ROC': 0.994067, 'F1': 0.503268, 'Recall': 0.987179, 'Precision': [0.337719, 0.5], 'Inference time': 26.328, 'Learning time': 1.39, 'AUC PR': 0.354464}, 'Precision': [0.336207, 0.5], 'Inference time': 38.341, 'Learning time': 9.243, 'AUC PR': 0.312821}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0,000, 16,000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 2,98e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109544;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.12544463852839138;  // std dev = 0,000, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.5580193346218546;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.5553664367462845;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11231637819360635;  // std dev = 1,39e-08, 15,000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.11231637819360638;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5553664367462845;  // std dev = 1,05e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11231637819360639;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.4419486100244409;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.4175135841583098;  // std dev = 4,21e-08, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return -0.027437770395529717;  // std dev = 0,680, 14,000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.10604763597062217;  // std dev = 0,569, 5,000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.10159632948783633;  // std dev = 0,000, 5,000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.41751358415830997;  // std dev = 0,000, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10159632948783628;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.33541139495094313;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.3366332638681326;  // std dev = 0,135, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.35634122108417376;  // std dev = 0,071, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09939826942194888;  // std dev = 0,026, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.3731344575540986;  // std dev = 0,144, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.20657636385569025;  // std dev = 0,395, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.2828893293152332;  // std dev = 0,447, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.26640341140007473;  // std dev = 0,120, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.27973748139828414;  // std dev = 0,063, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09085081514869404;  // std dev = 0,024, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.2920052830165956;  // std dev = 0,128, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1817237272655355;  // std dev = 0,364, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.22731109617214798;  // std dev = 0,412, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.21790723651522484;  // std dev = 0,107, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.08259384078114211;  // std dev = 0,007, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.22719283868717116;  // std dev = 0,054, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08602403844757762;  // std dev = 0,020, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.23625448779821126;  // std dev = 0,112, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1614626593267214;  // std dev = 0,335, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.18435200130046853;  // std dev = 0,391, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18321003683145556;  // std dev = 0,095, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.07654769564525898;  // std dev = 0,007, 14,000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.18992108103847316;  // std dev = 0,048, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.07950207924035645;  // std dev = 0,019, 6,000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1967886594273384;  // std dev = 0,098, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1447228381341605;  // std dev = 0,308, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.15098025801263662;  // std dev = 0,379, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.15747245564643386;  // std dev = 0,085, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.1624946335917425;  // std dev = 0,042, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07208024880250939;  // std dev = 0,019, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.14415462785217917;  // std dev = 0,028, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.08445604148518353;  // std dev = 0,124, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.11529467250366218;  // std dev = 0,553, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1377619040458805;  // std dev = 0,076, 13,000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.14163515039470798;  // std dev = 0,038, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.06740661140315349;  // std dev = 0,018, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.15065674197735024;  // std dev = 0,084, 5,000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.13477642986534963;  // std dev = 0,312, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.11230888588808616;  // std dev = 0,345, 4,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */


Results
   AUC ROC   = 0.990108
   AUC PR    = 0.340771
   CLL	      = -0.209202
   Precision = 0.083423 at threshold = 0.5
   Recall    = 0.99359
   F1        = 0.153923


Total learning time: 4.337 seconds
Total inference time: 16.798 seconds
AUC ROC: 0.990108


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN-B), Time: 00:15:30
{'CLL': -0.209202, 'AUC ROC': 0.990108, 'F1': 0.153923, 'Recall': 0.99359, 'Precision': [0.083423, 0.5], 'Inference time': 16.798, 'Learning time': 4.337, 'AUC PR': 0.340771}


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.8581489350995123;  // std dev = 0,000, 14,000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048777;  // std dev = 7,45e-09, 20,000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2,11e-08, 3,000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0,000, 4,000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.6581489350995122;  // std dev = 0,894, 5,000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */


Results
   AUC ROC   = 0.982974
   AUC PR    = 0.263946
   CLL	      = -0.164384
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 0.983 seconds
Total inference time: 3.228 seconds
AUC ROC: 0.982974


Dataset: 15_yeast_twitter, Fold: 2, Type: Scratch (RDN), Time: 00:15:35
{'CLL': -0.164384, 'AUC ROC': 0.982974, 'F1': nan, 'Recall': 0.0, 'Precision': [nan, 0.5], 'Inference time': 3.228, 'Learning time': 0.983, 'AUC PR': 0.263946}


